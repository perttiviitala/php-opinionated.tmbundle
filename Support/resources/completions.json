{
    "__autoload": [
        "__autoload ( string $class ) : void"
    ],
    "__halt_compiler": [
        "__halt_compiler ( ) : void"
    ],
    "abs": [
        "abs ( mixed $number ) : int|float"
    ],
    "acos": [
        "acos ( float $num ) : float"
    ],
    "acosh": [
        "acosh ( float $num ) : float"
    ],
    "addcslashes": [
        "addcslashes ( string $string , string $characters ) : string"
    ],
    "addslashes": [
        "addslashes ( string $string ) : string"
    ],
    "apache_child_terminate": [
        "apache_child_terminate ( ) : void"
    ],
    "apache_get_modules": [
        "apache_get_modules ( ) : array"
    ],
    "apache_get_version": [
        "apache_get_version ( ) : string|false"
    ],
    "apache_getenv": [
        "apache_getenv ( string $variable , bool $walk_to_top = false ) : string|false"
    ],
    "apache_lookup_uri": [
        "apache_lookup_uri ( string $filename ) : object|false"
    ],
    "apache_note": [
        "apache_note ( string $note_name , string|null $note_value = null ) : string|false"
    ],
    "apache_request_headers": [
        "apache_request_headers ( ) : array"
    ],
    "apache_response_headers": [
        "apache_response_headers ( ) : array|false"
    ],
    "apache_setenv": [
        "apache_setenv ( string $variable , string $value , bool $walk_to_top = false ) : bool"
    ],
    "apcu_add": [
        "apcu_add ( string $key , mixed $var , int $ttl = 0 ) : bool",
        "apcu_add ( array $values , mixed $unused = NULL , int $ttl = 0 ) : array"
    ],
    "apcu_cache_info": [
        "apcu_cache_info ( bool $limited = false ) : array|false"
    ],
    "apcu_cas": [
        "apcu_cas ( string $key , int $old , int $new ) : bool"
    ],
    "apcu_clear_cache": [
        "apcu_clear_cache ( ) : bool"
    ],
    "apcu_dec": [
        "apcu_dec ( string $key , int $step = 1 , bool &$success = ? , int $ttl = 0 ) : int|false"
    ],
    "apcu_delete": [
        "apcu_delete ( mixed $key ) : mixed"
    ],
    "apcu_enabled": [
        "apcu_enabled ( ) : bool"
    ],
    "apcu_entry": [
        "apcu_entry ( string $key , callable $generator , int $ttl = 0 ) : mixed"
    ],
    "apcu_exists": [
        "apcu_exists ( mixed $keys ) : mixed"
    ],
    "apcu_fetch": [
        "apcu_fetch ( mixed $key , bool &$success = ? ) : mixed"
    ],
    "apcu_inc": [
        "apcu_inc ( string $key , int $step = 1 , bool &$success = ? , int $ttl = 0 ) : int|false"
    ],
    "apcu_key_info": [
        "apcu_key_info ( string $key ) : array"
    ],
    "apcu_sma_info": [
        "apcu_sma_info ( bool $limited = false ) : array"
    ],
    "apcu_store": [
        "apcu_store ( string $key , mixed $var , int $ttl = 0 ) : bool",
        "apcu_store ( array $values , mixed $unused = NULL , int $ttl = 0 ) : array"
    ],
    "APCUIterator": [
        "public APCUIterator::__construct ( mixed $search = null , int $format = APC_ITER_ALL , int $chunk_size = 100 , int $list = APC_LIST_ACTIVE )"
    ],
    "AppendIterator": [
        "public AppendIterator::__construct ( )"
    ],
    "array": [
        "array ( mixed ...$values ) : array"
    ],
    "array_change_key_case": [
        "array_change_key_case ( array $array , int $case = CASE_LOWER ) : array"
    ],
    "array_chunk": [
        "array_chunk ( array $array , int $length , bool $preserve_keys = false ) : array"
    ],
    "array_column": [
        "array_column ( array $array , int|string|null $column_key , int|string|null $index_key = null ) : array"
    ],
    "array_combine": [
        "array_combine ( array $keys , array $values ) : array"
    ],
    "array_count_values": [
        "array_count_values ( array $array ) : array"
    ],
    "array_diff": [
        "array_diff ( array $array , array ...$arrays ) : array"
    ],
    "array_diff_assoc": [
        "array_diff_assoc ( array $array , array ...$arrays ) : array"
    ],
    "array_diff_key": [
        "array_diff_key ( array $array , array ...$arrays ) : array"
    ],
    "array_diff_uassoc": [
        "array_diff_uassoc ( array $array , array ...$arrays , callable $key_compare_func ) : array"
    ],
    "array_diff_ukey": [
        "array_diff_ukey ( array $array , array ...$arrays , callable $key_compare_func ) : array"
    ],
    "array_fill": [
        "array_fill ( int $start_index , int $count , mixed $value ) : array"
    ],
    "array_fill_keys": [
        "array_fill_keys ( array $keys , mixed $value ) : array"
    ],
    "array_filter": [
        "array_filter ( array $array , callable|null $callback = null , int $mode = 0 ) : array"
    ],
    "array_flip": [
        "array_flip ( array $array ) : array"
    ],
    "array_intersect": [
        "array_intersect ( array $array , array ...$arrays ) : array"
    ],
    "array_intersect_assoc": [
        "array_intersect_assoc ( array $array , array ...$arrays ) : array"
    ],
    "array_intersect_key": [
        "array_intersect_key ( array $array , array ...$arrays ) : array"
    ],
    "array_intersect_uassoc": [
        "array_intersect_uassoc ( array $array , array ...$arrays , callable $key_compare_func ) : array"
    ],
    "array_intersect_ukey": [
        "array_intersect_ukey ( array $array , array ...$arrays , callable $key_compare_func ) : array"
    ],
    "array_key_exists": [
        "array_key_exists ( string|int $key , array $array ) : bool"
    ],
    "array_key_first": [
        "array_key_first ( array $array ) : int|string|null"
    ],
    "array_key_last": [
        "array_key_last ( array $array ) : int|string|null"
    ],
    "array_keys": [
        "array_keys ( array $array ) : array",
        "array_keys ( array $array , mixed $search_value , bool $strict = false ) : array"
    ],
    "array_map": [
        "array_map ( callable|null $callback , array $array , array ...$arrays ) : array"
    ],
    "array_merge": [
        "array_merge ( array ...$arrays ) : array"
    ],
    "array_merge_recursive": [
        "array_merge_recursive ( array ...$arrays ) : array"
    ],
    "array_multisort": [
        "array_multisort ( array &$array1 , mixed $array1_sort_order = SORT_ASC , mixed $array1_sort_flags = SORT_REGULAR , mixed ...$rest ) : bool"
    ],
    "array_pad": [
        "array_pad ( array $array , int $length , mixed $value ) : array"
    ],
    "array_pop": [
        "array_pop ( array &$array ) : mixed"
    ],
    "array_product": [
        "array_product ( array $array ) : int|float"
    ],
    "array_push": [
        "array_push ( array &$array , mixed ...$values ) : int"
    ],
    "array_rand": [
        "array_rand ( array $array , int $num = 1 ) : int|string|array"
    ],
    "array_reduce": [
        "array_reduce ( array $array , callable $callback , mixed $initial = null ) : mixed"
    ],
    "array_replace": [
        "array_replace ( array $array , array ...$replacements ) : array"
    ],
    "array_replace_recursive": [
        "array_replace_recursive ( array $array , array ...$replacements ) : array"
    ],
    "array_reverse": [
        "array_reverse ( array $array , bool $preserve_keys = false ) : array"
    ],
    "array_search": [
        "array_search ( mixed $needle , array $haystack , bool $strict = false ) : int|string|false"
    ],
    "array_shift": [
        "array_shift ( array &$array ) : mixed"
    ],
    "array_slice": [
        "array_slice ( array $array , int $offset , int|null $length = null , bool $preserve_keys = false ) : array"
    ],
    "array_splice": [
        "array_splice ( array &$array , int $offset , int|null $length = null , mixed $replacement = [] ) : array"
    ],
    "array_sum": [
        "array_sum ( array $array ) : int|float"
    ],
    "array_udiff": [
        "array_udiff ( array $array , array ...$arrays , callable $value_compare_func ) : array"
    ],
    "array_udiff_assoc": [
        "array_udiff_assoc ( array $array , array ...$arrays , callable $value_compare_func ) : array"
    ],
    "array_udiff_uassoc": [
        "array_udiff_uassoc ( array $array , array ...$arrays , callable $value_compare_func , callable $key_compare_func ) : array"
    ],
    "array_uintersect": [
        "array_uintersect ( array $array , array ...$arrays , callable $value_compare_func ) : array"
    ],
    "array_uintersect_assoc": [
        "array_uintersect_assoc ( array $array , array ...$arrays , callable $value_compare_func ) : array"
    ],
    "array_uintersect_uassoc": [
        "array_uintersect_uassoc ( array $array1 , array ...$arrays , callable $value_compare_func , callable $key_compare_func ) : array"
    ],
    "array_unique": [
        "array_unique ( array $array , int $flags = SORT_STRING ) : array"
    ],
    "array_unshift": [
        "array_unshift ( array &$array , mixed ...$values ) : int"
    ],
    "array_values": [
        "array_values ( array $array ) : array"
    ],
    "array_walk": [
        "array_walk ( array|object &$array , callable $callback , mixed $userdata = null ) : bool"
    ],
    "array_walk_recursive": [
        "array_walk_recursive ( array|object &$array , callable $callback , mixed $userdata = null ) : bool"
    ],
    "ArrayIterator": [
        "public ArrayIterator::__construct ( mixed $array = array() , int $flags = 0 )"
    ],
    "ArrayObject": [
        "public ArrayObject::__construct ( mixed $input = array() , int $flags = 0 , string $iterator_class = \"ArrayIterator\" )"
    ],
    "arsort": [
        "arsort ( array &$array , int $flags = SORT_REGULAR ) : bool"
    ],
    "asin": [
        "asin ( float $num ) : float"
    ],
    "asinh": [
        "asinh ( float $num ) : float"
    ],
    "asort": [
        "asort ( array &$array , int $flags = SORT_REGULAR ) : bool"
    ],
    "assert": [
        "assert ( mixed $assertion , string $description = ? ) : bool",
        "assert ( mixed $assertion , Throwable $exception = ? ) : bool"
    ],
    "assert_options": [
        "assert_options ( int $what , mixed $value = ? ) : mixed"
    ],
    "atan": [
        "atan ( float $num ) : float"
    ],
    "atan2": [
        "atan2 ( float $y , float $x ) : float"
    ],
    "atanh": [
        "atanh ( float $num ) : float"
    ],
    "base64_decode": [
        "base64_decode ( string $string , bool $strict = false ) : string|false"
    ],
    "base64_encode": [
        "base64_encode ( string $string ) : string"
    ],
    "base_convert": [
        "base_convert ( string $num , int $from_base , int $to_base ) : string"
    ],
    "basename": [
        "basename ( string $path , string $suffix = \"\" ) : string"
    ],
    "bcadd": [
        "bcadd ( string $num1 , string $num2 , int|null $scale = null ) : string"
    ],
    "bccomp": [
        "bccomp ( string $num1 , string $num2 , int|null $scale = null ) : int"
    ],
    "bcdiv": [
        "bcdiv ( string $num1 , string $num2 , int|null $scale = null ) : string"
    ],
    "bcmod": [
        "bcmod ( string $num1 , string $num2 , int|null $scale = null ) : string"
    ],
    "bcmul": [
        "bcmul ( string $num1 , string $num2 , int|null $scale = null ) : string"
    ],
    "bcpow": [
        "bcpow ( string $num , string $exponent , int|null $scale = null ) : string"
    ],
    "bcpowmod": [
        "bcpowmod ( string $num , string $exponent , string $modulus , int|null $scale = null ) : string"
    ],
    "bcscale": [
        "bcscale ( int $scale ) : int",
        "bcscale ( null $scale = null ) : int"
    ],
    "bcsqrt": [
        "bcsqrt ( string $num , int|null $scale = null ) : string"
    ],
    "bcsub": [
        "bcsub ( string $num1 , string $num2 , int|null $scale = null ) : string"
    ],
    "bin2hex": [
        "bin2hex ( string $string ) : string"
    ],
    "bind_textdomain_codeset": [
        "bind_textdomain_codeset ( string $domain , string|null $codeset ) : string|false"
    ],
    "bindec": [
        "bindec ( string $binary_string ) : int|float"
    ],
    "bindtextdomain": [
        "bindtextdomain ( string $domain , string|null $directory ) : string|false"
    ],
    "boolval": [
        "boolval ( mixed $value ) : bool"
    ],
    "bson_decode": [
        "bson_decode ( string $bson ) : array"
    ],
    "bson_encode": [
        "bson_encode ( mixed $anything ) : string"
    ],
    "bzclose": [
        "bzclose ( resource $bz ) : bool"
    ],
    "bzcompress": [
        "bzcompress ( string $data , int $block_size = 4 , int $work_factor = 0 ) : string|int"
    ],
    "bzdecompress": [
        "bzdecompress ( string $data , bool $use_less_memory = false ) : string|int|false"
    ],
    "bzerrno": [
        "bzerrno ( resource $bz ) : int"
    ],
    "bzerror": [
        "bzerror ( resource $bz ) : array"
    ],
    "bzerrstr": [
        "bzerrstr ( resource $bz ) : string"
    ],
    "bzflush": [
        "bzflush ( resource $bz ) : bool"
    ],
    "bzopen": [
        "bzopen ( string|resource $file , string $mode ) : resource|false"
    ],
    "bzread": [
        "bzread ( resource $bz , int $length = 1024 ) : string|false"
    ],
    "bzwrite": [
        "bzwrite ( resource $bz , string $data , int|null $length = null ) : int|false"
    ],
    "CachingIterator": [
        "public CachingIterator::__construct ( Iterator $iterator , int $flags = self::CALL_TOSTRING )"
    ],
    "cal_days_in_month": [
        "cal_days_in_month ( int $calendar , int $month , int $year ) : int"
    ],
    "cal_from_jd": [
        "cal_from_jd ( int $julian_day , int $calendar ) : array"
    ],
    "cal_info": [
        "cal_info ( int $calendar = -1 ) : array"
    ],
    "cal_to_jd": [
        "cal_to_jd ( int $calendar , int $month , int $day , int $year ) : int"
    ],
    "call_user_func": [
        "call_user_func ( callable $callback , mixed ...$args ) : mixed"
    ],
    "call_user_func_array": [
        "call_user_func_array ( callable $callback , array $args ) : mixed"
    ],
    "CallbackFilterIterator": [
        "public CallbackFilterIterator::__construct ( Iterator $iterator , callable $callback )"
    ],
    "ceil": [
        "ceil ( float $value ) : float"
    ],
    "chdir": [
        "chdir ( string $directory ) : bool"
    ],
    "checkdate": [
        "checkdate ( int $month , int $day , int $year ) : bool"
    ],
    "checkdnsrr": [
        "checkdnsrr ( string $hostname , string $type = \"MX\" ) : bool"
    ],
    "chgrp": [
        "chgrp ( string $filename , string|int $group ) : bool"
    ],
    "chmod": [
        "chmod ( string $filename , int $permissions ) : bool"
    ],
    "chown": [
        "chown ( string $filename , string|int $user ) : bool"
    ],
    "chr": [
        "chr ( int $codepoint ) : string"
    ],
    "chroot": [
        "chroot ( string $directory ) : bool"
    ],
    "chunk_split": [
        "chunk_split ( string $string , int $length = 76 , string $separator = \"\\r\\n\" ) : string"
    ],
    "class_alias": [
        "class_alias ( string $original , string $alias , bool $autoload = true ) : bool"
    ],
    "class_exists": [
        "class_exists ( string $class_name , bool $autoload = true ) : bool"
    ],
    "class_implements": [
        "class_implements ( mixed $class , bool $autoload = true ) : array"
    ],
    "class_parents": [
        "class_parents ( mixed $class , bool $autoload = true ) : array"
    ],
    "class_uses": [
        "class_uses ( mixed $class , bool $autoload = true ) : array"
    ],
    "classkit_import": [
        "classkit_import ( string $filename ) : array"
    ],
    "classkit_method_add": [
        "classkit_method_add ( string $classname , string $methodname , string $args , string $code , int $flags = CLASSKIT_ACC_PUBLIC ) : bool"
    ],
    "classkit_method_copy": [
        "classkit_method_copy ( string $dClass , string $dMethod , string $sClass , string $sMethod = ? ) : bool"
    ],
    "classkit_method_redefine": [
        "classkit_method_redefine ( string $classname , string $methodname , string $args , string $code , int $flags = CLASSKIT_ACC_PUBLIC ) : bool"
    ],
    "classkit_method_remove": [
        "classkit_method_remove ( string $classname , string $methodname ) : bool"
    ],
    "classkit_method_rename": [
        "classkit_method_rename ( string $classname , string $methodname , string $newname ) : bool"
    ],
    "clearstatcache": [
        "clearstatcache ( bool $clear_realpath_cache = false , string $filename = \"\" ) : void"
    ],
    "cli_get_process_title": [
        "cli_get_process_title ( ) : string|null"
    ],
    "cli_set_process_title": [
        "cli_set_process_title ( string $title ) : bool"
    ],
    "closedir": [
        "closedir ( resource $dir_handle = ? ) : void"
    ],
    "closelog": [
        "closelog ( ) : bool"
    ],
    "Closure": [
        "private Closure::__construct ( )"
    ],
    "Collator": [
        "public Collator::__construct ( string $locale )"
    ],
    "collator_asort": [
        "collator_asort ( Collator $object , array &$array , int $flags = Collator::SORT_REGULAR ) : bool"
    ],
    "collator_compare": [
        "collator_compare ( Collator $object , string $string1 , string $string2 ) : int|false"
    ],
    "collator_create": [
        "collator_create ( string $locale ) : Collator|null"
    ],
    "collator_get_attribute": [
        "collator_get_attribute ( Collator $object , int $attribute ) : int|false"
    ],
    "collator_get_error_code": [
        "collator_get_error_code ( Collator $object ) : int|false"
    ],
    "collator_get_error_message": [
        "collator_get_error_message ( Collator $object ) : string|false"
    ],
    "collator_get_locale": [
        "collator_get_locale ( Collator $object , int $type ) : string|false"
    ],
    "collator_get_sort_key": [
        "collator_get_sort_key ( Collator $object , string $string ) : string|false"
    ],
    "collator_get_strength": [
        "collator_get_strength ( Collator $object ) : int"
    ],
    "collator_set_attribute": [
        "collator_set_attribute ( Collator $object , int $attribute , int $value ) : bool"
    ],
    "collator_set_strength": [
        "collator_set_strength ( Collator $object , int $strength ) : bool"
    ],
    "collator_sort": [
        "collator_sort ( Collator $object , array &$array , int $flags = Collator::SORT_REGULAR ) : bool"
    ],
    "collator_sort_with_sort_keys": [
        "collator_sort_with_sort_keys ( Collator $object , array &$array ) : bool"
    ],
    "com": [
        "public com::__construct ( string $module_name , array|string|null $server_name = null , int $codepage = CP_ACP , string $typelib = \"\" )"
    ],
    "com_create_guid": [
        "com_create_guid ( ) : string|false"
    ],
    "com_event_sink": [
        "com_event_sink ( variant $variant , object $sink_object , array|string|null $sink_interface = null ) : bool"
    ],
    "com_get_active_object": [
        "com_get_active_object ( string $prog_id , int|null $codepage = null ) : variant"
    ],
    "com_load_typelib": [
        "com_load_typelib ( string $typelib , bool $case_insensitive = true ) : bool"
    ],
    "com_message_pump": [
        "com_message_pump ( int $timeout_milliseconds = 0 ) : bool"
    ],
    "com_print_typeinfo": [
        "com_print_typeinfo ( variant|string $variant , string|null $dispatch_interface = null , bool $display_sink = false ) : bool"
    ],
    "compact": [
        "compact ( array|string $var_name , array|string ...$var_names ) : array"
    ],
    "COMPersistHelper": [
        "public COMPersistHelper::__construct ( variant|null $variant = null )"
    ],
    "connection_aborted": [
        "connection_aborted ( ) : int"
    ],
    "connection_status": [
        "connection_status ( ) : int"
    ],
    "constant": [
        "constant ( string $name ) : mixed"
    ],
    "convert_cyr_string": [
        "convert_cyr_string ( string $str , string $from , string $to ) : string"
    ],
    "convert_uudecode": [
        "convert_uudecode ( string $string ) : string|false"
    ],
    "convert_uuencode": [
        "convert_uuencode ( string $string ) : string"
    ],
    "copy": [
        "copy ( string $source , string $dest , resource $context = ? ) : bool"
    ],
    "cos": [
        "cos ( float $num ) : float"
    ],
    "cosh": [
        "cosh ( float $num ) : float"
    ],
    "count": [
        "count ( Countable|array $value , int $mode = COUNT_NORMAL ) : int"
    ],
    "count_chars": [
        "count_chars ( string $string , int $mode = 0 ) : array|string"
    ],
    "crc32": [
        "crc32 ( string $string ) : int"
    ],
    "create_function": [
        "create_function ( string $args , string $code ) : string"
    ],
    "crypt": [
        "crypt ( string $string , string $salt ) : string"
    ],
    "ctype_alnum": [
        "ctype_alnum ( mixed $text ) : bool"
    ],
    "ctype_alpha": [
        "ctype_alpha ( mixed $text ) : bool"
    ],
    "ctype_cntrl": [
        "ctype_cntrl ( mixed $text ) : bool"
    ],
    "ctype_digit": [
        "ctype_digit ( mixed $text ) : bool"
    ],
    "ctype_graph": [
        "ctype_graph ( mixed $text ) : bool"
    ],
    "ctype_lower": [
        "ctype_lower ( mixed $text ) : bool"
    ],
    "ctype_print": [
        "ctype_print ( mixed $text ) : bool"
    ],
    "ctype_punct": [
        "ctype_punct ( mixed $text ) : bool"
    ],
    "ctype_space": [
        "ctype_space ( mixed $text ) : bool"
    ],
    "ctype_upper": [
        "ctype_upper ( mixed $text ) : bool"
    ],
    "ctype_xdigit": [
        "ctype_xdigit ( mixed $text ) : bool"
    ],
    "cubrid_affected_rows": [
        "cubrid_affected_rows ( resource $conn_identifier = ? ) : int",
        "cubrid_affected_rows ( resource $req_identifier = ? ) : int"
    ],
    "cubrid_bind": [
        "cubrid_bind ( resource $req_identifier , int $bind_index , mixed $bind_value , string $bind_value_type = ? ) : bool"
    ],
    "cubrid_client_encoding": [
        "cubrid_client_encoding ( resource $conn_identifier = ? ) : string"
    ],
    "cubrid_close": [
        "cubrid_close ( resource $conn_identifier = ? ) : bool"
    ],
    "cubrid_close_prepare": [
        "cubrid_close_prepare ( resource $req_identifier ) : bool"
    ],
    "cubrid_close_request": [
        "cubrid_close_request ( resource $req_identifier ) : bool"
    ],
    "cubrid_col_get": [
        "cubrid_col_get ( resource $conn_identifier , string $oid , string $attr_name ) : array"
    ],
    "cubrid_col_size": [
        "cubrid_col_size ( resource $conn_identifier , string $oid , string $attr_name ) : int"
    ],
    "cubrid_column_names": [
        "cubrid_column_names ( resource $req_identifier ) : array"
    ],
    "cubrid_column_types": [
        "cubrid_column_types ( resource $req_identifier ) : array"
    ],
    "cubrid_commit": [
        "cubrid_commit ( resource $conn_identifier ) : bool"
    ],
    "cubrid_connect": [
        "cubrid_connect ( string $host , int $port , string $dbname , string $userid = ? , string $passwd = ? , bool $new_link = false ) : resource"
    ],
    "cubrid_connect_with_url": [
        "cubrid_connect_with_url ( string $conn_url , string $userid = ? , string $passwd = ? , bool $new_link = false ) : resource"
    ],
    "cubrid_current_oid": [
        "cubrid_current_oid ( resource $req_identifier ) : string"
    ],
    "cubrid_data_seek": [
        "cubrid_data_seek ( resource $result , int $row_number ) : bool"
    ],
    "cubrid_db_name": [
        "cubrid_db_name ( array $result , int $index ) : string"
    ],
    "cubrid_disconnect": [
        "cubrid_disconnect ( resource $conn_identifier = ? ) : bool"
    ],
    "cubrid_drop": [
        "cubrid_drop ( resource $conn_identifier , string $oid ) : bool"
    ],
    "cubrid_errno": [
        "cubrid_errno ( resource $conn_identifier = ? ) : int"
    ],
    "cubrid_error": [
        "cubrid_error ( resource $connection = ? ) : string"
    ],
    "cubrid_error_code": [
        "cubrid_error_code ( ) : int"
    ],
    "cubrid_error_code_facility": [
        "cubrid_error_code_facility ( ) : int"
    ],
    "cubrid_error_msg": [
        "cubrid_error_msg ( ) : string"
    ],
    "cubrid_execute": [
        "cubrid_execute ( resource $conn_identifier , string $sql , int $option = 0 ) : resource",
        "cubrid_execute ( resource $request_identifier , int $option = 0 ) : bool"
    ],
    "cubrid_fetch": [
        "cubrid_fetch ( resource $result , int $type = CUBRID_BOTH ) : mixed"
    ],
    "cubrid_fetch_array": [
        "cubrid_fetch_array ( resource $result , int $type = CUBRID_BOTH ) : array"
    ],
    "cubrid_fetch_assoc": [
        "cubrid_fetch_assoc ( resource $result , int $type = ? ) : array"
    ],
    "cubrid_fetch_field": [
        "cubrid_fetch_field ( resource $result , int $field_offset = 0 ) : object"
    ],
    "cubrid_fetch_lengths": [
        "cubrid_fetch_lengths ( resource $result ) : array"
    ],
    "cubrid_fetch_object": [
        "cubrid_fetch_object ( resource $result , string $class_name = ? , array $params = ? , int $type = ? ) : object"
    ],
    "cubrid_fetch_row": [
        "cubrid_fetch_row ( resource $result , int $type = ? ) : array"
    ],
    "cubrid_field_flags": [
        "cubrid_field_flags ( resource $result , int $field_offset ) : string"
    ],
    "cubrid_field_len": [
        "cubrid_field_len ( resource $result , int $field_offset ) : int"
    ],
    "cubrid_field_name": [
        "cubrid_field_name ( resource $result , int $field_offset ) : string"
    ],
    "cubrid_field_seek": [
        "cubrid_field_seek ( resource $result , int $field_offset = 0 ) : bool"
    ],
    "cubrid_field_table": [
        "cubrid_field_table ( resource $result , int $field_offset ) : string"
    ],
    "cubrid_field_type": [
        "cubrid_field_type ( resource $result , int $field_offset ) : string"
    ],
    "cubrid_free_result": [
        "cubrid_free_result ( resource $req_identifier ) : bool"
    ],
    "cubrid_get": [
        "cubrid_get ( resource $conn_identifier , string $oid , mixed $attr = ? ) : mixed"
    ],
    "cubrid_get_autocommit": [
        "cubrid_get_autocommit ( resource $conn_identifier ) : bool"
    ],
    "cubrid_get_charset": [
        "cubrid_get_charset ( resource $conn_identifier ) : string"
    ],
    "cubrid_get_class_name": [
        "cubrid_get_class_name ( resource $conn_identifier , string $oid ) : string"
    ],
    "cubrid_get_client_info": [
        "cubrid_get_client_info ( ) : string"
    ],
    "cubrid_get_db_parameter": [
        "cubrid_get_db_parameter ( resource $conn_identifier ) : array"
    ],
    "cubrid_get_query_timeout": [
        "cubrid_get_query_timeout ( resource $req_identifier ) : int"
    ],
    "cubrid_get_server_info": [
        "cubrid_get_server_info ( resource $conn_identifier ) : string"
    ],
    "cubrid_insert_id": [
        "cubrid_insert_id ( resource $conn_identifier = ? ) : string"
    ],
    "cubrid_is_instance": [
        "cubrid_is_instance ( resource $conn_identifier , string $oid ) : int"
    ],
    "cubrid_list_dbs": [
        "cubrid_list_dbs ( resource $conn_identifier = ? ) : array"
    ],
    "cubrid_load_from_glo": [
        "cubrid_load_from_glo ( resource $conn_identifier , string $oid , string $file_name ) : int"
    ],
    "cubrid_lob2_bind": [
        "cubrid_lob2_bind ( resource $req_identifier , int $bind_index , mixed $bind_value , string $bind_value_type = ? ) : bool"
    ],
    "cubrid_lob2_close": [
        "cubrid_lob2_close ( resource $lob_identifier ) : bool"
    ],
    "cubrid_lob2_export": [
        "cubrid_lob2_export ( resource $lob_identifier , string $file_name ) : bool"
    ],
    "cubrid_lob2_import": [
        "cubrid_lob2_import ( resource $lob_identifier , string $file_name ) : bool"
    ],
    "cubrid_lob2_new": [
        "cubrid_lob2_new ( resource $conn_identifier = ? , string $type = \"BLOB\" ) : resource"
    ],
    "cubrid_lob2_read": [
        "cubrid_lob2_read ( resource $lob_identifier , int $len ) : string"
    ],
    "cubrid_lob2_seek": [
        "cubrid_lob2_seek ( resource $lob_identifier , int $offset , int $origin = CUBRID_CURSOR_CURRENT ) : bool"
    ],
    "cubrid_lob2_seek64": [
        "cubrid_lob2_seek64 ( resource $lob_identifier , string $offset , int $origin = CUBRID_CURSOR_CURRENT ) : bool"
    ],
    "cubrid_lob2_size": [
        "cubrid_lob2_size ( resource $lob_identifier ) : int"
    ],
    "cubrid_lob2_size64": [
        "cubrid_lob2_size64 ( resource $lob_identifier ) : string"
    ],
    "cubrid_lob2_tell": [
        "cubrid_lob2_tell ( resource $lob_identifier ) : int"
    ],
    "cubrid_lob2_tell64": [
        "cubrid_lob2_tell64 ( resource $lob_identifier ) : string"
    ],
    "cubrid_lob2_write": [
        "cubrid_lob2_write ( resource $lob_identifier , string $buf ) : bool"
    ],
    "cubrid_lob_close": [
        "cubrid_lob_close ( array $lob_identifier_array ) : bool"
    ],
    "cubrid_lob_export": [
        "cubrid_lob_export ( resource $conn_identifier , resource $lob_identifier , string $path_name ) : bool"
    ],
    "cubrid_lob_get": [
        "cubrid_lob_get ( resource $conn_identifier , string $sql ) : array"
    ],
    "cubrid_lob_send": [
        "cubrid_lob_send ( resource $conn_identifier , resource $lob_identifier ) : bool"
    ],
    "cubrid_lob_size": [
        "cubrid_lob_size ( resource $lob_identifier ) : string"
    ],
    "cubrid_lock_read": [
        "cubrid_lock_read ( resource $conn_identifier , string $oid ) : bool"
    ],
    "cubrid_lock_write": [
        "cubrid_lock_write ( resource $conn_identifier , string $oid ) : bool"
    ],
    "cubrid_move_cursor": [
        "cubrid_move_cursor ( resource $req_identifier , int $offset , int $origin = CUBRID_CURSOR_CURRENT ) : bool"
    ],
    "cubrid_new_glo": [
        "cubrid_new_glo ( resource $conn_identifier , string $class_name , string $file_name ) : string"
    ],
    "cubrid_next_result": [
        "cubrid_next_result ( resource $result ) : bool"
    ],
    "cubrid_num_cols": [
        "cubrid_num_cols ( resource $result ) : int"
    ],
    "cubrid_num_fields": [
        "cubrid_num_fields ( resource $result ) : int"
    ],
    "cubrid_num_rows": [
        "cubrid_num_rows ( resource $result ) : int"
    ],
    "cubrid_pconnect": [
        "cubrid_pconnect ( string $host , int $port , string $dbname , string $userid = ? , string $passwd = ? ) : resource"
    ],
    "cubrid_pconnect_with_url": [
        "cubrid_pconnect_with_url ( string $conn_url , string $userid = ? , string $passwd = ? ) : resource"
    ],
    "cubrid_ping": [
        "cubrid_ping ( resource $conn_identifier = ? ) : bool"
    ],
    "cubrid_prepare": [
        "cubrid_prepare ( resource $conn_identifier , string $prepare_stmt , int $option = 0 ) : resource"
    ],
    "cubrid_put": [
        "cubrid_put ( resource $conn_identifier , string $oid , string $attr = ? , mixed $value ) : bool"
    ],
    "cubrid_query": [
        "cubrid_query ( string $query , resource $conn_identifier = ? ) : resource"
    ],
    "cubrid_real_escape_string": [
        "cubrid_real_escape_string ( string $unescaped_string , resource $conn_identifier = ? ) : string"
    ],
    "cubrid_result": [
        "cubrid_result ( resource $result , int $row , mixed $field = 0 ) : string"
    ],
    "cubrid_rollback": [
        "cubrid_rollback ( resource $conn_identifier ) : bool"
    ],
    "cubrid_save_to_glo": [
        "cubrid_save_to_glo ( resource $conn_identifier , string $oid , string $file_name ) : int"
    ],
    "cubrid_schema": [
        "cubrid_schema ( resource $conn_identifier , int $schema_type , string $class_name = ? , string $attr_name = ? ) : array"
    ],
    "cubrid_send_glo": [
        "cubrid_send_glo ( resource $conn_identifier , string $oid ) : int"
    ],
    "cubrid_seq_drop": [
        "cubrid_seq_drop ( resource $conn_identifier , string $oid , string $attr_name , int $index ) : bool"
    ],
    "cubrid_seq_insert": [
        "cubrid_seq_insert ( resource $conn_identifier , string $oid , string $attr_name , int $index , string $seq_element ) : bool"
    ],
    "cubrid_seq_put": [
        "cubrid_seq_put ( resource $conn_identifier , string $oid , string $attr_name , int $index , string $seq_element ) : bool"
    ],
    "cubrid_set_add": [
        "cubrid_set_add ( resource $conn_identifier , string $oid , string $attr_name , string $set_element ) : bool"
    ],
    "cubrid_set_autocommit": [
        "cubrid_set_autocommit ( resource $conn_identifier , bool $mode ) : bool"
    ],
    "cubrid_set_db_parameter": [
        "cubrid_set_db_parameter ( resource $conn_identifier , int $param_type , int $param_value ) : bool"
    ],
    "cubrid_set_drop": [
        "cubrid_set_drop ( resource $conn_identifier , string $oid , string $attr_name , string $set_element ) : bool"
    ],
    "cubrid_set_query_timeout": [
        "cubrid_set_query_timeout ( resource $req_identifier , int $timeout ) : bool"
    ],
    "cubrid_unbuffered_query": [
        "cubrid_unbuffered_query ( string $query , resource $conn_identifier = ? ) : resource"
    ],
    "cubrid_version": [
        "cubrid_version ( ) : string"
    ],
    "curl_close": [
        "curl_close ( CurlHandle $handle ) : void"
    ],
    "curl_copy_handle": [
        "curl_copy_handle ( CurlHandle $handle ) : CurlHandle|false"
    ],
    "curl_errno": [
        "curl_errno ( CurlHandle $handle ) : int"
    ],
    "curl_error": [
        "curl_error ( CurlHandle $handle ) : string"
    ],
    "curl_escape": [
        "curl_escape ( CurlHandle $handle , string $string ) : string|false"
    ],
    "curl_exec": [
        "curl_exec ( CurlHandle $handle ) : string|bool"
    ],
    "curl_file_create": [
        "curl_file_create ( string $filename , string|null $mime_type = null , string|null $posted_filename = null ) : CURLFile"
    ],
    "curl_getinfo": [
        "curl_getinfo ( CurlHandle $handle , int|null $option = null ) : mixed"
    ],
    "curl_init": [
        "curl_init ( string|null $url = null ) : CurlHandle|false"
    ],
    "curl_multi_add_handle": [
        "curl_multi_add_handle ( CurlMultiHandle $multi_handle , CurlHandle $handle ) : int"
    ],
    "curl_multi_close": [
        "curl_multi_close ( CurlMultiHandle $multi_handle ) : void"
    ],
    "curl_multi_errno": [
        "curl_multi_errno ( CurlMultiHandle $multi_handle ) : int"
    ],
    "curl_multi_exec": [
        "curl_multi_exec ( CurlMultiHandle $multi_handle , int &$still_running ) : int"
    ],
    "curl_multi_getcontent": [
        "curl_multi_getcontent ( CurlHandle $handle ) : string|null"
    ],
    "curl_multi_info_read": [
        "curl_multi_info_read ( CurlMultiHandle $multi_handle , int &$queued_messages = null ) : array|false"
    ],
    "curl_multi_init": [
        "curl_multi_init ( ) : CurlMultiHandle"
    ],
    "curl_multi_remove_handle": [
        "curl_multi_remove_handle ( CurlMultiHandle $multi_handle , CurlHandle $handle ) : int"
    ],
    "curl_multi_select": [
        "curl_multi_select ( CurlMultiHandle $multi_handle , float $timeout = 1.0 ) : int"
    ],
    "curl_multi_setopt": [
        "curl_multi_setopt ( CurlMultiHandle $multi_handle , int $option , mixed $value ) : bool"
    ],
    "curl_multi_strerror": [
        "curl_multi_strerror ( int $error_code ) : string|null"
    ],
    "curl_pause": [
        "curl_pause ( CurlHandle $handle , int $flags ) : int"
    ],
    "curl_reset": [
        "curl_reset ( CurlHandle $handle ) : void"
    ],
    "curl_setopt": [
        "curl_setopt ( CurlHandle $handle , int $option , mixed $value ) : bool"
    ],
    "curl_setopt_array": [
        "curl_setopt_array ( CurlHandle $handle , array $options ) : bool"
    ],
    "curl_share_close": [
        "curl_share_close ( CurlShareHandle $share_handle ) : void"
    ],
    "curl_share_errno": [
        "curl_share_errno ( CurlShareHandle $share_handle ) : int"
    ],
    "curl_share_init": [
        "curl_share_init ( ) : CurlShareHandle"
    ],
    "curl_share_setopt": [
        "curl_share_setopt ( CurlShareHandle $share_handle , int $option , mixed $value ) : bool"
    ],
    "curl_share_strerror": [
        "curl_share_strerror ( int $error_code ) : string|null"
    ],
    "curl_strerror": [
        "curl_strerror ( int $error_code ) : string|null"
    ],
    "curl_unescape": [
        "curl_unescape ( CurlHandle $handle , string $string ) : string|false"
    ],
    "curl_version": [
        "curl_version ( ) : array|false"
    ],
    "CURLFile": [
        "public CURLFile::__construct ( string $filename , string|null $mime_type = null , string|null $posted_filename = null )"
    ],
    "current": [
        "current ( array|object $array ) : mixed"
    ],
    "date": [
        "date ( string $format , int|null $timestamp = null ) : string"
    ],
    "date_add": [
        "date_add ( DateTime $object , DateInterval $interval ) : DateTime"
    ],
    "date_create": [
        "date_create ( string $datetime = \"now\" , DateTimeZone|null $timezone = null ) : DateTime|false"
    ],
    "date_create_from_format": [
        "date_create_from_format ( string $format , string $datetime , DateTimeZone|null $timezone = null ) : DateTime|false"
    ],
    "date_create_immutable": [
        "date_create_immutable ( string $datetime = \"now\" , DateTimeZone|null $timezone = null ) : DateTimeImmutable|false"
    ],
    "date_create_immutable_from_format": [
        "date_create_immutable_from_format ( string $format , string $datetime , DateTimeZone|null $timezone = null ) : DateTimeImmutable|false"
    ],
    "date_date_set": [
        "date_date_set ( DateTime $object , int $year , int $month , int $day ) : DateTime"
    ],
    "date_default_timezone_get": [
        "date_default_timezone_get ( ) : string"
    ],
    "date_default_timezone_set": [
        "date_default_timezone_set ( string $timezoneId ) : bool"
    ],
    "date_diff": [
        "date_diff ( DateTimeInterface $baseObject , DateTimeInterface $targetObject , bool $absolute = false ) : DateInterval"
    ],
    "date_format": [
        "date_format ( DateTimeInterface $object , string $format ) : string"
    ],
    "date_get_last_errors": [
        "date_get_last_errors ( ) : array|false"
    ],
    "date_isodate_set": [
        "date_isodate_set ( DateTime $object , int $year , int $week , int $dayOfWeek = 1 ) : DateTime"
    ],
    "date_modify": [
        "date_modify ( DateTime $object , string $modifier ) : DateTime|false"
    ],
    "date_offset_get": [
        "date_offset_get ( DateTimeInterface $object ) : int"
    ],
    "date_parse": [
        "date_parse ( string $datetime ) : array"
    ],
    "date_parse_from_format": [
        "date_parse_from_format ( string $format , string $datetime ) : array"
    ],
    "date_sub": [
        "date_sub ( DateTime $object , DateInterval $interval ) : DateTime"
    ],
    "date_sun_info": [
        "date_sun_info ( int $timestamp , float $latitude , float $longitude ) : array"
    ],
    "date_sunrise": [
        "date_sunrise ( int $timestamp , int $returnFormat = SUNFUNCS_RET_STRING , float|null $latitude = null , float|null $longitude = null , float|null $zenith = null , float|null $utcOffset = null ) : string|int|float|false"
    ],
    "date_sunset": [
        "date_sunset ( int $timestamp , int $returnFormat = SUNFUNCS_RET_STRING , float|null $latitude = null , float|null $longitude = null , float|null $zenith = null , float|null $utcOffset = null ) : string|int|float|false"
    ],
    "date_time_set": [
        "date_time_set ( DateTime $object , int $hour , int $minute , int $second = 0 , int $microsecond = 0 ) : DateTime"
    ],
    "date_timestamp_get": [
        "date_timestamp_get ( DateTimeInterface $object ) : int"
    ],
    "date_timestamp_set": [
        "date_timestamp_set ( DateTime $object , int $timestamp ) : DateTime"
    ],
    "date_timezone_get": [
        "date_timezone_get ( DateTimeInterface $object ) : DateTimeZone|false"
    ],
    "date_timezone_set": [
        "date_timezone_set ( DateTime $object , DateTimeZone $timezone ) : DateTime"
    ],
    "datefmt_create": [
        "datefmt_create ( string|null $locale , int $dateType , int $timeType , IntlTimeZone|DateTimeZone|string|null $timezone = null , IntlCalendar|int|null $calendar = null , string $pattern = \"\" ) : IntlDateFormatter|null"
    ],
    "datefmt_format": [
        "datefmt_format ( IntlDateFormatter $formatter , IntlCalendar|DateTimeInterface|array|string|int|float $datetime ) : string|false"
    ],
    "datefmt_format_object": [
        "datefmt_format_object ( IntlCalendar|DateTimeInterface $datetime , array|int|string|null $format = null , string|null $locale = null ) : string|false"
    ],
    "datefmt_get_calendar": [
        "datefmt_get_calendar ( IntlDateFormatter $formatter ) : int|false"
    ],
    "datefmt_get_calendar_object": [
        "datefmt_get_calendar_object ( IntlDateFormatter $formatter ) : IntlCalendar|false|null"
    ],
    "datefmt_get_datetype": [
        "datefmt_get_datetype ( IntlDateFormatter $formatter ) : int|false"
    ],
    "datefmt_get_error_code": [
        "datefmt_get_error_code ( IntlDateFormatter $formatter ) : int"
    ],
    "datefmt_get_error_message": [
        "datefmt_get_error_message ( IntlDateFormatter $formatter ) : string"
    ],
    "datefmt_get_locale": [
        "datefmt_get_locale ( IntlDateFormatter $formatter , int $type = ULOC_ACTUAL_LOCALE ) : string|false"
    ],
    "datefmt_get_pattern": [
        "datefmt_get_pattern ( IntlDateFormatter $formatter ) : string|false"
    ],
    "datefmt_get_timetype": [
        "datefmt_get_timetype ( IntlDateFormatter $formatter ) : int|false"
    ],
    "datefmt_get_timezone": [
        "datefmt_get_timezone ( IntlDateFormatter $formatter ) : IntlTimeZone|false"
    ],
    "datefmt_get_timezone_id": [
        "datefmt_get_timezone_id ( IntlDateFormatter $formatter ) : string|false"
    ],
    "datefmt_is_lenient": [
        "datefmt_is_lenient ( IntlDateFormatter $formatter ) : bool"
    ],
    "datefmt_localtime": [
        "datefmt_localtime ( IntlDateFormatter $formatter , string $string , int &$offset = null ) : array|false"
    ],
    "datefmt_parse": [
        "datefmt_parse ( IntlDateFormatter $formatter , string $string , int &$offset = null ) : int|float|false"
    ],
    "datefmt_set_calendar": [
        "datefmt_set_calendar ( IntlDateFormatter $formatter , IntlCalendar|int|null $calendar ) : bool"
    ],
    "datefmt_set_lenient": [
        "datefmt_set_lenient ( IntlDateFormatter $formatter , bool $lenient ) : void"
    ],
    "datefmt_set_pattern": [
        "datefmt_set_pattern ( IntlDateFormatter $formatter , string $pattern ) : bool"
    ],
    "datefmt_set_timezone": [
        "datefmt_set_timezone ( IntlDateFormatter $formatter , IntlTimeZone|DateTimeZone|string|null $timezone ) : bool|null"
    ],
    "DateInterval": [
        "public DateInterval::__construct ( string $duration )"
    ],
    "DatePeriod": [
        "public DatePeriod::__construct ( DateTimeInterface $start , DateInterval $interval , int $recurrences , int $options = 0 )",
        "public DatePeriod::__construct ( DateTimeInterface $start , DateInterval $interval , DateTimeInterface $end , int $options = 0 )",
        "public DatePeriod::__construct ( string $isostr , int $options = 0 )"
    ],
    "DateTime": [
        "public DateTime::__construct ( string $datetime = \"now\" , DateTimeZone|null $timezone = null )"
    ],
    "DateTimeImmutable": [
        "public DateTimeImmutable::__construct ( string $datetime = \"now\" , DateTimeZone|null $timezone = null )"
    ],
    "DateTimeZone": [
        "public DateTimeZone::__construct ( string $timezone )"
    ],
    "db2_autocommit": [
        "db2_autocommit ( resource $connection , bool $value = ? ) : mixed"
    ],
    "db2_bind_param": [
        "db2_bind_param ( resource $stmt , int $parameter_number , string $variable_name , int $parameter_type = ? , int $data_type = 0 , int $precision = -1 , int $scale = 0 ) : bool"
    ],
    "db2_client_info": [
        "db2_client_info ( resource $connection ) : object"
    ],
    "db2_close": [
        "db2_close ( resource $connection ) : bool"
    ],
    "db2_column_privileges": [
        "db2_column_privileges ( resource $connection , string $qualifier = ? , string $schema = ? , string $table-name = ? , string $column-name = ? ) : resource"
    ],
    "db2_columns": [
        "db2_columns ( resource $connection , string $qualifier = ? , string $schema = ? , string $table-name = ? , string $column-name = ? ) : resource"
    ],
    "db2_commit": [
        "db2_commit ( resource $connection ) : bool"
    ],
    "db2_conn_error": [
        "db2_conn_error ( resource $connection = ? ) : string"
    ],
    "db2_conn_errormsg": [
        "db2_conn_errormsg ( resource $connection = ? ) : string"
    ],
    "db2_connect": [
        "db2_connect ( string $database , string $username , string $password , array $options = ? ) : resource"
    ],
    "db2_cursor_type": [
        "db2_cursor_type ( resource $stmt ) : int"
    ],
    "db2_escape_string": [
        "db2_escape_string ( string $string_literal ) : string"
    ],
    "db2_exec": [
        "db2_exec ( resource $connection , string $statement , array $options = ? ) : resource"
    ],
    "db2_execute": [
        "db2_execute ( resource $stmt , array $parameters = ? ) : bool"
    ],
    "db2_fetch_array": [
        "db2_fetch_array ( resource $stmt , int $row_number = -1 ) : array"
    ],
    "db2_fetch_assoc": [
        "db2_fetch_assoc ( resource $stmt , int $row_number = -1 ) : array"
    ],
    "db2_fetch_both": [
        "db2_fetch_both ( resource $stmt , int $row_number = -1 ) : array"
    ],
    "db2_fetch_object": [
        "db2_fetch_object ( resource $stmt , int $row_number = -1 ) : object"
    ],
    "db2_fetch_row": [
        "db2_fetch_row ( resource $stmt , int $row_number = ? ) : bool"
    ],
    "db2_field_display_size": [
        "db2_field_display_size ( resource $stmt , mixed $column ) : int"
    ],
    "db2_field_name": [
        "db2_field_name ( resource $stmt , mixed $column ) : string"
    ],
    "db2_field_num": [
        "db2_field_num ( resource $stmt , mixed $column ) : int"
    ],
    "db2_field_precision": [
        "db2_field_precision ( resource $stmt , mixed $column ) : int"
    ],
    "db2_field_scale": [
        "db2_field_scale ( resource $stmt , mixed $column ) : int"
    ],
    "db2_field_type": [
        "db2_field_type ( resource $stmt , mixed $column ) : string"
    ],
    "db2_field_width": [
        "db2_field_width ( resource $stmt , mixed $column ) : int"
    ],
    "db2_foreign_keys": [
        "db2_foreign_keys ( resource $connection , string $qualifier , string $schema , string $table-name ) : resource"
    ],
    "db2_free_result": [
        "db2_free_result ( resource $stmt ) : bool"
    ],
    "db2_free_stmt": [
        "db2_free_stmt ( resource $stmt ) : bool"
    ],
    "db2_get_option": [
        "db2_get_option ( resource $resource , string $option ) : string|false"
    ],
    "db2_last_insert_id": [
        "db2_last_insert_id ( resource $resource ) : string"
    ],
    "db2_lob_read": [
        "db2_lob_read ( resource $stmt , int $colnum , int $length ) : string"
    ],
    "db2_next_result": [
        "db2_next_result ( resource $stmt ) : resource"
    ],
    "db2_num_fields": [
        "db2_num_fields ( resource $stmt ) : int"
    ],
    "db2_num_rows": [
        "db2_num_rows ( resource $stmt ) : int"
    ],
    "db2_pclose": [
        "db2_pclose ( resource $resource ) : bool"
    ],
    "db2_pconnect": [
        "db2_pconnect ( string $database , string $username , string $password , array $options = ? ) : resource"
    ],
    "db2_prepare": [
        "db2_prepare ( resource $connection , string $statement , array $options = ? ) : resource"
    ],
    "db2_primary_keys": [
        "db2_primary_keys ( resource $connection , string $qualifier , string $schema , string $table-name ) : resource"
    ],
    "db2_procedure_columns": [
        "db2_procedure_columns ( resource $connection , string $qualifier , string $schema , string $procedure , string $parameter ) : resource"
    ],
    "db2_procedures": [
        "db2_procedures ( resource $connection , string $qualifier , string $schema , string $procedure ) : resource"
    ],
    "db2_result": [
        "db2_result ( resource $stmt , mixed $column ) : mixed"
    ],
    "db2_rollback": [
        "db2_rollback ( resource $connection ) : bool"
    ],
    "db2_server_info": [
        "db2_server_info ( resource $connection ) : object"
    ],
    "db2_set_option": [
        "db2_set_option ( resource $resource , array $options , int $type ) : bool"
    ],
    "db2_special_columns": [
        "db2_special_columns ( resource $connection , string $qualifier , string $schema , string $table_name , int $scope ) : resource"
    ],
    "db2_statistics": [
        "db2_statistics ( resource $connection , string $qualifier , string $schema , string $table-name , bool $unique ) : resource"
    ],
    "db2_stmt_error": [
        "db2_stmt_error ( resource $stmt = ? ) : string"
    ],
    "db2_stmt_errormsg": [
        "db2_stmt_errormsg ( resource $stmt = ? ) : string"
    ],
    "db2_table_privileges": [
        "db2_table_privileges ( resource $connection , string $qualifier = ? , string $schema = ? , string $table_name = ? ) : resource"
    ],
    "db2_tables": [
        "db2_tables ( resource $connection , string $qualifier = ? , string $schema = ? , string $table-name = ? , string $table-type = ? ) : resource"
    ],
    "dba_close": [
        "dba_close ( resource $dba ) : void"
    ],
    "dba_delete": [
        "dba_delete ( string|array $key , resource $dba ) : bool"
    ],
    "dba_exists": [
        "dba_exists ( string|array $key , resource $dba ) : bool"
    ],
    "dba_fetch": [
        "dba_fetch ( string $key , resource $handle ) : string",
        "dba_fetch ( string $key , int $skip , resource $handle ) : string"
    ],
    "dba_firstkey": [
        "dba_firstkey ( resource $dba ) : string|false"
    ],
    "dba_handlers": [
        "dba_handlers ( bool $full_info = false ) : array"
    ],
    "dba_insert": [
        "dba_insert ( string|array $key , string $value , resource $dba ) : bool"
    ],
    "dba_key_split": [
        "dba_key_split ( string|false|null $key ) : array|false"
    ],
    "dba_list": [
        "dba_list ( ) : array"
    ],
    "dba_nextkey": [
        "dba_nextkey ( resource $dba ) : string|false"
    ],
    "dba_open": [
        "dba_open ( string $path , string $mode , string $handler = ? , string ...$args ) : resource|false"
    ],
    "dba_optimize": [
        "dba_optimize ( resource $dba ) : bool"
    ],
    "dba_popen": [
        "dba_popen ( string $path , string $mode , string $handler = ? , mixed ...$args ) : resource|false"
    ],
    "dba_replace": [
        "dba_replace ( string|array $key , string $value , resource $dba ) : bool"
    ],
    "dba_sync": [
        "dba_sync ( resource $dba ) : bool"
    ],
    "dbase_add_record": [
        "dbase_add_record ( resource $database , array $data ) : bool"
    ],
    "dbase_close": [
        "dbase_close ( resource $database ) : bool"
    ],
    "dbase_create": [
        "dbase_create ( string $path , array $fields , int $type = DBASE_TYPE_DBASE ) : resource"
    ],
    "dbase_delete_record": [
        "dbase_delete_record ( resource $database , int $number ) : bool"
    ],
    "dbase_get_header_info": [
        "dbase_get_header_info ( resource $database ) : array"
    ],
    "dbase_get_record": [
        "dbase_get_record ( resource $database , int $number ) : array"
    ],
    "dbase_get_record_with_names": [
        "dbase_get_record_with_names ( resource $database , int $number ) : array"
    ],
    "dbase_numfields": [
        "dbase_numfields ( resource $database ) : int"
    ],
    "dbase_numrecords": [
        "dbase_numrecords ( resource $database ) : int"
    ],
    "dbase_open": [
        "dbase_open ( string $path , int $mode ) : resource|false"
    ],
    "dbase_pack": [
        "dbase_pack ( resource $database ) : bool"
    ],
    "dbase_replace_record": [
        "dbase_replace_record ( resource $database , array $data , int $number ) : bool"
    ],
    "dbplus_add": [
        "dbplus_add ( resource $relation , array $tuple ) : int"
    ],
    "dbplus_aql": [
        "dbplus_aql ( string $query , string $server = ? , string $dbpath = ? ) : resource"
    ],
    "dbplus_chdir": [
        "dbplus_chdir ( string $newdir = ? ) : string"
    ],
    "dbplus_close": [
        "dbplus_close ( resource $relation ) : mixed"
    ],
    "dbplus_curr": [
        "dbplus_curr ( resource $relation , array &$tuple ) : int"
    ],
    "dbplus_errcode": [
        "dbplus_errcode ( int $errno = ? ) : string"
    ],
    "dbplus_errno": [
        "dbplus_errno ( ) : int"
    ],
    "dbplus_find": [
        "dbplus_find ( resource $relation , array $constraints , mixed $tuple ) : int"
    ],
    "dbplus_first": [
        "dbplus_first ( resource $relation , array &$tuple ) : int"
    ],
    "dbplus_flush": [
        "dbplus_flush ( resource $relation ) : int"
    ],
    "dbplus_freealllocks": [
        "dbplus_freealllocks ( ) : int"
    ],
    "dbplus_freelock": [
        "dbplus_freelock ( resource $relation , string $tuple ) : int"
    ],
    "dbplus_freerlocks": [
        "dbplus_freerlocks ( resource $relation ) : int"
    ],
    "dbplus_getlock": [
        "dbplus_getlock ( resource $relation , string $tuple ) : int"
    ],
    "dbplus_getunique": [
        "dbplus_getunique ( resource $relation , int $uniqueid ) : int"
    ],
    "dbplus_info": [
        "dbplus_info ( resource $relation , string $key , array &$result ) : int"
    ],
    "dbplus_last": [
        "dbplus_last ( resource $relation , array &$tuple ) : int"
    ],
    "dbplus_lockrel": [
        "dbplus_lockrel ( resource $relation ) : int"
    ],
    "dbplus_next": [
        "dbplus_next ( resource $relation , array &$tuple ) : int"
    ],
    "dbplus_open": [
        "dbplus_open ( string $name ) : resource"
    ],
    "dbplus_prev": [
        "dbplus_prev ( resource $relation , array &$tuple ) : int"
    ],
    "dbplus_rchperm": [
        "dbplus_rchperm ( resource $relation , int $mask , string $user , string $group ) : int"
    ],
    "dbplus_rcreate": [
        "dbplus_rcreate ( string $name , mixed $domlist , bool $overwrite = ? ) : resource"
    ],
    "dbplus_rcrtexact": [
        "dbplus_rcrtexact ( string $name , resource $relation , bool $overwrite = ? ) : mixed"
    ],
    "dbplus_rcrtlike": [
        "dbplus_rcrtlike ( string $name , resource $relation , int $overwrite = ? ) : mixed"
    ],
    "dbplus_resolve": [
        "dbplus_resolve ( string $relation_name ) : array"
    ],
    "dbplus_restorepos": [
        "dbplus_restorepos ( resource $relation , array $tuple ) : int"
    ],
    "dbplus_rkeys": [
        "dbplus_rkeys ( resource $relation , mixed $domlist ) : mixed"
    ],
    "dbplus_ropen": [
        "dbplus_ropen ( string $name ) : resource"
    ],
    "dbplus_rquery": [
        "dbplus_rquery ( string $query , string $dbpath = ? ) : resource"
    ],
    "dbplus_rrename": [
        "dbplus_rrename ( resource $relation , string $name ) : int"
    ],
    "dbplus_rsecindex": [
        "dbplus_rsecindex ( resource $relation , mixed $domlist , int $type ) : mixed"
    ],
    "dbplus_runlink": [
        "dbplus_runlink ( resource $relation ) : int"
    ],
    "dbplus_rzap": [
        "dbplus_rzap ( resource $relation ) : int"
    ],
    "dbplus_savepos": [
        "dbplus_savepos ( resource $relation ) : int"
    ],
    "dbplus_setindex": [
        "dbplus_setindex ( resource $relation , string $idx_name ) : int"
    ],
    "dbplus_setindexbynumber": [
        "dbplus_setindexbynumber ( resource $relation , int $idx_number ) : int"
    ],
    "dbplus_sql": [
        "dbplus_sql ( string $query , string $server = ? , string $dbpath = ? ) : resource"
    ],
    "dbplus_tcl": [
        "dbplus_tcl ( int $sid , string $script ) : string"
    ],
    "dbplus_tremove": [
        "dbplus_tremove ( resource $relation , array $tuple , array &$current = ? ) : int"
    ],
    "dbplus_undo": [
        "dbplus_undo ( resource $relation ) : int"
    ],
    "dbplus_undoprepare": [
        "dbplus_undoprepare ( resource $relation ) : int"
    ],
    "dbplus_unlockrel": [
        "dbplus_unlockrel ( resource $relation ) : int"
    ],
    "dbplus_unselect": [
        "dbplus_unselect ( resource $relation ) : int"
    ],
    "dbplus_update": [
        "dbplus_update ( resource $relation , array $old , array $new ) : int"
    ],
    "dbplus_xlockrel": [
        "dbplus_xlockrel ( resource $relation ) : int"
    ],
    "dbplus_xunlockrel": [
        "dbplus_xunlockrel ( resource $relation ) : int"
    ],
    "dcgettext": [
        "dcgettext ( string $domain , string $message , int $category ) : string"
    ],
    "dcngettext": [
        "dcngettext ( string $domain , string $singular , string $plural , int $count , int $category ) : string"
    ],
    "debug_backtrace": [
        "debug_backtrace ( int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT , int $limit = 0 ) : array"
    ],
    "debug_print_backtrace": [
        "debug_print_backtrace ( int $options = 0 , int $limit = 0 ) : void"
    ],
    "debug_zval_dump": [
        "debug_zval_dump ( mixed $value , mixed ...$values ) : void"
    ],
    "decbin": [
        "decbin ( int $num ) : string"
    ],
    "dechex": [
        "dechex ( int $num ) : string"
    ],
    "decoct": [
        "decoct ( int $num ) : string"
    ],
    "define": [
        "define ( string $name , mixed $value , bool $case_insensitive = false ) : bool"
    ],
    "defined": [
        "defined ( string $name ) : bool"
    ],
    "deflate_add": [
        "deflate_add ( DeflateContext $context , string $data , int $flush_mode = ZLIB_SYNC_FLUSH ) : string|false"
    ],
    "deflate_init": [
        "deflate_init ( int $encoding , array $options = [] ) : DeflateContext|false"
    ],
    "deg2rad": [
        "deg2rad ( float $num ) : float"
    ],
    "dgettext": [
        "dgettext ( string $domain , string $message ) : string"
    ],
    "dio_close": [
        "dio_close ( resource $fd ) : void"
    ],
    "dio_fcntl": [
        "dio_fcntl ( resource $fd , int $cmd , mixed $args = ? ) : mixed"
    ],
    "dio_open": [
        "dio_open ( string $filename , int $flags , int $mode = 0 ) : resource"
    ],
    "dio_read": [
        "dio_read ( resource $fd , int $len = 1024 ) : string"
    ],
    "dio_seek": [
        "dio_seek ( resource $fd , int $pos , int $whence = SEEK_SET ) : int"
    ],
    "dio_stat": [
        "dio_stat ( resource $fd ) : array"
    ],
    "dio_tcsetattr": [
        "dio_tcsetattr ( resource $fd , array $options ) : bool"
    ],
    "dio_truncate": [
        "dio_truncate ( resource $fd , int $offset ) : bool"
    ],
    "dio_write": [
        "dio_write ( resource $fd , string $data , int $len = 0 ) : int"
    ],
    "dir": [
        "dir ( string $directory , resource $context = ? ) : Directory"
    ],
    "DirectoryIterator": [
        "public DirectoryIterator::__construct ( string $path )"
    ],
    "dirname": [
        "dirname ( string $path , int $levels = 1 ) : string"
    ],
    "disk_free_space": [
        "disk_free_space ( string $directory ) : float|false"
    ],
    "disk_total_space": [
        "disk_total_space ( string $directory ) : float|false"
    ],
    "dl": [
        "dl ( string $extension_filename ) : bool"
    ],
    "dngettext": [
        "dngettext ( string $domain , string $singular , string $plural , int $count ) : string"
    ],
    "dns_get_record": [
        "dns_get_record ( string $hostname , int $type = DNS_ANY , array &$authoritative_name_servers = null , array &$additional_records = null , bool $raw = false ) : array|false"
    ],
    "dom_import_simplexml": [
        "dom_import_simplexml ( object $node ) : DOMElement|null"
    ],
    "DOMAttr": [
        "public DOMAttr::__construct ( string $name , string $value = \"\" )"
    ],
    "DOMCdataSection": [
        "public DOMCdataSection::__construct ( string $data )"
    ],
    "DOMComment": [
        "public DOMComment::__construct ( string $data = \"\" )"
    ],
    "DOMDocument": [
        "public DOMDocument::__construct ( string $version = \"1.0\" , string $encoding = \"\" )"
    ],
    "DOMElement": [
        "public DOMElement::__construct ( string $qualifiedName , string|null $value = null , string $namespace = \"\" )"
    ],
    "DOMEntityReference": [
        "public DOMEntityReference::__construct ( string $name )"
    ],
    "DOMImplementation": [
        "DOMImplementation::__construct ( )"
    ],
    "DOMProcessingInstruction": [
        "public DOMProcessingInstruction::__construct ( string $name , string $value = \"\" )"
    ],
    "DOMText": [
        "public DOMText::__construct ( string $data = \"\" )"
    ],
    "DOMXPath": [
        "public DOMXPath::__construct ( DOMDocument $document , bool $registerNodeNS = true )"
    ],
    "dotnet": [
        "public dotnet::__construct ( string $assembly_name , string $datatype_name , int $codepage = CP_ACP )"
    ],
    "each": [
        "each ( array|object &$array ) : array"
    ],
    "easter_date": [
        "easter_date ( int|null $year = null , int $mode = CAL_EASTER_DEFAULT ) : int"
    ],
    "easter_days": [
        "easter_days ( int|null $year = null , int $mode = CAL_EASTER_DEFAULT ) : int"
    ],
    "echo": [
        "echo ( string $arg , string ...$args ) : void"
    ],
    "eio_busy": [
        "eio_busy ( int $delay , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_cancel": [
        "eio_cancel ( resource $req ) : void"
    ],
    "eio_chmod": [
        "eio_chmod ( string $path , int $mode , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_chown": [
        "eio_chown ( string $path , int $uid , int $gid = -1 , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_close": [
        "eio_close ( mixed $fd , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_custom": [
        "eio_custom ( callable $execute , int $pri , callable $callback , mixed $data = NULL ) : resource"
    ],
    "eio_dup2": [
        "eio_dup2 ( mixed $fd , mixed $fd2 , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_event_loop": [
        "eio_event_loop ( ) : bool"
    ],
    "eio_fallocate": [
        "eio_fallocate ( mixed $fd , int $mode , int $offset , int $length , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_fchmod": [
        "eio_fchmod ( mixed $fd , int $mode , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_fchown": [
        "eio_fchown ( mixed $fd , int $uid , int $gid = -1 , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_fdatasync": [
        "eio_fdatasync ( mixed $fd , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_fstat": [
        "eio_fstat ( mixed $fd , int $pri , callable $callback , mixed $data = ? ) : resource"
    ],
    "eio_fstatvfs": [
        "eio_fstatvfs ( mixed $fd , int $pri , callable $callback , mixed $data = ? ) : resource"
    ],
    "eio_fsync": [
        "eio_fsync ( mixed $fd , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_ftruncate": [
        "eio_ftruncate ( mixed $fd , int $offset = 0 , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_futime": [
        "eio_futime ( mixed $fd , float $atime , float $mtime , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_get_event_stream": [
        "eio_get_event_stream ( ) : mixed"
    ],
    "eio_get_last_error": [
        "eio_get_last_error ( resource $req ) : string"
    ],
    "eio_grp": [
        "eio_grp ( callable $callback , string $data = NULL ) : resource"
    ],
    "eio_grp_add": [
        "eio_grp_add ( resource $grp , resource $req ) : void"
    ],
    "eio_grp_cancel": [
        "eio_grp_cancel ( resource $grp ) : void"
    ],
    "eio_grp_limit": [
        "eio_grp_limit ( resource $grp , int $limit ) : void"
    ],
    "eio_init": [
        "eio_init ( ) : void"
    ],
    "eio_link": [
        "eio_link ( string $path , string $new_path , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_lstat": [
        "eio_lstat ( string $path , int $pri , callable $callback , mixed $data = NULL ) : resource"
    ],
    "eio_mkdir": [
        "eio_mkdir ( string $path , int $mode , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_mknod": [
        "eio_mknod ( string $path , int $mode , int $dev , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_nop": [
        "eio_nop ( int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_npending": [
        "eio_npending ( ) : int"
    ],
    "eio_nready": [
        "eio_nready ( ) : int"
    ],
    "eio_nreqs": [
        "eio_nreqs ( ) : int"
    ],
    "eio_nthreads": [
        "eio_nthreads ( ) : int"
    ],
    "eio_open": [
        "eio_open ( string $path , int $flags , int $mode , int $pri , callable $callback , mixed $data = NULL ) : resource"
    ],
    "eio_poll": [
        "eio_poll ( ) : int"
    ],
    "eio_read": [
        "eio_read ( mixed $fd , int $length , int $offset , int $pri , callable $callback , mixed $data = NULL ) : resource"
    ],
    "eio_readahead": [
        "eio_readahead ( mixed $fd , int $offset , int $length , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_readdir": [
        "eio_readdir ( string $path , int $flags , int $pri , callable $callback , string $data = NULL ) : resource"
    ],
    "eio_readlink": [
        "eio_readlink ( string $path , int $pri , callable $callback , string $data = NULL ) : resource"
    ],
    "eio_realpath": [
        "eio_realpath ( string $path , int $pri , callable $callback , string $data = NULL ) : resource"
    ],
    "eio_rename": [
        "eio_rename ( string $path , string $new_path , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_rmdir": [
        "eio_rmdir ( string $path , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_seek": [
        "eio_seek ( mixed $fd , int $offset , int $whence , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_sendfile": [
        "eio_sendfile ( mixed $out_fd , mixed $in_fd , int $offset , int $length , int $pri = ? , callable $callback = ? , string $data = ? ) : resource"
    ],
    "eio_set_max_idle": [
        "eio_set_max_idle ( int $nthreads ) : void"
    ],
    "eio_set_max_parallel": [
        "eio_set_max_parallel ( int $nthreads ) : void"
    ],
    "eio_set_max_poll_reqs": [
        "eio_set_max_poll_reqs ( int $nreqs ) : void"
    ],
    "eio_set_max_poll_time": [
        "eio_set_max_poll_time ( float $nseconds ) : void"
    ],
    "eio_set_min_parallel": [
        "eio_set_min_parallel ( string $nthreads ) : void"
    ],
    "eio_stat": [
        "eio_stat ( string $path , int $pri , callable $callback , mixed $data = NULL ) : resource"
    ],
    "eio_statvfs": [
        "eio_statvfs ( string $path , int $pri , callable $callback , mixed $data = ? ) : resource"
    ],
    "eio_symlink": [
        "eio_symlink ( string $path , string $new_path , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_sync": [
        "eio_sync ( int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_sync_file_range": [
        "eio_sync_file_range ( mixed $fd , int $offset , int $nbytes , int $flags , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_syncfs": [
        "eio_syncfs ( mixed $fd , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_truncate": [
        "eio_truncate ( string $path , int $offset = 0 , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_unlink": [
        "eio_unlink ( string $path , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_utime": [
        "eio_utime ( string $path , float $atime , float $mtime , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_write": [
        "eio_write ( mixed $fd , string $str , int $length = 0 , int $offset = 0 , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "empty": [
        "empty ( mixed $var ) : bool"
    ],
    "enchant_broker_describe": [
        "enchant_broker_describe ( EnchantBroker $broker ) : array"
    ],
    "enchant_broker_dict_exists": [
        "enchant_broker_dict_exists ( EnchantBroker $broker , string $tag ) : bool"
    ],
    "enchant_broker_free": [
        "enchant_broker_free ( EnchantBroker $broker ) : bool"
    ],
    "enchant_broker_free_dict": [
        "enchant_broker_free_dict ( EnchantDictionary $dictionary ) : bool"
    ],
    "enchant_broker_get_dict_path": [
        "enchant_broker_get_dict_path ( EnchantBroker $broker , int $type ) : string|false"
    ],
    "enchant_broker_get_error": [
        "enchant_broker_get_error ( EnchantBroker $broker ) : string|false"
    ],
    "enchant_broker_init": [
        "enchant_broker_init ( ) : EnchantBroker|false"
    ],
    "enchant_broker_list_dicts": [
        "enchant_broker_list_dicts ( EnchantBroker $broker ) : array"
    ],
    "enchant_broker_request_dict": [
        "enchant_broker_request_dict ( EnchantBroker $broker , string $tag ) : EnchantDictionary|false"
    ],
    "enchant_broker_request_pwl_dict": [
        "enchant_broker_request_pwl_dict ( EnchantBroker $broker , string $filename ) : EnchantDictionary|false"
    ],
    "enchant_broker_set_dict_path": [
        "enchant_broker_set_dict_path ( EnchantBroker $broker , int $type , string $path ) : bool"
    ],
    "enchant_broker_set_ordering": [
        "enchant_broker_set_ordering ( EnchantBroker $broker , string $tag , string $ordering ) : bool"
    ],
    "enchant_dict_add": [
        "enchant_dict_add ( EnchantDictionary $dictionary , string $word ) : void"
    ],
    "enchant_dict_add_to_session": [
        "enchant_dict_add_to_session ( EnchantDictionary $dictionary , string $word ) : void"
    ],
    "enchant_dict_check": [
        "enchant_dict_check ( EnchantDictionary $dictionary , string $word ) : bool"
    ],
    "enchant_dict_describe": [
        "enchant_dict_describe ( EnchantDictionary $dictionary ) : array"
    ],
    "enchant_dict_get_error": [
        "enchant_dict_get_error ( EnchantDictionary $dictionary ) : string|false"
    ],
    "enchant_dict_is_added": [
        "enchant_dict_is_added ( EnchantDictionary $dictionary , string $word ) : bool"
    ],
    "enchant_dict_quick_check": [
        "enchant_dict_quick_check ( EnchantDictionary $dictionary , string $word , array &$suggestions = null ) : bool"
    ],
    "enchant_dict_store_replacement": [
        "enchant_dict_store_replacement ( EnchantDictionary $dictionary , string $misspelled , string $correct ) : void"
    ],
    "enchant_dict_suggest": [
        "enchant_dict_suggest ( EnchantDictionary $dictionary , string $word ) : array"
    ],
    "end": [
        "end ( array|object &$array ) : mixed"
    ],
    "ereg": [
        "ereg ( string $pattern , string $string , array &$regs = ? ) : int"
    ],
    "ereg_replace": [
        "ereg_replace ( string $pattern , string $replacement , string $string ) : string"
    ],
    "eregi": [
        "eregi ( string $pattern , string $string , array &$regs = ? ) : int"
    ],
    "eregi_replace": [
        "eregi_replace ( string $pattern , string $replacement , string $string ) : string"
    ],
    "Error": [
        "public Error::__construct ( string $message = \"\" , int $code = 0 , Throwable $previous = null )"
    ],
    "error_clear_last": [
        "error_clear_last ( ) : void"
    ],
    "error_get_last": [
        "error_get_last ( ) : array|null"
    ],
    "error_log": [
        "error_log ( string $message , int $message_type = 0 , string $destination = ? , string $extra_headers = ? ) : bool"
    ],
    "error_reporting": [
        "error_reporting ( int $level = ? ) : int"
    ],
    "ErrorException": [
        "public ErrorException::__construct ( string $message = \"\" , int $code = 0 , int $severity = E_ERROR , string $filename = __FILE__ , int $lineno = __LINE__ , Exception $previous = null )"
    ],
    "escapeshellarg": [
        "escapeshellarg ( string $arg ) : string"
    ],
    "escapeshellcmd": [
        "escapeshellcmd ( string $command ) : string"
    ],
    "eval": [
        "eval ( string $code ) : mixed"
    ],
    "EvCheck": [
        "public EvCheck::__construct (  callable $callback  ,  mixed $data  = ? ,  int $priority  = ? )"
    ],
    "EvChild": [
        "public EvChild::__construct (  int $pid  ,  bool $trace  ,  callable $callback  ,  mixed $data  = null  ,  int $priority  = 0  )"
    ],
    "EvEmbed": [
        "public EvEmbed::__construct (  object $other  ,  callable $callback  = ? ,  mixed $data  = ? ,  int $priority  = ? )"
    ],
    "Event": [
        "public Event::__construct (  EventBase $base  ,  mixed $fd  ,  int $what  ,  callable $cb  ,  mixed $arg  = NULL  )"
    ],
    "EventBase": [
        "public EventBase::__construct (  EventConfig $cfg  = ? )"
    ],
    "EventBuffer": [
        "public EventBuffer::__construct ( )"
    ],
    "EventBufferEvent": [
        "public EventBufferEvent::__construct (  EventBase $base  ,  mixed $socket  = null  ,  int $options  = 0  ,  callable $readcb  = null  ,  callable $writecb  = null  ,  callable $eventcb  = null  )"
    ],
    "EventConfig": [
        "public EventConfig::__construct ( )"
    ],
    "EventDnsBase": [
        "public EventDnsBase::__construct (  EventBase $base  ,  bool $initialize  )"
    ],
    "EventHttp": [
        "public EventHttp::__construct (  EventBase $base  ,  EventSslContext $ctx  = null  )"
    ],
    "EventHttpConnection": [
        "public EventHttpConnection::__construct (  EventBase $base  ,  EventDnsBase $dns_base  ,  string $address  ,  int $port  ,  EventSslContext $ctx  = null  )"
    ],
    "EventHttpRequest": [
        "public EventHttpRequest::__construct (  callable $callback  ,  mixed $data  = null  )"
    ],
    "EventListener": [
        "public EventListener::__construct (  EventBase $base  ,  callable $cb  ,  mixed $data  ,  int $flags  ,  int $backlog  ,  mixed $target  )"
    ],
    "EventSslContext": [
        "public EventSslContext::__construct (  string $method  ,  string $options  )"
    ],
    "EventUtil": [
        "abstract public EventUtil::__construct ( )"
    ],
    "EvFork": [
        "public EvFork::__construct (  callable $callback  ,  mixed $data  = null  ,  int $priority  = 0  )"
    ],
    "EvIdle": [
        "public EvIdle::__construct (  callable $callback  ,  mixed $data  = ? ,  int $priority  = ? )"
    ],
    "EvIo": [
        "public EvIo::__construct (  mixed $fd  ,  int $events  ,  callable $callback  ,  mixed $data  = ? ,  int $priority  = ? )"
    ],
    "EvLoop": [
        "public EvLoop::__construct (  int $flags  = ? ,  mixed $data  = NULL  ,  float $io_interval  = 0.0  ,  float $timeout_interval  = 0.0  )"
    ],
    "EvPeriodic": [
        "public EvPeriodic::__construct (  float $offset  ,  string $interval  ,  callable $reschedule_cb  ,  callable $callback  ,  mixed $data  = null  ,  int $priority  = 0  )"
    ],
    "EvPrepare": [
        "public EvPrepare::__construct (  string $callback  ,  string $data  = ? ,  string $priority  = ? )"
    ],
    "EvSignal": [
        "public EvSignal::__construct (  int $signum  ,  callable $callback  ,  mixed $data  = null  ,  int $priority  = 0  )"
    ],
    "EvStat": [
        "public EvStat::__construct (  string $path  ,  float $interval  ,  callable $callback  ,  mixed $data  = null  ,  int $priority  = 0  )"
    ],
    "EvTimer": [
        "public EvTimer::__construct (  float $after  ,  float $repeat  ,  callable $callback  ,  mixed $data  = null  ,  int $priority  = 0  )"
    ],
    "EvWatcher": [
        "abstract public EvWatcher::__construct ( )"
    ],
    "Exception": [
        "public Exception::__construct ( string $message = \"\" , int $code = 0 , Throwable $previous = null )"
    ],
    "exec": [
        "exec ( string $command , array &$output = null , int &$result_code = null ) : string|false"
    ],
    "exif_imagetype": [
        "exif_imagetype ( string $filename ) : int|false"
    ],
    "exif_read_data": [
        "exif_read_data ( resource|string $file , string|null $required_sections = null , bool $as_arrays = false , bool $read_thumbnail = false ) : array|false"
    ],
    "exif_tagname": [
        "exif_tagname ( int $index ) : string|false"
    ],
    "exif_thumbnail": [
        "exif_thumbnail ( resource|string $file , int &$width = null , int &$height = null , int &$image_type = null ) : string|false"
    ],
    "exit": [
        "exit ( string $status = ? ) : void",
        "exit ( int $status ) : void"
    ],
    "exp": [
        "exp ( float $num ) : float"
    ],
    "expect_expectl": [
        "expect_expectl ( resource $expect , array $cases , array &$match = ? ) : int"
    ],
    "expect_popen": [
        "expect_popen ( string $command ) : resource"
    ],
    "explode": [
        "explode ( string $separator , string $string , int $limit = PHP_INT_MAX ) : array"
    ],
    "expm1": [
        "expm1 ( float $num ) : float"
    ],
    "extension_loaded": [
        "extension_loaded ( string $name ) : bool"
    ],
    "extract": [
        "extract ( array &$array , int $flags = EXTR_OVERWRITE , string $prefix = \"\" ) : int"
    ],
    "ezmlm_hash": [
        "ezmlm_hash ( string $addr ) : int"
    ],
    "fann_cascadetrain_on_data": [
        "fann_cascadetrain_on_data ( resource $ann , resource $data , int $max_neurons , int $neurons_between_reports , float $desired_error ) : bool"
    ],
    "fann_cascadetrain_on_file": [
        "fann_cascadetrain_on_file ( resource $ann , string $filename , int $max_neurons , int $neurons_between_reports , float $desired_error ) : bool"
    ],
    "fann_clear_scaling_params": [
        "fann_clear_scaling_params ( resource $ann ) : bool"
    ],
    "fann_copy": [
        "fann_copy ( resource $ann ) : resource"
    ],
    "fann_create_from_file": [
        "fann_create_from_file ( string $configuration_file ) : resource"
    ],
    "fann_create_shortcut": [
        "fann_create_shortcut ( int $num_layers , int $num_neurons1 , int $num_neurons2 , int ...$num_neuronsN ) : resource"
    ],
    "fann_create_shortcut_array": [
        "fann_create_shortcut_array ( int $num_layers , array $layers ) : resource"
    ],
    "fann_create_sparse": [
        "fann_create_sparse ( float $connection_rate , int $num_layers , int $num_neurons1 , int $num_neurons2 , int ...$num_neuronsN ) : resource"
    ],
    "fann_create_sparse_array": [
        "fann_create_sparse_array ( float $connection_rate , int $num_layers , array $layers ) : resource"
    ],
    "fann_create_standard": [
        "fann_create_standard ( int $num_layers , int $num_neurons1 , int $num_neurons2 , int ...$num_neuronsN ) : resource"
    ],
    "fann_create_standard_array": [
        "fann_create_standard_array ( int $num_layers , array $layers ) : resource"
    ],
    "fann_create_train": [
        "fann_create_train ( int $num_data , int $num_input , int $num_output ) : resource"
    ],
    "fann_create_train_from_callback": [
        "fann_create_train_from_callback ( int $num_data , int $num_input , int $num_output , callable $user_function ) : resource"
    ],
    "fann_descale_input": [
        "fann_descale_input ( resource $ann , array $input_vector ) : bool"
    ],
    "fann_descale_output": [
        "fann_descale_output ( resource $ann , array $output_vector ) : bool"
    ],
    "fann_descale_train": [
        "fann_descale_train ( resource $ann , resource $train_data ) : bool"
    ],
    "fann_destroy": [
        "fann_destroy ( resource $ann ) : bool"
    ],
    "fann_destroy_train": [
        "fann_destroy_train ( resource $train_data ) : bool"
    ],
    "fann_duplicate_train_data": [
        "fann_duplicate_train_data ( resource $data ) : resource"
    ],
    "fann_get_activation_function": [
        "fann_get_activation_function ( resource $ann , int $layer , int $neuron ) : int"
    ],
    "fann_get_activation_steepness": [
        "fann_get_activation_steepness ( resource $ann , int $layer , int $neuron ) : float"
    ],
    "fann_get_bias_array": [
        "fann_get_bias_array ( resource $ann ) : array"
    ],
    "fann_get_bit_fail": [
        "fann_get_bit_fail ( resource $ann ) : int"
    ],
    "fann_get_bit_fail_limit": [
        "fann_get_bit_fail_limit ( resource $ann ) : float"
    ],
    "fann_get_cascade_activation_functions": [
        "fann_get_cascade_activation_functions ( resource $ann ) : array"
    ],
    "fann_get_cascade_activation_functions_count": [
        "fann_get_cascade_activation_functions_count ( resource $ann ) : int"
    ],
    "fann_get_cascade_activation_steepnesses": [
        "fann_get_cascade_activation_steepnesses ( resource $ann ) : array"
    ],
    "fann_get_cascade_activation_steepnesses_count": [
        "fann_get_cascade_activation_steepnesses_count ( resource $ann ) : int"
    ],
    "fann_get_cascade_candidate_change_fraction": [
        "fann_get_cascade_candidate_change_fraction ( resource $ann ) : float"
    ],
    "fann_get_cascade_candidate_limit": [
        "fann_get_cascade_candidate_limit ( resource $ann ) : float"
    ],
    "fann_get_cascade_candidate_stagnation_epochs": [
        "fann_get_cascade_candidate_stagnation_epochs ( resource $ann ) : int"
    ],
    "fann_get_cascade_max_cand_epochs": [
        "fann_get_cascade_max_cand_epochs ( resource $ann ) : int"
    ],
    "fann_get_cascade_max_out_epochs": [
        "fann_get_cascade_max_out_epochs ( resource $ann ) : int"
    ],
    "fann_get_cascade_min_cand_epochs": [
        "fann_get_cascade_min_cand_epochs ( resource $ann ) : int"
    ],
    "fann_get_cascade_min_out_epochs": [
        "fann_get_cascade_min_out_epochs ( resource $ann ) : int"
    ],
    "fann_get_cascade_num_candidate_groups": [
        "fann_get_cascade_num_candidate_groups ( resource $ann ) : int"
    ],
    "fann_get_cascade_num_candidates": [
        "fann_get_cascade_num_candidates ( resource $ann ) : int"
    ],
    "fann_get_cascade_output_change_fraction": [
        "fann_get_cascade_output_change_fraction ( resource $ann ) : float"
    ],
    "fann_get_cascade_output_stagnation_epochs": [
        "fann_get_cascade_output_stagnation_epochs ( resource $ann ) : int"
    ],
    "fann_get_cascade_weight_multiplier": [
        "fann_get_cascade_weight_multiplier ( resource $ann ) : float"
    ],
    "fann_get_connection_array": [
        "fann_get_connection_array ( resource $ann ) : array"
    ],
    "fann_get_connection_rate": [
        "fann_get_connection_rate ( resource $ann ) : float"
    ],
    "fann_get_errno": [
        "fann_get_errno ( resource $errdat ) : int"
    ],
    "fann_get_errstr": [
        "fann_get_errstr ( resource $errdat ) : string"
    ],
    "fann_get_layer_array": [
        "fann_get_layer_array ( resource $ann ) : array"
    ],
    "fann_get_learning_momentum": [
        "fann_get_learning_momentum ( resource $ann ) : float"
    ],
    "fann_get_learning_rate": [
        "fann_get_learning_rate ( resource $ann ) : float"
    ],
    "fann_get_MSE": [
        "fann_get_MSE ( resource $ann ) : float"
    ],
    "fann_get_network_type": [
        "fann_get_network_type ( resource $ann ) : int"
    ],
    "fann_get_num_input": [
        "fann_get_num_input ( resource $ann ) : int"
    ],
    "fann_get_num_layers": [
        "fann_get_num_layers ( resource $ann ) : int"
    ],
    "fann_get_num_output": [
        "fann_get_num_output ( resource $ann ) : int"
    ],
    "fann_get_quickprop_decay": [
        "fann_get_quickprop_decay ( resource $ann ) : float"
    ],
    "fann_get_quickprop_mu": [
        "fann_get_quickprop_mu ( resource $ann ) : float"
    ],
    "fann_get_rprop_decrease_factor": [
        "fann_get_rprop_decrease_factor ( resource $ann ) : float"
    ],
    "fann_get_rprop_delta_max": [
        "fann_get_rprop_delta_max ( resource $ann ) : float"
    ],
    "fann_get_rprop_delta_min": [
        "fann_get_rprop_delta_min ( resource $ann ) : float"
    ],
    "fann_get_rprop_delta_zero": [
        "fann_get_rprop_delta_zero ( resource $ann ) : int"
    ],
    "fann_get_rprop_increase_factor": [
        "fann_get_rprop_increase_factor ( resource $ann ) : float"
    ],
    "fann_get_sarprop_step_error_shift": [
        "fann_get_sarprop_step_error_shift ( resource $ann ) : float"
    ],
    "fann_get_sarprop_step_error_threshold_factor": [
        "fann_get_sarprop_step_error_threshold_factor ( resource $ann ) : float"
    ],
    "fann_get_sarprop_temperature": [
        "fann_get_sarprop_temperature ( resource $ann ) : float"
    ],
    "fann_get_sarprop_weight_decay_shift": [
        "fann_get_sarprop_weight_decay_shift ( resource $ann ) : float"
    ],
    "fann_get_total_connections": [
        "fann_get_total_connections ( resource $ann ) : int"
    ],
    "fann_get_total_neurons": [
        "fann_get_total_neurons ( resource $ann ) : int"
    ],
    "fann_get_train_error_function": [
        "fann_get_train_error_function ( resource $ann ) : int"
    ],
    "fann_get_train_stop_function": [
        "fann_get_train_stop_function ( resource $ann ) : int"
    ],
    "fann_get_training_algorithm": [
        "fann_get_training_algorithm ( resource $ann ) : int"
    ],
    "fann_init_weights": [
        "fann_init_weights ( resource $ann , resource $train_data ) : bool"
    ],
    "fann_length_train_data": [
        "fann_length_train_data ( resource $data ) : int"
    ],
    "fann_merge_train_data": [
        "fann_merge_train_data ( resource $data1 , resource $data2 ) : resource"
    ],
    "fann_num_input_train_data": [
        "fann_num_input_train_data ( resource $data ) : int"
    ],
    "fann_num_output_train_data": [
        "fann_num_output_train_data ( resource $data ) : int"
    ],
    "fann_print_error": [
        "fann_print_error ( resource $errdat ) : void"
    ],
    "fann_randomize_weights": [
        "fann_randomize_weights ( resource $ann , float $min_weight , float $max_weight ) : bool"
    ],
    "fann_read_train_from_file": [
        "fann_read_train_from_file ( string $filename ) : resource"
    ],
    "fann_reset_errno": [
        "fann_reset_errno ( resource $errdat ) : void"
    ],
    "fann_reset_errstr": [
        "fann_reset_errstr ( resource $errdat ) : void"
    ],
    "fann_reset_MSE": [
        "fann_reset_MSE ( string $ann ) : bool"
    ],
    "fann_run": [
        "fann_run ( resource $ann , array $input ) : array"
    ],
    "fann_save": [
        "fann_save ( resource $ann , string $configuration_file ) : bool"
    ],
    "fann_save_train": [
        "fann_save_train ( resource $data , string $file_name ) : bool"
    ],
    "fann_scale_input": [
        "fann_scale_input ( resource $ann , array $input_vector ) : bool"
    ],
    "fann_scale_input_train_data": [
        "fann_scale_input_train_data ( resource $train_data , float $new_min , float $new_max ) : bool"
    ],
    "fann_scale_output": [
        "fann_scale_output ( resource $ann , array $output_vector ) : bool"
    ],
    "fann_scale_output_train_data": [
        "fann_scale_output_train_data ( resource $train_data , float $new_min , float $new_max ) : bool"
    ],
    "fann_scale_train": [
        "fann_scale_train ( resource $ann , resource $train_data ) : bool"
    ],
    "fann_scale_train_data": [
        "fann_scale_train_data ( resource $train_data , float $new_min , float $new_max ) : bool"
    ],
    "fann_set_activation_function": [
        "fann_set_activation_function ( resource $ann , int $activation_function , int $layer , int $neuron ) : bool"
    ],
    "fann_set_activation_function_hidden": [
        "fann_set_activation_function_hidden ( resource $ann , int $activation_function ) : bool"
    ],
    "fann_set_activation_function_layer": [
        "fann_set_activation_function_layer ( resource $ann , int $activation_function , int $layer ) : bool"
    ],
    "fann_set_activation_function_output": [
        "fann_set_activation_function_output ( resource $ann , int $activation_function ) : bool"
    ],
    "fann_set_activation_steepness": [
        "fann_set_activation_steepness ( resource $ann , float $activation_steepness , int $layer , int $neuron ) : bool"
    ],
    "fann_set_activation_steepness_hidden": [
        "fann_set_activation_steepness_hidden ( resource $ann , float $activation_steepness ) : bool"
    ],
    "fann_set_activation_steepness_layer": [
        "fann_set_activation_steepness_layer ( resource $ann , float $activation_steepness , int $layer ) : bool"
    ],
    "fann_set_activation_steepness_output": [
        "fann_set_activation_steepness_output ( resource $ann , float $activation_steepness ) : bool"
    ],
    "fann_set_bit_fail_limit": [
        "fann_set_bit_fail_limit ( resource $ann , float $bit_fail_limit ) : bool"
    ],
    "fann_set_callback": [
        "fann_set_callback ( resource $ann , callable $callback ) : bool"
    ],
    "fann_set_cascade_activation_functions": [
        "fann_set_cascade_activation_functions ( resource $ann , array $cascade_activation_functions ) : bool"
    ],
    "fann_set_cascade_activation_steepnesses": [
        "fann_set_cascade_activation_steepnesses ( resource $ann , array $cascade_activation_steepnesses_count ) : bool"
    ],
    "fann_set_cascade_candidate_change_fraction": [
        "fann_set_cascade_candidate_change_fraction ( resource $ann , float $cascade_candidate_change_fraction ) : bool"
    ],
    "fann_set_cascade_candidate_limit": [
        "fann_set_cascade_candidate_limit ( resource $ann , float $cascade_candidate_limit ) : bool"
    ],
    "fann_set_cascade_candidate_stagnation_epochs": [
        "fann_set_cascade_candidate_stagnation_epochs ( resource $ann , int $cascade_candidate_stagnation_epochs ) : bool"
    ],
    "fann_set_cascade_max_cand_epochs": [
        "fann_set_cascade_max_cand_epochs ( resource $ann , int $cascade_max_cand_epochs ) : bool"
    ],
    "fann_set_cascade_max_out_epochs": [
        "fann_set_cascade_max_out_epochs ( resource $ann , int $cascade_max_out_epochs ) : bool"
    ],
    "fann_set_cascade_min_cand_epochs": [
        "fann_set_cascade_min_cand_epochs ( resource $ann , int $cascade_min_cand_epochs ) : bool"
    ],
    "fann_set_cascade_min_out_epochs": [
        "fann_set_cascade_min_out_epochs ( resource $ann , int $cascade_min_out_epochs ) : bool"
    ],
    "fann_set_cascade_num_candidate_groups": [
        "fann_set_cascade_num_candidate_groups ( resource $ann , int $cascade_num_candidate_groups ) : bool"
    ],
    "fann_set_cascade_output_change_fraction": [
        "fann_set_cascade_output_change_fraction ( resource $ann , float $cascade_output_change_fraction ) : bool"
    ],
    "fann_set_cascade_output_stagnation_epochs": [
        "fann_set_cascade_output_stagnation_epochs ( resource $ann , int $cascade_output_stagnation_epochs ) : bool"
    ],
    "fann_set_cascade_weight_multiplier": [
        "fann_set_cascade_weight_multiplier ( resource $ann , float $cascade_weight_multiplier ) : bool"
    ],
    "fann_set_error_log": [
        "fann_set_error_log ( resource $errdat , string $log_file ) : void"
    ],
    "fann_set_input_scaling_params": [
        "fann_set_input_scaling_params ( resource $ann , resource $train_data , float $new_input_min , float $new_input_max ) : bool"
    ],
    "fann_set_learning_momentum": [
        "fann_set_learning_momentum ( resource $ann , float $learning_momentum ) : bool"
    ],
    "fann_set_learning_rate": [
        "fann_set_learning_rate ( resource $ann , float $learning_rate ) : bool"
    ],
    "fann_set_output_scaling_params": [
        "fann_set_output_scaling_params ( resource $ann , resource $train_data , float $new_output_min , float $new_output_max ) : bool"
    ],
    "fann_set_quickprop_decay": [
        "fann_set_quickprop_decay ( resource $ann , float $quickprop_decay ) : bool"
    ],
    "fann_set_quickprop_mu": [
        "fann_set_quickprop_mu ( resource $ann , float $quickprop_mu ) : bool"
    ],
    "fann_set_rprop_decrease_factor": [
        "fann_set_rprop_decrease_factor ( resource $ann , float $rprop_decrease_factor ) : bool"
    ],
    "fann_set_rprop_delta_max": [
        "fann_set_rprop_delta_max ( resource $ann , float $rprop_delta_max ) : bool"
    ],
    "fann_set_rprop_delta_min": [
        "fann_set_rprop_delta_min ( resource $ann , float $rprop_delta_min ) : bool"
    ],
    "fann_set_rprop_delta_zero": [
        "fann_set_rprop_delta_zero ( resource $ann , float $rprop_delta_zero ) : bool"
    ],
    "fann_set_rprop_increase_factor": [
        "fann_set_rprop_increase_factor ( resource $ann , float $rprop_increase_factor ) : bool"
    ],
    "fann_set_sarprop_step_error_shift": [
        "fann_set_sarprop_step_error_shift ( resource $ann , float $sarprop_step_error_shift ) : bool"
    ],
    "fann_set_sarprop_step_error_threshold_factor": [
        "fann_set_sarprop_step_error_threshold_factor ( resource $ann , float $sarprop_step_error_threshold_factor ) : bool"
    ],
    "fann_set_sarprop_temperature": [
        "fann_set_sarprop_temperature ( resource $ann , float $sarprop_temperature ) : bool"
    ],
    "fann_set_sarprop_weight_decay_shift": [
        "fann_set_sarprop_weight_decay_shift ( resource $ann , float $sarprop_weight_decay_shift ) : bool"
    ],
    "fann_set_scaling_params": [
        "fann_set_scaling_params ( resource $ann , resource $train_data , float $new_input_min , float $new_input_max , float $new_output_min , float $new_output_max ) : bool"
    ],
    "fann_set_train_error_function": [
        "fann_set_train_error_function ( resource $ann , int $error_function ) : bool"
    ],
    "fann_set_train_stop_function": [
        "fann_set_train_stop_function ( resource $ann , int $stop_function ) : bool"
    ],
    "fann_set_training_algorithm": [
        "fann_set_training_algorithm ( resource $ann , int $training_algorithm ) : bool"
    ],
    "fann_set_weight": [
        "fann_set_weight ( resource $ann , int $from_neuron , int $to_neuron , float $weight ) : bool"
    ],
    "fann_set_weight_array": [
        "fann_set_weight_array ( resource $ann , array $connections ) : bool"
    ],
    "fann_shuffle_train_data": [
        "fann_shuffle_train_data ( resource $train_data ) : bool"
    ],
    "fann_subset_train_data": [
        "fann_subset_train_data ( resource $data , int $pos , int $length ) : resource"
    ],
    "fann_test": [
        "fann_test ( resource $ann , array $input , array $desired_output ) : array"
    ],
    "fann_test_data": [
        "fann_test_data ( resource $ann , resource $data ) : float"
    ],
    "fann_train": [
        "fann_train ( resource $ann , array $input , array $desired_output ) : bool"
    ],
    "fann_train_epoch": [
        "fann_train_epoch ( resource $ann , resource $data ) : float"
    ],
    "fann_train_on_data": [
        "fann_train_on_data ( resource $ann , resource $data , int $max_epochs , int $epochs_between_reports , float $desired_error ) : bool"
    ],
    "fann_train_on_file": [
        "fann_train_on_file ( resource $ann , string $filename , int $max_epochs , int $epochs_between_reports , float $desired_error ) : bool"
    ],
    "FANNConnection": [
        "public FANNConnection::__construct ( int $from_neuron , int $to_neuron , float $weight )"
    ],
    "fastcgi_finish_request": [
        "fastcgi_finish_request ( ) : bool"
    ],
    "fbird_blob_cancel": [
        "fbird_blob_cancel ( resource $blob_handle ) : bool"
    ],
    "fbsql_affected_rows": [
        "fbsql_affected_rows ( resource $link_identifier = ? ) : int"
    ],
    "fbsql_autocommit": [
        "fbsql_autocommit ( resource $link_identifier , bool $OnOff = ? ) : bool"
    ],
    "fbsql_blob_size": [
        "fbsql_blob_size ( string $blob_handle , resource $link_identifier = ? ) : int"
    ],
    "fbsql_change_user": [
        "fbsql_change_user ( string $user , string $password , string $database = ? , resource $link_identifier = ? ) : bool"
    ],
    "fbsql_clob_size": [
        "fbsql_clob_size ( string $clob_handle , resource $link_identifier = ? ) : int"
    ],
    "fbsql_close": [
        "fbsql_close ( resource $link_identifier = ? ) : bool"
    ],
    "fbsql_commit": [
        "fbsql_commit ( resource $link_identifier = ? ) : bool"
    ],
    "fbsql_connect": [
        "fbsql_connect ( string $hostname = ini_get(\"fbsql.default_host\") , string $username = ini_get(\"fbsql.default_user\") , string $password = ini_get(\"fbsql.default_password\") ) : resource"
    ],
    "fbsql_create_blob": [
        "fbsql_create_blob ( string $blob_data , resource $link_identifier = ? ) : string"
    ],
    "fbsql_create_clob": [
        "fbsql_create_clob ( string $clob_data , resource $link_identifier = ? ) : string"
    ],
    "fbsql_create_db": [
        "fbsql_create_db ( string $database_name , resource $link_identifier = ? , string $database_options = ? ) : bool"
    ],
    "fbsql_data_seek": [
        "fbsql_data_seek ( resource $result , int $row_number ) : bool"
    ],
    "fbsql_database": [
        "fbsql_database ( resource $link_identifier , string $database = ? ) : string"
    ],
    "fbsql_database_password": [
        "fbsql_database_password ( resource $link_identifier , string $database_password = ? ) : string"
    ],
    "fbsql_db_query": [
        "fbsql_db_query ( string $database , string $query , resource $link_identifier = ? ) : resource"
    ],
    "fbsql_db_status": [
        "fbsql_db_status ( string $database_name , resource $link_identifier = ? ) : int"
    ],
    "fbsql_drop_db": [
        "fbsql_drop_db ( string $database_name , resource $link_identifier = ? ) : bool"
    ],
    "fbsql_errno": [
        "fbsql_errno ( resource $link_identifier = ? ) : int"
    ],
    "fbsql_error": [
        "fbsql_error ( resource $link_identifier = ? ) : string"
    ],
    "fbsql_fetch_array": [
        "fbsql_fetch_array ( resource $result , int $result_type = ? ) : array"
    ],
    "fbsql_fetch_assoc": [
        "fbsql_fetch_assoc ( resource $result ) : array"
    ],
    "fbsql_fetch_field": [
        "fbsql_fetch_field ( resource $result , int $field_offset = ? ) : object"
    ],
    "fbsql_fetch_lengths": [
        "fbsql_fetch_lengths ( resource $result ) : array"
    ],
    "fbsql_fetch_object": [
        "fbsql_fetch_object ( resource $result ) : object"
    ],
    "fbsql_fetch_row": [
        "fbsql_fetch_row ( resource $result ) : array"
    ],
    "fbsql_field_flags": [
        "fbsql_field_flags ( resource $result , int $field_offset = ? ) : string"
    ],
    "fbsql_field_len": [
        "fbsql_field_len ( resource $result , int $field_offset = ? ) : int"
    ],
    "fbsql_field_name": [
        "fbsql_field_name ( resource $result , int $field_index = ? ) : string"
    ],
    "fbsql_field_seek": [
        "fbsql_field_seek ( resource $result , int $field_offset = ? ) : bool"
    ],
    "fbsql_field_table": [
        "fbsql_field_table ( resource $result , int $field_offset = ? ) : string"
    ],
    "fbsql_field_type": [
        "fbsql_field_type ( resource $result , int $field_offset = ? ) : string"
    ],
    "fbsql_free_result": [
        "fbsql_free_result ( resource $result ) : bool"
    ],
    "fbsql_get_autostart_info": [
        "fbsql_get_autostart_info ( resource $link_identifier = ? ) : array"
    ],
    "fbsql_hostname": [
        "fbsql_hostname ( resource $link_identifier , string $host_name = ? ) : string"
    ],
    "fbsql_insert_id": [
        "fbsql_insert_id ( resource $link_identifier = ? ) : int"
    ],
    "fbsql_list_dbs": [
        "fbsql_list_dbs ( resource $link_identifier = ? ) : resource"
    ],
    "fbsql_list_fields": [
        "fbsql_list_fields ( string $database_name , string $table_name , resource $link_identifier = ? ) : resource"
    ],
    "fbsql_list_tables": [
        "fbsql_list_tables ( string $database , resource $link_identifier = ? ) : resource"
    ],
    "fbsql_next_result": [
        "fbsql_next_result ( resource $result ) : bool"
    ],
    "fbsql_num_fields": [
        "fbsql_num_fields ( resource $result ) : int"
    ],
    "fbsql_num_rows": [
        "fbsql_num_rows ( resource $result ) : int"
    ],
    "fbsql_password": [
        "fbsql_password ( resource $link_identifier , string $password = ? ) : string"
    ],
    "fbsql_pconnect": [
        "fbsql_pconnect ( string $hostname = ini_get(\"fbsql.default_host\") , string $username = ini_get(\"fbsql.default_user\") , string $password = ini_get(\"fbsql.default_password\") ) : resource"
    ],
    "fbsql_query": [
        "fbsql_query ( string $query , resource $link_identifier = ? , int $batch_size = ? ) : resource"
    ],
    "fbsql_read_blob": [
        "fbsql_read_blob ( string $blob_handle , resource $link_identifier = ? ) : string"
    ],
    "fbsql_read_clob": [
        "fbsql_read_clob ( string $clob_handle , resource $link_identifier = ? ) : string"
    ],
    "fbsql_result": [
        "fbsql_result ( resource $result , int $row = ? , mixed $field = ? ) : mixed"
    ],
    "fbsql_rollback": [
        "fbsql_rollback ( resource $link_identifier = ? ) : bool"
    ],
    "fbsql_rows_fetched": [
        "fbsql_rows_fetched ( resource $result ) : int"
    ],
    "fbsql_select_db": [
        "fbsql_select_db ( string $database_name = ? , resource $link_identifier = ? ) : bool"
    ],
    "fbsql_set_characterset": [
        "fbsql_set_characterset ( resource $link_identifier , int $characterset , int $in_out_both = ? ) : void"
    ],
    "fbsql_set_lob_mode": [
        "fbsql_set_lob_mode ( resource $result , int $lob_mode ) : bool"
    ],
    "fbsql_set_password": [
        "fbsql_set_password ( resource $link_identifier , string $user , string $password , string $old_password ) : bool"
    ],
    "fbsql_set_transaction": [
        "fbsql_set_transaction ( resource $link_identifier , int $locking , int $isolation ) : void"
    ],
    "fbsql_start_db": [
        "fbsql_start_db ( string $database_name , resource $link_identifier = ? , string $database_options = ? ) : bool"
    ],
    "fbsql_stop_db": [
        "fbsql_stop_db ( string $database_name , resource $link_identifier = ? ) : bool"
    ],
    "fbsql_table_name": [
        "fbsql_table_name ( resource $result , int $index ) : string"
    ],
    "fbsql_username": [
        "fbsql_username ( resource $link_identifier , string $username = ? ) : string"
    ],
    "fbsql_warnings": [
        "fbsql_warnings ( bool $OnOff = ? ) : bool"
    ],
    "fclose": [
        "fclose ( resource $stream ) : bool"
    ],
    "fdf_add_doc_javascript": [
        "fdf_add_doc_javascript ( resource $fdf_document , string $script_name , string $script_code ) : bool"
    ],
    "fdf_add_template": [
        "fdf_add_template ( resource $fdf_document , int $newpage , string $filename , string $template , int $rename ) : bool"
    ],
    "fdf_close": [
        "fdf_close ( resource $fdf_document ) : void"
    ],
    "fdf_create": [
        "fdf_create ( ) : resource"
    ],
    "fdf_enum_values": [
        "fdf_enum_values ( resource $fdf_document , callable $function , mixed $userdata = ? ) : bool"
    ],
    "fdf_errno": [
        "fdf_errno ( ) : int"
    ],
    "fdf_error": [
        "fdf_error ( int $error_code = -1 ) : string"
    ],
    "fdf_get_ap": [
        "fdf_get_ap ( resource $fdf_document , string $field , int $face , string $filename ) : bool"
    ],
    "fdf_get_attachment": [
        "fdf_get_attachment ( resource $fdf_document , string $fieldname , string $savepath ) : array"
    ],
    "fdf_get_encoding": [
        "fdf_get_encoding ( resource $fdf_document ) : string"
    ],
    "fdf_get_file": [
        "fdf_get_file ( resource $fdf_document ) : string"
    ],
    "fdf_get_flags": [
        "fdf_get_flags ( resource $fdf_document , string $fieldname , int $whichflags ) : int"
    ],
    "fdf_get_opt": [
        "fdf_get_opt ( resource $fdf_document , string $fieldname , int $element = -1 ) : mixed"
    ],
    "fdf_get_status": [
        "fdf_get_status ( resource $fdf_document ) : string"
    ],
    "fdf_get_value": [
        "fdf_get_value ( resource $fdf_document , string $fieldname , int $which = -1 ) : mixed"
    ],
    "fdf_get_version": [
        "fdf_get_version ( resource $fdf_document = ? ) : string"
    ],
    "fdf_header": [
        "fdf_header ( ) : void"
    ],
    "fdf_next_field_name": [
        "fdf_next_field_name ( resource $fdf_document , string $fieldname = ? ) : string"
    ],
    "fdf_open": [
        "fdf_open ( string $filename ) : resource"
    ],
    "fdf_open_string": [
        "fdf_open_string ( string $fdf_data ) : resource"
    ],
    "fdf_remove_item": [
        "fdf_remove_item ( resource $fdf_document , string $fieldname , int $item ) : bool"
    ],
    "fdf_save": [
        "fdf_save ( resource $fdf_document , string $filename = ? ) : bool"
    ],
    "fdf_save_string": [
        "fdf_save_string ( resource $fdf_document ) : string"
    ],
    "fdf_set_ap": [
        "fdf_set_ap ( resource $fdf_document , string $field_name , int $face , string $filename , int $page_number ) : bool"
    ],
    "fdf_set_encoding": [
        "fdf_set_encoding ( resource $fdf_document , string $encoding ) : bool"
    ],
    "fdf_set_file": [
        "fdf_set_file ( resource $fdf_document , string $url , string $target_frame = ? ) : bool"
    ],
    "fdf_set_flags": [
        "fdf_set_flags ( resource $fdf_document , string $fieldname , int $whichFlags , int $newFlags ) : bool"
    ],
    "fdf_set_javascript_action": [
        "fdf_set_javascript_action ( resource $fdf_document , string $fieldname , int $trigger , string $script ) : bool"
    ],
    "fdf_set_on_import_javascript": [
        "fdf_set_on_import_javascript ( resource $fdf_document , string $script , bool $before_data_import ) : bool"
    ],
    "fdf_set_opt": [
        "fdf_set_opt ( resource $fdf_document , string $fieldname , int $element , string $str1 , string $str2 ) : bool"
    ],
    "fdf_set_status": [
        "fdf_set_status ( resource $fdf_document , string $status ) : bool"
    ],
    "fdf_set_submit_form_action": [
        "fdf_set_submit_form_action ( resource $fdf_document , string $fieldname , int $trigger , string $script , int $flags ) : bool"
    ],
    "fdf_set_target_frame": [
        "fdf_set_target_frame ( resource $fdf_document , string $frame_name ) : bool"
    ],
    "fdf_set_value": [
        "fdf_set_value ( resource $fdf_document , string $fieldname , mixed $value , int $isName = ? ) : bool"
    ],
    "fdf_set_version": [
        "fdf_set_version ( resource $fdf_document , string $version ) : bool"
    ],
    "fdiv": [
        "fdiv ( float $num1 , float $num2 ) : float"
    ],
    "feof": [
        "feof ( resource $stream ) : bool"
    ],
    "fflush": [
        "fflush ( resource $stream ) : bool"
    ],
    "fgetc": [
        "fgetc ( resource $stream ) : string|false"
    ],
    "fgetcsv": [
        "fgetcsv ( resource $handle , int $length = 0 , string $delimiter = \",\" , string $enclosure = '\"' , string $escape = \"\\\\\" ) : array"
    ],
    "fgets": [
        "fgets ( resource $handle , int $length = ? ) : string|false"
    ],
    "fgetss": [
        "fgetss ( resource $handle , int $length = ? , string $allowable_tags = ? ) : string"
    ],
    "file": [
        "file ( string $filename , int $flags = 0 , resource $context = ? ) : array"
    ],
    "file_exists": [
        "file_exists ( string $filename ) : bool"
    ],
    "file_get_contents": [
        "file_get_contents ( string $filename , bool $use_include_path = false , resource $context = ? , int $offset = 0 , int $maxlen = ? ) : string|false"
    ],
    "file_put_contents": [
        "file_put_contents ( string $filename , mixed $data , int $flags = 0 , resource $context = ? ) : int"
    ],
    "fileatime": [
        "fileatime ( string $filename ) : int|false"
    ],
    "filectime": [
        "filectime ( string $filename ) : int|false"
    ],
    "filegroup": [
        "filegroup ( string $filename ) : int|false"
    ],
    "fileinode": [
        "fileinode ( string $filename ) : int|false"
    ],
    "filemtime": [
        "filemtime ( string $filename ) : int|false"
    ],
    "fileowner": [
        "fileowner ( string $filename ) : int|false"
    ],
    "fileperms": [
        "fileperms ( string $filename ) : int|false"
    ],
    "filepro": [
        "filepro ( string $directory ) : bool"
    ],
    "filepro_fieldcount": [
        "filepro_fieldcount ( ) : int"
    ],
    "filepro_fieldname": [
        "filepro_fieldname ( int $field_number ) : string"
    ],
    "filepro_fieldtype": [
        "filepro_fieldtype ( int $field_number ) : string"
    ],
    "filepro_fieldwidth": [
        "filepro_fieldwidth ( int $field_number ) : int"
    ],
    "filepro_retrieve": [
        "filepro_retrieve ( int $row_number , int $field_number ) : string"
    ],
    "filepro_rowcount": [
        "filepro_rowcount ( ) : int"
    ],
    "filesize": [
        "filesize ( string $filename ) : int|false"
    ],
    "FilesystemIterator": [
        "public FilesystemIterator::__construct ( string $path , int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS )"
    ],
    "filetype": [
        "filetype ( string $filename ) : string|false"
    ],
    "filter_has_var": [
        "filter_has_var ( int $input_type , string $var_name ) : bool"
    ],
    "filter_id": [
        "filter_id ( string $name ) : int|false"
    ],
    "filter_input": [
        "filter_input ( int $type , string $var_name , int $filter = FILTER_DEFAULT , array|int $options = 0 ) : mixed"
    ],
    "filter_input_array": [
        "filter_input_array ( int $type , array|int $options = FILTER_DEFAULT , bool $add_empty = true ) : array|false|null"
    ],
    "filter_list": [
        "filter_list ( ) : array"
    ],
    "filter_var": [
        "filter_var ( mixed $value , int $filter = FILTER_DEFAULT , array|int $options = 0 ) : mixed"
    ],
    "filter_var_array": [
        "filter_var_array ( array $array , array|int $options = FILTER_DEFAULT , bool $add_empty = true ) : array|false|null"
    ],
    "FilterIterator": [
        "public FilterIterator::__construct ( Iterator $iterator )"
    ],
    "finfo": [
        "public finfo::__construct ( int $flags = FILEINFO_NONE , string $magic_database = \"\" )",
        "public finfo::__construct ( int $flags = FILEINFO_NONE , string $magic_database = \"\" )"
    ],
    "finfo_buffer": [
        "finfo_buffer ( resource $finfo , string $string , int $flags = FILEINFO_NONE , resource|null $context = null ) : string|false"
    ],
    "finfo_close": [
        "finfo_close ( resource $finfo ) : bool"
    ],
    "finfo_file": [
        "finfo_file ( resource $finfo , string $filename , int $flags = FILEINFO_NONE , resource|null $context = null ) : string|false"
    ],
    "finfo_open": [
        "finfo_open ( int $flags = FILEINFO_NONE , string $magic_database = \"\" ) : resource|false"
    ],
    "finfo_set_flags": [
        "finfo_set_flags ( resource $finfo , int $flags ) : bool"
    ],
    "floatval": [
        "floatval ( mixed $value ) : float"
    ],
    "flock": [
        "flock ( resource $stream , int $operation , int &$would_block = null ) : bool"
    ],
    "floor": [
        "floor ( float $value ) : float"
    ],
    "flush": [
        "flush ( ) : void"
    ],
    "fmod": [
        "fmod ( float $num1 , float $num2 ) : float"
    ],
    "fnmatch": [
        "fnmatch ( string $pattern , string $filename , int $flags = 0 ) : bool"
    ],
    "fopen": [
        "fopen ( string $filename , string $mode , bool $use_include_path = false , resource $context = ? ) : resource"
    ],
    "forward_static_call": [
        "forward_static_call ( callable $callback , mixed ...$args ) : mixed"
    ],
    "forward_static_call_array": [
        "forward_static_call_array ( callable $callback , array $args ) : mixed"
    ],
    "fpassthru": [
        "fpassthru ( resource $stream ) : int"
    ],
    "fprintf": [
        "fprintf ( resource $stream , string $format , mixed ...$values ) : int"
    ],
    "fputcsv": [
        "fputcsv ( resource $handle , array $fields , string $delimiter = \",\" , string $enclosure = '\"' , string $escape_char = \"\\\\\" ) : int|false"
    ],
    "fread": [
        "fread ( resource $stream , int $length ) : string|false"
    ],
    "frenchtojd": [
        "frenchtojd ( int $month , int $day , int $year ) : int"
    ],
    "fscanf": [
        "fscanf ( resource $stream , string $format , mixed &...$vars ) : array|int|false|null"
    ],
    "fseek": [
        "fseek ( resource $stream , int $offset , int $whence = SEEK_SET ) : int"
    ],
    "fsockopen": [
        "fsockopen ( string $hostname , int $port = -1 , int &$error_code = null , string &$error_message = null , float|null $timeout = null ) : resource|false"
    ],
    "fstat": [
        "fstat ( resource $stream ) : array|false"
    ],
    "ftell": [
        "ftell ( resource $stream ) : int|false"
    ],
    "ftok": [
        "ftok ( string $filename , string $project_id ) : int"
    ],
    "ftp_alloc": [
        "ftp_alloc ( resource $ftp , int $size , string &$response = null ) : bool"
    ],
    "ftp_append": [
        "ftp_append ( resource $ftp , string $remote_filename , string $local_filename , int $mode = FTP_BINARY ) : bool"
    ],
    "ftp_cdup": [
        "ftp_cdup ( resource $ftp ) : bool"
    ],
    "ftp_chdir": [
        "ftp_chdir ( resource $ftp , string $directory ) : bool"
    ],
    "ftp_chmod": [
        "ftp_chmod ( resource $ftp , int $permissions , string $filename ) : int|false"
    ],
    "ftp_close": [
        "ftp_close ( resource $ftp ) : bool"
    ],
    "ftp_connect": [
        "ftp_connect ( string $hostname , int $port = 21 , int $timeout = 90 ) : resource|false"
    ],
    "ftp_delete": [
        "ftp_delete ( resource $ftp , string $filename ) : bool"
    ],
    "ftp_exec": [
        "ftp_exec ( resource $ftp , string $command ) : bool"
    ],
    "ftp_fget": [
        "ftp_fget ( resource $ftp , resource $stream , string $remote_filename , int $mode = FTP_BINARY , int $offset = 0 ) : bool"
    ],
    "ftp_fput": [
        "ftp_fput ( resource $ftp , string $remote_filename , resource $stream , int $mode = FTP_BINARY , int $offset = 0 ) : bool"
    ],
    "ftp_get": [
        "ftp_get ( resource $ftp , string $local_filename , string $remote_filename , int $mode = FTP_BINARY , int $offset = 0 ) : bool"
    ],
    "ftp_get_option": [
        "ftp_get_option ( resource $ftp , int $option ) : int|bool"
    ],
    "ftp_login": [
        "ftp_login ( resource $ftp , string $username , string $password ) : bool"
    ],
    "ftp_mdtm": [
        "ftp_mdtm ( resource $ftp , string $filename ) : int"
    ],
    "ftp_mkdir": [
        "ftp_mkdir ( resource $ftp , string $directory ) : string|false"
    ],
    "ftp_mlsd": [
        "ftp_mlsd ( resource $ftp , string $directory ) : array|false"
    ],
    "ftp_nb_continue": [
        "ftp_nb_continue ( resource $ftp ) : int"
    ],
    "ftp_nb_fget": [
        "ftp_nb_fget ( resource $ftp , resource $stream , string $remote_filename , int $mode = FTP_BINARY , int $offset = 0 ) : int"
    ],
    "ftp_nb_fput": [
        "ftp_nb_fput ( resource $ftp , string $remote_filename , resource $stream , int $mode = FTP_BINARY , int $offset = 0 ) : int"
    ],
    "ftp_nb_get": [
        "ftp_nb_get ( resource $ftp , string $local_filename , string $remote_filename , int $mode = FTP_BINARY , int $offset = 0 ) : int"
    ],
    "ftp_nb_put": [
        "ftp_nb_put ( resource $ftp , string $remote_filename , string $local_filename , int $mode = FTP_BINARY , int $offset = 0 ) : int|false"
    ],
    "ftp_nlist": [
        "ftp_nlist ( resource $ftp , string $directory ) : array|false"
    ],
    "ftp_pasv": [
        "ftp_pasv ( resource $ftp , bool $enable ) : bool"
    ],
    "ftp_put": [
        "ftp_put ( resource $ftp , string $remote_filename , string $local_filename , int $mode = FTP_BINARY , int $offset = 0 ) : bool"
    ],
    "ftp_pwd": [
        "ftp_pwd ( resource $ftp ) : string|false"
    ],
    "ftp_raw": [
        "ftp_raw ( resource $ftp , string $command ) : array"
    ],
    "ftp_rawlist": [
        "ftp_rawlist ( resource $ftp , string $directory , bool $recursive = false ) : array|false"
    ],
    "ftp_rename": [
        "ftp_rename ( resource $ftp , string $from , string $to ) : bool"
    ],
    "ftp_rmdir": [
        "ftp_rmdir ( resource $ftp , string $directory ) : bool"
    ],
    "ftp_set_option": [
        "ftp_set_option ( resource $ftp , int $option , int|bool $value ) : bool"
    ],
    "ftp_site": [
        "ftp_site ( resource $ftp , string $command ) : bool"
    ],
    "ftp_size": [
        "ftp_size ( resource $ftp , string $filename ) : int"
    ],
    "ftp_ssl_connect": [
        "ftp_ssl_connect ( string $hostname , int $port = 21 , int $timeout = 90 ) : resource|false"
    ],
    "ftp_systype": [
        "ftp_systype ( resource $ftp ) : string|false"
    ],
    "ftruncate": [
        "ftruncate ( resource $stream , int $size ) : bool"
    ],
    "func_get_arg": [
        "func_get_arg ( int $arg_num ) : mixed"
    ],
    "func_get_args": [
        "func_get_args ( ) : array"
    ],
    "func_num_args": [
        "func_num_args ( ) : int"
    ],
    "function_exists": [
        "function_exists ( string $function_name ) : bool"
    ],
    "fwrite": [
        "fwrite ( resource $handle , string $string , int $length = ? ) : int"
    ],
    "gc_collect_cycles": [
        "gc_collect_cycles ( ) : int"
    ],
    "gc_disable": [
        "gc_disable ( ) : void"
    ],
    "gc_enable": [
        "gc_enable ( ) : void"
    ],
    "gc_enabled": [
        "gc_enabled ( ) : bool"
    ],
    "gc_mem_caches": [
        "gc_mem_caches ( ) : int"
    ],
    "gc_status": [
        "gc_status ( ) : array"
    ],
    "gd_info": [
        "gd_info ( ) : array"
    ],
    "GearmanClient": [
        "public GearmanClient::__construct ( )"
    ],
    "GearmanJob": [
        "public GearmanJob::__construct ( )"
    ],
    "GearmanTask": [
        "public GearmanTask::__construct ( )"
    ],
    "GearmanWorker": [
        "public GearmanWorker::__construct ( )"
    ],
    "geoip_asnum_by_name": [
        "geoip_asnum_by_name ( string $hostname ) : string"
    ],
    "geoip_continent_code_by_name": [
        "geoip_continent_code_by_name ( string $hostname ) : string"
    ],
    "geoip_country_code3_by_name": [
        "geoip_country_code3_by_name ( string $hostname ) : string"
    ],
    "geoip_country_code_by_name": [
        "geoip_country_code_by_name ( string $hostname ) : string"
    ],
    "geoip_country_name_by_name": [
        "geoip_country_name_by_name ( string $hostname ) : string"
    ],
    "geoip_database_info": [
        "geoip_database_info ( int $database = GEOIP_COUNTRY_EDITION ) : string"
    ],
    "geoip_db_avail": [
        "geoip_db_avail ( int $database ) : bool"
    ],
    "geoip_db_filename": [
        "geoip_db_filename ( int $database ) : string"
    ],
    "geoip_db_get_all_info": [
        "geoip_db_get_all_info ( ) : array"
    ],
    "geoip_domain_by_name": [
        "geoip_domain_by_name ( string $hostname ) : string"
    ],
    "geoip_id_by_name": [
        "geoip_id_by_name ( string $hostname ) : int"
    ],
    "geoip_isp_by_name": [
        "geoip_isp_by_name ( string $hostname ) : string"
    ],
    "geoip_netspeedcell_by_name": [
        "geoip_netspeedcell_by_name ( string $hostname ) : string"
    ],
    "geoip_org_by_name": [
        "geoip_org_by_name ( string $hostname ) : string"
    ],
    "geoip_record_by_name": [
        "geoip_record_by_name ( string $hostname ) : array"
    ],
    "geoip_region_by_name": [
        "geoip_region_by_name ( string $hostname ) : array"
    ],
    "geoip_region_name_by_code": [
        "geoip_region_name_by_code ( string $country_code , string $region_code ) : string"
    ],
    "geoip_setup_custom_directory": [
        "geoip_setup_custom_directory ( string $path ) : void"
    ],
    "geoip_time_zone_by_country_and_region": [
        "geoip_time_zone_by_country_and_region ( string $country_code , string $region_code = ? ) : string"
    ],
    "get_browser": [
        "get_browser ( string $user_agent = ? , bool $return_array = false ) : mixed"
    ],
    "get_called_class": [
        "get_called_class ( ) : string"
    ],
    "get_cfg_var": [
        "get_cfg_var ( string $option ) : string|array|false"
    ],
    "get_class": [
        "get_class ( object $object = ? ) : string"
    ],
    "get_class_methods": [
        "get_class_methods ( mixed $class_name ) : array"
    ],
    "get_class_vars": [
        "get_class_vars ( string $class_name ) : array"
    ],
    "get_current_user": [
        "get_current_user ( ) : string"
    ],
    "get_declared_classes": [
        "get_declared_classes ( ) : array"
    ],
    "get_declared_interfaces": [
        "get_declared_interfaces ( ) : array"
    ],
    "get_declared_traits": [
        "get_declared_traits ( ) : array"
    ],
    "get_defined_constants": [
        "get_defined_constants ( bool $categorize = false ) : array"
    ],
    "get_defined_functions": [
        "get_defined_functions ( bool $exclude_disabled = false ) : array"
    ],
    "get_defined_vars": [
        "get_defined_vars ( ) : array"
    ],
    "get_extension_funcs": [
        "get_extension_funcs ( string $module_name ) : array"
    ],
    "get_headers": [
        "get_headers ( string $url , int $format = 0 , resource $context = ? ) : array"
    ],
    "get_html_translation_table": [
        "get_html_translation_table ( int $table = HTML_SPECIALCHARS , int $flags = ENT_COMPAT , string $encoding = \"UTF-8\" ) : array"
    ],
    "get_include_path": [
        "get_include_path ( ) : string|false"
    ],
    "get_included_files": [
        "get_included_files ( ) : array"
    ],
    "get_loaded_extensions": [
        "get_loaded_extensions ( bool $zend_extensions = false ) : array"
    ],
    "get_magic_quotes_gpc": [
        "get_magic_quotes_gpc ( ) : bool"
    ],
    "get_magic_quotes_runtime": [
        "get_magic_quotes_runtime ( ) : bool"
    ],
    "get_meta_tags": [
        "get_meta_tags ( string $filename , bool $use_include_path = false ) : array|false"
    ],
    "get_object_vars": [
        "get_object_vars ( object $object ) : array"
    ],
    "get_parent_class": [
        "get_parent_class ( mixed $object = ? ) : string"
    ],
    "get_resource_id": [
        "get_resource_id ( resource $res ) : int"
    ],
    "get_resource_type": [
        "get_resource_type ( resource $handle ) : string"
    ],
    "get_resources": [
        "get_resources ( string $type = ? ) : array"
    ],
    "getallheaders": [
        "getallheaders ( ) : array"
    ],
    "getcwd": [
        "getcwd ( ) : string|false"
    ],
    "getdate": [
        "getdate ( int|null $timestamp = null ) : array"
    ],
    "getenv": [
        "getenv ( string $varname , bool $local_only = false ) : string|false",
        "getenv ( ) : array"
    ],
    "gethostbyaddr": [
        "gethostbyaddr ( string $ip ) : string|false"
    ],
    "gethostbyname": [
        "gethostbyname ( string $hostname ) : string"
    ],
    "gethostbynamel": [
        "gethostbynamel ( string $hostname ) : array|false"
    ],
    "gethostname": [
        "gethostname ( ) : string|false"
    ],
    "getimagesize": [
        "getimagesize ( string $filename , array &$image_info = null ) : array|false"
    ],
    "getimagesizefromstring": [
        "getimagesizefromstring ( string $string , array &$image_info = null ) : array|false"
    ],
    "getlastmod": [
        "getlastmod ( ) : int|false"
    ],
    "getmxrr": [
        "getmxrr ( string $hostname , array &$hosts , array &$weights = null ) : bool"
    ],
    "getmygid": [
        "getmygid ( ) : int|false"
    ],
    "getmyinode": [
        "getmyinode ( ) : int|false"
    ],
    "getmypid": [
        "getmypid ( ) : int|false"
    ],
    "getmyuid": [
        "getmyuid ( ) : int|false"
    ],
    "getopt": [
        "getopt ( string $short_options , array $long_options = [] , int &$rest_index = null ) : array|false"
    ],
    "getprotobyname": [
        "getprotobyname ( string $protocol ) : int|false"
    ],
    "getprotobynumber": [
        "getprotobynumber ( int $protocol ) : string|false"
    ],
    "getrandmax": [
        "getrandmax ( ) : int"
    ],
    "getrusage": [
        "getrusage ( int $mode = 0 ) : array|false"
    ],
    "getservbyname": [
        "getservbyname ( string $service , string $protocol ) : int|false"
    ],
    "getservbyport": [
        "getservbyport ( int $port , string $protocol ) : string|false"
    ],
    "gettext": [
        "gettext ( string $message ) : string"
    ],
    "gettimeofday": [
        "gettimeofday ( bool $as_float = false ) : array|float"
    ],
    "gettype": [
        "gettype ( mixed $value ) : string"
    ],
    "glob": [
        "glob ( string $pattern , int $flags = 0 ) : array|false"
    ],
    "GlobIterator": [
        "public GlobIterator::__construct ( string $pattern , int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO )"
    ],
    "Gmagick": [
        "public Gmagick::__construct ( string $filename = ? )"
    ],
    "GmagickPixel": [
        "public GmagickPixel::__construct ( string $color = ? )"
    ],
    "gmdate": [
        "gmdate ( string $format , int|null $timestamp = null ) : string"
    ],
    "gmmktime": [
        "gmmktime ( int $hour , int|null $minute = null , int|null $second = null , int|null $month = null , int|null $day = null , int|null $year = null ) : int|false"
    ],
    "gmp_abs": [
        "gmp_abs ( GMP|int|string $num ) : GMP"
    ],
    "gmp_add": [
        "gmp_add ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmp_and": [
        "gmp_and ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmp_binomial": [
        "gmp_binomial ( GMP|int|string $n , int $k ) : GMP"
    ],
    "gmp_clrbit": [
        "gmp_clrbit ( GMP $num , int $index ) : void"
    ],
    "gmp_cmp": [
        "gmp_cmp ( GMP|int|string $num1 , GMP|int|string $num2 ) : int"
    ],
    "gmp_com": [
        "gmp_com ( GMP|int|string $num ) : GMP"
    ],
    "gmp_div_q": [
        "gmp_div_q ( GMP|int|string $num1 , GMP|int|string $num2 , int $rounding_mode = GMP_ROUND_ZERO ) : GMP"
    ],
    "gmp_div_qr": [
        "gmp_div_qr ( GMP|int|string $num1 , GMP|int|string $num2 , int $rounding_mode = GMP_ROUND_ZERO ) : array"
    ],
    "gmp_div_r": [
        "gmp_div_r ( GMP|int|string $num1 , GMP|int|string $num2 , int $rounding_mode = GMP_ROUND_ZERO ) : GMP"
    ],
    "gmp_divexact": [
        "gmp_divexact ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmp_export": [
        "gmp_export ( GMP|int|string $num , int $word_size = 1 , int $flags = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN ) : string"
    ],
    "gmp_fact": [
        "gmp_fact ( GMP|int|string $num ) : GMP"
    ],
    "gmp_gcd": [
        "gmp_gcd ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmp_gcdext": [
        "gmp_gcdext ( GMP|int|string $num1 , GMP|int|string $num2 ) : array"
    ],
    "gmp_hamdist": [
        "gmp_hamdist ( GMP|int|string $num1 , GMP|int|string $num2 ) : int"
    ],
    "gmp_import": [
        "gmp_import ( string $data , int $word_size = 1 , int $flags = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN ) : GMP"
    ],
    "gmp_init": [
        "gmp_init ( int|string $num , int $base = 0 ) : GMP"
    ],
    "gmp_intval": [
        "gmp_intval ( GMP|int|string $num ) : int"
    ],
    "gmp_invert": [
        "gmp_invert ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP|false"
    ],
    "gmp_jacobi": [
        "gmp_jacobi ( GMP|int|string $num1 , GMP|int|string $num2 ) : int"
    ],
    "gmp_kronecker": [
        "gmp_kronecker ( GMP|int|string $num1 , GMP|int|string $num2 ) : int"
    ],
    "gmp_lcm": [
        "gmp_lcm ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmp_legendre": [
        "gmp_legendre ( GMP|int|string $num1 , GMP|int|string $num2 ) : int"
    ],
    "gmp_mod": [
        "gmp_mod ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmp_mul": [
        "gmp_mul ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmp_neg": [
        "gmp_neg ( GMP|int|string $num ) : GMP"
    ],
    "gmp_nextprime": [
        "gmp_nextprime ( GMP|int|string $num ) : GMP"
    ],
    "gmp_or": [
        "gmp_or ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmp_perfect_power": [
        "gmp_perfect_power ( GMP|int|string $num ) : bool"
    ],
    "gmp_perfect_square": [
        "gmp_perfect_square ( GMP|int|string $num ) : bool"
    ],
    "gmp_popcount": [
        "gmp_popcount ( GMP|int|string $num ) : int"
    ],
    "gmp_pow": [
        "gmp_pow ( GMP|int|string $num , int $exponent ) : GMP"
    ],
    "gmp_powm": [
        "gmp_powm ( GMP|int|string $num , GMP|int|string $exponent , GMP|int|string $modulus ) : GMP"
    ],
    "gmp_prob_prime": [
        "gmp_prob_prime ( GMP|int|string $num , int $repetitions = 10 ) : int"
    ],
    "gmp_random": [
        "gmp_random ( int $limiter = 20 ) : GMP"
    ],
    "gmp_random_bits": [
        "gmp_random_bits ( int $bits ) : GMP"
    ],
    "gmp_random_range": [
        "gmp_random_range ( GMP|int|string $min , GMP|int|string $max ) : GMP"
    ],
    "gmp_random_seed": [
        "gmp_random_seed ( GMP|int|string $seed ) : void"
    ],
    "gmp_root": [
        "gmp_root ( GMP|int|string $num , int $nth ) : GMP"
    ],
    "gmp_rootrem": [
        "gmp_rootrem ( GMP|int|string $num , int $nth ) : array"
    ],
    "gmp_scan0": [
        "gmp_scan0 ( GMP|int|string $num1 , int $start ) : int"
    ],
    "gmp_scan1": [
        "gmp_scan1 ( GMP|int|string $num1 , int $start ) : int"
    ],
    "gmp_setbit": [
        "gmp_setbit ( GMP $num , int $index , bool $value = true ) : void"
    ],
    "gmp_sign": [
        "gmp_sign ( GMP|int|string $num ) : int"
    ],
    "gmp_sqrt": [
        "gmp_sqrt ( GMP|int|string $num ) : GMP"
    ],
    "gmp_sqrtrem": [
        "gmp_sqrtrem ( GMP|int|string $num ) : array"
    ],
    "gmp_strval": [
        "gmp_strval ( GMP|int|string $num , int $base = 10 ) : string"
    ],
    "gmp_sub": [
        "gmp_sub ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmp_testbit": [
        "gmp_testbit ( GMP|int|string $num , int $index ) : bool"
    ],
    "gmp_xor": [
        "gmp_xor ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmstrftime": [
        "gmstrftime ( string $format , int|null $timestamp = null ) : string|false"
    ],
    "gnupg_adddecryptkey": [
        "gnupg_adddecryptkey ( resource $identifier , string $fingerprint , string $passphrase ) : bool"
    ],
    "gnupg_addencryptkey": [
        "gnupg_addencryptkey ( resource $identifier , string $fingerprint ) : bool"
    ],
    "gnupg_addsignkey": [
        "gnupg_addsignkey ( resource $identifier , string $fingerprint , string $passphrase = ? ) : bool"
    ],
    "gnupg_cleardecryptkeys": [
        "gnupg_cleardecryptkeys ( resource $identifier ) : bool"
    ],
    "gnupg_clearencryptkeys": [
        "gnupg_clearencryptkeys ( resource $identifier ) : bool"
    ],
    "gnupg_clearsignkeys": [
        "gnupg_clearsignkeys ( resource $identifier ) : bool"
    ],
    "gnupg_decrypt": [
        "gnupg_decrypt ( resource $identifier , string $text ) : string"
    ],
    "gnupg_decryptverify": [
        "gnupg_decryptverify ( resource $identifier , string $text , string &$plaintext ) : array"
    ],
    "gnupg_encrypt": [
        "gnupg_encrypt ( resource $identifier , string $plaintext ) : string"
    ],
    "gnupg_encryptsign": [
        "gnupg_encryptsign ( resource $identifier , string $plaintext ) : string"
    ],
    "gnupg_export": [
        "gnupg_export ( resource $identifier , string $fingerprint ) : string"
    ],
    "gnupg_geterror": [
        "gnupg_geterror ( resource $identifier ) : string"
    ],
    "gnupg_getprotocol": [
        "gnupg_getprotocol ( resource $identifier ) : int"
    ],
    "gnupg_import": [
        "gnupg_import ( resource $identifier , string $keydata ) : array"
    ],
    "gnupg_init": [
        "gnupg_init ( ) : resource"
    ],
    "gnupg_keyinfo": [
        "gnupg_keyinfo ( resource $identifier , string $pattern ) : array"
    ],
    "gnupg_setarmor": [
        "gnupg_setarmor ( resource $identifier , int $armor ) : bool"
    ],
    "gnupg_seterrormode": [
        "gnupg_seterrormode ( resource $identifier , int $errormode ) : void"
    ],
    "gnupg_setsignmode": [
        "gnupg_setsignmode ( resource $identifier , int $signmode ) : bool"
    ],
    "gnupg_sign": [
        "gnupg_sign ( resource $identifier , string $plaintext ) : string"
    ],
    "gnupg_verify": [
        "gnupg_verify ( resource $identifier , string $signed_text , string $signature , string &$plaintext = ? ) : array"
    ],
    "grapheme_extract": [
        "grapheme_extract ( string $haystack , int $size , int $type = GRAPHEME_EXTR_COUNT , int $offset = 0 , int &$next = null ) : string|false"
    ],
    "grapheme_stripos": [
        "grapheme_stripos ( string $haystack , string $needle , int $offset = 0 ) : int|false"
    ],
    "grapheme_stristr": [
        "grapheme_stristr ( string $haystack , string $needle , bool $beforeNeedle = false ) : string|false"
    ],
    "grapheme_strlen": [
        "grapheme_strlen ( string $string ) : int|false|null"
    ],
    "grapheme_strpos": [
        "grapheme_strpos ( string $haystack , string $needle , int $offset = 0 ) : int|false"
    ],
    "grapheme_strripos": [
        "grapheme_strripos ( string $haystack , string $needle , int $offset = 0 ) : int|false"
    ],
    "grapheme_strrpos": [
        "grapheme_strrpos ( string $haystack , string $needle , int $offset = 0 ) : int|false"
    ],
    "grapheme_strstr": [
        "grapheme_strstr ( string $haystack , string $needle , bool $beforeNeedle = false ) : string|false"
    ],
    "grapheme_substr": [
        "grapheme_substr ( string $string , int $offset , int|null $length = null ) : string|false"
    ],
    "gregoriantojd": [
        "gregoriantojd ( int $month , int $day , int $year ) : int"
    ],
    "gzclose": [
        "gzclose ( resource $stream ) : bool"
    ],
    "gzcompress": [
        "gzcompress ( string $data , int $level = -1 , int $encoding = ZLIB_ENCODING_DEFLATE ) : string|false"
    ],
    "gzdecode": [
        "gzdecode ( string $data , int $max_length = 0 ) : string|false"
    ],
    "gzdeflate": [
        "gzdeflate ( string $data , int $level = -1 , int $encoding = ZLIB_ENCODING_RAW ) : string|false"
    ],
    "gzencode": [
        "gzencode ( string $data , int $level = -1 , int $encoding = ZLIB_ENCODING_GZIP ) : string|false"
    ],
    "gzeof": [
        "gzeof ( resource $stream ) : bool"
    ],
    "gzfile": [
        "gzfile ( string $filename , int $use_include_path = 0 ) : array|false"
    ],
    "gzgetc": [
        "gzgetc ( resource $stream ) : string|false"
    ],
    "gzgets": [
        "gzgets ( resource $stream , int|null $length = null ) : string|false"
    ],
    "gzgetss": [
        "gzgetss ( resource $zp , int $length , string $allowable_tags = ? ) : string"
    ],
    "gzinflate": [
        "gzinflate ( string $data , int $max_length = 0 ) : string|false"
    ],
    "gzopen": [
        "gzopen ( string $filename , string $mode , int $use_include_path = 0 ) : resource|false"
    ],
    "gzpassthru": [
        "gzpassthru ( resource $stream ) : int"
    ],
    "gzread": [
        "gzread ( resource $stream , int $length ) : string|false"
    ],
    "gzrewind": [
        "gzrewind ( resource $stream ) : bool"
    ],
    "gzseek": [
        "gzseek ( resource $stream , int $offset , int $whence = SEEK_SET ) : int"
    ],
    "gztell": [
        "gztell ( resource $stream ) : int|false"
    ],
    "gzuncompress": [
        "gzuncompress ( string $data , int $max_length = 0 ) : string|false"
    ],
    "gzwrite": [
        "gzwrite ( resource $stream , string $data , int|null $length = null ) : int|false"
    ],
    "hash": [
        "hash ( string $algo , string $data , bool $binary = false ) : string|false"
    ],
    "hash_algos": [
        "hash_algos ( ) : array"
    ],
    "hash_copy": [
        "hash_copy ( HashContext $context ) : HashContext"
    ],
    "hash_equals": [
        "hash_equals ( string $known_string , string $user_string ) : bool"
    ],
    "hash_file": [
        "hash_file ( string $algo , string $filename , bool $binary = false ) : string|false"
    ],
    "hash_final": [
        "hash_final ( HashContext $context , bool $binary = false ) : string"
    ],
    "hash_hkdf": [
        "hash_hkdf ( string $algo , string $key , int $length = 0 , string $info = \"\" , string $salt = \"\" ) : string"
    ],
    "hash_hmac": [
        "hash_hmac ( string $algo , string $data , string $key , bool $binary = false ) : string|false"
    ],
    "hash_hmac_algos": [
        "hash_hmac_algos ( ) : array"
    ],
    "hash_hmac_file": [
        "hash_hmac_file ( string $algo , string $data , string $key , bool $binary = false ) : string|false"
    ],
    "hash_init": [
        "hash_init ( string $algo , int $flags = 0 , string $key = \"\" ) : HashContext"
    ],
    "hash_pbkdf2": [
        "hash_pbkdf2 ( string $algo , string $password , string $salt , int $iterations , int $length = 0 , bool $binary = false ) : string"
    ],
    "hash_update": [
        "hash_update ( HashContext $context , string $data ) : bool"
    ],
    "hash_update_file": [
        "hash_update_file ( HashContext $context , string $filename , resource|null $stream_context = null ) : bool"
    ],
    "hash_update_stream": [
        "hash_update_stream ( HashContext $context , resource $stream , int $length = -1 ) : int"
    ],
    "HashContext": [
        "private HashContext::__construct ( )"
    ],
    "header": [
        "header ( string $header , bool $replace = true , int $response_code = 0 ) : void"
    ],
    "header_register_callback": [
        "header_register_callback ( callable $callback ) : bool"
    ],
    "header_remove": [
        "header_remove ( string $name = ? ) : void"
    ],
    "headers_list": [
        "headers_list ( ) : array"
    ],
    "headers_sent": [
        "headers_sent ( string &$filename = null , int &$line = null ) : bool"
    ],
    "hebrev": [
        "hebrev ( string $string , int $max_chars_per_line = 0 ) : string"
    ],
    "hebrevc": [
        "hebrevc ( string $hebrew_text , int $max_chars_per_line = 0 ) : string"
    ],
    "hex2bin": [
        "hex2bin ( string $string ) : string|false"
    ],
    "hexdec": [
        "hexdec ( string $hex_string ) : int|float"
    ],
    "highlight_file": [
        "highlight_file ( string $filename , bool $return = false ) : mixed"
    ],
    "highlight_string": [
        "highlight_string ( string $str , bool $return = false ) : mixed"
    ],
    "hrtime": [
        "hrtime ( bool $as_number = false ) : array|int|float|false"
    ],
    "html_entity_decode": [
        "html_entity_decode ( string $string , int $flags = ENT_COMPAT , string|null $encoding = null ) : string"
    ],
    "htmlentities": [
        "htmlentities ( string $string , int $flags = ENT_COMPAT , string|null $encoding = null , bool $double_encode = true ) : string"
    ],
    "htmlspecialchars": [
        "htmlspecialchars ( string $string , int $flags = ENT_COMPAT , string|null $encoding = null , bool $double_encode = true ) : string"
    ],
    "htmlspecialchars_decode": [
        "htmlspecialchars_decode ( string $string , int $flags = ENT_COMPAT ) : string"
    ],
    "http_build_query": [
        "http_build_query ( mixed $data , string $numeric_prefix = ? , string $arg_separator = ? , int $encoding_type = PHP_QUERY_RFC1738 ) : string"
    ],
    "http_response_code": [
        "http_response_code ( int $response_code = 0 ) : int|bool"
    ],
    "hypot": [
        "hypot ( float $x , float $y ) : float"
    ],
    "ibase_add_user": [
        "ibase_add_user ( resource $service_handle , string $user_name , string $password , string $first_name = ? , string $middle_name = ? , string $last_name = ? ) : bool"
    ],
    "ibase_affected_rows": [
        "ibase_affected_rows ( resource $link_identifier = ? ) : int"
    ],
    "ibase_backup": [
        "ibase_backup ( resource $service_handle , string $source_db , string $dest_file , int $options = 0 , bool $verbose = false ) : mixed"
    ],
    "ibase_blob_add": [
        "ibase_blob_add ( resource $blob_handle , string $data ) : void"
    ],
    "ibase_blob_cancel": [
        "ibase_blob_cancel ( resource $blob_handle ) : bool"
    ],
    "ibase_blob_close": [
        "ibase_blob_close ( resource $blob_handle ) : mixed"
    ],
    "ibase_blob_create": [
        "ibase_blob_create ( resource $link_identifier = null ) : resource|false"
    ],
    "ibase_blob_echo": [
        "ibase_blob_echo ( string $blob_id ) : bool",
        "ibase_blob_echo ( resource $link_identifier , string $blob_id ) : bool"
    ],
    "ibase_blob_get": [
        "ibase_blob_get ( resource $blob_handle , int $len ) : string"
    ],
    "ibase_blob_import": [
        "ibase_blob_import ( resource $link_identifier , resource $file_handle ) : string",
        "ibase_blob_import ( resource $file_handle ) : string"
    ],
    "ibase_blob_info": [
        "ibase_blob_info ( resource $link_identifier , string $blob_id ) : array",
        "ibase_blob_info ( string $blob_id ) : array"
    ],
    "ibase_blob_open": [
        "ibase_blob_open ( resource $link_identifier , string $blob_id ) : resource|false",
        "ibase_blob_open ( string $blob_id ) : resource|false"
    ],
    "ibase_close": [
        "ibase_close ( resource $connection_id = null ) : bool"
    ],
    "ibase_commit": [
        "ibase_commit ( resource $link_or_trans_identifier = null ) : bool"
    ],
    "ibase_commit_ret": [
        "ibase_commit_ret ( resource $link_or_trans_identifier = null ) : bool"
    ],
    "ibase_connect": [
        "ibase_connect ( string $database = ? , string $username = ? , string $password = ? , string $charset = ? , int $buffers = ? , int $dialect = ? , string $role = ? , int $sync = ? ) : resource"
    ],
    "ibase_db_info": [
        "ibase_db_info ( resource $service_handle , string $db , int $action , int $argument = 0 ) : string"
    ],
    "ibase_delete_user": [
        "ibase_delete_user ( resource $service_handle , string $user_name ) : bool"
    ],
    "ibase_drop_db": [
        "ibase_drop_db ( resource $connection = null ) : bool"
    ],
    "ibase_errcode": [
        "ibase_errcode ( ) : int"
    ],
    "ibase_errmsg": [
        "ibase_errmsg ( ) : string"
    ],
    "ibase_execute": [
        "ibase_execute ( resource $query , mixed ...$values ) : resource"
    ],
    "ibase_fetch_assoc": [
        "ibase_fetch_assoc ( resource $result , int $fetch_flag = 0 ) : array"
    ],
    "ibase_fetch_object": [
        "ibase_fetch_object ( resource $result_id , int $fetch_flag = 0 ) : object"
    ],
    "ibase_fetch_row": [
        "ibase_fetch_row ( resource $result_identifier , int $fetch_flag = 0 ) : array"
    ],
    "ibase_field_info": [
        "ibase_field_info ( resource $result , int $field_number ) : array"
    ],
    "ibase_free_event_handler": [
        "ibase_free_event_handler ( resource $event ) : bool"
    ],
    "ibase_free_query": [
        "ibase_free_query ( resource $query ) : bool"
    ],
    "ibase_free_result": [
        "ibase_free_result ( resource $result_identifier ) : bool"
    ],
    "ibase_gen_id": [
        "ibase_gen_id ( string $generator , int $increment = 1 , resource $link_identifier = null ) : mixed"
    ],
    "ibase_maintain_db": [
        "ibase_maintain_db ( resource $service_handle , string $db , int $action , int $argument = 0 ) : bool"
    ],
    "ibase_modify_user": [
        "ibase_modify_user ( resource $service_handle , string $user_name , string $password , string $first_name = ? , string $middle_name = ? , string $last_name = ? ) : bool"
    ],
    "ibase_name_result": [
        "ibase_name_result ( resource $result , string $name ) : bool"
    ],
    "ibase_num_fields": [
        "ibase_num_fields ( resource $result_id ) : int"
    ],
    "ibase_num_params": [
        "ibase_num_params ( resource $query ) : int"
    ],
    "ibase_param_info": [
        "ibase_param_info ( resource $query , int $param_number ) : array"
    ],
    "ibase_pconnect": [
        "ibase_pconnect ( string $database = ? , string $username = ? , string $password = ? , string $charset = ? , int $buffers = ? , int $dialect = ? , string $role = ? , int $sync = ? ) : resource"
    ],
    "ibase_prepare": [
        "ibase_prepare ( string $query ) : resource",
        "ibase_prepare ( resource $link_identifier , string $query ) : resource",
        "ibase_prepare ( resource $link_identifier , string $trans , string $query ) : resource"
    ],
    "ibase_query": [
        "ibase_query ( resource $link_identifier = ? , string $query , int $bind_args = ? ) : resource"
    ],
    "ibase_restore": [
        "ibase_restore ( resource $service_handle , string $source_file , string $dest_db , int $options = 0 , bool $verbose = false ) : mixed"
    ],
    "ibase_rollback": [
        "ibase_rollback ( resource $link_or_trans_identifier = null ) : bool"
    ],
    "ibase_rollback_ret": [
        "ibase_rollback_ret ( resource $link_or_trans_identifier = null ) : bool"
    ],
    "ibase_server_info": [
        "ibase_server_info ( resource $service_handle , int $action ) : string"
    ],
    "ibase_service_attach": [
        "ibase_service_attach ( string $host , string $dba_username , string $dba_password ) : resource|false"
    ],
    "ibase_service_detach": [
        "ibase_service_detach ( resource $service_handle ) : bool"
    ],
    "ibase_set_event_handler": [
        "ibase_set_event_handler ( callable $event_handler , string $event_name , string ...$even_names ) : resource",
        "ibase_set_event_handler ( resource $connection , callable $event_handler , string $event_name , string ...$event_names ) : resource"
    ],
    "ibase_trans": [
        "ibase_trans ( int $trans_args = ? , resource $link_identifier = ? ) : resource",
        "ibase_trans ( resource $link_identifier = ? , int $trans_args = ? ) : resource"
    ],
    "ibase_wait_event": [
        "ibase_wait_event ( string $event_name , string ...$event_names ) : string",
        "ibase_wait_event ( resource $connection , string $event_name , string ...$event_names ) : string"
    ],
    "iconv": [
        "iconv ( string $from_encoding , string $to_encoding , string $string ) : string|false"
    ],
    "iconv_get_encoding": [
        "iconv_get_encoding ( string $type = \"all\" ) : array|string|false"
    ],
    "iconv_mime_decode": [
        "iconv_mime_decode ( string $string , int $mode = 0 , string|null $encoding = null ) : string|false"
    ],
    "iconv_mime_decode_headers": [
        "iconv_mime_decode_headers ( string $headers , int $mode = 0 , string|null $encoding = null ) : array|false"
    ],
    "iconv_mime_encode": [
        "iconv_mime_encode ( string $field_name , string $field_value , array $options = [] ) : string|false"
    ],
    "iconv_set_encoding": [
        "iconv_set_encoding ( string $type , string $encoding ) : bool"
    ],
    "iconv_strlen": [
        "iconv_strlen ( string $string , string|null $encoding = null ) : int|false"
    ],
    "iconv_strpos": [
        "iconv_strpos ( string $haystack , string $needle , int $offset = 0 , string|null $encoding = null ) : int|false"
    ],
    "iconv_strrpos": [
        "iconv_strrpos ( string $haystack , string $needle , string|null $encoding = null ) : int|false"
    ],
    "iconv_substr": [
        "iconv_substr ( string $string , int $offset , int|null $length = null , string|null $encoding = null ) : string|false"
    ],
    "idate": [
        "idate ( string $format , int|null $timestamp = null ) : int|false"
    ],
    "idn_to_ascii": [
        "idn_to_ascii ( string $domain , int $flags = IDNA_DEFAULT , int $variant = INTL_IDNA_VARIANT_UTS46 , array &$idna_info = null ) : string|false"
    ],
    "idn_to_utf8": [
        "idn_to_utf8 ( string $domain , int $flags = 0 , int $variant = INTL_IDNA_VARIANT_UTS46 , array &$idna_info = null ) : string|false"
    ],
    "ignore_user_abort": [
        "ignore_user_abort ( bool|null $enable = null ) : int"
    ],
    "image2wbmp": [
        "image2wbmp ( resource $image , string $filename = ? , int $foreground = ? ) : bool"
    ],
    "image_type_to_extension": [
        "image_type_to_extension ( int $image_type , bool $include_dot = true ) : string|false"
    ],
    "image_type_to_mime_type": [
        "image_type_to_mime_type ( int $image_type ) : string"
    ],
    "imageaffine": [
        "imageaffine ( resource $image , array $affine , array $clip = ? ) : resource|false"
    ],
    "imageaffinematrixconcat": [
        "imageaffinematrixconcat ( array $m1 , array $m2 ) : array|false"
    ],
    "imageaffinematrixget": [
        "imageaffinematrixget ( int $type , mixed $options = ? ) : array|false"
    ],
    "imagealphablending": [
        "imagealphablending ( resource $image , bool $blendmode ) : bool"
    ],
    "imageantialias": [
        "imageantialias ( resource $image , bool $enabled ) : bool"
    ],
    "imagearc": [
        "imagearc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color ) : bool"
    ],
    "imagebmp": [
        "imagebmp ( resource $image , mixed $to = null , bool $compressed = true ) : bool"
    ],
    "imagechar": [
        "imagechar ( resource $image , int $font , int $x , int $y , string $c , int $color ) : bool"
    ],
    "imagecharup": [
        "imagecharup ( resource $image , int $font , int $x , int $y , string $c , int $color ) : bool"
    ],
    "imagecolorallocate": [
        "imagecolorallocate ( resource $image , int $red , int $green , int $blue ) : int"
    ],
    "imagecolorallocatealpha": [
        "imagecolorallocatealpha ( resource $image , int $red , int $green , int $blue , int $alpha ) : int"
    ],
    "imagecolorat": [
        "imagecolorat ( resource $image , int $x , int $y ) : int|false"
    ],
    "imagecolorclosest": [
        "imagecolorclosest ( resource $image , int $red , int $green , int $blue ) : int"
    ],
    "imagecolorclosestalpha": [
        "imagecolorclosestalpha ( resource $image , int $red , int $green , int $blue , int $alpha ) : int"
    ],
    "imagecolorclosesthwb": [
        "imagecolorclosesthwb ( resource $image , int $red , int $green , int $blue ) : int"
    ],
    "imagecolordeallocate": [
        "imagecolordeallocate ( resource $image , int $color ) : bool"
    ],
    "imagecolorexact": [
        "imagecolorexact ( resource $image , int $red , int $green , int $blue ) : int"
    ],
    "imagecolorexactalpha": [
        "imagecolorexactalpha ( resource $image , int $red , int $green , int $blue , int $alpha ) : int"
    ],
    "imagecolormatch": [
        "imagecolormatch ( resource $image1 , resource $image2 ) : bool"
    ],
    "imagecolorresolve": [
        "imagecolorresolve ( resource $image , int $red , int $green , int $blue ) : int"
    ],
    "imagecolorresolvealpha": [
        "imagecolorresolvealpha ( resource $image , int $red , int $green , int $blue , int $alpha ) : int"
    ],
    "imagecolorset": [
        "imagecolorset ( resource $image , int $index , int $red , int $green , int $blue , int $alpha = 0 ) : void"
    ],
    "imagecolorsforindex": [
        "imagecolorsforindex ( resource $image , int $index ) : array"
    ],
    "imagecolorstotal": [
        "imagecolorstotal ( resource $image ) : int"
    ],
    "imagecolortransparent": [
        "imagecolortransparent ( resource $image ) : int",
        "imagecolortransparent ( resource $image , int $color ) : int"
    ],
    "imageconvolution": [
        "imageconvolution ( resource $image , array $matrix , float $div , float $offset ) : bool"
    ],
    "imagecopy": [
        "imagecopy ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h ) : bool"
    ],
    "imagecopymerge": [
        "imagecopymerge ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct ) : bool"
    ],
    "imagecopymergegray": [
        "imagecopymergegray ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct ) : bool"
    ],
    "imagecopyresampled": [
        "imagecopyresampled ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h ) : bool"
    ],
    "imagecopyresized": [
        "imagecopyresized ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h ) : bool"
    ],
    "imagecreate": [
        "imagecreate ( int $width , int $height ) : resource"
    ],
    "imagecreatefrombmp": [
        "imagecreatefrombmp ( string $filename ) : resource"
    ],
    "imagecreatefromgd": [
        "imagecreatefromgd ( string $filename ) : resource"
    ],
    "imagecreatefromgd2": [
        "imagecreatefromgd2 ( string $filename ) : resource"
    ],
    "imagecreatefromgd2part": [
        "imagecreatefromgd2part ( string $filename , int $srcX , int $srcY , int $width , int $height ) : resource"
    ],
    "imagecreatefromgif": [
        "imagecreatefromgif ( string $filename ) : resource"
    ],
    "imagecreatefromjpeg": [
        "imagecreatefromjpeg ( string $filename ) : resource"
    ],
    "imagecreatefrompng": [
        "imagecreatefrompng ( string $filename ) : resource"
    ],
    "imagecreatefromstring": [
        "imagecreatefromstring ( string $image ) : resource"
    ],
    "imagecreatefromwbmp": [
        "imagecreatefromwbmp ( string $filename ) : resource"
    ],
    "imagecreatefromwebp": [
        "imagecreatefromwebp ( string $filename ) : resource"
    ],
    "imagecreatefromxbm": [
        "imagecreatefromxbm ( string $filename ) : resource"
    ],
    "imagecreatefromxpm": [
        "imagecreatefromxpm ( string $filename ) : resource"
    ],
    "imagecreatetruecolor": [
        "imagecreatetruecolor ( int $width , int $height ) : resource"
    ],
    "imagecrop": [
        "imagecrop ( resource $image , array $rect ) : resource|false"
    ],
    "imagecropauto": [
        "imagecropauto ( resource $image , int $mode = IMG_CROP_DEFAULT , float $threshold = .5 , int $color = -1 ) : resource|false"
    ],
    "imagedashedline": [
        "imagedashedline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color ) : bool"
    ],
    "imagedestroy": [
        "imagedestroy ( resource $image ) : bool"
    ],
    "imageellipse": [
        "imageellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color ) : bool"
    ],
    "imagefill": [
        "imagefill ( resource $image , int $x , int $y , int $color ) : bool"
    ],
    "imagefilledarc": [
        "imagefilledarc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color , int $style ) : bool"
    ],
    "imagefilledellipse": [
        "imagefilledellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color ) : bool"
    ],
    "imagefilledpolygon": [
        "imagefilledpolygon ( resource $image , array $points , int $num_points , int $color ) : bool",
        "imagefilledpolygon ( resource $image , array $points , int $color ) : bool"
    ],
    "imagefilledrectangle": [
        "imagefilledrectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color ) : bool"
    ],
    "imagefilltoborder": [
        "imagefilltoborder ( resource $image , int $x , int $y , int $border , int $color ) : bool"
    ],
    "imagefilter": [
        "imagefilter ( resource $image , int $filtertype , int $arg1 = ? , int $arg2 = ? , int $arg3 = ? , int $arg4 = ? ) : bool"
    ],
    "imageflip": [
        "imageflip ( resource $image , int $mode ) : bool"
    ],
    "imagefontheight": [
        "imagefontheight ( int $font ) : int"
    ],
    "imagefontwidth": [
        "imagefontwidth ( int $font ) : int"
    ],
    "imageftbbox": [
        "imageftbbox ( float $size , float $angle , string $fontfile , string $text , array $extrainfo = ? ) : array"
    ],
    "imagefttext": [
        "imagefttext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text , array $extrainfo = ? ) : array"
    ],
    "imagegammacorrect": [
        "imagegammacorrect ( resource $image , float $inputgamma , float $outputgamma ) : bool"
    ],
    "imagegd": [
        "imagegd ( resource $image , mixed $to = NULL ) : bool"
    ],
    "imagegd2": [
        "imagegd2 ( resource $image , mixed $to = NULL , int $chunk_size = 128 , int $type = IMG_GD2_RAW ) : bool"
    ],
    "imagegetclip": [
        "imagegetclip ( resource $im ) : array"
    ],
    "imagegetinterpolation": [
        "imagegetinterpolation ( GdImage $image ) : int"
    ],
    "imagegif": [
        "imagegif ( resource $image , mixed $to = null ) : bool"
    ],
    "imagegrabscreen": [
        "imagegrabscreen ( ) : resource"
    ],
    "imagegrabwindow": [
        "imagegrabwindow ( int $window_handle , int $client_area = 0 ) : resource"
    ],
    "imageinterlace": [
        "imageinterlace ( resource $image , int $interlace = 0 ) : int"
    ],
    "imageistruecolor": [
        "imageistruecolor ( resource $image ) : bool"
    ],
    "imagejpeg": [
        "imagejpeg ( resource $image , mixed $to = null , int $quality = -1 ) : bool"
    ],
    "imagelayereffect": [
        "imagelayereffect ( resource $image , int $effect ) : bool"
    ],
    "imageline": [
        "imageline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color ) : bool"
    ],
    "imageloadfont": [
        "imageloadfont ( string $file ) : int"
    ],
    "imageopenpolygon": [
        "imageopenpolygon ( resource $image , array $points , int $num_points , int $color ) : bool",
        "imageopenpolygon ( resource $image , array $points , int $color ) : bool"
    ],
    "imagepalettecopy": [
        "imagepalettecopy ( resource $destination , resource $source ) : void"
    ],
    "imagepalettetotruecolor": [
        "imagepalettetotruecolor ( resource $src ) : bool"
    ],
    "imagepng": [
        "imagepng ( resource $image , mixed $to = null , int $quality = -1 , int $filters = -1 ) : bool"
    ],
    "imagepolygon": [
        "imagepolygon ( resource $image , array $points , int $num_points , int $color ) : bool",
        "imagepolygon ( resource $image , array $points , int $color ) : bool"
    ],
    "imagerectangle": [
        "imagerectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color ) : bool"
    ],
    "imageresolution": [
        "imageresolution ( resource $image ) : mixed",
        "imageresolution ( resource $image , int $res_x , int $res_y = $res_x ) : mixed"
    ],
    "imagerotate": [
        "imagerotate ( resource $image , float $angle , int $bgd_color , int $dummy = 0 ) : resource|false"
    ],
    "imagesavealpha": [
        "imagesavealpha ( resource $image , bool $saveflag ) : bool"
    ],
    "imagescale": [
        "imagescale ( resource $image , int $new_width , int $new_height = -1 , int $mode = IMG_BILINEAR_FIXED ) : resource|false"
    ],
    "imagesetbrush": [
        "imagesetbrush ( resource $image , resource $brush ) : bool"
    ],
    "imagesetclip": [
        "imagesetclip ( resource $im , int $x1 , int $y1 , int $x2 , int $y2 ) : bool"
    ],
    "imagesetinterpolation": [
        "imagesetinterpolation ( resource $image , int $method = IMG_BILINEAR_FIXED ) : bool"
    ],
    "imagesetpixel": [
        "imagesetpixel ( resource $image , int $x , int $y , int $color ) : bool"
    ],
    "imagesetstyle": [
        "imagesetstyle ( resource $image , array $style ) : bool"
    ],
    "imagesetthickness": [
        "imagesetthickness ( resource $image , int $thickness ) : bool"
    ],
    "imagesettile": [
        "imagesettile ( resource $image , resource $tile ) : bool"
    ],
    "imagestring": [
        "imagestring ( resource $image , int $font , int $x , int $y , string $string , int $color ) : bool"
    ],
    "imagestringup": [
        "imagestringup ( resource $image , int $font , int $x , int $y , string $string , int $color ) : bool"
    ],
    "imagesx": [
        "imagesx ( resource $image ) : int"
    ],
    "imagesy": [
        "imagesy ( resource $image ) : int"
    ],
    "imagetruecolortopalette": [
        "imagetruecolortopalette ( resource $image , bool $dither , int $ncolors ) : bool"
    ],
    "imagettfbbox": [
        "imagettfbbox ( float $size , float $angle , string $fontfile , string $text ) : array"
    ],
    "imagettftext": [
        "imagettftext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text ) : array"
    ],
    "imagetypes": [
        "imagetypes ( ) : int"
    ],
    "imagewbmp": [
        "imagewbmp ( resource $image , mixed $to = null , int $foreground = ? ) : bool"
    ],
    "imagewebp": [
        "imagewebp ( resource $image , mixed $to = null , int $quality = 80 ) : bool"
    ],
    "imagexbm": [
        "imagexbm ( resource $image , mixed $filename , int $foreground = ? ) : bool"
    ],
    "Imagick": [
        "public Imagick::__construct ( mixed $files = ? )"
    ],
    "ImagickDraw": [
        "public ImagickDraw::__construct ( )"
    ],
    "ImagickPixel": [
        "public ImagickPixel::__construct ( string $color = ? )"
    ],
    "ImagickPixelIterator": [
        "public ImagickPixelIterator::__construct ( Imagick $wand )"
    ],
    "imap_8bit": [
        "imap_8bit ( string $string ) : string|false"
    ],
    "imap_alerts": [
        "imap_alerts ( ) : array|false"
    ],
    "imap_append": [
        "imap_append ( resource $imap , string $folder , string $message , string|null $options = null , string|null $internal_date = null ) : bool"
    ],
    "imap_base64": [
        "imap_base64 ( string $string ) : string|false"
    ],
    "imap_binary": [
        "imap_binary ( string $string ) : string|false"
    ],
    "imap_body": [
        "imap_body ( resource $imap , int $message_num , int $flags = 0 ) : string|false"
    ],
    "imap_bodystruct": [
        "imap_bodystruct ( resource $imap , int $message_num , string $section ) : stdClass|false"
    ],
    "imap_check": [
        "imap_check ( resource $imap ) : stdClass|false"
    ],
    "imap_clearflag_full": [
        "imap_clearflag_full ( resource $imap , string $sequence , string $flag , int $options = 0 ) : bool"
    ],
    "imap_close": [
        "imap_close ( resource $imap , int $flags = 0 ) : bool"
    ],
    "imap_createmailbox": [
        "imap_createmailbox ( resource $imap , string $mailbox ) : bool"
    ],
    "imap_delete": [
        "imap_delete ( resource $imap , string $message_num , int $flags = 0 ) : bool"
    ],
    "imap_deletemailbox": [
        "imap_deletemailbox ( resource $imap , string $mailbox ) : bool"
    ],
    "imap_errors": [
        "imap_errors ( ) : array|false"
    ],
    "imap_expunge": [
        "imap_expunge ( resource $imap ) : bool"
    ],
    "imap_fetch_overview": [
        "imap_fetch_overview ( resource $imap , string $sequence , int $flags = 0 ) : array|false"
    ],
    "imap_fetchbody": [
        "imap_fetchbody ( resource $imap , int $message_num , string $section , int $flags = 0 ) : string|false"
    ],
    "imap_fetchheader": [
        "imap_fetchheader ( resource $imap , int $message_num , int $flags = 0 ) : string|false"
    ],
    "imap_fetchmime": [
        "imap_fetchmime ( resource $imap , int $message_num , string $section , int $flags = 0 ) : string|false"
    ],
    "imap_fetchstructure": [
        "imap_fetchstructure ( resource $imap , int $message_num , int $flags = 0 ) : stdClass|false"
    ],
    "imap_gc": [
        "imap_gc ( resource $imap , int $flags ) : bool"
    ],
    "imap_get_quota": [
        "imap_get_quota ( resource $imap , string $quota_root ) : array|false"
    ],
    "imap_get_quotaroot": [
        "imap_get_quotaroot ( resource $imap , string $mailbox ) : array|false"
    ],
    "imap_getacl": [
        "imap_getacl ( resource $imap , string $mailbox ) : array|false"
    ],
    "imap_getmailboxes": [
        "imap_getmailboxes ( resource $imap , string $reference , string $pattern ) : array|false"
    ],
    "imap_getsubscribed": [
        "imap_getsubscribed ( resource $imap , string $reference , string $pattern ) : array|false"
    ],
    "imap_headerinfo": [
        "imap_headerinfo ( resource $imap , int $message_num , int $from_length = 0 , int $subject_length = 0 ) : stdClass|false"
    ],
    "imap_headers": [
        "imap_headers ( resource $imap ) : array|false"
    ],
    "imap_last_error": [
        "imap_last_error ( ) : string|false"
    ],
    "imap_list": [
        "imap_list ( resource $imap , string $reference , string $pattern ) : array|false"
    ],
    "imap_listscan": [
        "imap_listscan ( resource $imap , string $reference , string $pattern , string $content ) : array|false"
    ],
    "imap_lsub": [
        "imap_lsub ( resource $imap , string $reference , string $pattern ) : array|false"
    ],
    "imap_mail": [
        "imap_mail ( string $to , string $subject , string $message , string|null $additional_headers = null , string|null $cc = null , string|null $bcc = null , string|null $return_path = null ) : bool"
    ],
    "imap_mail_compose": [
        "imap_mail_compose ( array $envelope , array $bodies ) : string|false"
    ],
    "imap_mail_copy": [
        "imap_mail_copy ( resource $imap , string $message_nums , string $mailbox , int $flags = 0 ) : bool"
    ],
    "imap_mail_move": [
        "imap_mail_move ( resource $imap , string $message_nums , string $mailbox , int $flags = 0 ) : bool"
    ],
    "imap_mailboxmsginfo": [
        "imap_mailboxmsginfo ( resource $imap ) : stdClass"
    ],
    "imap_mime_header_decode": [
        "imap_mime_header_decode ( string $string ) : array|false"
    ],
    "imap_msgno": [
        "imap_msgno ( resource $imap , int $message_uid ) : int"
    ],
    "imap_mutf7_to_utf8": [
        "imap_mutf7_to_utf8 ( string $string ) : string|false"
    ],
    "imap_num_msg": [
        "imap_num_msg ( resource $imap ) : int|false"
    ],
    "imap_num_recent": [
        "imap_num_recent ( resource $imap ) : int"
    ],
    "imap_open": [
        "imap_open ( string $mailbox , string $user , string $password , int $flags = 0 , int $retries = 0 , array $options = [] ) : resource|false"
    ],
    "imap_ping": [
        "imap_ping ( resource $imap ) : bool"
    ],
    "imap_qprint": [
        "imap_qprint ( string $string ) : string|false"
    ],
    "imap_renamemailbox": [
        "imap_renamemailbox ( resource $imap , string $from , string $to ) : bool"
    ],
    "imap_reopen": [
        "imap_reopen ( resource $imap , string $mailbox , int $flags = 0 , int $retries = 0 ) : bool"
    ],
    "imap_rfc822_parse_adrlist": [
        "imap_rfc822_parse_adrlist ( string $string , string $default_hostname ) : array"
    ],
    "imap_rfc822_parse_headers": [
        "imap_rfc822_parse_headers ( string $headers , string $default_hostname = \"UNKNOWN\" ) : stdClass"
    ],
    "imap_rfc822_write_address": [
        "imap_rfc822_write_address ( string $mailbox , string $hostname , string $personal ) : string|false"
    ],
    "imap_savebody": [
        "imap_savebody ( resource $imap , resource|string|int $file , int $message_num , string $section = \"\" , int $flags = 0 ) : bool"
    ],
    "imap_search": [
        "imap_search ( resource $imap , string $criteria , int $flags = SE_FREE , string $charset = \"\" ) : array|false"
    ],
    "imap_set_quota": [
        "imap_set_quota ( resource $imap , string $quota_root , int $mailbox_size ) : bool"
    ],
    "imap_setacl": [
        "imap_setacl ( resource $imap , string $mailbox , string $user_id , string $rights ) : bool"
    ],
    "imap_setflag_full": [
        "imap_setflag_full ( resource $imap , string $sequence , string $flag , int $options = 0 ) : bool"
    ],
    "imap_sort": [
        "imap_sort ( resource $imap , int $criteria , bool $reverse , int $flags = 0 , string|null $search_criteria = null , string|null $charset = null ) : array|false"
    ],
    "imap_status": [
        "imap_status ( resource $imap , string $mailbox , int $flags ) : stdClass|false"
    ],
    "imap_subscribe": [
        "imap_subscribe ( resource $imap , string $mailbox ) : bool"
    ],
    "imap_thread": [
        "imap_thread ( resource $imap , int $flags = SE_FREE ) : array|false"
    ],
    "imap_timeout": [
        "imap_timeout ( int $timeout_type , int $timeout = -1 ) : int|bool"
    ],
    "imap_uid": [
        "imap_uid ( resource $imap , int $message_num ) : int|false"
    ],
    "imap_undelete": [
        "imap_undelete ( resource $imap , string $message_num , int $flags = 0 ) : bool"
    ],
    "imap_unsubscribe": [
        "imap_unsubscribe ( resource $imap , string $mailbox ) : bool"
    ],
    "imap_utf7_decode": [
        "imap_utf7_decode ( string $string ) : string|false"
    ],
    "imap_utf7_encode": [
        "imap_utf7_encode ( string $string ) : string"
    ],
    "imap_utf8": [
        "imap_utf8 ( string $mime_encoded_text ) : string"
    ],
    "imap_utf8_to_mutf7": [
        "imap_utf8_to_mutf7 ( string $string ) : string|false"
    ],
    "implode": [
        "implode ( string $separator , array $array ) : string",
        "implode ( array $array ) : string",
        "implode ( array $array , string $separator ) : string"
    ],
    "in_array": [
        "in_array ( mixed $needle , array $haystack , bool $strict = false ) : bool"
    ],
    "inet_ntop": [
        "inet_ntop ( string $ip ) : string|false"
    ],
    "inet_pton": [
        "inet_pton ( string $ip ) : string|false"
    ],
    "InfiniteIterator": [
        "public InfiniteIterator::__construct ( Iterator $iterator )"
    ],
    "inflate_add": [
        "inflate_add ( InflateContext $context , string $data , int $flush_mode = ZLIB_SYNC_FLUSH ) : string|false"
    ],
    "inflate_get_read_len": [
        "inflate_get_read_len ( InflateContext $context ) : int"
    ],
    "inflate_get_status": [
        "inflate_get_status ( InflateContext $context ) : int"
    ],
    "inflate_init": [
        "inflate_init ( int $encoding , array $options = [] ) : InflateContext|false"
    ],
    "ingres_autocommit": [
        "ingres_autocommit ( resource $link ) : bool"
    ],
    "ingres_autocommit_state": [
        "ingres_autocommit_state ( resource $link ) : bool"
    ],
    "ingres_charset": [
        "ingres_charset ( resource $link ) : string"
    ],
    "ingres_close": [
        "ingres_close ( resource $link ) : bool"
    ],
    "ingres_commit": [
        "ingres_commit ( resource $link ) : bool"
    ],
    "ingres_connect": [
        "ingres_connect ( string $database = ? , string $username = ? , string $password = ? , array $options = ? ) : resource|false"
    ],
    "ingres_cursor": [
        "ingres_cursor ( resource $result ) : string"
    ],
    "ingres_errno": [
        "ingres_errno ( resource $link = ? ) : int"
    ],
    "ingres_error": [
        "ingres_error ( resource $link = ? ) : string"
    ],
    "ingres_errsqlstate": [
        "ingres_errsqlstate ( resource $link = ? ) : string"
    ],
    "ingres_escape_string": [
        "ingres_escape_string ( resource $link , string $source_string ) : string"
    ],
    "ingres_execute": [
        "ingres_execute ( resource $result , array $params = ? , string $types = ? ) : bool"
    ],
    "ingres_fetch_array": [
        "ingres_fetch_array ( resource $result , int $result_type = ? ) : array"
    ],
    "ingres_fetch_assoc": [
        "ingres_fetch_assoc ( resource $result ) : array"
    ],
    "ingres_fetch_object": [
        "ingres_fetch_object ( resource $result , int $result_type = ? ) : object"
    ],
    "ingres_fetch_proc_return": [
        "ingres_fetch_proc_return ( resource $result ) : int"
    ],
    "ingres_fetch_row": [
        "ingres_fetch_row ( resource $result ) : array"
    ],
    "ingres_field_length": [
        "ingres_field_length ( resource $result , int $index ) : int"
    ],
    "ingres_field_name": [
        "ingres_field_name ( resource $result , int $index ) : string|false"
    ],
    "ingres_field_nullable": [
        "ingres_field_nullable ( resource $result , int $index ) : bool"
    ],
    "ingres_field_precision": [
        "ingres_field_precision ( resource $result , int $index ) : int"
    ],
    "ingres_field_scale": [
        "ingres_field_scale ( resource $result , int $index ) : int"
    ],
    "ingres_field_type": [
        "ingres_field_type ( resource $result , int $index ) : string|false"
    ],
    "ingres_free_result": [
        "ingres_free_result ( resource $result ) : bool"
    ],
    "ingres_next_error": [
        "ingres_next_error ( resource $link = ? ) : bool"
    ],
    "ingres_num_fields": [
        "ingres_num_fields ( resource $result ) : int"
    ],
    "ingres_num_rows": [
        "ingres_num_rows ( resource $result ) : int"
    ],
    "ingres_pconnect": [
        "ingres_pconnect ( string $database = ? , string $username = ? , string $password = ? , array $options = ? ) : resource|false"
    ],
    "ingres_prepare": [
        "ingres_prepare ( resource $link , string $query ) : mixed"
    ],
    "ingres_query": [
        "ingres_query ( resource $link , string $query , array $params = ? , string $types = ? ) : mixed"
    ],
    "ingres_result_seek": [
        "ingres_result_seek ( resource $result , int $position ) : bool"
    ],
    "ingres_rollback": [
        "ingres_rollback ( resource $link ) : bool"
    ],
    "ingres_set_environment": [
        "ingres_set_environment ( resource $link , array $options ) : bool"
    ],
    "ingres_unbuffered_query": [
        "ingres_unbuffered_query ( resource $link , string $query , array $params = ? , string $types = ? ) : mixed"
    ],
    "ini_get": [
        "ini_get ( string $option ) : string|false"
    ],
    "ini_get_all": [
        "ini_get_all ( string $extension = ? , bool $details = true ) : array"
    ],
    "ini_restore": [
        "ini_restore ( string $option ) : void"
    ],
    "ini_set": [
        "ini_set ( string $option , string $value ) : string|false"
    ],
    "inotify_add_watch": [
        "inotify_add_watch ( resource $inotify_instance , string $pathname , int $mask ) : int"
    ],
    "inotify_init": [
        "inotify_init ( ) : resource"
    ],
    "inotify_queue_len": [
        "inotify_queue_len ( resource $inotify_instance ) : int"
    ],
    "inotify_read": [
        "inotify_read ( resource $inotify_instance ) : array"
    ],
    "inotify_rm_watch": [
        "inotify_rm_watch ( resource $inotify_instance , int $watch_descriptor ) : bool"
    ],
    "intdiv": [
        "intdiv ( int $num1 , int $num2 ) : int"
    ],
    "interface_exists": [
        "interface_exists ( string $interface_name , bool $autoload = true ) : bool"
    ],
    "intl_error_name": [
        "intl_error_name ( int $errorCode ) : string"
    ],
    "intl_get_error_code": [
        "intl_get_error_code ( ) : int",
        "intl_get_error_code ( ) : int"
    ],
    "intl_get_error_message": [
        "intl_get_error_message ( ) : string",
        "intl_get_error_message ( ) : string"
    ],
    "intl_is_failure": [
        "intl_is_failure ( int $errorCode ) : bool"
    ],
    "IntlBreakIterator": [
        "private IntlBreakIterator::__construct ( )"
    ],
    "intlcal_add": [
        "intlcal_add ( IntlCalendar $cal , int $field , int $amount ) : bool"
    ],
    "intlcal_after": [
        "intlcal_after ( IntlCalendar $cal , IntlCalendar $other ) : bool"
    ],
    "intlcal_before": [
        "intlcal_before ( IntlCalendar $cal , IntlCalendar $other ) : bool"
    ],
    "intlcal_clear": [
        "intlcal_clear ( IntlCalendar $cal , int $field = NULL ) : bool"
    ],
    "intlcal_create_instance": [
        "intlcal_create_instance ( mixed $timeZone = NULL , string $locale = \"\" ) : IntlCalendar"
    ],
    "intlcal_equals": [
        "intlcal_equals ( IntlCalendar $cal , IntlCalendar $other ) : bool"
    ],
    "intlcal_field_difference": [
        "intlcal_field_difference ( IntlCalendar $cal , float $when , int $field ) : int|false"
    ],
    "intlcal_from_date_time": [
        "intlcal_from_date_time ( mixed $dateTime ) : IntlCalendar"
    ],
    "intlcal_get": [
        "intlcal_get ( IntlCalendar $cal , int $field ) : int"
    ],
    "intlcal_get_actual_maximum": [
        "intlcal_get_actual_maximum ( IntlCalendar $cal , int $field ) : int|false"
    ],
    "intlcal_get_actual_minimum": [
        "intlcal_get_actual_minimum ( IntlCalendar $cal , int $field ) : int|false"
    ],
    "intlcal_get_available_locales": [
        "intlcal_get_available_locales ( ) : array"
    ],
    "intlcal_get_day_of_week_type": [
        "intlcal_get_day_of_week_type ( IntlCalendar $cal , int $dayOfWeek ) : int|false"
    ],
    "intlcal_get_error_code": [
        "intlcal_get_error_code ( IntlCalendar $calendar ) : int"
    ],
    "intlcal_get_error_message": [
        "intlcal_get_error_message ( IntlCalendar $calendar ) : string"
    ],
    "intlcal_get_first_day_of_week": [
        "intlcal_get_first_day_of_week ( IntlCalendar $cal ) : int|false"
    ],
    "intlcal_get_greatest_minimum": [
        "intlcal_get_greatest_minimum ( IntlCalendar $cal , int $field ) : int|false"
    ],
    "intlcal_get_keyword_values_for_locale": [
        "static intlcal_get_keyword_values_for_locale ( string $key , string $locale , bool $commonlyUsed ) : Iterator|false"
    ],
    "intlcal_get_least_maximum": [
        "intlcal_get_least_maximum ( IntlCalendar $cal , int $field ) : int|false"
    ],
    "intlcal_get_locale": [
        "intlcal_get_locale ( IntlCalendar $cal , int $localeType ) : string|false"
    ],
    "intlcal_get_maximum": [
        "intlcal_get_maximum ( IntlCalendar $cal , int $field ) : int|false"
    ],
    "intlcal_get_minimal_days_in_first_week": [
        "intlcal_get_minimal_days_in_first_week ( IntlCalendar $cal ) : int|false"
    ],
    "intlcal_get_minimum": [
        "intlcal_get_minimum ( IntlCalendar $cal , int $field ) : int|false"
    ],
    "intlcal_get_now": [
        "intlcal_get_now ( ) : float"
    ],
    "intlcal_get_repeated_wall_time_option": [
        "intlcal_get_repeated_wall_time_option ( IntlCalendar $cal ) : int"
    ],
    "intlcal_get_skipped_wall_time_option": [
        "intlcal_get_skipped_wall_time_option ( IntlCalendar $cal ) : int"
    ],
    "intlcal_get_time": [
        "intlcal_get_time ( IntlCalendar $cal ) : float"
    ],
    "intlcal_get_time_zone": [
        "intlcal_get_time_zone ( IntlCalendar $cal ) : IntlTimeZone"
    ],
    "intlcal_get_type": [
        "intlcal_get_type ( IntlCalendar $cal ) : string"
    ],
    "intlcal_get_weekend_transition": [
        "intlcal_get_weekend_transition ( IntlCalendar $cal , string $dayOfWeek ) : int|false"
    ],
    "intlcal_in_daylight_time": [
        "intlcal_in_daylight_time ( IntlCalendar $cal ) : bool"
    ],
    "intlcal_is_equivalent_to": [
        "intlcal_is_equivalent_to ( IntlCalendar $cal , IntlCalendar $other ) : bool"
    ],
    "intlcal_is_lenient": [
        "intlcal_is_lenient ( IntlCalendar $cal ) : bool"
    ],
    "intlcal_is_set": [
        "intlcal_is_set ( IntlCalendar $cal , int $field ) : bool"
    ],
    "intlcal_is_weekend": [
        "intlcal_is_weekend ( IntlCalendar $cal , float $date = NULL ) : bool"
    ],
    "intlcal_roll": [
        "intlcal_roll ( IntlCalendar $cal , int $field , mixed $amountOrUpOrDown ) : bool"
    ],
    "intlcal_set": [
        "intlcal_set ( IntlCalendar $cal , int $field , int $value ) : bool",
        "intlcal_set ( IntlCalendar $cal , int $year , int $month , int $dayOfMonth = NULL , int $hour = NULL , int $minute = NULL , int $second = NULL ) : bool"
    ],
    "intlcal_set_first_day_of_week": [
        "intlcal_set_first_day_of_week ( IntlCalendar $cal , int $dayOfWeek ) : bool"
    ],
    "intlcal_set_lenient": [
        "intlcal_set_lenient ( IntlCalendar $cal , bool $isLenient ) : bool"
    ],
    "intlcal_set_minimal_days_in_first_week": [
        "intlcal_set_minimal_days_in_first_week ( IntlCalendar $cal , int $minimalDays ) : bool"
    ],
    "intlcal_set_repeated_wall_time_option": [
        "intlcal_set_repeated_wall_time_option ( IntlCalendar $cal , int $wallTimeOption ) : bool"
    ],
    "intlcal_set_skipped_wall_time_option": [
        "intlcal_set_skipped_wall_time_option ( IntlCalendar $cal , int $wallTimeOption ) : bool"
    ],
    "intlcal_set_time": [
        "intlcal_set_time ( IntlCalendar $cal , float $date ) : bool"
    ],
    "intlcal_set_time_zone": [
        "intlcal_set_time_zone ( IntlCalendar $cal , mixed $timeZone ) : bool"
    ],
    "intlcal_to_date_time": [
        "intlcal_to_date_time ( IntlCalendar $cal ) : DateTime"
    ],
    "IntlCalendar": [
        "private IntlCalendar::__construct ( )"
    ],
    "IntlDateFormatter": [
        "public IntlDateFormatter::__construct ( string|null $locale , int $dateType , int $timeType , IntlTimeZone|DateTimeZone|string|null $timezone = null , IntlCalendar|int|null $calendar = null , string $pattern = \"\" )"
    ],
    "IntlGregorianCalendar": [
        "public IntlGregorianCalendar::__construct ( IntlTimeZone $tz = ? , string $locale = ? )",
        "public IntlGregorianCalendar::__construct ( int $timeZoneOrYear , int $localeOrMonth , int $dayOfMonth )",
        "public IntlGregorianCalendar::__construct ( int $timeZoneOrYear , int $localeOrMonth , int $dayOfMonth , int $hour , int $minute , int $second = ? )"
    ],
    "IntlRuleBasedBreakIterator": [
        "public IntlRuleBasedBreakIterator::__construct ( string $rules , string $areCompiled = ? )"
    ],
    "intltz_count_equivalent_ids": [
        "intltz_count_equivalent_ids ( string $zoneId ) : int"
    ],
    "intltz_create_default": [
        "intltz_create_default ( ) : IntlTimeZone"
    ],
    "intltz_create_enumeration": [
        "intltz_create_enumeration ( mixed $countryOrRawOffset = ? ) : IntlIterator"
    ],
    "intltz_create_time_zone": [
        "intltz_create_time_zone ( string $zoneId ) : IntlTimeZone"
    ],
    "intltz_create_time_zone_id_enumeration": [
        "intltz_create_time_zone_id_enumeration ( int $zoneType , string $region = ? , int $rawOffset = ? ) : IntlIterator|false"
    ],
    "intltz_from_date_time_zone": [
        "intltz_from_date_time_zone ( DateTimeZone $zoneId ) : IntlTimeZone"
    ],
    "intltz_get_canonical_id": [
        "intltz_get_canonical_id ( string $zoneId , bool &$isSystemID = ? ) : string"
    ],
    "intltz_get_display_name": [
        "intltz_get_display_name ( IntlTimeZone $timezone , bool $isDaylight = ? , int $style = ? , string $locale = ? ) : string"
    ],
    "intltz_get_dst_savings": [
        "intltz_get_dst_savings ( IntlTimeZone $timezone ) : int"
    ],
    "intltz_get_equivalent_id": [
        "intltz_get_equivalent_id ( string $zoneId , int $index ) : string"
    ],
    "intltz_get_error_code": [
        "intltz_get_error_code ( IntlTimeZone $timezone ) : int"
    ],
    "intltz_get_error_message": [
        "intltz_get_error_message ( IntlTimeZone $timezone ) : string"
    ],
    "intltz_get_gmt": [
        "intltz_get_gmt ( ) : IntlTimeZone"
    ],
    "intltz_get_id": [
        "intltz_get_id ( IntlTimeZone $timezone ) : string"
    ],
    "intltz_get_id_for_windows_id": [
        "intltz_get_id_for_windows_id ( string $timezone , string $region = ? ) : string|false"
    ],
    "intltz_get_offset": [
        "intltz_get_offset ( IntlTimeZone $timezone , float $date , bool $local , int &$rawOffset , int &$dstOffset ) : bool"
    ],
    "intltz_get_raw_offset": [
        "intltz_get_raw_offset ( IntlTimeZone $timezone ) : int"
    ],
    "intltz_get_region": [
        "intltz_get_region ( string $zoneId ) : string|false"
    ],
    "intltz_get_tz_data_version": [
        "intltz_get_tz_data_version ( ) : string"
    ],
    "intltz_get_unknown": [
        "intltz_get_unknown ( ) : IntlTimeZone"
    ],
    "intltz_get_windows_id": [
        "intltz_get_windows_id ( string $timezone ) : string|false"
    ],
    "intltz_has_same_rules": [
        "intltz_has_same_rules ( IntlTimeZone $timezone , IntlTimeZone $otherTimeZone ) : bool"
    ],
    "intltz_to_date_time_zone": [
        "intltz_to_date_time_zone ( IntlTimeZone $timezone ) : DateTimeZone"
    ],
    "intltz_use_daylight_time": [
        "intltz_use_daylight_time ( IntlTimeZone $timezone ) : bool"
    ],
    "intval": [
        "intval ( mixed $value , int $base = 10 ) : int"
    ],
    "ip2long": [
        "ip2long ( string $ip ) : int|false"
    ],
    "iptcembed": [
        "iptcembed ( string $iptc_data , string $filename , int $spool = 0 ) : string|bool"
    ],
    "iptcparse": [
        "iptcparse ( string $iptc_block ) : array|false"
    ],
    "is_a": [
        "is_a ( mixed $object , string $class_name , bool $allow_string = false ) : bool"
    ],
    "is_array": [
        "is_array ( mixed $value ) : bool"
    ],
    "is_bool": [
        "is_bool ( mixed $value ) : bool"
    ],
    "is_callable": [
        "is_callable ( mixed $value , bool $syntax_only = false , string &$callable_name = null ) : bool"
    ],
    "is_countable": [
        "is_countable ( mixed $value ) : bool"
    ],
    "is_dir": [
        "is_dir ( string $filename ) : bool"
    ],
    "is_executable": [
        "is_executable ( string $filename ) : bool"
    ],
    "is_file": [
        "is_file ( string $filename ) : bool"
    ],
    "is_finite": [
        "is_finite ( float $num ) : bool"
    ],
    "is_float": [
        "is_float ( mixed $value ) : bool"
    ],
    "is_infinite": [
        "is_infinite ( float $num ) : bool"
    ],
    "is_int": [
        "is_int ( mixed $value ) : bool"
    ],
    "is_iterable": [
        "is_iterable ( mixed $value ) : bool"
    ],
    "is_link": [
        "is_link ( string $filename ) : bool"
    ],
    "is_nan": [
        "is_nan ( float $num ) : bool"
    ],
    "is_null": [
        "is_null ( mixed $value ) : bool"
    ],
    "is_numeric": [
        "is_numeric ( mixed $value ) : bool"
    ],
    "is_object": [
        "is_object ( mixed $value ) : bool"
    ],
    "is_readable": [
        "is_readable ( string $filename ) : bool"
    ],
    "is_resource": [
        "is_resource ( mixed $value ) : bool"
    ],
    "is_scalar": [
        "is_scalar ( mixed $value ) : bool"
    ],
    "is_soap_fault": [
        "is_soap_fault ( mixed $object ) : bool"
    ],
    "is_string": [
        "is_string ( mixed $value ) : bool"
    ],
    "is_subclass_of": [
        "is_subclass_of ( mixed $object , string $class_name , bool $allow_string = true ) : bool"
    ],
    "is_tainted": [
        "is_tainted ( string $string ) : bool"
    ],
    "is_uploaded_file": [
        "is_uploaded_file ( string $filename ) : bool"
    ],
    "is_writable": [
        "is_writable ( string $filename ) : bool"
    ],
    "isset": [
        "isset ( mixed $var , mixed ...$vars ) : bool"
    ],
    "iterator_apply": [
        "iterator_apply ( Traversable $iterator , callable $function , array $args = null ) : int"
    ],
    "iterator_count": [
        "iterator_count ( Traversable $iterator ) : int"
    ],
    "iterator_to_array": [
        "iterator_to_array ( Traversable $iterator , bool $use_keys = true ) : array"
    ],
    "IteratorIterator": [
        "public IteratorIterator::__construct ( Traversable $iterator )"
    ],
    "jddayofweek": [
        "jddayofweek ( int $julian_day , int $mode = CAL_DOW_DAYNO ) : int|string"
    ],
    "jdmonthname": [
        "jdmonthname ( int $julian_day , int $mode ) : string"
    ],
    "jdtofrench": [
        "jdtofrench ( int $julian_day ) : string"
    ],
    "jdtogregorian": [
        "jdtogregorian ( int $julian_day ) : string"
    ],
    "jdtojewish": [
        "jdtojewish ( int $julian_day , bool $hebrew = false , int $flags = 0 ) : string"
    ],
    "jdtojulian": [
        "jdtojulian ( int $julian_day ) : string"
    ],
    "jdtounix": [
        "jdtounix ( int $julian_day ) : int"
    ],
    "jewishtojd": [
        "jewishtojd ( int $month , int $day , int $year ) : int"
    ],
    "jpeg2wbmp": [
        "jpeg2wbmp ( string $jpegname , string $wbmpname , int $dest_height , int $dest_width , int $threshold ) : bool"
    ],
    "json_decode": [
        "json_decode ( string $json , bool|null $associative = null , int $depth = 512 , int $flags = 0 ) : mixed"
    ],
    "json_encode": [
        "json_encode ( mixed $value , int $flags = 0 , int $depth = 512 ) : string|false"
    ],
    "json_last_error": [
        "json_last_error ( ) : int"
    ],
    "json_last_error_msg": [
        "json_last_error_msg ( ) : string"
    ],
    "juliantojd": [
        "juliantojd ( int $month , int $day , int $year ) : int"
    ],
    "key": [
        "key ( array|object $array ) : int|string|null"
    ],
    "krsort": [
        "krsort ( array &$array , int $flags = SORT_REGULAR ) : bool"
    ],
    "ksort": [
        "ksort ( array &$array , int $flags = SORT_REGULAR ) : bool"
    ],
    "lcfirst": [
        "lcfirst ( string $string ) : string"
    ],
    "lcg_value": [
        "lcg_value ( ) : float"
    ],
    "lchgrp": [
        "lchgrp ( string $filename , string|int $group ) : bool"
    ],
    "lchown": [
        "lchown ( string $filename , string|int $user ) : bool"
    ],
    "ldap_8859_to_t61": [
        "ldap_8859_to_t61 ( string $value ) : string|false"
    ],
    "ldap_add": [
        "ldap_add ( resource $ldap , string $dn , array $entry , array|null $controls = null ) : bool"
    ],
    "ldap_add_ext": [
        "ldap_add_ext ( resource $ldap , string $dn , array $entry , array|null $controls = null ) : resource|false"
    ],
    "ldap_bind": [
        "ldap_bind ( resource $ldap , string|null $dn = null , string|null $password = null ) : bool"
    ],
    "ldap_bind_ext": [
        "ldap_bind_ext ( resource $ldap , string|null $dn = null , string|null $password = null , array|null $controls = null ) : resource|false"
    ],
    "ldap_compare": [
        "ldap_compare ( resource $ldap , string $dn , string $attribute , string $value , array|null $controls = null ) : bool|int"
    ],
    "ldap_connect": [
        "ldap_connect ( string|null $uri = null ) : resource|false",
        "ldap_connect ( string $host = null , int $port = 389 ) : resource|false"
    ],
    "ldap_control_paged_result": [
        "ldap_control_paged_result ( resource $link , int $pagesize , bool $iscritical = false , string $cookie = \"\" ) : bool"
    ],
    "ldap_control_paged_result_response": [
        "ldap_control_paged_result_response ( resource $link , resource $result , string &$cookie = ? , int &$estimated = ? ) : bool"
    ],
    "ldap_count_entries": [
        "ldap_count_entries ( resource $ldap , resource $result ) : int"
    ],
    "ldap_delete": [
        "ldap_delete ( resource $ldap , string $dn , array|null $controls = null ) : bool"
    ],
    "ldap_delete_ext": [
        "ldap_delete_ext ( resource $ldap , string $dn , array|null $controls = null ) : resource|false"
    ],
    "ldap_dn2ufn": [
        "ldap_dn2ufn ( string $dn ) : string|false"
    ],
    "ldap_err2str": [
        "ldap_err2str ( int $errno ) : string"
    ],
    "ldap_errno": [
        "ldap_errno ( resource $ldap ) : int"
    ],
    "ldap_error": [
        "ldap_error ( resource $ldap ) : string"
    ],
    "ldap_escape": [
        "ldap_escape ( string $value , string $ignore = \"\" , int $flags = 0 ) : string"
    ],
    "ldap_exop": [
        "ldap_exop ( resource $link , string $reqoid , string $reqdata = null , array $serverctrls = null , string &$retdata = ? , string &$retoid = ? ) : mixed"
    ],
    "ldap_exop_passwd": [
        "ldap_exop_passwd ( resource $ldap , string $user = \"\" , string $old_password = \"\" , string $new_password = \"\" , array &$controls = null ) : string|bool"
    ],
    "ldap_exop_refresh": [
        "ldap_exop_refresh ( resource $ldap , string $dn , int $ttl ) : int|false"
    ],
    "ldap_exop_whoami": [
        "ldap_exop_whoami ( resource $ldap ) : string|false"
    ],
    "ldap_explode_dn": [
        "ldap_explode_dn ( string $dn , int $with_attrib ) : array|false"
    ],
    "ldap_first_attribute": [
        "ldap_first_attribute ( resource $ldap , resource $entry ) : string|false"
    ],
    "ldap_first_entry": [
        "ldap_first_entry ( resource $ldap , resource $result ) : resource|false"
    ],
    "ldap_first_reference": [
        "ldap_first_reference ( resource $ldap , resource $result ) : resource|false"
    ],
    "ldap_free_result": [
        "ldap_free_result ( resource $ldap ) : bool"
    ],
    "ldap_get_attributes": [
        "ldap_get_attributes ( resource $ldap , resource $entry ) : array"
    ],
    "ldap_get_dn": [
        "ldap_get_dn ( resource $ldap , resource $entry ) : string|false"
    ],
    "ldap_get_entries": [
        "ldap_get_entries ( resource $ldap , resource $result ) : array|false"
    ],
    "ldap_get_option": [
        "ldap_get_option ( resource $ldap , int $option , array|string|int &$value = null ) : bool"
    ],
    "ldap_get_values": [
        "ldap_get_values ( resource $ldap , resource $entry , string $attribute ) : array|false"
    ],
    "ldap_get_values_len": [
        "ldap_get_values_len ( resource $ldap , resource $entry , string $attribute ) : array|false"
    ],
    "ldap_list": [
        "ldap_list ( resource|array $ldap , array|string $base , array|string $filter , array $attributes = [] , int $attributes_only = 0 , int $sizelimit = -1 , int $timelimit = -1 , int $deref = LDAP_DEREF_NEVER , array|null $controls = null ) : resource|array|false"
    ],
    "ldap_mod_add": [
        "ldap_mod_add ( resource $ldap , string $dn , array $entry , array|null $controls = null ) : bool"
    ],
    "ldap_mod_add_ext": [
        "ldap_mod_add_ext ( resource $ldap , string $dn , array $entry , array|null $controls = null ) : resource|false"
    ],
    "ldap_mod_del": [
        "ldap_mod_del ( resource $ldap , string $dn , array $entry , array|null $controls = null ) : bool"
    ],
    "ldap_mod_del_ext": [
        "ldap_mod_del_ext ( resource $ldap , string $dn , array $entry , array|null $controls = null ) : resource|false"
    ],
    "ldap_mod_replace": [
        "ldap_mod_replace ( resource $ldap , string $dn , array $entry , array|null $controls = null ) : bool"
    ],
    "ldap_mod_replace_ext": [
        "ldap_mod_replace_ext ( resource $ldap , string $dn , array $entry , array|null $controls = null ) : resource|false"
    ],
    "ldap_modify_batch": [
        "ldap_modify_batch ( resource $ldap , string $dn , array $modifications_info , array|null $controls = null ) : bool"
    ],
    "ldap_next_attribute": [
        "ldap_next_attribute ( resource $ldap , resource $entry ) : string|false"
    ],
    "ldap_next_entry": [
        "ldap_next_entry ( resource $ldap , resource $result ) : resource|false"
    ],
    "ldap_next_reference": [
        "ldap_next_reference ( resource $ldap , resource $entry ) : resource|false"
    ],
    "ldap_parse_exop": [
        "ldap_parse_exop ( resource $ldap , resource $result , string &$response_data = null , string &$response_oid = null ) : bool"
    ],
    "ldap_parse_reference": [
        "ldap_parse_reference ( resource $ldap , resource $entry , array &$referrals ) : bool"
    ],
    "ldap_parse_result": [
        "ldap_parse_result ( resource $ldap , resource $result , int &$error_code , string &$matched_dn = null , string &$error_message = null , array &$referrals = null , array &$controls = null ) : bool"
    ],
    "ldap_read": [
        "ldap_read ( resource|array $ldap , array|string $base , array|string $filter , array $attributes = [] , int $attributes_only = 0 , int $sizelimit = -1 , int $timelimit = -1 , int $deref = LDAP_DEREF_NEVER , array|null $controls = null ) : resource|array|false"
    ],
    "ldap_rename": [
        "ldap_rename ( resource $ldap , string $dn , string $new_rdn , string $new_parent , bool $delete_old_rdn , array|null $controls = null ) : bool"
    ],
    "ldap_rename_ext": [
        "ldap_rename_ext ( resource $ldap , string $dn , string $new_rdn , string $new_parent , bool $delete_old_rdn , array|null $controls = null ) : resource|false"
    ],
    "ldap_sasl_bind": [
        "ldap_sasl_bind ( resource $ldap , string|null $dn = null , string|null $password = null , string|null $mech = null , string|null $realm = null , string|null $authc_id = null , string|null $authz_id = null , string|null $props = null ) : bool"
    ],
    "ldap_search": [
        "ldap_search ( resource|array $ldap , array|string $base , array|string $filter , array $attributes = [] , int $attributes_only = 0 , int $sizelimit = -1 , int $timelimit = -1 , int $deref = LDAP_DEREF_NEVER , array|null $controls = null ) : resource|array|false"
    ],
    "ldap_set_option": [
        "ldap_set_option ( resource|null $ldap , int $option , array|string|int|bool $value ) : bool"
    ],
    "ldap_set_rebind_proc": [
        "ldap_set_rebind_proc ( resource $ldap , callable|null $callback ) : bool"
    ],
    "ldap_sort": [
        "ldap_sort ( resource $link , resource $result , string $sortfilter ) : bool"
    ],
    "ldap_start_tls": [
        "ldap_start_tls ( resource $ldap ) : bool"
    ],
    "ldap_t61_to_8859": [
        "ldap_t61_to_8859 ( string $value ) : string|false"
    ],
    "ldap_unbind": [
        "ldap_unbind ( resource $ldap ) : bool"
    ],
    "levenshtein": [
        "levenshtein ( string $string1 , string $string2 , int $insertion_cost = 1 , int $replacement_cost = 1 , int $deletion_cost = 1 ) : int"
    ],
    "libxml_clear_errors": [
        "libxml_clear_errors ( ) : void"
    ],
    "libxml_disable_entity_loader": [
        "libxml_disable_entity_loader ( bool $disable = true ) : bool"
    ],
    "libxml_get_errors": [
        "libxml_get_errors ( ) : array"
    ],
    "libxml_get_last_error": [
        "libxml_get_last_error ( ) : LibXMLError|false"
    ],
    "libxml_set_external_entity_loader": [
        "libxml_set_external_entity_loader ( callable|null $resolver_function ) : bool"
    ],
    "libxml_set_streams_context": [
        "libxml_set_streams_context ( resource $context ) : void"
    ],
    "libxml_use_internal_errors": [
        "libxml_use_internal_errors ( bool|null $use_errors = null ) : bool"
    ],
    "LimitIterator": [
        "public LimitIterator::__construct ( Iterator $iterator , int $offset = 0 , int $limit = -1 )"
    ],
    "link": [
        "link ( string $target , string $link ) : bool"
    ],
    "linkinfo": [
        "linkinfo ( string $path ) : int|false"
    ],
    "list": [
        "list ( mixed $var , mixed ...$vars = ? ) : array"
    ],
    "locale_accept_from_http": [
        "locale_accept_from_http ( string $header ) : string"
    ],
    "locale_compose": [
        "locale_compose ( array $subtags ) : string"
    ],
    "locale_filter_matches": [
        "locale_filter_matches ( string $langtag , string $locale , bool $canonicalize = false ) : bool"
    ],
    "locale_get_all_variants": [
        "locale_get_all_variants ( string $locale ) : array"
    ],
    "locale_get_default": [
        "locale_get_default ( ) : string"
    ],
    "locale_get_display_language": [
        "locale_get_display_language ( string $locale , string $in_locale = ? ) : string"
    ],
    "locale_get_display_name": [
        "locale_get_display_name ( string $locale , string $in_locale = ? ) : string"
    ],
    "locale_get_display_region": [
        "locale_get_display_region ( string $locale , string $in_locale = ? ) : string"
    ],
    "locale_get_display_script": [
        "locale_get_display_script ( string $locale , string $in_locale = ? ) : string"
    ],
    "locale_get_display_variant": [
        "locale_get_display_variant ( string $locale , string $in_locale = ? ) : string"
    ],
    "locale_get_keywords": [
        "locale_get_keywords ( string $locale ) : array"
    ],
    "locale_get_primary_language": [
        "locale_get_primary_language ( string $locale ) : string"
    ],
    "locale_get_region": [
        "locale_get_region ( string $locale ) : string"
    ],
    "locale_get_script": [
        "locale_get_script ( string $locale ) : string"
    ],
    "locale_lookup": [
        "locale_lookup ( array $langtag , string $locale , bool $canonicalize = false , string $default = ? ) : string"
    ],
    "locale_parse": [
        "locale_parse ( string $locale ) : array"
    ],
    "locale_set_default": [
        "locale_set_default ( string $locale ) : bool"
    ],
    "localeconv": [
        "localeconv ( ) : array"
    ],
    "localtime": [
        "localtime ( int|null $timestamp = null , bool $associative = false ) : array"
    ],
    "log": [
        "log ( float $num , float $base = M_E ) : float"
    ],
    "log10": [
        "log10 ( float $num ) : float"
    ],
    "log1p": [
        "log1p ( float $num ) : float"
    ],
    "log_cmd_delete": [
        "log_cmd_delete ( array $server , array $writeOptions , array $deleteOptions , array $protocolOptions )"
    ],
    "log_cmd_insert": [
        "log_cmd_insert ( array $server , array $document , array $writeOptions , array $protocolOptions )"
    ],
    "log_cmd_update": [
        "log_cmd_update ( array $server , array $writeOptions , array $updateOptions , array $protocolOptions )"
    ],
    "log_getmore": [
        "log_getmore ( array $server , array $info )"
    ],
    "log_killcursor": [
        "log_killcursor ( array $server , array $info )"
    ],
    "log_reply": [
        "log_reply ( array $server , array $messageHeaders , array $operationHeaders )"
    ],
    "log_write_batch": [
        "log_write_batch ( array $server , array $writeOptions , array $batch , array $protocolOptions )"
    ],
    "long2ip": [
        "long2ip ( int $ip ) : string|false"
    ],
    "lstat": [
        "lstat ( string $filename ) : array|false"
    ],
    "ltrim": [
        "ltrim ( string $string , string $characters = \" \\n\\r\\t\\v\\0\" ) : string"
    ],
    "Lua": [
        "public Lua::__construct ( string $lua_script_file = NULL )"
    ],
    "LuaSandboxFunction": [
        "final private LuaSandboxFunction::__construct ( )"
    ],
    "lzf_compress": [
        "lzf_compress ( string $data ) : string"
    ],
    "lzf_decompress": [
        "lzf_decompress ( string $data ) : string"
    ],
    "lzf_optimized_for": [
        "lzf_optimized_for ( ) : int"
    ],
    "mail": [
        "mail ( string $to , string $subject , string $message , array|string $additional_headers = [] , string $additional_params = \"\" ) : bool"
    ],
    "mailparse_determine_best_xfer_encoding": [
        "mailparse_determine_best_xfer_encoding ( resource $fp ) : string"
    ],
    "mailparse_msg_create": [
        "mailparse_msg_create ( ) : resource"
    ],
    "mailparse_msg_extract_part": [
        "mailparse_msg_extract_part ( resource $mimemail , string $msgbody , callable $callbackfunc = ? ) : void"
    ],
    "mailparse_msg_extract_part_file": [
        "mailparse_msg_extract_part_file ( resource $mimemail , mixed $filename , callable $callbackfunc = ? ) : string"
    ],
    "mailparse_msg_extract_whole_part_file": [
        "mailparse_msg_extract_whole_part_file ( resource $mimemail , string $filename , callable $callbackfunc = ? ) : string"
    ],
    "mailparse_msg_free": [
        "mailparse_msg_free ( resource $mimemail ) : bool"
    ],
    "mailparse_msg_get_part": [
        "mailparse_msg_get_part ( resource $mimemail , string $mimesection ) : resource"
    ],
    "mailparse_msg_get_part_data": [
        "mailparse_msg_get_part_data ( resource $mimemail ) : array"
    ],
    "mailparse_msg_get_structure": [
        "mailparse_msg_get_structure ( resource $mimemail ) : array"
    ],
    "mailparse_msg_parse": [
        "mailparse_msg_parse ( resource $mimemail , string $data ) : bool"
    ],
    "mailparse_msg_parse_file": [
        "mailparse_msg_parse_file ( string $filename ) : resource"
    ],
    "mailparse_rfc822_parse_addresses": [
        "mailparse_rfc822_parse_addresses ( string $addresses ) : array"
    ],
    "mailparse_stream_encode": [
        "mailparse_stream_encode ( resource $sourcefp , resource $destfp , string $encoding ) : bool"
    ],
    "mailparse_uudecode_all": [
        "mailparse_uudecode_all ( resource $fp ) : array"
    ],
    "max": [
        "max ( mixed $value , mixed ...$values ) : mixed",
        "max ( array $value_array ) : mixed"
    ],
    "mb_check_encoding": [
        "mb_check_encoding ( array|string|null $value = null , string|null $encoding = null ) : bool"
    ],
    "mb_chr": [
        "mb_chr ( int $codepoint , string|null $encoding = null ) : string|false"
    ],
    "mb_convert_case": [
        "mb_convert_case ( string $string , int $mode , string|null $encoding = null ) : string"
    ],
    "mb_convert_encoding": [
        "mb_convert_encoding ( array|string $string , string $to_encoding , array|string|null $from_encoding = null ) : array|string|false"
    ],
    "mb_convert_kana": [
        "mb_convert_kana ( string $string , string $mode = \"KV\" , string|null $encoding = null ) : string"
    ],
    "mb_convert_variables": [
        "mb_convert_variables ( string $to_encoding , array|string $from_encoding , mixed &$var , mixed &...$vars ) : string|false"
    ],
    "mb_decode_mimeheader": [
        "mb_decode_mimeheader ( string $string ) : string"
    ],
    "mb_decode_numericentity": [
        "mb_decode_numericentity ( string $string , array $map , string|null $encoding = null ) : string"
    ],
    "mb_detect_encoding": [
        "mb_detect_encoding ( string $string , array|string|null $encodings = null , bool $strict = false ) : string|false"
    ],
    "mb_detect_order": [
        "mb_detect_order ( array|string|null $encoding = null ) : array|bool"
    ],
    "mb_encode_mimeheader": [
        "mb_encode_mimeheader ( string $string , string|null $charset = null , string|null $transfer_encoding = null , string $newline = \"\\r\\n\" , int $indent = 0 ) : string"
    ],
    "mb_encode_numericentity": [
        "mb_encode_numericentity ( string $string , array $map , string|null $encoding = null , bool $hex = false ) : string"
    ],
    "mb_encoding_aliases": [
        "mb_encoding_aliases ( string $encoding ) : array"
    ],
    "mb_ereg": [
        "mb_ereg ( string $pattern , string $string , array &$matches = null ) : bool"
    ],
    "mb_ereg_match": [
        "mb_ereg_match ( string $pattern , string $string , string|null $options = null ) : bool"
    ],
    "mb_ereg_replace": [
        "mb_ereg_replace ( string $pattern , string $replacement , string $string , string|null $options = null ) : string|false|null"
    ],
    "mb_ereg_replace_callback": [
        "mb_ereg_replace_callback ( string $pattern , callable $callback , string $string , string|null $options = null ) : string|false|null"
    ],
    "mb_ereg_search": [
        "mb_ereg_search ( string|null $pattern = null , string|null $options = null ) : bool"
    ],
    "mb_ereg_search_getpos": [
        "mb_ereg_search_getpos ( ) : int"
    ],
    "mb_ereg_search_getregs": [
        "mb_ereg_search_getregs ( ) : array|false"
    ],
    "mb_ereg_search_init": [
        "mb_ereg_search_init ( string $string , string|null $pattern = null , string|null $options = null ) : bool"
    ],
    "mb_ereg_search_pos": [
        "mb_ereg_search_pos ( string|null $pattern = null , string|null $options = null ) : array|false"
    ],
    "mb_ereg_search_regs": [
        "mb_ereg_search_regs ( string|null $pattern = null , string|null $options = null ) : array|false"
    ],
    "mb_ereg_search_setpos": [
        "mb_ereg_search_setpos ( int $offset ) : bool"
    ],
    "mb_eregi": [
        "mb_eregi ( string $pattern , string $string , array &$matches = null ) : bool"
    ],
    "mb_eregi_replace": [
        "mb_eregi_replace ( string $pattern , string $replacement , string $string , string|null $options = null ) : string|false|null"
    ],
    "mb_get_info": [
        "mb_get_info ( string $type = \"all\" ) : array|string|int|false"
    ],
    "mb_http_input": [
        "mb_http_input ( string|null $type = null ) : array|string|false"
    ],
    "mb_http_output": [
        "mb_http_output ( string|null $encoding = null ) : string|bool"
    ],
    "mb_internal_encoding": [
        "mb_internal_encoding ( string|null $encoding = null ) : string|bool"
    ],
    "mb_language": [
        "mb_language ( string|null $language = null ) : string|bool"
    ],
    "mb_list_encodings": [
        "mb_list_encodings ( ) : array"
    ],
    "mb_ord": [
        "mb_ord ( string $string , string|null $encoding = null ) : int|false"
    ],
    "mb_output_handler": [
        "mb_output_handler ( string $string , int $status ) : string"
    ],
    "mb_parse_str": [
        "mb_parse_str ( string $string , array &$result ) : bool"
    ],
    "mb_preferred_mime_name": [
        "mb_preferred_mime_name ( string $encoding ) : string|false"
    ],
    "mb_regex_encoding": [
        "mb_regex_encoding ( string|null $encoding = null ) : string|bool"
    ],
    "mb_regex_set_options": [
        "mb_regex_set_options ( string|null $options = null ) : string"
    ],
    "mb_scrub": [
        "mb_scrub ( string $string , string|null $encoding = null ) : string"
    ],
    "mb_send_mail": [
        "mb_send_mail ( string $to , string $subject , string $message , array|string $additional_headers = [] , string|null $additional_params = null ) : bool"
    ],
    "mb_split": [
        "mb_split ( string $pattern , string $string , int $limit = -1 ) : array|false"
    ],
    "mb_str_split": [
        "mb_str_split ( string $string , int $length = 1 , string|null $encoding = null ) : array"
    ],
    "mb_strcut": [
        "mb_strcut ( string $string , int $start , int|null $length = null , string|null $encoding = null ) : string"
    ],
    "mb_strimwidth": [
        "mb_strimwidth ( string $string , int $start , int $width , string $trim_marker = \"\" , string|null $encoding = null ) : string"
    ],
    "mb_stripos": [
        "mb_stripos ( string $haystack , string $needle , int $offset = 0 , string|null $encoding = null ) : int|false"
    ],
    "mb_stristr": [
        "mb_stristr ( string $haystack , string $needle , bool $before_needle = false , string|null $encoding = null ) : string|false"
    ],
    "mb_strlen": [
        "mb_strlen ( string $string , string|null $encoding = null ) : int"
    ],
    "mb_strpos": [
        "mb_strpos ( string $haystack , string $needle , int $offset = 0 , string|null $encoding = null ) : int|false"
    ],
    "mb_strrchr": [
        "mb_strrchr ( string $haystack , string $needle , bool $before_needle = false , string|null $encoding = null ) : string|false"
    ],
    "mb_strrichr": [
        "mb_strrichr ( string $haystack , string $needle , bool $before_needle = false , string|null $encoding = null ) : string|false"
    ],
    "mb_strripos": [
        "mb_strripos ( string $haystack , string $needle , int $offset = 0 , string|null $encoding = null ) : int|false"
    ],
    "mb_strrpos": [
        "mb_strrpos ( string $haystack , string $needle , int $offset = 0 , string|null $encoding = null ) : int|false"
    ],
    "mb_strstr": [
        "mb_strstr ( string $haystack , string $needle , bool $before_needle = false , string|null $encoding = null ) : string|false"
    ],
    "mb_strtolower": [
        "mb_strtolower ( string $string , string|null $encoding = null ) : string"
    ],
    "mb_strtoupper": [
        "mb_strtoupper ( string $string , string|null $encoding = null ) : string"
    ],
    "mb_strwidth": [
        "mb_strwidth ( string $string , string|null $encoding = null ) : int"
    ],
    "mb_substitute_character": [
        "mb_substitute_character ( string|int|null $substitute_character = null ) : string|int|bool"
    ],
    "mb_substr": [
        "mb_substr ( string $string , int $start , int|null $length = null , string|null $encoding = null ) : string"
    ],
    "mb_substr_count": [
        "mb_substr_count ( string $haystack , string $needle , string|null $encoding = null ) : int"
    ],
    "mcrypt_cbc": [
        "mcrypt_cbc ( int $cipher , string $key , string $data , int $mode , string $iv = ? ) : string",
        "mcrypt_cbc ( string $cipher , string $key , string $data , int $mode , string $iv = ? ) : string"
    ],
    "mcrypt_cfb": [
        "mcrypt_cfb ( int $cipher , string $key , string $data , int $mode , string $iv ) : string",
        "mcrypt_cfb ( string $cipher , string $key , string $data , int $mode , string $iv = ? ) : string"
    ],
    "mcrypt_create_iv": [
        "mcrypt_create_iv ( int $size , int $source = MCRYPT_DEV_URANDOM ) : string"
    ],
    "mcrypt_decrypt": [
        "mcrypt_decrypt ( string $cipher , string $key , string $data , string $mode , string $iv = ? ) : string|false"
    ],
    "mcrypt_ecb": [
        "mcrypt_ecb ( int $cipher , string $key , string $data , int $mode ) : string",
        "mcrypt_ecb ( string $cipher , string $key , string $data , int $mode , string $iv = ? ) : string"
    ],
    "mcrypt_enc_get_algorithms_name": [
        "mcrypt_enc_get_algorithms_name ( resource $td ) : string"
    ],
    "mcrypt_enc_get_block_size": [
        "mcrypt_enc_get_block_size ( resource $td ) : int"
    ],
    "mcrypt_enc_get_iv_size": [
        "mcrypt_enc_get_iv_size ( resource $td ) : int"
    ],
    "mcrypt_enc_get_key_size": [
        "mcrypt_enc_get_key_size ( resource $td ) : int"
    ],
    "mcrypt_enc_get_modes_name": [
        "mcrypt_enc_get_modes_name ( resource $td ) : string"
    ],
    "mcrypt_enc_get_supported_key_sizes": [
        "mcrypt_enc_get_supported_key_sizes ( resource $td ) : array"
    ],
    "mcrypt_enc_is_block_algorithm": [
        "mcrypt_enc_is_block_algorithm ( resource $td ) : bool"
    ],
    "mcrypt_enc_is_block_algorithm_mode": [
        "mcrypt_enc_is_block_algorithm_mode ( resource $td ) : bool"
    ],
    "mcrypt_enc_is_block_mode": [
        "mcrypt_enc_is_block_mode ( resource $td ) : bool"
    ],
    "mcrypt_enc_self_test": [
        "mcrypt_enc_self_test ( resource $td ) : int"
    ],
    "mcrypt_encrypt": [
        "mcrypt_encrypt ( string $cipher , string $key , string $data , string $mode , string $iv = ? ) : string|false"
    ],
    "mcrypt_generic": [
        "mcrypt_generic ( resource $td , string $data ) : string"
    ],
    "mcrypt_generic_deinit": [
        "mcrypt_generic_deinit ( resource $td ) : bool"
    ],
    "mcrypt_generic_end": [
        "mcrypt_generic_end ( resource $td ) : bool"
    ],
    "mcrypt_generic_init": [
        "mcrypt_generic_init ( resource $td , string $key , string $iv ) : int"
    ],
    "mcrypt_get_block_size": [
        "mcrypt_get_block_size ( int $cipher ) : int|false",
        "mcrypt_get_block_size ( string $cipher , string $mode ) : int|false"
    ],
    "mcrypt_get_cipher_name": [
        "mcrypt_get_cipher_name ( int $cipher ) : string",
        "mcrypt_get_cipher_name ( string $cipher ) : string"
    ],
    "mcrypt_get_iv_size": [
        "mcrypt_get_iv_size ( string $cipher , string $mode ) : int"
    ],
    "mcrypt_get_key_size": [
        "mcrypt_get_key_size ( int $cipher ) : int|false",
        "mcrypt_get_key_size ( string $cipher , string $mode ) : int|false"
    ],
    "mcrypt_list_algorithms": [
        "mcrypt_list_algorithms ( string $lib_dir = ini_get(\"mcrypt.algorithms_dir\") ) : array"
    ],
    "mcrypt_list_modes": [
        "mcrypt_list_modes ( string $lib_dir = ini_get(\"mcrypt.modes_dir\") ) : array"
    ],
    "mcrypt_module_close": [
        "mcrypt_module_close ( resource $td ) : bool"
    ],
    "mcrypt_module_get_algo_block_size": [
        "mcrypt_module_get_algo_block_size ( string $algorithm , string $lib_dir = ? ) : int"
    ],
    "mcrypt_module_get_algo_key_size": [
        "mcrypt_module_get_algo_key_size ( string $algorithm , string $lib_dir = ? ) : int"
    ],
    "mcrypt_module_get_supported_key_sizes": [
        "mcrypt_module_get_supported_key_sizes ( string $algorithm , string $lib_dir = ? ) : array"
    ],
    "mcrypt_module_is_block_algorithm": [
        "mcrypt_module_is_block_algorithm ( string $algorithm , string $lib_dir = ? ) : bool"
    ],
    "mcrypt_module_is_block_algorithm_mode": [
        "mcrypt_module_is_block_algorithm_mode ( string $mode , string $lib_dir = ? ) : bool"
    ],
    "mcrypt_module_is_block_mode": [
        "mcrypt_module_is_block_mode ( string $mode , string $lib_dir = ? ) : bool"
    ],
    "mcrypt_module_open": [
        "mcrypt_module_open ( string $algorithm , string $algorithm_directory , string $mode , string $mode_directory ) : resource"
    ],
    "mcrypt_module_self_test": [
        "mcrypt_module_self_test ( string $algorithm , string $lib_dir = ? ) : bool"
    ],
    "mcrypt_ofb": [
        "mcrypt_ofb ( int $cipher , string $key , string $data , int $mode , string $iv ) : string",
        "mcrypt_ofb ( string $cipher , string $key , string $data , int $mode , string $iv = ? ) : string"
    ],
    "md5": [
        "md5 ( string $string , bool $binary = false ) : string"
    ],
    "md5_file": [
        "md5_file ( string $filename , bool $binary = false ) : string|false"
    ],
    "mdecrypt_generic": [
        "mdecrypt_generic ( resource $td , string $data ) : string"
    ],
    "memcache_debug": [
        "memcache_debug ( bool $on_off ) : bool"
    ],
    "Memcached": [
        "public Memcached::__construct ( string $persistent_id = ? )"
    ],
    "memory_get_peak_usage": [
        "memory_get_peak_usage ( bool $real_usage = false ) : int"
    ],
    "memory_get_usage": [
        "memory_get_usage ( bool $real_usage = false ) : int"
    ],
    "MessageFormatter": [
        "public MessageFormatter::__construct ( string $locale , string $pattern )"
    ],
    "metaphone": [
        "metaphone ( string $string , int $max_phonemes = 0 ) : string"
    ],
    "method_exists": [
        "method_exists ( string|object $object , string $method_name ) : bool"
    ],
    "mhash": [
        "mhash ( int $algo , string $data , string|null $key = null ) : string|false"
    ],
    "mhash_count": [
        "mhash_count ( ) : int"
    ],
    "mhash_get_block_size": [
        "mhash_get_block_size ( int $algo ) : int|false"
    ],
    "mhash_get_hash_name": [
        "mhash_get_hash_name ( int $algo ) : string|false"
    ],
    "mhash_keygen_s2k": [
        "mhash_keygen_s2k ( int $algo , string $password , string $salt , int $length ) : string|false"
    ],
    "microtime": [
        "microtime ( bool $as_float = false ) : string|float"
    ],
    "mime_content_type": [
        "mime_content_type ( resource|string $filename ) : string|false"
    ],
    "min": [
        "min ( mixed $value , mixed ...$values ) : mixed",
        "min ( array $value_array ) : mixed"
    ],
    "mkdir": [
        "mkdir ( string $pathname , int $mode = 0777 , bool $recursive = false , resource $context = ? ) : bool"
    ],
    "mktime": [
        "mktime ( int $hour , int|null $minute = null , int|null $second = null , int|null $month = null , int|null $day = null , int|null $year = null ) : int|false"
    ],
    "money_format": [
        "money_format ( string $format , float $number ) : string"
    ],
    "Mongo": [
        "public Mongo::__construct ( string $server = ? , array $options = ? )"
    ],
    "MongoBinData": [
        "public MongoBinData::__construct ( string $data , int $type = 0 )"
    ],
    "MongoClient": [
        "public MongoClient::__construct ( string $server = \"mongodb:\/\/localhost:27017\" , array $options = array(\"connect\" => true) , array $driver_options = ? )"
    ],
    "MongoCode": [
        "public MongoCode::__construct ( string $code , array $scope = array() )"
    ],
    "MongoCollection": [
        "public MongoCollection::__construct ( MongoDB $db , string $name )"
    ],
    "MongoCommandCursor": [
        "public MongoCommandCursor::__construct ( MongoClient $connection , string $ns , array $command = array() )"
    ],
    "MongoCursor": [
        "public MongoCursor::__construct ( MongoClient $connection , string $ns , array $query = array() , array $fields = array() )"
    ],
    "MongoDate": [
        "public MongoDate::__construct ( int $sec = time() , int $usec = 0 )"
    ],
    "MongoDB": [
        "public MongoDB::__construct ( MongoClient $conn , string $name )"
    ],
    "MongoDeleteBatch": [
        "public MongoDeleteBatch::__construct ( MongoCollection $collection , array $write_options = ? )"
    ],
    "MongoGridFS": [
        "public MongoGridFS::__construct ( MongoDB $db , string $prefix = \"fs\" , mixed $chunks = \"fs\" )"
    ],
    "MongoGridFSCursor": [
        "public MongoGridFSCursor::__construct ( MongoGridFS $gridfs , resource $connection , string $ns , array $query , array $fields )"
    ],
    "MongoGridFSFile": [
        "public MongoGridfsFile::__construct ( MongoGridFS $gridfs , array $file )"
    ],
    "MongoId": [
        "public MongoId::__construct ( string|MongoId $id = null )"
    ],
    "MongoInsertBatch": [
        "public MongoInsertBatch::__construct ( MongoCollection $collection , array $write_options = ? )"
    ],
    "MongoInt32": [
        "public MongoInt32::__construct ( string $value )"
    ],
    "MongoInt64": [
        "public MongoInt64::__construct ( string $value )"
    ],
    "MongoRegex": [
        "public MongoRegex::__construct ( string $regex )"
    ],
    "MongoTimestamp": [
        "public MongoTimestamp::__construct ( int $sec = time() , int $inc = ? )"
    ],
    "MongoUpdateBatch": [
        "public MongoUpdateBatch::__construct ( MongoCollection $collection , array $write_options = ? )"
    ],
    "MongoWriteBatch": [
        "protected MongoWriteBatch::__construct ( MongoCollection $collection , string $batch_type = ? , array $write_options = ? )"
    ],
    "move_uploaded_file": [
        "move_uploaded_file ( string $from , string $to ) : bool"
    ],
    "mqseries_back": [
        "mqseries_back ( resource $hconn , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_begin": [
        "mqseries_begin ( resource $hconn , array $beginOptions , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_close": [
        "mqseries_close ( resource $hconn , resource $hobj , int $options , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_cmit": [
        "mqseries_cmit ( resource $hconn , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_conn": [
        "mqseries_conn ( string $qManagerName , resource &$hconn , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_connx": [
        "mqseries_connx ( string $qManagerName , array &$connOptions , resource &$hconn , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_disc": [
        "mqseries_disc ( resource $hconn , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_get": [
        "mqseries_get ( resource $hConn , resource $hObj , array &$md , array &$gmo , int &$bufferLength , string &$msg , int &$data_length , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_inq": [
        "mqseries_inq ( resource $hconn , resource $hobj , int $selectorCount , array $selectors , int $intAttrCount , resource &$intAttr , int $charAttrLength , resource &$charAttr , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_open": [
        "mqseries_open ( resource $hconn , array &$objDesc , int $option , resource &$hobj , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_put": [
        "mqseries_put ( resource $hConn , resource $hObj , array &$md , array &$pmo , string $message , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_put1": [
        "mqseries_put1 ( resource $hconn , resource &$objDesc , resource &$msgDesc , resource &$pmo , string $buffer , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_set": [
        "mqseries_set ( resource $hConn , resource $hObj , int $selectorCount , array $selectors , int $intAttrCount , array $intAttrs , int $charAttrLength , array $charAttrs , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_strerror": [
        "mqseries_strerror ( int $reason ) : string"
    ],
    "msg_get_queue": [
        "msg_get_queue ( int $key , int $permissions = 0666 ) : SysvMessageQueue|false"
    ],
    "msg_queue_exists": [
        "msg_queue_exists ( int $key ) : bool"
    ],
    "msg_receive": [
        "msg_receive ( SysvMessageQueue $queue , int $desired_message_type , int &$received_message_type , int $max_message_size , mixed &$message , bool $unserialize = true , int $flags = 0 , int &$error_code = null ) : bool"
    ],
    "msg_remove_queue": [
        "msg_remove_queue ( SysvMessageQueue $queue ) : bool"
    ],
    "msg_send": [
        "msg_send ( SysvMessageQueue $queue , int $message_type , string|int|float|bool $message , bool $serialize = true , bool $blocking = true , int &$error_code = null ) : bool"
    ],
    "msg_set_queue": [
        "msg_set_queue ( SysvMessageQueue $queue , array $data ) : bool"
    ],
    "msg_stat_queue": [
        "msg_stat_queue ( SysvMessageQueue $queue ) : array|false"
    ],
    "msgfmt_create": [
        "msgfmt_create ( string $locale , string $pattern ) : MessageFormatter"
    ],
    "msgfmt_format": [
        "msgfmt_format ( MessageFormatter $fmt , array $args ) : string"
    ],
    "msgfmt_format_message": [
        "msgfmt_format_message ( string $locale , string $pattern , array $args ) : string"
    ],
    "msgfmt_get_error_code": [
        "msgfmt_get_error_code ( MessageFormatter $fmt ) : int"
    ],
    "msgfmt_get_error_message": [
        "msgfmt_get_error_message ( MessageFormatter $fmt ) : string"
    ],
    "msgfmt_get_locale": [
        "msgfmt_get_locale ( NumberFormatter $formatter ) : string"
    ],
    "msgfmt_get_pattern": [
        "msgfmt_get_pattern ( MessageFormatter $fmt ) : string"
    ],
    "msgfmt_parse": [
        "msgfmt_parse ( MessageFormatter $fmt , string $value ) : array"
    ],
    "msgfmt_parse_message": [
        "msgfmt_parse_message ( string $locale , string $pattern , string $value ) : array"
    ],
    "msgfmt_set_pattern": [
        "msgfmt_set_pattern ( MessageFormatter $fmt , string $pattern ) : bool"
    ],
    "mt_getrandmax": [
        "mt_getrandmax ( ) : int"
    ],
    "mt_rand": [
        "mt_rand ( ) : int",
        "mt_rand ( int $min , int $max ) : int"
    ],
    "mt_srand": [
        "mt_srand ( int $seed = 0 , int $mode = MT_RAND_MT19937 ) : void"
    ],
    "MultipleIterator": [
        "public MultipleIterator::__construct (  int $flags  = MultipleIterator::MIT_NEED_ALL|MultipleIterator::MIT_KEYS_NUMERIC  )"
    ],
    "mysql_affected_rows": [
        "mysql_affected_rows ( resource $link_identifier = NULL ) : int"
    ],
    "mysql_client_encoding": [
        "mysql_client_encoding ( resource $link_identifier = NULL ) : string"
    ],
    "mysql_close": [
        "mysql_close ( resource $link_identifier = NULL ) : bool"
    ],
    "mysql_connect": [
        "mysql_connect ( string $server = ini_get(\"mysql.default_host\") , string $username = ini_get(\"mysql.default_user\") , string $password = ini_get(\"mysql.default_password\") , bool $new_link = false , int $client_flags = 0 ) : resource|false"
    ],
    "mysql_create_db": [
        "mysql_create_db ( string $database_name , resource $link_identifier = NULL ) : bool"
    ],
    "mysql_data_seek": [
        "mysql_data_seek ( resource $result , int $row_number ) : bool"
    ],
    "mysql_db_name": [
        "mysql_db_name ( resource $result , int $row , mixed $field = NULL ) : string"
    ],
    "mysql_db_query": [
        "mysql_db_query ( string $database , string $query , resource $link_identifier = NULL ) : resource|bool"
    ],
    "mysql_drop_db": [
        "mysql_drop_db ( string $database_name , resource $link_identifier = NULL ) : bool"
    ],
    "mysql_errno": [
        "mysql_errno ( resource $link_identifier = NULL ) : int"
    ],
    "mysql_error": [
        "mysql_error ( resource $link_identifier = NULL ) : string"
    ],
    "mysql_escape_string": [
        "mysql_escape_string ( string $unescaped_string ) : string"
    ],
    "mysql_fetch_array": [
        "mysql_fetch_array ( resource $result , int $result_type = MYSQL_BOTH ) : array"
    ],
    "mysql_fetch_assoc": [
        "mysql_fetch_assoc ( resource $result ) : array"
    ],
    "mysql_fetch_field": [
        "mysql_fetch_field ( resource $result , int $field_offset = 0 ) : object"
    ],
    "mysql_fetch_lengths": [
        "mysql_fetch_lengths ( resource $result ) : array|false"
    ],
    "mysql_fetch_object": [
        "mysql_fetch_object ( resource $result , string $class_name = ? , array $params = ? ) : object"
    ],
    "mysql_fetch_row": [
        "mysql_fetch_row ( resource $result ) : array"
    ],
    "mysql_field_flags": [
        "mysql_field_flags ( resource $result , int $field_offset ) : string|false"
    ],
    "mysql_field_len": [
        "mysql_field_len ( resource $result , int $field_offset ) : int|false"
    ],
    "mysql_field_name": [
        "mysql_field_name ( resource $result , int $field_offset ) : string|false"
    ],
    "mysql_field_seek": [
        "mysql_field_seek ( resource $result , int $field_offset ) : bool"
    ],
    "mysql_field_table": [
        "mysql_field_table ( resource $result , int $field_offset ) : string"
    ],
    "mysql_field_type": [
        "mysql_field_type ( resource $result , int $field_offset ) : string"
    ],
    "mysql_free_result": [
        "mysql_free_result ( resource $result ) : bool"
    ],
    "mysql_get_client_info": [
        "mysql_get_client_info ( ) : string"
    ],
    "mysql_get_host_info": [
        "mysql_get_host_info ( resource $link_identifier = NULL ) : string|false"
    ],
    "mysql_get_proto_info": [
        "mysql_get_proto_info ( resource $link_identifier = NULL ) : int|false"
    ],
    "mysql_get_server_info": [
        "mysql_get_server_info ( resource $link_identifier = NULL ) : string|false"
    ],
    "mysql_info": [
        "mysql_info ( resource $link_identifier = NULL ) : string"
    ],
    "mysql_insert_id": [
        "mysql_insert_id ( resource $link_identifier = NULL ) : int"
    ],
    "mysql_list_dbs": [
        "mysql_list_dbs ( resource $link_identifier = NULL ) : resource"
    ],
    "mysql_list_fields": [
        "mysql_list_fields ( string $database_name , string $table_name , resource $link_identifier = NULL ) : resource"
    ],
    "mysql_list_processes": [
        "mysql_list_processes ( resource $link_identifier = NULL ) : resource|false"
    ],
    "mysql_list_tables": [
        "mysql_list_tables ( string $database , resource $link_identifier = NULL ) : resource|false"
    ],
    "mysql_num_fields": [
        "mysql_num_fields ( resource $result ) : int|false"
    ],
    "mysql_num_rows": [
        "mysql_num_rows ( resource $result ) : int|false"
    ],
    "mysql_pconnect": [
        "mysql_pconnect ( string $server = ini_get(\"mysql.default_host\") , string $username = ini_get(\"mysql.default_user\") , string $password = ini_get(\"mysql.default_password\") , int $client_flags = 0 ) : resource"
    ],
    "mysql_ping": [
        "mysql_ping ( resource $link_identifier = NULL ) : bool"
    ],
    "mysql_query": [
        "mysql_query ( string $query , resource $link_identifier = NULL ) : mixed"
    ],
    "mysql_real_escape_string": [
        "mysql_real_escape_string ( string $unescaped_string , resource $link_identifier = NULL ) : string"
    ],
    "mysql_result": [
        "mysql_result ( resource $result , int $row , mixed $field = 0 ) : string"
    ],
    "mysql_select_db": [
        "mysql_select_db ( string $database_name , resource $link_identifier = NULL ) : bool"
    ],
    "mysql_set_charset": [
        "mysql_set_charset ( string $charset , resource $link_identifier = NULL ) : bool"
    ],
    "mysql_stat": [
        "mysql_stat ( resource $link_identifier = NULL ) : string"
    ],
    "mysql_tablename": [
        "mysql_tablename ( resource $result , int $i ) : string|false"
    ],
    "mysql_thread_id": [
        "mysql_thread_id ( resource $link_identifier = NULL ) : int|false"
    ],
    "mysql_unbuffered_query": [
        "mysql_unbuffered_query ( string $query , resource $link_identifier = NULL ) : resource"
    ],
    "mysqli": [
        "public mysqli::__construct ( string $host = ini_get(\"mysqli.default_host\") , string $username = ini_get(\"mysqli.default_user\") , string $passwd = ini_get(\"mysqli.default_pw\") , string $dbname = \"\" , int $port = ini_get(\"mysqli.default_port\") , string $socket = ini_get(\"mysqli.default_socket\") )"
    ],
    "mysqli_affected_rows": [
        "mysqli_affected_rows ( mysqli $link ) : int"
    ],
    "mysqli_autocommit": [
        "mysqli_autocommit ( mysqli $link , bool $mode ) : bool"
    ],
    "mysqli_begin_transaction": [
        "mysqli_begin_transaction ( mysqli $link , int $flags = 0 , string $name = ? ) : bool"
    ],
    "mysqli_change_user": [
        "mysqli_change_user ( mysqli $link , string $user , string $password , string $database ) : bool"
    ],
    "mysqli_character_set_name": [
        "mysqli_character_set_name ( mysqli $link ) : string"
    ],
    "mysqli_close": [
        "mysqli_close ( mysqli $link ) : bool"
    ],
    "mysqli_commit": [
        "mysqli_commit ( mysqli $link , int $flags = 0 , string $name = ? ) : bool"
    ],
    "mysqli_connect": [
        "mysqli_connect ( string $host = ini_get(\"mysqli.default_host\") , string $username = ini_get(\"mysqli.default_user\") , string $passwd = ini_get(\"mysqli.default_pw\") , string $dbname = \"\" , int $port = ini_get(\"mysqli.default_port\") , string $socket = ini_get(\"mysqli.default_socket\") ) : mysqli|false"
    ],
    "mysqli_connect_errno": [
        "mysqli_connect_errno ( ) : int"
    ],
    "mysqli_connect_error": [
        "mysqli_connect_error ( ) : string"
    ],
    "mysqli_data_seek": [
        "mysqli_data_seek ( mysqli_result $result , int $offset ) : bool"
    ],
    "mysqli_debug": [
        "mysqli_debug ( string $message ) : bool"
    ],
    "mysqli_dump_debug_info": [
        "mysqli_dump_debug_info ( mysqli $link ) : bool"
    ],
    "mysqli_embedded_server_end": [
        "mysqli_embedded_server_end ( ) : void"
    ],
    "mysqli_embedded_server_start": [
        "mysqli_embedded_server_start ( int $start , array $arguments , array $groups ) : bool"
    ],
    "mysqli_errno": [
        "mysqli_errno ( mysqli $link ) : int"
    ],
    "mysqli_error": [
        "mysqli_error ( mysqli $link ) : string"
    ],
    "mysqli_error_list": [
        "mysqli_error_list ( mysqli $link ) : array"
    ],
    "mysqli_fetch_all": [
        "mysqli_fetch_all ( mysqli_result $result , int $resulttype = MYSQLI_NUM ) : mixed"
    ],
    "mysqli_fetch_array": [
        "mysqli_fetch_array ( mysqli_result $result , int $resulttype = MYSQLI_BOTH ) : mixed"
    ],
    "mysqli_fetch_assoc": [
        "mysqli_fetch_assoc ( mysqli_result $result ) : array"
    ],
    "mysqli_fetch_field": [
        "mysqli_fetch_field ( mysqli_result $result ) : object"
    ],
    "mysqli_fetch_field_direct": [
        "mysqli_fetch_field_direct ( mysqli_result $result , int $fieldnr ) : object"
    ],
    "mysqli_fetch_fields": [
        "mysqli_fetch_fields ( mysqli_result $result ) : array"
    ],
    "mysqli_fetch_lengths": [
        "mysqli_fetch_lengths ( mysqli_result $result ) : array"
    ],
    "mysqli_fetch_object": [
        "mysqli_fetch_object ( mysqli_result $result , string $class_name = \"stdClass\" , array $params = ? ) : object"
    ],
    "mysqli_fetch_row": [
        "mysqli_fetch_row ( mysqli_result $result ) : mixed"
    ],
    "mysqli_field_count": [
        "mysqli_field_count ( mysqli $link ) : int"
    ],
    "mysqli_field_seek": [
        "mysqli_field_seek ( mysqli_result $result , int $fieldnr ) : bool"
    ],
    "mysqli_field_tell": [
        "mysqli_field_tell ( mysqli_result $result ) : int"
    ],
    "mysqli_free_result": [
        "mysqli_free_result ( mysqli_result $result ) : void"
    ],
    "mysqli_get_charset": [
        "mysqli_get_charset ( mysqli $link ) : object"
    ],
    "mysqli_get_client_info": [
        "mysqli_get_client_info ( mysqli $link = NULL ) : string"
    ],
    "mysqli_get_client_stats": [
        "mysqli_get_client_stats ( ) : array"
    ],
    "mysqli_get_client_version": [
        "mysqli_get_client_version ( mysqli $link ) : int"
    ],
    "mysqli_get_connection_stats": [
        "mysqli_get_connection_stats ( mysqli $link ) : array"
    ],
    "mysqli_get_host_info": [
        "mysqli_get_host_info ( mysqli $link ) : string"
    ],
    "mysqli_get_links_stats": [
        "mysqli_get_links_stats ( ) : array"
    ],
    "mysqli_get_proto_info": [
        "mysqli_get_proto_info ( mysqli $link ) : int"
    ],
    "mysqli_get_server_info": [
        "mysqli_get_server_info ( mysqli $link ) : string"
    ],
    "mysqli_get_server_version": [
        "mysqli_get_server_version ( mysqli $link ) : int"
    ],
    "mysqli_get_warnings": [
        "mysqli_get_warnings ( mysqli $link ) : mysqli_warning"
    ],
    "mysqli_info": [
        "mysqli_info ( mysqli $link ) : string"
    ],
    "mysqli_init": [
        "mysqli_init ( ) : mysqli"
    ],
    "mysqli_insert_id": [
        "mysqli_insert_id ( mysqli $link ) : mixed"
    ],
    "mysqli_kill": [
        "mysqli_kill ( mysqli $link , int $processid ) : bool"
    ],
    "mysqli_more_results": [
        "mysqli_more_results ( mysqli $link ) : bool"
    ],
    "mysqli_multi_query": [
        "mysqli_multi_query ( mysqli $link , string $query ) : bool"
    ],
    "mysqli_next_result": [
        "mysqli_next_result ( mysqli $link ) : bool"
    ],
    "mysqli_num_fields": [
        "mysqli_num_fields ( mysqli_result $result ) : int"
    ],
    "mysqli_num_rows": [
        "mysqli_num_rows ( mysqli_result $result ) : int"
    ],
    "mysqli_options": [
        "mysqli_options ( mysqli $link , int $option , mixed $value ) : bool"
    ],
    "mysqli_ping": [
        "mysqli_ping ( mysqli $link ) : bool"
    ],
    "mysqli_poll": [
        "mysqli_poll ( array &$read , array &$error , array &$reject , int $sec , int $usec = 0 ) : int"
    ],
    "mysqli_prepare": [
        "mysqli_prepare ( mysqli $link , string $query ) : mysqli_stmt"
    ],
    "mysqli_query": [
        "mysqli_query ( mysqli $link , string $query , int $resultmode = MYSQLI_STORE_RESULT ) : mixed"
    ],
    "mysqli_real_connect": [
        "mysqli_real_connect ( mysqli $link , string $host = ? , string $username = ? , string $passwd = ? , string $dbname = ? , int $port = ? , string $socket = ? , int $flags = ? ) : bool"
    ],
    "mysqli_real_escape_string": [
        "mysqli_real_escape_string ( mysqli $link , string $escapestr ) : string"
    ],
    "mysqli_real_query": [
        "mysqli_real_query ( mysqli $link , string $query ) : bool"
    ],
    "mysqli_reap_async_query": [
        "mysqli_reap_async_query ( mysqli $link ) : mysqli_result"
    ],
    "mysqli_refresh": [
        "mysqli_refresh ( mysqli $link , int $options ) : bool"
    ],
    "mysqli_release_savepoint": [
        "mysqli_release_savepoint ( mysqli $link , string $name ) : bool"
    ],
    "mysqli_report": [
        "mysqli_report ( int $flags ) : bool"
    ],
    "mysqli_rollback": [
        "mysqli_rollback ( mysqli $link , int $flags = 0 , string $name = ? ) : bool"
    ],
    "mysqli_savepoint": [
        "mysqli_savepoint ( mysqli $link , string $name ) : bool"
    ],
    "mysqli_select_db": [
        "mysqli_select_db ( mysqli $link , string $dbname ) : bool"
    ],
    "mysqli_set_charset": [
        "mysqli_set_charset ( mysqli $link , string $charset ) : bool"
    ],
    "mysqli_sqlstate": [
        "mysqli_sqlstate ( mysqli $link ) : string"
    ],
    "mysqli_ssl_set": [
        "mysqli_ssl_set ( mysqli $link , string $key , string $cert , string $ca , string $capath , string $cipher ) : bool"
    ],
    "mysqli_stat": [
        "mysqli_stat ( mysqli $link ) : string"
    ],
    "mysqli_stmt": [
        "public mysqli_stmt::__construct ( mysqli $link , string $query = ? )"
    ],
    "mysqli_stmt_affected_rows": [
        "mysqli_stmt_affected_rows ( mysqli_stmt $stmt ) : int"
    ],
    "mysqli_stmt_attr_get": [
        "mysqli_stmt_attr_get ( mysqli_stmt $stmt , int $attr ) : int"
    ],
    "mysqli_stmt_attr_set": [
        "mysqli_stmt_attr_set ( mysqli_stmt $stmt , int $attr , int $mode ) : bool"
    ],
    "mysqli_stmt_bind_param": [
        "mysqli_stmt_bind_param ( mysqli_stmt $stmt , string $types , mixed &$var , mixed &...$vars ) : bool"
    ],
    "mysqli_stmt_bind_result": [
        "mysqli_stmt_bind_result ( mysqli_stmt $stmt , mixed &$var , mixed &...$vars ) : bool"
    ],
    "mysqli_stmt_close": [
        "mysqli_stmt_close ( mysqli_stmt $stmt ) : bool"
    ],
    "mysqli_stmt_data_seek": [
        "mysqli_stmt_data_seek ( mysqli_stmt $stmt , int $offset ) : void"
    ],
    "mysqli_stmt_errno": [
        "mysqli_stmt_errno ( mysqli_stmt $stmt ) : int"
    ],
    "mysqli_stmt_error": [
        "mysqli_stmt_error ( mysqli_stmt $stmt ) : string"
    ],
    "mysqli_stmt_error_list": [
        "mysqli_stmt_error_list ( mysqli_stmt $stmt ) : array"
    ],
    "mysqli_stmt_execute": [
        "mysqli_stmt_execute ( mysqli_stmt $stmt ) : bool"
    ],
    "mysqli_stmt_fetch": [
        "mysqli_stmt_fetch ( mysqli_stmt $stmt ) : bool"
    ],
    "mysqli_stmt_field_count": [
        "mysqli_stmt_field_count ( mysqli_stmt $stmt ) : int"
    ],
    "mysqli_stmt_free_result": [
        "mysqli_stmt_free_result ( mysqli_stmt $stmt ) : void"
    ],
    "mysqli_stmt_get_result": [
        "mysqli_stmt_get_result ( mysqli_stmt $stmt ) : mysqli_result"
    ],
    "mysqli_stmt_get_warnings": [
        "mysqli_stmt_get_warnings ( mysqli_stmt $stmt ) : object"
    ],
    "mysqli_stmt_init": [
        "mysqli_stmt_init ( mysqli $link ) : mysqli_stmt"
    ],
    "mysqli_stmt_insert_id": [
        "mysqli_stmt_insert_id ( mysqli_stmt $stmt ) : mixed"
    ],
    "mysqli_stmt_more_results": [
        "mysqli_stmt_more_results ( mysql_stmt $stmt ) : bool"
    ],
    "mysqli_stmt_next_result": [
        "mysqli_stmt_next_result ( mysql_stmt $stmt ) : bool"
    ],
    "mysqli_stmt_num_rows": [
        "mysqli_stmt_num_rows ( mysqli_stmt $stmt ) : int"
    ],
    "mysqli_stmt_param_count": [
        "mysqli_stmt_param_count ( mysqli_stmt $stmt ) : int"
    ],
    "mysqli_stmt_prepare": [
        "mysqli_stmt_prepare ( mysqli_stmt $stmt , string $query ) : bool"
    ],
    "mysqli_stmt_reset": [
        "mysqli_stmt_reset ( mysqli_stmt $stmt ) : bool"
    ],
    "mysqli_stmt_result_metadata": [
        "mysqli_stmt_result_metadata ( mysqli_stmt $stmt ) : mysqli_result"
    ],
    "mysqli_stmt_send_long_data": [
        "mysqli_stmt_send_long_data ( mysqli_stmt $stmt , int $param_nr , string $data ) : bool"
    ],
    "mysqli_stmt_sqlstate": [
        "mysqli_stmt_sqlstate ( mysqli_stmt $stmt ) : string"
    ],
    "mysqli_stmt_store_result": [
        "mysqli_stmt_store_result ( mysqli_stmt $stmt ) : bool"
    ],
    "mysqli_store_result": [
        "mysqli_store_result ( mysqli $link , int $option = ? ) : mysqli_result"
    ],
    "mysqli_thread_id": [
        "mysqli_thread_id ( mysqli $link ) : int"
    ],
    "mysqli_thread_safe": [
        "mysqli_thread_safe ( ) : bool"
    ],
    "mysqli_use_result": [
        "mysqli_use_result ( mysqli $link ) : mysqli_result"
    ],
    "mysqli_warning_count": [
        "mysqli_warning_count ( mysqli $link ) : int"
    ],
    "mysqlnd_memcache_get_config": [
        "mysqlnd_memcache_get_config ( mixed $connection ) : array"
    ],
    "mysqlnd_memcache_set": [
        "mysqlnd_memcache_set ( mixed $mysql_connection , Memcached $memcache_connection = ? , string $pattern = ? , callable $callback = ? ) : bool"
    ],
    "mysqlnd_ms_dump_servers": [
        "mysqlnd_ms_dump_servers ( mixed $connection ) : array"
    ],
    "mysqlnd_ms_fabric_select_global": [
        "mysqlnd_ms_fabric_select_global ( mixed $connection , mixed $table_name ) : array"
    ],
    "mysqlnd_ms_fabric_select_shard": [
        "mysqlnd_ms_fabric_select_shard ( mixed $connection , mixed $table_name , mixed $shard_key ) : array"
    ],
    "mysqlnd_ms_get_last_gtid": [
        "mysqlnd_ms_get_last_gtid ( mixed $connection ) : string"
    ],
    "mysqlnd_ms_get_last_used_connection": [
        "mysqlnd_ms_get_last_used_connection ( mixed $connection ) : array"
    ],
    "mysqlnd_ms_get_stats": [
        "mysqlnd_ms_get_stats ( ) : array"
    ],
    "mysqlnd_ms_match_wild": [
        "mysqlnd_ms_match_wild ( string $table_name , string $wildcard ) : bool"
    ],
    "mysqlnd_ms_query_is_select": [
        "mysqlnd_ms_query_is_select ( string $query ) : int"
    ],
    "mysqlnd_ms_set_qos": [
        "mysqlnd_ms_set_qos ( mixed $connection , int $service_level , int $service_level_option = ? , mixed $option_value = ? ) : bool"
    ],
    "mysqlnd_ms_set_user_pick_server": [
        "mysqlnd_ms_set_user_pick_server ( string $function ) : bool"
    ],
    "mysqlnd_ms_xa_begin": [
        "mysqlnd_ms_xa_begin ( mixed $connection , string $gtrid , int $timeout = ? ) : int"
    ],
    "mysqlnd_ms_xa_commit": [
        "mysqlnd_ms_xa_commit ( mixed $connection , string $gtrid ) : bool"
    ],
    "mysqlnd_ms_xa_gc": [
        "mysqlnd_ms_xa_gc ( mixed $connection , string $gtrid = ? , bool $ignore_max_retries = ? ) : int"
    ],
    "mysqlnd_ms_xa_rollback": [
        "mysqlnd_ms_xa_rollback ( mixed $connection , string $gtrid ) : int"
    ],
    "mysqlnd_qc_clear_cache": [
        "mysqlnd_qc_clear_cache ( ) : bool"
    ],
    "mysqlnd_qc_get_available_handlers": [
        "mysqlnd_qc_get_available_handlers ( ) : array"
    ],
    "mysqlnd_qc_get_cache_info": [
        "mysqlnd_qc_get_cache_info ( ) : array"
    ],
    "mysqlnd_qc_get_core_stats": [
        "mysqlnd_qc_get_core_stats ( ) : array"
    ],
    "mysqlnd_qc_get_normalized_query_trace_log": [
        "mysqlnd_qc_get_normalized_query_trace_log ( ) : array"
    ],
    "mysqlnd_qc_get_query_trace_log": [
        "mysqlnd_qc_get_query_trace_log ( ) : array"
    ],
    "mysqlnd_qc_set_cache_condition": [
        "mysqlnd_qc_set_cache_condition (  int $condition_type  ,  mixed $condition  ,  mixed $condition_option  ) : bool"
    ],
    "mysqlnd_qc_set_is_select": [
        "mysqlnd_qc_set_is_select (  string $callback  ) : mixed"
    ],
    "mysqlnd_qc_set_storage_handler": [
        "mysqlnd_qc_set_storage_handler (  string $handler  ) : bool"
    ],
    "mysqlnd_qc_set_user_handlers": [
        "mysqlnd_qc_set_user_handlers (  string $get_hash  ,  string $find_query_in_cache  ,  string $return_to_cache  ,  string $add_query_to_cache_if_not_exists  ,  string $query_is_select  ,  string $update_query_run_time_stats  ,  string $get_stats  ,  string $clear_cache  ) : bool"
    ],
    "mysqlnd_uh_convert_to_mysqlnd": [
        "mysqlnd_uh_convert_to_mysqlnd ( mysqli &$mysql_connection ) : resource"
    ],
    "mysqlnd_uh_set_connection_proxy": [
        "mysqlnd_uh_set_connection_proxy ( MysqlndUhConnection &$connection_proxy , mysqli &$mysqli_connection = ? ) : bool"
    ],
    "mysqlnd_uh_set_statement_proxy": [
        "mysqlnd_uh_set_statement_proxy ( MysqlndUhStatement &$statement_proxy ) : bool"
    ],
    "MysqlndUhConnection": [
        "public MysqlndUhConnection::__construct ( )"
    ],
    "MysqlndUhPreparedStatement": [
        "public MysqlndUhPreparedStatement::__construct ( )"
    ],
    "natcasesort": [
        "natcasesort ( array &$array ) : bool"
    ],
    "natsort": [
        "natsort ( array &$array ) : bool"
    ],
    "ncurses_addch": [
        "ncurses_addch ( int $ch ) : int"
    ],
    "ncurses_addchnstr": [
        "ncurses_addchnstr ( string $s , int $n ) : int"
    ],
    "ncurses_addchstr": [
        "ncurses_addchstr ( string $s ) : int"
    ],
    "ncurses_addnstr": [
        "ncurses_addnstr ( string $s , int $n ) : int"
    ],
    "ncurses_addstr": [
        "ncurses_addstr ( string $text ) : int"
    ],
    "ncurses_assume_default_colors": [
        "ncurses_assume_default_colors ( int $fg , int $bg ) : int"
    ],
    "ncurses_attroff": [
        "ncurses_attroff ( int $attributes ) : int"
    ],
    "ncurses_attron": [
        "ncurses_attron ( int $attributes ) : int"
    ],
    "ncurses_attrset": [
        "ncurses_attrset ( int $attributes ) : int"
    ],
    "ncurses_baudrate": [
        "ncurses_baudrate ( ) : int"
    ],
    "ncurses_beep": [
        "ncurses_beep ( ) : int"
    ],
    "ncurses_bkgd": [
        "ncurses_bkgd ( int $attrchar ) : int"
    ],
    "ncurses_bkgdset": [
        "ncurses_bkgdset ( int $attrchar ) : void"
    ],
    "ncurses_border": [
        "ncurses_border ( int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner ) : int"
    ],
    "ncurses_bottom_panel": [
        "ncurses_bottom_panel ( resource $panel ) : int"
    ],
    "ncurses_can_change_color": [
        "ncurses_can_change_color ( ) : bool"
    ],
    "ncurses_cbreak": [
        "ncurses_cbreak ( ) : bool"
    ],
    "ncurses_clear": [
        "ncurses_clear ( ) : bool"
    ],
    "ncurses_clrtobot": [
        "ncurses_clrtobot ( ) : bool"
    ],
    "ncurses_clrtoeol": [
        "ncurses_clrtoeol ( ) : bool"
    ],
    "ncurses_color_content": [
        "ncurses_color_content ( int $color , int &$r , int &$g , int &$b ) : int"
    ],
    "ncurses_color_set": [
        "ncurses_color_set ( int $pair ) : int"
    ],
    "ncurses_curs_set": [
        "ncurses_curs_set ( int $visibility ) : int"
    ],
    "ncurses_def_prog_mode": [
        "ncurses_def_prog_mode ( ) : bool"
    ],
    "ncurses_def_shell_mode": [
        "ncurses_def_shell_mode ( ) : bool"
    ],
    "ncurses_define_key": [
        "ncurses_define_key ( string $definition , int $keycode ) : int"
    ],
    "ncurses_del_panel": [
        "ncurses_del_panel ( resource $panel ) : bool"
    ],
    "ncurses_delay_output": [
        "ncurses_delay_output ( int $milliseconds ) : int"
    ],
    "ncurses_delch": [
        "ncurses_delch ( ) : bool"
    ],
    "ncurses_deleteln": [
        "ncurses_deleteln ( ) : bool"
    ],
    "ncurses_delwin": [
        "ncurses_delwin ( resource $window ) : bool"
    ],
    "ncurses_doupdate": [
        "ncurses_doupdate ( ) : bool"
    ],
    "ncurses_echo": [
        "ncurses_echo ( ) : bool"
    ],
    "ncurses_echochar": [
        "ncurses_echochar ( int $character ) : int"
    ],
    "ncurses_end": [
        "ncurses_end ( ) : int"
    ],
    "ncurses_erase": [
        "ncurses_erase ( ) : bool"
    ],
    "ncurses_erasechar": [
        "ncurses_erasechar ( ) : string"
    ],
    "ncurses_filter": [
        "ncurses_filter ( ) : void"
    ],
    "ncurses_flash": [
        "ncurses_flash ( ) : bool"
    ],
    "ncurses_flushinp": [
        "ncurses_flushinp ( ) : bool"
    ],
    "ncurses_getch": [
        "ncurses_getch ( ) : int"
    ],
    "ncurses_getmaxyx": [
        "ncurses_getmaxyx ( resource $window , int &$y , int &$x ) : void"
    ],
    "ncurses_getmouse": [
        "ncurses_getmouse ( array &$mevent ) : bool"
    ],
    "ncurses_getyx": [
        "ncurses_getyx ( resource $window , int &$y , int &$x ) : void"
    ],
    "ncurses_halfdelay": [
        "ncurses_halfdelay ( int $tenth ) : int"
    ],
    "ncurses_has_colors": [
        "ncurses_has_colors ( ) : bool"
    ],
    "ncurses_has_ic": [
        "ncurses_has_ic ( ) : bool"
    ],
    "ncurses_has_il": [
        "ncurses_has_il ( ) : bool"
    ],
    "ncurses_has_key": [
        "ncurses_has_key ( int $keycode ) : int"
    ],
    "ncurses_hide_panel": [
        "ncurses_hide_panel ( resource $panel ) : int"
    ],
    "ncurses_hline": [
        "ncurses_hline ( int $charattr , int $n ) : int"
    ],
    "ncurses_inch": [
        "ncurses_inch ( ) : string"
    ],
    "ncurses_init": [
        "ncurses_init ( ) : void"
    ],
    "ncurses_init_color": [
        "ncurses_init_color ( int $color , int $r , int $g , int $b ) : int"
    ],
    "ncurses_init_pair": [
        "ncurses_init_pair ( int $pair , int $fg , int $bg ) : int"
    ],
    "ncurses_insch": [
        "ncurses_insch ( int $character ) : int"
    ],
    "ncurses_insdelln": [
        "ncurses_insdelln ( int $count ) : int"
    ],
    "ncurses_insertln": [
        "ncurses_insertln ( ) : int"
    ],
    "ncurses_insstr": [
        "ncurses_insstr ( string $text ) : int"
    ],
    "ncurses_instr": [
        "ncurses_instr ( string &$buffer ) : int"
    ],
    "ncurses_isendwin": [
        "ncurses_isendwin ( ) : bool"
    ],
    "ncurses_keyok": [
        "ncurses_keyok ( int $keycode , bool $enable ) : int"
    ],
    "ncurses_keypad": [
        "ncurses_keypad ( resource $window , bool $bf ) : int"
    ],
    "ncurses_killchar": [
        "ncurses_killchar ( ) : string"
    ],
    "ncurses_longname": [
        "ncurses_longname ( ) : string"
    ],
    "ncurses_meta": [
        "ncurses_meta ( resource $window , bool $8bit ) : int"
    ],
    "ncurses_mouse_trafo": [
        "ncurses_mouse_trafo ( int &$y , int &$x , bool $toscreen ) : bool"
    ],
    "ncurses_mouseinterval": [
        "ncurses_mouseinterval ( int $milliseconds ) : int"
    ],
    "ncurses_mousemask": [
        "ncurses_mousemask ( int $newmask , int &$oldmask ) : int"
    ],
    "ncurses_move": [
        "ncurses_move ( int $y , int $x ) : int"
    ],
    "ncurses_move_panel": [
        "ncurses_move_panel ( resource $panel , int $startx , int $starty ) : int"
    ],
    "ncurses_mvaddch": [
        "ncurses_mvaddch ( int $y , int $x , int $c ) : int"
    ],
    "ncurses_mvaddchnstr": [
        "ncurses_mvaddchnstr ( int $y , int $x , string $s , int $n ) : int"
    ],
    "ncurses_mvaddchstr": [
        "ncurses_mvaddchstr ( int $y , int $x , string $s ) : int"
    ],
    "ncurses_mvaddnstr": [
        "ncurses_mvaddnstr ( int $y , int $x , string $s , int $n ) : int"
    ],
    "ncurses_mvaddstr": [
        "ncurses_mvaddstr ( int $y , int $x , string $s ) : int"
    ],
    "ncurses_mvcur": [
        "ncurses_mvcur ( int $old_y , int $old_x , int $new_y , int $new_x ) : int"
    ],
    "ncurses_mvdelch": [
        "ncurses_mvdelch ( int $y , int $x ) : int"
    ],
    "ncurses_mvgetch": [
        "ncurses_mvgetch ( int $y , int $x ) : int"
    ],
    "ncurses_mvhline": [
        "ncurses_mvhline ( int $y , int $x , int $attrchar , int $n ) : int"
    ],
    "ncurses_mvinch": [
        "ncurses_mvinch ( int $y , int $x ) : int"
    ],
    "ncurses_mvvline": [
        "ncurses_mvvline ( int $y , int $x , int $attrchar , int $n ) : int"
    ],
    "ncurses_mvwaddstr": [
        "ncurses_mvwaddstr ( resource $window , int $y , int $x , string $text ) : int"
    ],
    "ncurses_napms": [
        "ncurses_napms ( int $milliseconds ) : int"
    ],
    "ncurses_new_panel": [
        "ncurses_new_panel ( resource $window ) : resource"
    ],
    "ncurses_newpad": [
        "ncurses_newpad ( int $rows , int $cols ) : resource"
    ],
    "ncurses_newwin": [
        "ncurses_newwin ( int $rows , int $cols , int $y , int $x ) : resource"
    ],
    "ncurses_nl": [
        "ncurses_nl ( ) : bool"
    ],
    "ncurses_nocbreak": [
        "ncurses_nocbreak ( ) : bool"
    ],
    "ncurses_noecho": [
        "ncurses_noecho ( ) : bool"
    ],
    "ncurses_nonl": [
        "ncurses_nonl ( ) : bool"
    ],
    "ncurses_noqiflush": [
        "ncurses_noqiflush ( ) : void"
    ],
    "ncurses_noraw": [
        "ncurses_noraw ( ) : bool"
    ],
    "ncurses_pair_content": [
        "ncurses_pair_content ( int $pair , int &$f , int &$b ) : int"
    ],
    "ncurses_panel_above": [
        "ncurses_panel_above ( resource $panel ) : resource"
    ],
    "ncurses_panel_below": [
        "ncurses_panel_below ( resource $panel ) : resource"
    ],
    "ncurses_panel_window": [
        "ncurses_panel_window ( resource $panel ) : resource"
    ],
    "ncurses_pnoutrefresh": [
        "ncurses_pnoutrefresh ( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol ) : int"
    ],
    "ncurses_prefresh": [
        "ncurses_prefresh ( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol ) : int"
    ],
    "ncurses_putp": [
        "ncurses_putp ( string $text ) : int"
    ],
    "ncurses_qiflush": [
        "ncurses_qiflush ( ) : void"
    ],
    "ncurses_raw": [
        "ncurses_raw ( ) : bool"
    ],
    "ncurses_refresh": [
        "ncurses_refresh ( int $ch ) : int"
    ],
    "ncurses_replace_panel": [
        "ncurses_replace_panel ( resource $panel , resource $window ) : int"
    ],
    "ncurses_reset_prog_mode": [
        "ncurses_reset_prog_mode ( ) : int"
    ],
    "ncurses_reset_shell_mode": [
        "ncurses_reset_shell_mode ( ) : int"
    ],
    "ncurses_resetty": [
        "ncurses_resetty ( ) : bool"
    ],
    "ncurses_savetty": [
        "ncurses_savetty ( ) : bool"
    ],
    "ncurses_scr_dump": [
        "ncurses_scr_dump ( string $filename ) : int"
    ],
    "ncurses_scr_init": [
        "ncurses_scr_init ( string $filename ) : int"
    ],
    "ncurses_scr_restore": [
        "ncurses_scr_restore ( string $filename ) : int"
    ],
    "ncurses_scr_set": [
        "ncurses_scr_set ( string $filename ) : int"
    ],
    "ncurses_scrl": [
        "ncurses_scrl ( int $count ) : int"
    ],
    "ncurses_show_panel": [
        "ncurses_show_panel ( resource $panel ) : int"
    ],
    "ncurses_slk_attr": [
        "ncurses_slk_attr ( ) : int"
    ],
    "ncurses_slk_attroff": [
        "ncurses_slk_attroff ( int $intarg ) : int"
    ],
    "ncurses_slk_attron": [
        "ncurses_slk_attron ( int $intarg ) : int"
    ],
    "ncurses_slk_attrset": [
        "ncurses_slk_attrset ( int $intarg ) : int"
    ],
    "ncurses_slk_clear": [
        "ncurses_slk_clear ( ) : bool"
    ],
    "ncurses_slk_color": [
        "ncurses_slk_color ( int $intarg ) : int"
    ],
    "ncurses_slk_init": [
        "ncurses_slk_init ( int $format ) : bool"
    ],
    "ncurses_slk_noutrefresh": [
        "ncurses_slk_noutrefresh ( ) : bool"
    ],
    "ncurses_slk_refresh": [
        "ncurses_slk_refresh ( ) : int"
    ],
    "ncurses_slk_restore": [
        "ncurses_slk_restore ( ) : int"
    ],
    "ncurses_slk_set": [
        "ncurses_slk_set ( int $labelnr , string $label , int $format ) : bool"
    ],
    "ncurses_slk_touch": [
        "ncurses_slk_touch ( ) : int"
    ],
    "ncurses_standend": [
        "ncurses_standend ( ) : int"
    ],
    "ncurses_standout": [
        "ncurses_standout ( ) : int"
    ],
    "ncurses_start_color": [
        "ncurses_start_color ( ) : int"
    ],
    "ncurses_termattrs": [
        "ncurses_termattrs ( ) : bool"
    ],
    "ncurses_termname": [
        "ncurses_termname ( ) : string"
    ],
    "ncurses_timeout": [
        "ncurses_timeout ( int $millisec ) : void"
    ],
    "ncurses_top_panel": [
        "ncurses_top_panel ( resource $panel ) : int"
    ],
    "ncurses_typeahead": [
        "ncurses_typeahead ( int $fd ) : int"
    ],
    "ncurses_ungetch": [
        "ncurses_ungetch ( int $keycode ) : int"
    ],
    "ncurses_ungetmouse": [
        "ncurses_ungetmouse ( array $mevent ) : bool"
    ],
    "ncurses_update_panels": [
        "ncurses_update_panels ( ) : void"
    ],
    "ncurses_use_default_colors": [
        "ncurses_use_default_colors ( ) : bool"
    ],
    "ncurses_use_env": [
        "ncurses_use_env ( bool $flag ) : void"
    ],
    "ncurses_use_extended_names": [
        "ncurses_use_extended_names ( bool $flag ) : int"
    ],
    "ncurses_vidattr": [
        "ncurses_vidattr ( int $intarg ) : int"
    ],
    "ncurses_vline": [
        "ncurses_vline ( int $charattr , int $n ) : int"
    ],
    "ncurses_waddch": [
        "ncurses_waddch ( resource $window , int $ch ) : int"
    ],
    "ncurses_waddstr": [
        "ncurses_waddstr ( resource $window , string $str , int $n = ? ) : int"
    ],
    "ncurses_wattroff": [
        "ncurses_wattroff ( resource $window , int $attrs ) : int"
    ],
    "ncurses_wattron": [
        "ncurses_wattron ( resource $window , int $attrs ) : int"
    ],
    "ncurses_wattrset": [
        "ncurses_wattrset ( resource $window , int $attrs ) : int"
    ],
    "ncurses_wborder": [
        "ncurses_wborder ( resource $window , int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner ) : int"
    ],
    "ncurses_wclear": [
        "ncurses_wclear ( resource $window ) : int"
    ],
    "ncurses_wcolor_set": [
        "ncurses_wcolor_set ( resource $window , int $color_pair ) : int"
    ],
    "ncurses_werase": [
        "ncurses_werase ( resource $window ) : int"
    ],
    "ncurses_wgetch": [
        "ncurses_wgetch ( resource $window ) : int"
    ],
    "ncurses_whline": [
        "ncurses_whline ( resource $window , int $charattr , int $n ) : int"
    ],
    "ncurses_wmouse_trafo": [
        "ncurses_wmouse_trafo ( resource $window , int &$y , int &$x , bool $toscreen ) : bool"
    ],
    "ncurses_wmove": [
        "ncurses_wmove ( resource $window , int $y , int $x ) : int"
    ],
    "ncurses_wnoutrefresh": [
        "ncurses_wnoutrefresh ( resource $window ) : int"
    ],
    "ncurses_wrefresh": [
        "ncurses_wrefresh ( resource $window ) : int"
    ],
    "ncurses_wstandend": [
        "ncurses_wstandend ( resource $window ) : int"
    ],
    "ncurses_wstandout": [
        "ncurses_wstandout ( resource $window ) : int"
    ],
    "ncurses_wvline": [
        "ncurses_wvline ( resource $window , int $charattr , int $n ) : int"
    ],
    "next": [
        "next ( array|object &$array ) : mixed"
    ],
    "ngettext": [
        "ngettext ( string $singular , string $plural , int $count ) : string"
    ],
    "nl2br": [
        "nl2br ( string $string , bool $use_xhtml = true ) : string"
    ],
    "nl_langinfo": [
        "nl_langinfo ( int $item ) : string|false"
    ],
    "NoRewindIterator": [
        "public NoRewindIterator::__construct ( Iterator $iterator )"
    ],
    "normalizer_get_raw_decomposition": [
        "normalizer_get_raw_decomposition ( string $input ) : string"
    ],
    "normalizer_is_normalized": [
        "normalizer_is_normalized ( string $input , int $form = Normalizer::FORM_C ) : bool"
    ],
    "normalizer_normalize": [
        "normalizer_normalize ( string $input , int $form = Normalizer::FORM_C ) : string"
    ],
    "number_format": [
        "number_format ( float $num , int $decimals = 0 , string|null $decimal_separator = \".\" , string|null $thousands_separator = \",\" ) : string"
    ],
    "NumberFormatter": [
        "public NumberFormatter::__construct ( string $locale , int $style , string $pattern = ? )"
    ],
    "numfmt_create": [
        "numfmt_create ( string $locale , int $style , string $pattern = ? ) : NumberFormatter"
    ],
    "numfmt_format": [
        "numfmt_format ( NumberFormatter $fmt , int|float $value , int $type = ? ) : string"
    ],
    "numfmt_format_currency": [
        "numfmt_format_currency ( NumberFormatter $fmt , float $value , string $currency ) : string|false"
    ],
    "numfmt_get_attribute": [
        "numfmt_get_attribute ( NumberFormatter $fmt , int $attr ) : int"
    ],
    "numfmt_get_error_code": [
        "numfmt_get_error_code ( NumberFormatter $fmt ) : int"
    ],
    "numfmt_get_error_message": [
        "numfmt_get_error_message ( NumberFormatter $fmt ) : string"
    ],
    "numfmt_get_locale": [
        "numfmt_get_locale ( NumberFormatter $fmt , int $type = ? ) : string"
    ],
    "numfmt_get_pattern": [
        "numfmt_get_pattern ( NumberFormatter $fmt ) : string"
    ],
    "numfmt_get_symbol": [
        "numfmt_get_symbol ( NumberFormatter $fmt , int $attr ) : string"
    ],
    "numfmt_get_text_attribute": [
        "numfmt_get_text_attribute ( NumberFormatter $fmt , int $attr ) : string"
    ],
    "numfmt_parse": [
        "numfmt_parse ( NumberFormatter $fmt , string $value , int $type = ? , int &$position = ? ) : mixed"
    ],
    "numfmt_parse_currency": [
        "numfmt_parse_currency ( NumberFormatter $fmt , string $value , string &$currency , int &$position = ? ) : float"
    ],
    "numfmt_set_attribute": [
        "numfmt_set_attribute ( NumberFormatter $fmt , int $attr , int $value ) : bool"
    ],
    "numfmt_set_pattern": [
        "numfmt_set_pattern ( NumberFormatter $fmt , string $pattern ) : bool"
    ],
    "numfmt_set_symbol": [
        "numfmt_set_symbol ( NumberFormatter $fmt , int $attr , string $value ) : bool"
    ],
    "numfmt_set_text_attribute": [
        "numfmt_set_text_attribute ( NumberFormatter $fmt , int $attr , string $value ) : bool"
    ],
    "OAuth": [
        "public OAuth::__construct ( string $consumer_key , string $consumer_secret , string $signature_method = OAUTH_SIG_METHOD_HMACSHA1 , int $auth_type = 0 )"
    ],
    "oauth_get_sbs": [
        "oauth_get_sbs ( string $http_method , string $uri , array $request_parameters = ? ) : string"
    ],
    "oauth_urlencode": [
        "oauth_urlencode ( string $uri ) : string"
    ],
    "OAuthProvider": [
        "public OAuthProvider::__construct ( array $params_array = ? )"
    ],
    "ob_clean": [
        "ob_clean ( ) : bool"
    ],
    "ob_end_clean": [
        "ob_end_clean ( ) : bool"
    ],
    "ob_end_flush": [
        "ob_end_flush ( ) : bool"
    ],
    "ob_flush": [
        "ob_flush ( ) : bool"
    ],
    "ob_get_clean": [
        "ob_get_clean ( ) : string|false"
    ],
    "ob_get_contents": [
        "ob_get_contents ( ) : string|false"
    ],
    "ob_get_flush": [
        "ob_get_flush ( ) : string|false"
    ],
    "ob_get_length": [
        "ob_get_length ( ) : int|false"
    ],
    "ob_get_level": [
        "ob_get_level ( ) : int"
    ],
    "ob_get_status": [
        "ob_get_status ( bool $full_status = false ) : array"
    ],
    "ob_gzhandler": [
        "ob_gzhandler ( string $buffer , int $mode ) : string"
    ],
    "ob_iconv_handler": [
        "ob_iconv_handler ( string $contents , int $status ) : string"
    ],
    "ob_implicit_flush": [
        "ob_implicit_flush ( bool $flag = true ) : void"
    ],
    "ob_list_handlers": [
        "ob_list_handlers ( ) : array"
    ],
    "ob_start": [
        "ob_start ( callable $callback = null , int $chunk_size = 0 , int $flags = PHP_OUTPUT_HANDLER_STDFLAGS ) : bool"
    ],
    "ob_tidyhandler": [
        "ob_tidyhandler ( string $input , int $mode = ? ) : string"
    ],
    "oci_bind_array_by_name": [
        "oci_bind_array_by_name ( resource $statement , string $name , array &$var_array , int $max_table_length , int $max_item_length = -1 , int $type = SQLT_AFC ) : bool"
    ],
    "oci_bind_by_name": [
        "oci_bind_by_name ( resource $statement , string $bv_name , mixed &$variable , int $maxlength = -1 , int $type = SQLT_CHR ) : bool"
    ],
    "oci_cancel": [
        "oci_cancel ( resource $statement ) : bool"
    ],
    "oci_client_version": [
        "oci_client_version ( ) : string"
    ],
    "oci_close": [
        "oci_close ( resource $connection ) : bool"
    ],
    "oci_commit": [
        "oci_commit ( resource $connection ) : bool"
    ],
    "oci_connect": [
        "oci_connect ( string $username , string $password , string $connection_string = ? , string $character_set = ? , int $session_mode = ? ) : resource"
    ],
    "oci_define_by_name": [
        "oci_define_by_name ( resource $statement , string $column_name , mixed &$variable , int $type = SQLT_CHR ) : bool"
    ],
    "oci_error": [
        "oci_error ( resource $resource = ? ) : array"
    ],
    "oci_execute": [
        "oci_execute ( resource $statement , int $mode = OCI_COMMIT_ON_SUCCESS ) : bool"
    ],
    "oci_fetch": [
        "oci_fetch ( resource $statement ) : bool"
    ],
    "oci_fetch_all": [
        "oci_fetch_all ( resource $statement , array &$output , int $skip = 0 , int $maxrows = -1 , int $flags = OCI_FETCHSTATEMENT_BY_COLUMN + OCI_ASSOC ) : int|false"
    ],
    "oci_fetch_array": [
        "oci_fetch_array ( resource $statement , int $mode = ? ) : array"
    ],
    "oci_fetch_assoc": [
        "oci_fetch_assoc ( resource $statement ) : array"
    ],
    "oci_fetch_object": [
        "oci_fetch_object ( resource $statement ) : object"
    ],
    "oci_fetch_row": [
        "oci_fetch_row ( resource $statement ) : array"
    ],
    "oci_field_is_null": [
        "oci_field_is_null ( resource $statement , mixed $field ) : bool"
    ],
    "oci_field_name": [
        "oci_field_name ( resource $statement , mixed $field ) : string"
    ],
    "oci_field_precision": [
        "oci_field_precision ( resource $statement , mixed $field ) : int"
    ],
    "oci_field_scale": [
        "oci_field_scale ( resource $statement , mixed $field ) : int"
    ],
    "oci_field_size": [
        "oci_field_size ( resource $statement , mixed $field ) : int"
    ],
    "oci_field_type": [
        "oci_field_type ( resource $statement , mixed $field ) : mixed"
    ],
    "oci_field_type_raw": [
        "oci_field_type_raw ( resource $statement , mixed $field ) : int"
    ],
    "oci_free_descriptor": [
        "oci_free_descriptor ( resource $descriptor ) : bool"
    ],
    "oci_free_statement": [
        "oci_free_statement ( resource $statement ) : bool"
    ],
    "oci_get_implicit_resultset": [
        "oci_get_implicit_resultset ( resource $statement ) : resource"
    ],
    "oci_internal_debug": [
        "oci_internal_debug ( bool $onoff ) : void"
    ],
    "oci_lob_copy": [
        "oci_lob_copy ( OCILob $lob_to , OCILob $lob_from , int $length = 0 ) : bool"
    ],
    "oci_lob_is_equal": [
        "oci_lob_is_equal ( OCI-Lob $lob1 , OCI-Lob $lob2 ) : bool"
    ],
    "oci_new_collection": [
        "oci_new_collection ( resource $connection , string $tdo , string $schema = null ) : OCICollection"
    ],
    "oci_new_connect": [
        "oci_new_connect ( string $username , string $password , string $connection_string = ? , string $character_set = ? , int $session_mode = ? ) : resource"
    ],
    "oci_new_cursor": [
        "oci_new_cursor ( resource $connection ) : resource"
    ],
    "oci_new_descriptor": [
        "oci_new_descriptor ( resource $connection , int $type = OCI_DTYPE_LOB ) : OCI-Lob"
    ],
    "oci_num_fields": [
        "oci_num_fields ( resource $statement ) : int"
    ],
    "oci_num_rows": [
        "oci_num_rows ( resource $statement ) : int"
    ],
    "oci_parse": [
        "oci_parse ( resource $connection , string $sql_text ) : resource"
    ],
    "oci_password_change": [
        "oci_password_change ( resource $connection , string $username , string $old_password , string $new_password ) : bool",
        "oci_password_change ( string $dbname , string $username , string $old_password , string $new_password ) : resource"
    ],
    "oci_pconnect": [
        "oci_pconnect ( string $username , string $password , string $connection_string = ? , string $character_set = ? , int $session_mode = ? ) : resource"
    ],
    "oci_register_taf_callback": [
        "oci_register_taf_callback ( resource $connection , mixed $callbackFn = ? ) : bool"
    ],
    "oci_result": [
        "oci_result ( resource $statement , mixed $field ) : mixed"
    ],
    "oci_rollback": [
        "oci_rollback ( resource $connection ) : bool"
    ],
    "oci_server_version": [
        "oci_server_version ( resource $connection ) : string"
    ],
    "oci_set_action": [
        "oci_set_action ( resource $connection , string $action_name ) : bool"
    ],
    "oci_set_call_timeout": [
        "oci_set_call_timeout ( resource $connection , int $time_out ) : bool"
    ],
    "oci_set_client_identifier": [
        "oci_set_client_identifier ( resource $connection , string $client_identifier ) : bool"
    ],
    "oci_set_client_info": [
        "oci_set_client_info ( resource $connection , string $client_info ) : bool"
    ],
    "oci_set_db_operation": [
        "oci_set_db_operation ( resource $connection , string $dbop ) : bool"
    ],
    "oci_set_edition": [
        "oci_set_edition ( string $edition ) : bool"
    ],
    "oci_set_module_name": [
        "oci_set_module_name ( resource $connection , string $module_name ) : bool"
    ],
    "oci_set_prefetch": [
        "oci_set_prefetch ( resource $statement , int $rows ) : bool"
    ],
    "oci_statement_type": [
        "oci_statement_type ( resource $statement ) : string"
    ],
    "oci_unregister_taf_callback": [
        "oci_unregister_taf_callback ( resource $connection ) : bool"
    ],
    "octdec": [
        "octdec ( string $octal_string ) : int|float"
    ],
    "odbc_autocommit": [
        "odbc_autocommit ( resource $odbc , bool $enable = false ) : int|bool"
    ],
    "odbc_binmode": [
        "odbc_binmode ( resource $statement , int $mode ) : bool"
    ],
    "odbc_close": [
        "odbc_close ( resource $odbc ) : void"
    ],
    "odbc_close_all": [
        "odbc_close_all ( ) : void"
    ],
    "odbc_columnprivileges": [
        "odbc_columnprivileges ( resource $odbc , string|null $catalog , string $schema , string $table , string $column ) : resource|false"
    ],
    "odbc_columns": [
        "odbc_columns ( resource $odbc , string|null $catalog = null , string|null $schema = null , string|null $table = null , string|null $column = null ) : resource|false"
    ],
    "odbc_commit": [
        "odbc_commit ( resource $odbc ) : bool"
    ],
    "odbc_connect": [
        "odbc_connect ( string $dsn , string $user , string $password , int $cursor_option = SQL_CUR_USE_DRIVER ) : resource|false"
    ],
    "odbc_cursor": [
        "odbc_cursor ( resource $statement ) : string|false"
    ],
    "odbc_data_source": [
        "odbc_data_source ( resource $odbc , int $fetch_type ) : array|false"
    ],
    "odbc_error": [
        "odbc_error ( resource|null $odbc = null ) : string"
    ],
    "odbc_errormsg": [
        "odbc_errormsg ( resource|null $odbc = null ) : string"
    ],
    "odbc_exec": [
        "odbc_exec ( resource $odbc , string $query ) : resource|false"
    ],
    "odbc_execute": [
        "odbc_execute ( resource $statement , array $params = [] ) : bool"
    ],
    "odbc_fetch_array": [
        "odbc_fetch_array ( resource $statement , int $row = -1 ) : array|false"
    ],
    "odbc_fetch_into": [
        "odbc_fetch_into ( resource $statement , array &$array , int $row = 0 ) : int|false"
    ],
    "odbc_fetch_object": [
        "odbc_fetch_object ( resource $statement , int $row = -1 ) : stdClass|false"
    ],
    "odbc_fetch_row": [
        "odbc_fetch_row ( resource $statement , int|null $row = null ) : bool"
    ],
    "odbc_field_len": [
        "odbc_field_len ( resource $statement , int $field ) : int|false"
    ],
    "odbc_field_name": [
        "odbc_field_name ( resource $statement , int $field ) : string|false"
    ],
    "odbc_field_num": [
        "odbc_field_num ( resource $statement , string $field ) : int|false"
    ],
    "odbc_field_scale": [
        "odbc_field_scale ( resource $statement , int $field ) : int|false"
    ],
    "odbc_field_type": [
        "odbc_field_type ( resource $statement , int $field ) : string|false"
    ],
    "odbc_foreignkeys": [
        "odbc_foreignkeys ( resource $odbc , string|null $pk_catalog , string $pk_schema , string $pk_table , string $fk_catalog , string $fk_schema , string $fk_table ) : resource|false"
    ],
    "odbc_free_result": [
        "odbc_free_result ( resource $statement ) : bool"
    ],
    "odbc_gettypeinfo": [
        "odbc_gettypeinfo ( resource $odbc , int $data_type = 0 ) : resource|false"
    ],
    "odbc_longreadlen": [
        "odbc_longreadlen ( resource $statement , int $length ) : bool"
    ],
    "odbc_next_result": [
        "odbc_next_result ( resource $statement ) : bool"
    ],
    "odbc_num_fields": [
        "odbc_num_fields ( resource $statement ) : int"
    ],
    "odbc_num_rows": [
        "odbc_num_rows ( resource $statement ) : int"
    ],
    "odbc_pconnect": [
        "odbc_pconnect ( string $dsn , string $user , string $password , int $cursor_option = SQL_CUR_USE_DRIVER ) : resource|false"
    ],
    "odbc_prepare": [
        "odbc_prepare ( resource $odbc , string $query ) : resource|false"
    ],
    "odbc_primarykeys": [
        "odbc_primarykeys ( resource $odbc , string|null $catalog , string $schema , string $table ) : resource|false"
    ],
    "odbc_procedurecolumns": [
        "odbc_procedurecolumns ( resource $odbc , string|null $catalog = null , string|null $schema = null , string|null $procedure = null , string|null $column = null ) : resource|false"
    ],
    "odbc_procedures": [
        "odbc_procedures ( resource $odbc , string|null $catalog = null , string|null $schema = null , string|null $procedure = null ) : resource|false"
    ],
    "odbc_result": [
        "odbc_result ( resource $statement , string|int $field ) : string|bool|null"
    ],
    "odbc_result_all": [
        "odbc_result_all ( resource $statement , string $format = \"\" ) : int|false"
    ],
    "odbc_rollback": [
        "odbc_rollback ( resource $odbc ) : bool"
    ],
    "odbc_setoption": [
        "odbc_setoption ( resource $odbc , int $which , int $option , int $value ) : bool"
    ],
    "odbc_specialcolumns": [
        "odbc_specialcolumns ( resource $odbc , int $type , string|null $catalog , string $schema , string $table , int $scope , int $nullable ) : resource|false"
    ],
    "odbc_statistics": [
        "odbc_statistics ( resource $odbc , string|null $catalog , string $schema , string $table , int $unique , int $accuracy ) : resource|false"
    ],
    "odbc_tableprivileges": [
        "odbc_tableprivileges ( resource $odbc , string|null $catalog , string $schema , string $table ) : resource|false"
    ],
    "odbc_tables": [
        "odbc_tables ( resource $odbc , string|null $catalog = null , string|null $schema = null , string|null $table = null , string|null $types = null ) : resource|false"
    ],
    "opcache_compile_file": [
        "opcache_compile_file ( string $filename ) : bool"
    ],
    "opcache_get_configuration": [
        "opcache_get_configuration ( ) : array|false"
    ],
    "opcache_get_status": [
        "opcache_get_status ( bool $include_scripts = true ) : array|false"
    ],
    "opcache_invalidate": [
        "opcache_invalidate ( string $filename , bool $force = false ) : bool"
    ],
    "opcache_is_script_cached": [
        "opcache_is_script_cached ( string $filename ) : bool"
    ],
    "opcache_reset": [
        "opcache_reset ( ) : bool"
    ],
    "openal_buffer_create": [
        "openal_buffer_create ( ) : resource"
    ],
    "openal_buffer_data": [
        "openal_buffer_data ( resource $buffer , int $format , string $data , int $freq ) : bool"
    ],
    "openal_buffer_destroy": [
        "openal_buffer_destroy ( resource $buffer ) : bool"
    ],
    "openal_buffer_get": [
        "openal_buffer_get ( resource $buffer , int $property ) : int|false"
    ],
    "openal_buffer_loadwav": [
        "openal_buffer_loadwav ( resource $buffer , string $wavfile ) : bool"
    ],
    "openal_context_create": [
        "openal_context_create ( resource $device ) : resource"
    ],
    "openal_context_current": [
        "openal_context_current ( resource $context ) : bool"
    ],
    "openal_context_destroy": [
        "openal_context_destroy ( resource $context ) : bool"
    ],
    "openal_context_process": [
        "openal_context_process ( resource $context ) : bool"
    ],
    "openal_context_suspend": [
        "openal_context_suspend ( resource $context ) : bool"
    ],
    "openal_device_close": [
        "openal_device_close ( resource $device ) : bool"
    ],
    "openal_device_open": [
        "openal_device_open ( string $device_desc = ? ) : resource"
    ],
    "openal_listener_get": [
        "openal_listener_get ( int $property ) : mixed"
    ],
    "openal_listener_set": [
        "openal_listener_set ( int $property , mixed $setting ) : bool"
    ],
    "openal_source_create": [
        "openal_source_create ( ) : resource"
    ],
    "openal_source_destroy": [
        "openal_source_destroy ( resource $source ) : bool"
    ],
    "openal_source_get": [
        "openal_source_get ( resource $source , int $property ) : mixed"
    ],
    "openal_source_pause": [
        "openal_source_pause ( resource $source ) : bool"
    ],
    "openal_source_play": [
        "openal_source_play ( resource $source ) : bool"
    ],
    "openal_source_rewind": [
        "openal_source_rewind ( resource $source ) : bool"
    ],
    "openal_source_set": [
        "openal_source_set ( resource $source , int $property , mixed $setting ) : bool"
    ],
    "openal_source_stop": [
        "openal_source_stop ( resource $source ) : bool"
    ],
    "openal_stream": [
        "openal_stream ( resource $source , int $format , int $rate ) : resource|false"
    ],
    "opendir": [
        "opendir ( string $path , resource $context = ? ) : resource|false"
    ],
    "openlog": [
        "openlog ( string $prefix , int $flags , int $facility ) : bool"
    ],
    "openssl_cipher_iv_length": [
        "openssl_cipher_iv_length ( string $cipher_algo ) : int|false"
    ],
    "openssl_cms_decrypt": [
        "openssl_cms_decrypt ( string $input_filename , string $output_filename , OpenSSLCertificate|string $certificate , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string|null $private_key = null , int $encoding = OPENSSL_ENCODING_SMIME ) : bool"
    ],
    "openssl_cms_encrypt": [
        "openssl_cms_encrypt ( string $input_filename , string $output_filename , OpenSSLCertificate|array|string $certificate , array|null $headers , int $flags = 0 , int $encoding = OPENSSL_ENCODING_SMIME , int $cipher_algo = OPENSSL_CIPHER_RC2_40 ) : bool"
    ],
    "openssl_cms_read": [
        "openssl_cms_read ( string $input_filename , array &$certificates ) : bool"
    ],
    "openssl_cms_sign": [
        "openssl_cms_sign ( string $input_filename , string $output_filename , OpenSSLCertificate|string $certificate , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , array|null $headers , int $flags = 0 , int $encoding = OPENSSL_ENCODING_SMIME , string|null $untrusted_certificates_filename = null ) : bool"
    ],
    "openssl_cms_verify": [
        "openssl_cms_verify ( string $input_filename , int $flags = 0 , string|null $certificates = null , array $ca_info = [] , string|null $untrusted_certificates_filename = null , string|null $content = null , string|null $pk7 = null , string|null $sigfile = null , int $encoding = OPENSSL_ENCODING_SMIME ) : bool"
    ],
    "openssl_csr_export": [
        "openssl_csr_export ( OpenSSLCertificateSigningRequest|string $csr , OpenSSLAsymmetricKey &$output , bool $no_text = true ) : bool"
    ],
    "openssl_csr_export_to_file": [
        "openssl_csr_export_to_file ( OpenSSLCertificateSigningRequest|string $csr , string $output_filename , bool $no_text = true ) : bool"
    ],
    "openssl_csr_get_public_key": [
        "openssl_csr_get_public_key ( OpenSSLCertificateSigningRequest|string $csr , bool $short_names = true ) : OpenSSLAsymmetricKey|false"
    ],
    "openssl_csr_get_subject": [
        "openssl_csr_get_subject ( OpenSSLCertificateSigningRequest|string $csr , bool $short_names = true ) : array|false"
    ],
    "openssl_csr_new": [
        "openssl_csr_new ( array $distinguished_names , OpenSSLAsymmetricKey &$private_key , array|null $options = null , array|null $extra_attributes = null ) : OpenSSLCertificateSigningRequest|false"
    ],
    "openssl_csr_sign": [
        "openssl_csr_sign ( OpenSSLCertificateSigningRequest|string $csr , OpenSSLCertificate|string|null $ca_certificate , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , int $days , array|null $options = null , int $serial = 0 ) : OpenSSLCertificate|false"
    ],
    "openssl_decrypt": [
        "openssl_decrypt ( string $data , string $cipher_algo , string $passphrase , int $options = 0 , string $iv = \"\" , string $tag = \"\" , string $aad = \"\" ) : string|false"
    ],
    "openssl_dh_compute_key": [
        "openssl_dh_compute_key ( string $public_key , OpenSSLAsymmetricKey $private_key ) : string|false"
    ],
    "openssl_digest": [
        "openssl_digest ( string $data , string $digest_algo , bool $binary = false ) : string|false"
    ],
    "openssl_encrypt": [
        "openssl_encrypt ( string $data , string $cipher_algo , string $passphrase , int $options = 0 , string $iv = \"\" , string &$tag = null , string $aad = \"\" , int $tag_length = 16 ) : string|false"
    ],
    "openssl_error_string": [
        "openssl_error_string ( ) : string|false"
    ],
    "openssl_free_key": [
        "openssl_free_key ( OpenSSLAsymmetricKey $key ) : void"
    ],
    "openssl_get_cert_locations": [
        "openssl_get_cert_locations ( ) : array"
    ],
    "openssl_get_cipher_methods": [
        "openssl_get_cipher_methods ( bool $aliases = false ) : array"
    ],
    "openssl_get_curve_names": [
        "openssl_get_curve_names ( ) : array|false"
    ],
    "openssl_get_md_methods": [
        "openssl_get_md_methods ( bool $aliases = false ) : array"
    ],
    "openssl_open": [
        "openssl_open ( string $data , string &$output , string $encrypted_key , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , string $cipher_algo , string|null $iv = null ) : bool"
    ],
    "openssl_pbkdf2": [
        "openssl_pbkdf2 ( string $password , string $salt , int $key_length , int $iterations , string $digest_algo = \"sha1\" ) : string|false"
    ],
    "openssl_pkcs12_export": [
        "openssl_pkcs12_export ( OpenSSLCertificate|string $certificate , string &$output , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , string $passphrase , array $options = [] ) : bool"
    ],
    "openssl_pkcs12_export_to_file": [
        "openssl_pkcs12_export_to_file ( OpenSSLCertificate|string $certificate , string $output_filename , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , string $passphrase , array $options = [] ) : bool"
    ],
    "openssl_pkcs12_read": [
        "openssl_pkcs12_read ( string $pkcs12 , array &$certificates , string $passphrase ) : bool"
    ],
    "openssl_pkcs7_decrypt": [
        "openssl_pkcs7_decrypt ( string $input_filename , string $output_filename , OpenSSLCertificate|string $certificate , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string|null $private_key = null ) : bool"
    ],
    "openssl_pkcs7_encrypt": [
        "openssl_pkcs7_encrypt ( string $input_filename , string $output_filename , OpenSSLCertificate|array|string $certificate , array|null $headers , int $flags = 0 , int $cipher_algo = OPENSSL_CIPHER_RC2_40 ) : bool"
    ],
    "openssl_pkcs7_read": [
        "openssl_pkcs7_read ( string $input_filename , array &$certificates ) : bool"
    ],
    "openssl_pkcs7_sign": [
        "openssl_pkcs7_sign ( string $input_filename , string $output_filename , OpenSSLCertificate|string $certificate , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , array|null $headers , int $flags = PKCS7_DETACHED , string|null $untrusted_certificates_filename = null ) : bool"
    ],
    "openssl_pkcs7_verify": [
        "openssl_pkcs7_verify ( string $input_filename , int $flags , string|null $signers_certificates_filename = null , array $ca_info = [] , string|null $untrusted_certificates_filename = null , string|null $content = null , string|null $output_filename = null ) : bool|int"
    ],
    "openssl_pkey_derive": [
        "openssl_pkey_derive ( OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , int $key_length = 0 ) : string|false"
    ],
    "openssl_pkey_export": [
        "openssl_pkey_export ( OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $key , string &$output , string|null $passphrase = null , array|null $options = null ) : bool"
    ],
    "openssl_pkey_export_to_file": [
        "openssl_pkey_export_to_file ( OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $key , string $output_filename , string|null $passphrase = null , array|null $options = null ) : bool"
    ],
    "openssl_pkey_free": [
        "openssl_pkey_free ( OpenSSLAsymmetricKey $key ) : void"
    ],
    "openssl_pkey_get_details": [
        "openssl_pkey_get_details ( OpenSSLAsymmetricKey $key ) : array|false"
    ],
    "openssl_pkey_get_private": [
        "openssl_pkey_get_private ( OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , string|null $passphrase = null ) : OpenSSLAsymmetricKey|false"
    ],
    "openssl_pkey_get_public": [
        "openssl_pkey_get_public ( OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key ) : OpenSSLAsymmetricKey|false"
    ],
    "openssl_pkey_new": [
        "openssl_pkey_new ( array|null $options = null ) : OpenSSLAsymmetricKey|false"
    ],
    "openssl_private_decrypt": [
        "openssl_private_decrypt ( string $data , string &$decrypted_data , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , int $padding = OPENSSL_PKCS1_PADDING ) : bool"
    ],
    "openssl_private_encrypt": [
        "openssl_private_encrypt ( string $data , string &$encrypted_data , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , int $padding = OPENSSL_PKCS1_PADDING ) : bool"
    ],
    "openssl_public_decrypt": [
        "openssl_public_decrypt ( string $data , string &$decrypted_data , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key , int $padding = OPENSSL_PKCS1_PADDING ) : bool"
    ],
    "openssl_public_encrypt": [
        "openssl_public_encrypt ( string $data , string &$encrypted_data , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key , int $padding = OPENSSL_PKCS1_PADDING ) : bool"
    ],
    "openssl_random_pseudo_bytes": [
        "openssl_random_pseudo_bytes ( int $length , bool &$strong_result = null ) : string"
    ],
    "openssl_seal": [
        "openssl_seal ( string $data , string &$sealed_data , array &$encrypted_keys , array $public_key , string $cipher_algo , string &$iv = null ) : int|false"
    ],
    "openssl_sign": [
        "openssl_sign ( string $data , string &$signature , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , string|int $algorithm = OPENSSL_ALGO_SHA1 ) : bool"
    ],
    "openssl_spki_export": [
        "openssl_spki_export ( string $spki ) : string|false"
    ],
    "openssl_spki_export_challenge": [
        "openssl_spki_export_challenge ( string $spki ) : string|false"
    ],
    "openssl_spki_new": [
        "openssl_spki_new ( OpenSSLAsymmetricKey $private_key , string $challenge , int $digest_algo = OPENSSL_ALGO_MD5 ) : string|false"
    ],
    "openssl_spki_verify": [
        "openssl_spki_verify ( string $spki ) : bool"
    ],
    "openssl_verify": [
        "openssl_verify ( string $data , string $signature , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key , string|int $algorithm = OPENSSL_ALGO_SHA1 ) : int|false"
    ],
    "openssl_x509_check_private_key": [
        "openssl_x509_check_private_key ( OpenSSLCertificate|string $certificate , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key ) : bool"
    ],
    "openssl_x509_checkpurpose": [
        "openssl_x509_checkpurpose ( OpenSSLCertificate|string $certificate , int $purpose , array $ca_info = [] , string|null $untrusted_certificates_file = null ) : bool|int"
    ],
    "openssl_x509_export": [
        "openssl_x509_export ( OpenSSLCertificate|string $certificate , string &$output , bool $no_text = true ) : bool"
    ],
    "openssl_x509_export_to_file": [
        "openssl_x509_export_to_file ( OpenSSLCertificate|string $certificate , string $output_filename , bool $no_text = true ) : bool"
    ],
    "openssl_x509_fingerprint": [
        "openssl_x509_fingerprint ( OpenSSLCertificate|string $certificate , string $digest_algo = \"sha1\" , bool $binary = false ) : string|false"
    ],
    "openssl_x509_free": [
        "openssl_x509_free ( OpenSSLCertificate $certificate ) : void"
    ],
    "openssl_x509_parse": [
        "openssl_x509_parse ( OpenSSLCertificate|string $certificate , bool $short_names = true ) : array|false"
    ],
    "openssl_x509_read": [
        "openssl_x509_read ( OpenSSLCertificate|string $certificate ) : OpenSSLCertificate|false"
    ],
    "openssl_x509_verify": [
        "openssl_x509_verify ( OpenSSLCertificate|string $certificate , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key ) : int"
    ],
    "ord": [
        "ord ( string $character ) : int"
    ],
    "output_add_rewrite_var": [
        "output_add_rewrite_var ( string $name , string $value ) : bool"
    ],
    "output_reset_rewrite_vars": [
        "output_reset_rewrite_vars ( ) : bool"
    ],
    "pack": [
        "pack ( string $format , mixed ...$values ) : string"
    ],
    "ParentIterator": [
        "public ParentIterator::__construct ( RecursiveIterator $iterator )"
    ],
    "parse_ini_file": [
        "parse_ini_file ( string $filename , bool $process_sections = false , int $scanner_mode = INI_SCANNER_NORMAL ) : array|false"
    ],
    "parse_ini_string": [
        "parse_ini_string ( string $ini_string , bool $process_sections = false , int $scanner_mode = INI_SCANNER_NORMAL ) : array|false"
    ],
    "parse_str": [
        "parse_str ( string $string , array &$result ) : void"
    ],
    "parse_url": [
        "parse_url ( string $url , int $component = -1 ) : mixed"
    ],
    "passthru": [
        "passthru ( string $command , int &$return_var = ? ) : void"
    ],
    "password_algos": [
        "password_algos ( ) : array"
    ],
    "password_get_info": [
        "password_get_info ( string $hash ) : array"
    ],
    "password_hash": [
        "password_hash ( string $password , mixed $algo , array $options = ? ) : string|false"
    ],
    "password_needs_rehash": [
        "password_needs_rehash ( string $hash , mixed $algo , array $options = ? ) : bool"
    ],
    "password_verify": [
        "password_verify ( string $password , string $hash ) : bool"
    ],
    "pathinfo": [
        "pathinfo ( string $path , int $flags = PATHINFO_ALL ) : array|string"
    ],
    "pclose": [
        "pclose ( resource $handle ) : int"
    ],
    "pcntl_alarm": [
        "pcntl_alarm ( int $seconds ) : int"
    ],
    "pcntl_async_signals": [
        "pcntl_async_signals ( bool $on = null ) : bool"
    ],
    "pcntl_exec": [
        "pcntl_exec ( string $path , array $args = ? , array $envs = ? ) : void"
    ],
    "pcntl_fork": [
        "pcntl_fork ( ) : int"
    ],
    "pcntl_get_last_error": [
        "pcntl_get_last_error ( ) : int"
    ],
    "pcntl_getpriority": [
        "pcntl_getpriority ( int $pid = getmypid() , int $process_identifier = PRIO_PROCESS ) : int"
    ],
    "pcntl_setpriority": [
        "pcntl_setpriority ( int $priority , int $pid = getmypid() , int $process_identifier = PRIO_PROCESS ) : bool"
    ],
    "pcntl_signal": [
        "pcntl_signal ( int $signo , callable|int $handler , bool $restart_syscalls = true ) : bool"
    ],
    "pcntl_signal_dispatch": [
        "pcntl_signal_dispatch ( ) : bool"
    ],
    "pcntl_signal_get_handler": [
        "pcntl_signal_get_handler ( int $signo ) : mixed"
    ],
    "pcntl_sigprocmask": [
        "pcntl_sigprocmask ( int $how , array $set , array &$oldset = ? ) : bool"
    ],
    "pcntl_sigtimedwait": [
        "pcntl_sigtimedwait ( array $set , array &$siginfo = ? , int $seconds = 0 , int $nanoseconds = 0 ) : int"
    ],
    "pcntl_sigwaitinfo": [
        "pcntl_sigwaitinfo ( array $set , array &$siginfo = ? ) : int"
    ],
    "pcntl_strerror": [
        "pcntl_strerror ( int $errno ) : string|false"
    ],
    "pcntl_wait": [
        "pcntl_wait ( int &$status , int $options = 0 , array &$rusage = ? ) : int"
    ],
    "pcntl_waitpid": [
        "pcntl_waitpid ( int $pid , int &$status , int $options = 0 , array &$rusage = ? ) : int"
    ],
    "pcntl_wexitstatus": [
        "pcntl_wexitstatus ( int $status ) : int"
    ],
    "pcntl_wifexited": [
        "pcntl_wifexited ( int $status ) : bool"
    ],
    "pcntl_wifsignaled": [
        "pcntl_wifsignaled ( int $status ) : bool"
    ],
    "pcntl_wifstopped": [
        "pcntl_wifstopped ( int $status ) : bool"
    ],
    "pcntl_wstopsig": [
        "pcntl_wstopsig ( int $status ) : int"
    ],
    "pcntl_wtermsig": [
        "pcntl_wtermsig ( int $status ) : int"
    ],
    "PDO": [
        "public PDO::__construct ( string $dsn , string $username = ? , string $passwd = ? , array $options = ? )"
    ],
    "pdo_drivers": [
        "pdo_drivers ( ) : array"
    ],
    "pfsockopen": [
        "pfsockopen ( string $hostname , int $port = -1 , int &$errno = ? , string &$errstr = ? , float $timeout = ini_get(\"default_socket_timeout\") ) : resource"
    ],
    "pg_affected_rows": [
        "pg_affected_rows ( resource $result ) : int"
    ],
    "pg_cancel_query": [
        "pg_cancel_query ( resource $connection ) : bool"
    ],
    "pg_client_encoding": [
        "pg_client_encoding ( resource $connection = ? ) : string"
    ],
    "pg_close": [
        "pg_close ( resource $connection = ? ) : bool"
    ],
    "pg_connect": [
        "pg_connect ( string $connection_string , int $connect_type = ? ) : resource"
    ],
    "pg_connect_poll": [
        "pg_connect_poll ( resource $connection ) : int"
    ],
    "pg_connection_busy": [
        "pg_connection_busy ( resource $connection ) : bool"
    ],
    "pg_connection_reset": [
        "pg_connection_reset ( resource $connection ) : bool"
    ],
    "pg_connection_status": [
        "pg_connection_status ( resource $connection ) : int"
    ],
    "pg_consume_input": [
        "pg_consume_input ( resource $connection ) : bool"
    ],
    "pg_convert": [
        "pg_convert ( resource $connection , string $table_name , array $assoc_array , int $options = 0 ) : array"
    ],
    "pg_copy_from": [
        "pg_copy_from ( resource $connection , string $table_name , array $rows , string $delimiter = ? , string $null_as = ? ) : bool"
    ],
    "pg_copy_to": [
        "pg_copy_to ( resource $connection , string $table_name , string $delimiter = ? , string $null_as = ? ) : array"
    ],
    "pg_dbname": [
        "pg_dbname ( resource $connection = ? ) : string"
    ],
    "pg_delete": [
        "pg_delete ( resource $connection , string $table_name , array $assoc_array , int $options = PGSQL_DML_EXEC ) : mixed"
    ],
    "pg_end_copy": [
        "pg_end_copy ( resource $connection = ? ) : bool"
    ],
    "pg_escape_bytea": [
        "pg_escape_bytea ( resource $connection = ? , string $data ) : string"
    ],
    "pg_escape_identifier": [
        "pg_escape_identifier ( resource $connection = ? , string $data ) : string"
    ],
    "pg_escape_literal": [
        "pg_escape_literal ( resource $connection = ? , string $data ) : string"
    ],
    "pg_escape_string": [
        "pg_escape_string ( resource $connection = ? , string $data ) : string"
    ],
    "pg_execute": [
        "pg_execute ( resource $connection = ? , string $stmtname , array $params ) : resource|false"
    ],
    "pg_fetch_all": [
        "pg_fetch_all ( resource $result , int $result_type = PGSQL_ASSOC ) : array"
    ],
    "pg_fetch_all_columns": [
        "pg_fetch_all_columns ( resource $result , int $column = 0 ) : array"
    ],
    "pg_fetch_array": [
        "pg_fetch_array ( resource $result , int $row = ? , int $result_type = PGSQL_BOTH ) : array"
    ],
    "pg_fetch_assoc": [
        "pg_fetch_assoc ( resource $result , int $row = ? ) : array"
    ],
    "pg_fetch_object": [
        "pg_fetch_object ( resource $result , int $row = ? , int $result_type = PGSQL_ASSOC ) : object",
        "pg_fetch_object ( resource $result , int $row = ? , string $class_name = ? , array $params = ? ) : object"
    ],
    "pg_fetch_result": [
        "pg_fetch_result ( resource $result , int $row , mixed $field ) : string|false|null",
        "pg_fetch_result ( resource $result , mixed $field ) : string|false|null"
    ],
    "pg_fetch_row": [
        "pg_fetch_row ( resource $result , int $row = ? ) : array"
    ],
    "pg_field_is_null": [
        "pg_field_is_null ( resource $result , int $row , mixed $field ) : int",
        "pg_field_is_null ( resource $result , mixed $field ) : int"
    ],
    "pg_field_name": [
        "pg_field_name ( resource $result , int $field_number ) : string"
    ],
    "pg_field_num": [
        "pg_field_num ( resource $result , string $field_name ) : int"
    ],
    "pg_field_prtlen": [
        "pg_field_prtlen ( resource $result , int $row_number , mixed $field_name_or_number ) : int",
        "pg_field_prtlen ( resource $result , mixed $field_name_or_number ) : int"
    ],
    "pg_field_size": [
        "pg_field_size ( resource $result , int $field_number ) : int"
    ],
    "pg_field_table": [
        "pg_field_table ( resource $result , int $field_number , bool $oid_only = false ) : mixed"
    ],
    "pg_field_type": [
        "pg_field_type ( resource $result , int $field_number ) : string"
    ],
    "pg_field_type_oid": [
        "pg_field_type_oid ( resource $result , int $field_number ) : int"
    ],
    "pg_flush": [
        "pg_flush ( resource $connection ) : mixed"
    ],
    "pg_free_result": [
        "pg_free_result ( resource $result ) : bool"
    ],
    "pg_get_notify": [
        "pg_get_notify ( resource $connection , int $result_type = ? ) : array"
    ],
    "pg_get_pid": [
        "pg_get_pid ( resource $connection ) : int"
    ],
    "pg_get_result": [
        "pg_get_result ( resource $connection = ? ) : resource"
    ],
    "pg_host": [
        "pg_host ( resource $connection = ? ) : string"
    ],
    "pg_insert": [
        "pg_insert ( resource $connection , string $table_name , array $assoc_array , int $options = PGSQL_DML_EXEC ) : mixed"
    ],
    "pg_last_error": [
        "pg_last_error ( resource $connection = ? ) : string"
    ],
    "pg_last_notice": [
        "pg_last_notice ( resource $connection , int $option = PGSQL_NOTICE_LAST ) : mixed"
    ],
    "pg_last_oid": [
        "pg_last_oid ( resource $result ) : string"
    ],
    "pg_lo_close": [
        "pg_lo_close ( resource $large_object ) : bool"
    ],
    "pg_lo_create": [
        "pg_lo_create ( resource $connection = ? , mixed $object_id = ? ) : int",
        "pg_lo_create ( mixed $object_id ) : int"
    ],
    "pg_lo_export": [
        "pg_lo_export ( resource $connection = ? , int $oid , string $pathname ) : bool"
    ],
    "pg_lo_import": [
        "pg_lo_import ( resource $connection = ? , string $pathname , mixed $object_id = ? ) : int"
    ],
    "pg_lo_open": [
        "pg_lo_open ( resource $connection , int $oid , string $mode ) : resource"
    ],
    "pg_lo_read": [
        "pg_lo_read ( resource $large_object , int $len = 8192 ) : string"
    ],
    "pg_lo_read_all": [
        "pg_lo_read_all ( resource $large_object ) : int"
    ],
    "pg_lo_seek": [
        "pg_lo_seek ( resource $large_object , int $offset , int $whence = PGSQL_SEEK_CUR ) : bool"
    ],
    "pg_lo_tell": [
        "pg_lo_tell ( resource $large_object ) : int"
    ],
    "pg_lo_truncate": [
        "pg_lo_truncate ( resource $large_object , int $size ) : bool"
    ],
    "pg_lo_unlink": [
        "pg_lo_unlink ( resource $connection , int $oid ) : bool"
    ],
    "pg_lo_write": [
        "pg_lo_write ( resource $large_object , string $data , int $len = ? ) : int"
    ],
    "pg_meta_data": [
        "pg_meta_data ( resource $connection , string $table_name , bool $extended = false ) : array"
    ],
    "pg_num_fields": [
        "pg_num_fields ( resource $result ) : int"
    ],
    "pg_num_rows": [
        "pg_num_rows ( resource $result ) : int"
    ],
    "pg_options": [
        "pg_options ( resource $connection = ? ) : string"
    ],
    "pg_parameter_status": [
        "pg_parameter_status ( resource $connection = ? , string $param_name ) : string"
    ],
    "pg_pconnect": [
        "pg_pconnect ( string $connection_string , int $connect_type = ? ) : resource"
    ],
    "pg_ping": [
        "pg_ping ( resource $connection = ? ) : bool"
    ],
    "pg_port": [
        "pg_port ( resource $connection = ? ) : int"
    ],
    "pg_prepare": [
        "pg_prepare ( resource $connection = ? , string $stmtname , string $query ) : resource|false"
    ],
    "pg_put_line": [
        "pg_put_line ( resource $connection = ? , string $data ) : bool"
    ],
    "pg_query": [
        "pg_query ( resource $connection = ? , string $query ) : resource|false"
    ],
    "pg_query_params": [
        "pg_query_params ( resource $connection = ? , string $query , array $params ) : resource|false"
    ],
    "pg_result_error": [
        "pg_result_error ( resource $result ) : string"
    ],
    "pg_result_error_field": [
        "pg_result_error_field ( resource $result , int $fieldcode ) : string"
    ],
    "pg_result_seek": [
        "pg_result_seek ( resource $result , int $offset ) : bool"
    ],
    "pg_result_status": [
        "pg_result_status ( resource $result , int $type = PGSQL_STATUS_LONG ) : mixed"
    ],
    "pg_select": [
        "pg_select ( resource $connection , string $table_name , array $assoc_array , int $options = PGSQL_DML_EXEC , int $result_type = PGSQL_ASSOC ) : mixed"
    ],
    "pg_send_execute": [
        "pg_send_execute ( resource $connection , string $stmtname , array $params ) : bool"
    ],
    "pg_send_prepare": [
        "pg_send_prepare ( resource $connection , string $stmtname , string $query ) : bool"
    ],
    "pg_send_query": [
        "pg_send_query ( resource $connection , string $query ) : bool"
    ],
    "pg_send_query_params": [
        "pg_send_query_params ( resource $connection , string $query , array $params ) : bool"
    ],
    "pg_set_client_encoding": [
        "pg_set_client_encoding ( resource $connection = ? , string $encoding ) : int"
    ],
    "pg_set_error_verbosity": [
        "pg_set_error_verbosity ( resource $connection = ? , int $verbosity ) : int"
    ],
    "pg_socket": [
        "pg_socket ( resource $connection ) : resource|false"
    ],
    "pg_trace": [
        "pg_trace ( string $pathname , string $mode = \"w\" , resource $connection = ? ) : bool"
    ],
    "pg_transaction_status": [
        "pg_transaction_status ( resource $connection ) : int"
    ],
    "pg_tty": [
        "pg_tty ( resource $connection = ? ) : string"
    ],
    "pg_unescape_bytea": [
        "pg_unescape_bytea ( string $data ) : string"
    ],
    "pg_untrace": [
        "pg_untrace ( resource $connection = ? ) : bool"
    ],
    "pg_update": [
        "pg_update ( resource $connection , string $table_name , array $data , array $condition , int $options = PGSQL_DML_EXEC ) : mixed"
    ],
    "pg_version": [
        "pg_version ( resource $connection = ? ) : array"
    ],
    "Phar": [
        "public Phar::__construct ( string $fname , int $flags = ? , string $alias = ? )"
    ],
    "PharData": [
        "public PharData::__construct ( string $fname , int $flags = ? , string $alias = ? , int $format = Phar::TAR )"
    ],
    "PharFileInfo": [
        "public PharFileInfo::__construct ( string $entry )"
    ],
    "php_ini_loaded_file": [
        "php_ini_loaded_file ( ) : string|false"
    ],
    "php_ini_scanned_files": [
        "php_ini_scanned_files ( ) : string|false"
    ],
    "php_sapi_name": [
        "php_sapi_name ( ) : string|false"
    ],
    "php_strip_whitespace": [
        "php_strip_whitespace ( string $filename ) : string"
    ],
    "php_uname": [
        "php_uname ( string $mode = \"a\" ) : string"
    ],
    "phpcredits": [
        "phpcredits ( int $flags = CREDITS_ALL ) : bool"
    ],
    "phpdbg_break_file": [
        "phpdbg_break_file ( string $file , int $line ) : void"
    ],
    "phpdbg_break_function": [
        "phpdbg_break_function ( string $function ) : void"
    ],
    "phpdbg_break_method": [
        "phpdbg_break_method ( string $class , string $method ) : void"
    ],
    "phpdbg_break_next": [
        "phpdbg_break_next ( ) : void"
    ],
    "phpdbg_clear": [
        "phpdbg_clear ( ) : void"
    ],
    "phpdbg_color": [
        "phpdbg_color ( int $element , string $color ) : void"
    ],
    "phpdbg_end_oplog": [
        "phpdbg_end_oplog ( array $options = [] ) : array|null"
    ],
    "phpdbg_exec": [
        "phpdbg_exec ( string $context ) : string|bool"
    ],
    "phpdbg_get_executable": [
        "phpdbg_get_executable ( array $options = [] ) : array"
    ],
    "phpdbg_prompt": [
        "phpdbg_prompt ( string $string ) : void"
    ],
    "phpdbg_start_oplog": [
        "phpdbg_start_oplog ( ) : void"
    ],
    "phpinfo": [
        "phpinfo ( int $flags = INFO_ALL ) : bool"
    ],
    "PhpToken": [
        "final public PhpToken::__construct ( int $id , string $text , int $line = -1 , int $pos = -1 )"
    ],
    "phpversion": [
        "phpversion ( string $extension = ? ) : string"
    ],
    "pi": [
        "pi ( ) : float"
    ],
    "png2wbmp": [
        "png2wbmp ( string $pngname , string $wbmpname , int $dest_height , int $dest_width , int $threshold ) : bool"
    ],
    "Pool": [
        "public Pool::__construct ( int $size , string $class = ? , array $ctor = ? ) : Pool"
    ],
    "popen": [
        "popen ( string $command , string $mode ) : resource|false"
    ],
    "posix_access": [
        "posix_access ( string $filename , int $flags = 0 ) : bool"
    ],
    "posix_ctermid": [
        "posix_ctermid ( ) : string|false"
    ],
    "posix_get_last_error": [
        "posix_get_last_error ( ) : int"
    ],
    "posix_getcwd": [
        "posix_getcwd ( ) : string|false"
    ],
    "posix_getegid": [
        "posix_getegid ( ) : int"
    ],
    "posix_geteuid": [
        "posix_geteuid ( ) : int"
    ],
    "posix_getgid": [
        "posix_getgid ( ) : int"
    ],
    "posix_getgrgid": [
        "posix_getgrgid ( int $group_id ) : array|false"
    ],
    "posix_getgrnam": [
        "posix_getgrnam ( string $name ) : array|false"
    ],
    "posix_getgroups": [
        "posix_getgroups ( ) : array|false"
    ],
    "posix_getlogin": [
        "posix_getlogin ( ) : string|false"
    ],
    "posix_getpgid": [
        "posix_getpgid ( int $process_id ) : int|false"
    ],
    "posix_getpgrp": [
        "posix_getpgrp ( ) : int"
    ],
    "posix_getpid": [
        "posix_getpid ( ) : int"
    ],
    "posix_getppid": [
        "posix_getppid ( ) : int"
    ],
    "posix_getpwnam": [
        "posix_getpwnam ( string $username ) : array|false"
    ],
    "posix_getpwuid": [
        "posix_getpwuid ( int $user_id ) : array|false"
    ],
    "posix_getrlimit": [
        "posix_getrlimit ( ) : array|false"
    ],
    "posix_getsid": [
        "posix_getsid ( int $process_id ) : int|false"
    ],
    "posix_getuid": [
        "posix_getuid ( ) : int"
    ],
    "posix_initgroups": [
        "posix_initgroups ( string $username , int $group_id ) : bool"
    ],
    "posix_isatty": [
        "posix_isatty ( resource|int $file_descriptor ) : bool"
    ],
    "posix_kill": [
        "posix_kill ( int $process_id , int $signal ) : bool"
    ],
    "posix_mkfifo": [
        "posix_mkfifo ( string $filename , int $permissions ) : bool"
    ],
    "posix_mknod": [
        "posix_mknod ( string $filename , int $flags , int $major = 0 , int $minor = 0 ) : bool"
    ],
    "posix_setegid": [
        "posix_setegid ( int $group_id ) : bool"
    ],
    "posix_seteuid": [
        "posix_seteuid ( int $user_id ) : bool"
    ],
    "posix_setgid": [
        "posix_setgid ( int $group_id ) : bool"
    ],
    "posix_setpgid": [
        "posix_setpgid ( int $process_id , int $process_group_id ) : bool"
    ],
    "posix_setrlimit": [
        "posix_setrlimit ( int $resource , int $soft_limit , int $hard_limit ) : bool"
    ],
    "posix_setsid": [
        "posix_setsid ( ) : int"
    ],
    "posix_setuid": [
        "posix_setuid ( int $user_id ) : bool"
    ],
    "posix_strerror": [
        "posix_strerror ( int $error_code ) : string"
    ],
    "posix_times": [
        "posix_times ( ) : array|false"
    ],
    "posix_ttyname": [
        "posix_ttyname ( resource|int $file_descriptor ) : string|false"
    ],
    "posix_uname": [
        "posix_uname ( ) : array|false"
    ],
    "pow": [
        "pow ( int|float $base , int|float $exp ) : int|float"
    ],
    "preg_filter": [
        "preg_filter ( string|array $pattern , string|array $replacement , string|array $subject , int $limit = -1 , int &$count = null ) : string|array|null"
    ],
    "preg_grep": [
        "preg_grep ( string $pattern , array $array , int $flags = 0 ) : array|false"
    ],
    "preg_last_error": [
        "preg_last_error ( ) : int"
    ],
    "preg_last_error_msg": [
        "preg_last_error_msg ( ) : string"
    ],
    "preg_match": [
        "preg_match ( string $pattern , string $subject , array &$matches = null , int $flags = 0 , int $offset = 0 ) : int|false"
    ],
    "preg_match_all": [
        "preg_match_all ( string $pattern , string $subject , array &$matches = null , int $flags = 0 , int $offset = 0 ) : int|false|null"
    ],
    "preg_quote": [
        "preg_quote ( string $str , string|null $delimiter = null ) : string"
    ],
    "preg_replace": [
        "preg_replace ( string|array $pattern , string|array $replacement , string|array $subject , int $limit = -1 , int &$count = null ) : string|array|null"
    ],
    "preg_replace_callback": [
        "preg_replace_callback ( string|array $pattern , callable $callback , string|array $subject , int $limit = -1 , int &$count = null , int $flags = 0 ) : string|array|null"
    ],
    "preg_replace_callback_array": [
        "preg_replace_callback_array ( array $pattern , string|array $subject , int $limit = -1 , int &$count = null , int $flags = 0 ) : string|array|null"
    ],
    "preg_split": [
        "preg_split ( string $pattern , string $subject , int $limit = -1 , int $flags = 0 ) : array|false"
    ],
    "prev": [
        "prev ( array|object &$array ) : mixed"
    ],
    "print": [
        "print ( string $arg ) : int"
    ],
    "print_r": [
        "print_r ( mixed $value , bool $return = false ) : string|bool"
    ],
    "printf": [
        "printf ( string $format , mixed ...$values ) : int"
    ],
    "proc_close": [
        "proc_close ( resource $process ) : int"
    ],
    "proc_get_status": [
        "proc_get_status ( resource $process ) : array"
    ],
    "proc_nice": [
        "proc_nice ( int $priority ) : bool"
    ],
    "proc_open": [
        "proc_open ( mixed $cmd , array $descriptorspec , array &$pipes , string $cwd = null , array $env = null , array $other_options = null ) : resource"
    ],
    "proc_terminate": [
        "proc_terminate ( resource $process , int $signal = 15 ) : bool"
    ],
    "property_exists": [
        "property_exists ( mixed $class , string $property ) : bool"
    ],
    "ps_add_bookmark": [
        "ps_add_bookmark ( resource $psdoc , string $text , int $parent = 0 , int $open = 0 ) : int"
    ],
    "ps_add_launchlink": [
        "ps_add_launchlink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename ) : bool"
    ],
    "ps_add_locallink": [
        "ps_add_locallink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , int $page , string $dest ) : bool"
    ],
    "ps_add_note": [
        "ps_add_note ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open ) : bool"
    ],
    "ps_add_pdflink": [
        "ps_add_pdflink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename , int $page , string $dest ) : bool"
    ],
    "ps_add_weblink": [
        "ps_add_weblink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $url ) : bool"
    ],
    "ps_arc": [
        "ps_arc ( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta ) : bool"
    ],
    "ps_arcn": [
        "ps_arcn ( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta ) : bool"
    ],
    "ps_begin_page": [
        "ps_begin_page ( resource $psdoc , float $width , float $height ) : bool"
    ],
    "ps_begin_pattern": [
        "ps_begin_pattern ( resource $psdoc , float $width , float $height , float $xstep , float $ystep , int $painttype ) : int|false"
    ],
    "ps_begin_template": [
        "ps_begin_template ( resource $psdoc , float $width , float $height ) : int"
    ],
    "ps_circle": [
        "ps_circle ( resource $psdoc , float $x , float $y , float $radius ) : bool"
    ],
    "ps_clip": [
        "ps_clip ( resource $psdoc ) : bool"
    ],
    "ps_close": [
        "ps_close ( resource $psdoc ) : bool"
    ],
    "ps_close_image": [
        "ps_close_image ( resource $psdoc , int $imageid ) : void|false"
    ],
    "ps_closepath": [
        "ps_closepath ( resource $psdoc ) : bool"
    ],
    "ps_closepath_stroke": [
        "ps_closepath_stroke ( resource $psdoc ) : bool"
    ],
    "ps_continue_text": [
        "ps_continue_text ( resource $psdoc , string $text ) : bool"
    ],
    "ps_curveto": [
        "ps_curveto ( resource $psdoc , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 ) : bool"
    ],
    "ps_delete": [
        "ps_delete ( resource $psdoc ) : bool"
    ],
    "ps_end_page": [
        "ps_end_page ( resource $psdoc ) : bool"
    ],
    "ps_end_pattern": [
        "ps_end_pattern ( resource $psdoc ) : bool"
    ],
    "ps_end_template": [
        "ps_end_template ( resource $psdoc ) : bool"
    ],
    "ps_fill": [
        "ps_fill ( resource $psdoc ) : bool"
    ],
    "ps_fill_stroke": [
        "ps_fill_stroke ( resource $psdoc ) : bool"
    ],
    "ps_findfont": [
        "ps_findfont ( resource $psdoc , string $fontname , string $encoding , bool $embed = false ) : int"
    ],
    "ps_get_buffer": [
        "ps_get_buffer ( resource $psdoc ) : string"
    ],
    "ps_get_parameter": [
        "ps_get_parameter ( resource $psdoc , string $name , float $modifier = ? ) : string|false"
    ],
    "ps_get_value": [
        "ps_get_value ( resource $psdoc , string $name , float $modifier = ? ) : float"
    ],
    "ps_hyphenate": [
        "ps_hyphenate ( resource $psdoc , string $text ) : array|false"
    ],
    "ps_include_file": [
        "ps_include_file ( resource $psdoc , string $file ) : bool"
    ],
    "ps_lineto": [
        "ps_lineto ( resource $psdoc , float $x , float $y ) : bool"
    ],
    "ps_makespotcolor": [
        "ps_makespotcolor ( resource $psdoc , string $name , int $reserved = 0 ) : int"
    ],
    "ps_moveto": [
        "ps_moveto ( resource $psdoc , float $x , float $y ) : bool"
    ],
    "ps_new": [
        "ps_new ( ) : resource|false"
    ],
    "ps_open_file": [
        "ps_open_file ( resource $psdoc , string $filename = ? ) : bool"
    ],
    "ps_open_image": [
        "ps_open_image ( resource $psdoc , string $type , string $source , string $data , int $lenght , int $width , int $height , int $components , int $bpc , string $params ) : int"
    ],
    "ps_open_image_file": [
        "ps_open_image_file ( resource $psdoc , string $type , string $filename , string $stringparam = ? , int $intparam = 0 ) : int"
    ],
    "ps_open_memory_image": [
        "ps_open_memory_image ( resource $psdoc , int $gd ) : int"
    ],
    "ps_place_image": [
        "ps_place_image ( resource $psdoc , int $imageid , float $x , float $y , float $scale ) : bool"
    ],
    "ps_rect": [
        "ps_rect ( resource $psdoc , float $x , float $y , float $width , float $height ) : bool"
    ],
    "ps_restore": [
        "ps_restore ( resource $psdoc ) : bool"
    ],
    "ps_rotate": [
        "ps_rotate ( resource $psdoc , float $rot ) : bool"
    ],
    "ps_save": [
        "ps_save ( resource $psdoc ) : bool"
    ],
    "ps_scale": [
        "ps_scale ( resource $psdoc , float $x , float $y ) : bool"
    ],
    "ps_set_border_color": [
        "ps_set_border_color ( resource $psdoc , float $red , float $green , float $blue ) : bool"
    ],
    "ps_set_border_dash": [
        "ps_set_border_dash ( resource $psdoc , float $black , float $white ) : bool"
    ],
    "ps_set_border_style": [
        "ps_set_border_style ( resource $psdoc , string $style , float $width ) : bool"
    ],
    "ps_set_info": [
        "ps_set_info ( resource $p , string $key , string $val ) : bool"
    ],
    "ps_set_parameter": [
        "ps_set_parameter ( resource $psdoc , string $name , string $value ) : bool"
    ],
    "ps_set_text_pos": [
        "ps_set_text_pos ( resource $psdoc , float $x , float $y ) : bool"
    ],
    "ps_set_value": [
        "ps_set_value ( resource $psdoc , string $name , float $value ) : bool"
    ],
    "ps_setcolor": [
        "ps_setcolor ( resource $psdoc , string $type , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4 ) : bool"
    ],
    "ps_setdash": [
        "ps_setdash ( resource $psdoc , float $on , float $off ) : bool"
    ],
    "ps_setflat": [
        "ps_setflat ( resource $psdoc , float $value ) : bool"
    ],
    "ps_setfont": [
        "ps_setfont ( resource $psdoc , int $fontid , float $size ) : bool"
    ],
    "ps_setgray": [
        "ps_setgray ( resource $psdoc , float $gray ) : bool"
    ],
    "ps_setlinecap": [
        "ps_setlinecap ( resource $psdoc , int $type ) : bool"
    ],
    "ps_setlinejoin": [
        "ps_setlinejoin ( resource $psdoc , int $type ) : bool"
    ],
    "ps_setlinewidth": [
        "ps_setlinewidth ( resource $psdoc , float $width ) : bool"
    ],
    "ps_setmiterlimit": [
        "ps_setmiterlimit ( resource $psdoc , float $value ) : bool"
    ],
    "ps_setoverprintmode": [
        "ps_setoverprintmode ( resource $psdoc , int $mode ) : bool"
    ],
    "ps_setpolydash": [
        "ps_setpolydash ( resource $psdoc , float $arr ) : bool"
    ],
    "ps_shading": [
        "ps_shading ( resource $psdoc , string $type , float $x0 , float $y0 , float $x1 , float $y1 , float $c1 , float $c2 , float $c3 , float $c4 , string $optlist ) : int|false"
    ],
    "ps_shading_pattern": [
        "ps_shading_pattern ( resource $psdoc , int $shadingid , string $optlist ) : int|false"
    ],
    "ps_shfill": [
        "ps_shfill ( resource $psdoc , int $shadingid ) : bool"
    ],
    "ps_show": [
        "ps_show ( resource $psdoc , string $text ) : bool"
    ],
    "ps_show2": [
        "ps_show2 ( resource $psdoc , string $text , int $len ) : bool"
    ],
    "ps_show_boxed": [
        "ps_show_boxed ( resource $psdoc , string $text , float $left , float $bottom , float $width , float $height , string $hmode , string $feature = ? ) : int"
    ],
    "ps_show_xy": [
        "ps_show_xy ( resource $psdoc , string $text , float $x , float $y ) : bool"
    ],
    "ps_show_xy2": [
        "ps_show_xy2 ( resource $psdoc , string $text , int $len , float $xcoor , float $ycoor ) : bool"
    ],
    "ps_string_geometry": [
        "ps_string_geometry ( resource $psdoc , string $text , int $fontid = 0 , float $size = 0.0 ) : array"
    ],
    "ps_stringwidth": [
        "ps_stringwidth ( resource $psdoc , string $text , int $fontid = 0 , float $size = 0.0 ) : float"
    ],
    "ps_stroke": [
        "ps_stroke ( resource $psdoc ) : bool"
    ],
    "ps_symbol": [
        "ps_symbol ( resource $psdoc , int $ord ) : bool"
    ],
    "ps_symbol_name": [
        "ps_symbol_name ( resource $psdoc , int $ord , int $fontid = 0 ) : string"
    ],
    "ps_symbol_width": [
        "ps_symbol_width ( resource $psdoc , int $ord , int $fontid = 0 , float $size = 0.0 ) : float"
    ],
    "ps_translate": [
        "ps_translate ( resource $psdoc , float $x , float $y ) : bool"
    ],
    "pspell_add_to_personal": [
        "pspell_add_to_personal ( int $dictionary , string $word ) : bool"
    ],
    "pspell_add_to_session": [
        "pspell_add_to_session ( int $dictionary , string $word ) : bool"
    ],
    "pspell_check": [
        "pspell_check ( int $dictionary , string $word ) : bool"
    ],
    "pspell_clear_session": [
        "pspell_clear_session ( int $dictionary ) : bool"
    ],
    "pspell_config_create": [
        "pspell_config_create ( string $language , string $spelling = \"\" , string $jargon = \"\" , string $encoding = \"\" ) : int"
    ],
    "pspell_config_data_dir": [
        "pspell_config_data_dir ( int $config , string $directory ) : bool"
    ],
    "pspell_config_dict_dir": [
        "pspell_config_dict_dir ( int $config , string $directory ) : bool"
    ],
    "pspell_config_ignore": [
        "pspell_config_ignore ( int $config , int $min_length ) : bool"
    ],
    "pspell_config_mode": [
        "pspell_config_mode ( int $config , int $mode ) : bool"
    ],
    "pspell_config_personal": [
        "pspell_config_personal ( int $config , string $filename ) : bool"
    ],
    "pspell_config_repl": [
        "pspell_config_repl ( int $config , string $filename ) : bool"
    ],
    "pspell_config_runtogether": [
        "pspell_config_runtogether ( int $config , bool $allow ) : bool"
    ],
    "pspell_config_save_repl": [
        "pspell_config_save_repl ( int $config , bool $save ) : bool"
    ],
    "pspell_new": [
        "pspell_new ( string $language , string $spelling = \"\" , string $jargon = \"\" , string $encoding = \"\" , int $mode = 0 ) : int|false"
    ],
    "pspell_new_config": [
        "pspell_new_config ( int $config ) : int|false"
    ],
    "pspell_new_personal": [
        "pspell_new_personal ( string $filename , string $language , string $spelling = \"\" , string $jargon = \"\" , string $encoding = \"\" , int $mode = 0 ) : int|false"
    ],
    "pspell_save_wordlist": [
        "pspell_save_wordlist ( int $dictionary ) : bool"
    ],
    "pspell_store_replacement": [
        "pspell_store_replacement ( int $dictionary , string $misspelled , string $correct ) : bool"
    ],
    "pspell_suggest": [
        "pspell_suggest ( int $dictionary , string $word ) : array|false"
    ],
    "putenv": [
        "putenv ( string $assignment ) : bool"
    ],
    "px_close": [
        "px_close ( resource $pxdoc ) : bool"
    ],
    "px_create_fp": [
        "px_create_fp ( resource $pxdoc , resource $file , array $fielddesc ) : bool"
    ],
    "px_date2string": [
        "px_date2string ( resource $pxdoc , int $value , string $format ) : string"
    ],
    "px_delete": [
        "px_delete ( resource $pxdoc ) : bool"
    ],
    "px_delete_record": [
        "px_delete_record ( resource $pxdoc , int $num ) : bool"
    ],
    "px_get_field": [
        "px_get_field ( resource $pxdoc , int $fieldno ) : array"
    ],
    "px_get_info": [
        "px_get_info ( resource $pxdoc ) : array"
    ],
    "px_get_parameter": [
        "px_get_parameter ( resource $pxdoc , string $name ) : string|false"
    ],
    "px_get_record": [
        "px_get_record ( resource $pxdoc , int $num , int $mode = 0 ) : array"
    ],
    "px_get_schema": [
        "px_get_schema ( resource $pxdoc , int $mode = 0 ) : array"
    ],
    "px_get_value": [
        "px_get_value ( resource $pxdoc , string $name ) : float|false"
    ],
    "px_insert_record": [
        "px_insert_record ( resource $pxdoc , array $data ) : int"
    ],
    "px_new": [
        "px_new ( ) : resource"
    ],
    "px_numfields": [
        "px_numfields ( resource $pxdoc ) : int"
    ],
    "px_numrecords": [
        "px_numrecords ( resource $pxdoc ) : int"
    ],
    "px_open_fp": [
        "px_open_fp ( resource $pxdoc , resource $file ) : bool"
    ],
    "px_put_record": [
        "px_put_record ( resource $pxdoc , array $record , int $recpos = -1 ) : bool"
    ],
    "px_retrieve_record": [
        "px_retrieve_record ( resource $pxdoc , int $num , int $mode = 0 ) : array"
    ],
    "px_set_blob_file": [
        "px_set_blob_file ( resource $pxdoc , string $filename ) : bool"
    ],
    "px_set_parameter": [
        "px_set_parameter ( resource $pxdoc , string $name , string $value ) : bool"
    ],
    "px_set_tablename": [
        "px_set_tablename ( resource $pxdoc , string $name ) : void|false"
    ],
    "px_set_targetencoding": [
        "px_set_targetencoding ( resource $pxdoc , string $encoding ) : bool"
    ],
    "px_set_value": [
        "px_set_value ( resource $pxdoc , string $name , float $value ) : bool"
    ],
    "px_timestamp2string": [
        "px_timestamp2string ( resource $pxdoc , float $value , string $format ) : string"
    ],
    "px_update_record": [
        "px_update_record ( resource $pxdoc , array $data , int $num ) : bool"
    ],
    "QuickHashIntHash": [
        "public QuickHashIntHash::__construct ( int $size , int $options = ? )"
    ],
    "QuickHashIntSet": [
        "public QuickHashIntSet::__construct ( int $size , int $options = ? )"
    ],
    "QuickHashIntStringHash": [
        "public QuickHashIntStringHash::__construct ( int $size , int $options = 0 )"
    ],
    "QuickHashStringIntHash": [
        "public QuickHashStringIntHash::__construct ( int $size , int $options = 0 )"
    ],
    "quoted_printable_decode": [
        "quoted_printable_decode ( string $string ) : string"
    ],
    "quoted_printable_encode": [
        "quoted_printable_encode ( string $string ) : string"
    ],
    "quotemeta": [
        "quotemeta ( string $string ) : string"
    ],
    "rad2deg": [
        "rad2deg ( float $num ) : float"
    ],
    "radius_acct_open": [
        "radius_acct_open ( ) : resource"
    ],
    "radius_add_server": [
        "radius_add_server ( resource $radius_handle , string $hostname , int $port , string $secret , int $timeout , int $max_tries ) : bool"
    ],
    "radius_auth_open": [
        "radius_auth_open ( ) : resource"
    ],
    "radius_close": [
        "radius_close ( resource $radius_handle ) : bool"
    ],
    "radius_config": [
        "radius_config ( resource $radius_handle , string $file ) : bool"
    ],
    "radius_create_request": [
        "radius_create_request ( resource $radius_handle , int $type ) : bool"
    ],
    "radius_cvt_addr": [
        "radius_cvt_addr ( string $data ) : string"
    ],
    "radius_cvt_int": [
        "radius_cvt_int ( string $data ) : int"
    ],
    "radius_cvt_string": [
        "radius_cvt_string ( string $data ) : string"
    ],
    "radius_demangle": [
        "radius_demangle ( resource $radius_handle , string $mangled ) : string"
    ],
    "radius_demangle_mppe_key": [
        "radius_demangle_mppe_key ( resource $radius_handle , string $mangled ) : string"
    ],
    "radius_get_attr": [
        "radius_get_attr ( resource $radius_handle ) : mixed"
    ],
    "radius_get_tagged_attr_data": [
        "radius_get_tagged_attr_data ( string $data ) : string|false"
    ],
    "radius_get_tagged_attr_tag": [
        "radius_get_tagged_attr_tag ( string $data ) : int|false"
    ],
    "radius_get_vendor_attr": [
        "radius_get_vendor_attr ( string $data ) : array"
    ],
    "radius_put_addr": [
        "radius_put_addr ( resource $radius_handle , int $type , string $addr , int $options = 0 , int $tag = ? ) : bool"
    ],
    "radius_put_attr": [
        "radius_put_attr ( resource $radius_handle , int $type , string $value , int $options = 0 , int $tag = ? ) : bool"
    ],
    "radius_put_int": [
        "radius_put_int ( resource $radius_handle , int $type , int $value , int $options = 0 , int $tag = ? ) : bool"
    ],
    "radius_put_string": [
        "radius_put_string ( resource $radius_handle , int $type , string $value , int $options = 0 , int $tag = ? ) : bool"
    ],
    "radius_put_vendor_addr": [
        "radius_put_vendor_addr ( resource $radius_handle , int $vendor , int $type , string $addr ) : bool"
    ],
    "radius_put_vendor_attr": [
        "radius_put_vendor_attr ( resource $radius_handle , int $vendor , int $type , string $value , int $options = 0 , int $tag = ? ) : bool"
    ],
    "radius_put_vendor_int": [
        "radius_put_vendor_int ( resource $radius_handle , int $vendor , int $type , int $value , int $options = 0 , int $tag = ? ) : bool"
    ],
    "radius_put_vendor_string": [
        "radius_put_vendor_string ( resource $radius_handle , int $vendor , int $type , string $value , int $options = 0 , int $tag = ? ) : bool"
    ],
    "radius_request_authenticator": [
        "radius_request_authenticator ( resource $radius_handle ) : string"
    ],
    "radius_salt_encrypt_attr": [
        "radius_salt_encrypt_attr ( resource $radius_handle , string $data ) : string|false"
    ],
    "radius_send_request": [
        "radius_send_request ( resource $radius_handle ) : int"
    ],
    "radius_server_secret": [
        "radius_server_secret ( resource $radius_handle ) : string"
    ],
    "radius_strerror": [
        "radius_strerror ( resource $radius_handle ) : string"
    ],
    "rand": [
        "rand ( ) : int",
        "rand ( int $min , int $max ) : int"
    ],
    "random_bytes": [
        "random_bytes ( int $length ) : string"
    ],
    "random_int": [
        "random_int ( int $min , int $max ) : int"
    ],
    "range": [
        "range ( string|int|float $start , string|int|float $end , int|float $step = 1 ) : array"
    ],
    "rar_allow_broken_set": [
        "rar_allow_broken_set ( RarArchive $rarfile , bool $allow_broken ) : bool"
    ],
    "rar_broken_is": [
        "rar_broken_is ( RarArchive $rarfile ) : bool"
    ],
    "rar_close": [
        "rar_close ( RarArchive $rarfile ) : bool"
    ],
    "rar_comment_get": [
        "rar_comment_get ( RarArchive $rarfile ) : string"
    ],
    "rar_entry_get": [
        "rar_entry_get ( RarArchive $rarfile , string $entryname ) : RarEntry|false"
    ],
    "rar_list": [
        "rar_list ( RarArchive $rarfile ) : array|false"
    ],
    "rar_open": [
        "rar_open ( string $filename , string $password = NULL , callable $volume_callback = NULL ) : RarArchive|false"
    ],
    "rar_solid_is": [
        "rar_solid_is ( RarArchive $rarfile ) : bool"
    ],
    "rar_wrapper_cache_stats": [
        "rar_wrapper_cache_stats ( ) : string"
    ],
    "rawurldecode": [
        "rawurldecode ( string $string ) : string"
    ],
    "rawurlencode": [
        "rawurlencode ( string $string ) : string"
    ],
    "readdir": [
        "readdir ( resource $dir_handle = ? ) : string|false"
    ],
    "readfile": [
        "readfile ( string $filename , bool $use_include_path = false , resource $context = ? ) : int|false"
    ],
    "readgzfile": [
        "readgzfile ( string $filename , int $use_include_path = 0 ) : int|false"
    ],
    "readline": [
        "readline ( string|null $prompt = null ) : string|false"
    ],
    "readline_add_history": [
        "readline_add_history ( string $prompt ) : bool"
    ],
    "readline_callback_handler_install": [
        "readline_callback_handler_install ( string $prompt , callable $callback ) : bool"
    ],
    "readline_callback_handler_remove": [
        "readline_callback_handler_remove ( ) : bool"
    ],
    "readline_callback_read_char": [
        "readline_callback_read_char ( ) : void"
    ],
    "readline_clear_history": [
        "readline_clear_history ( ) : bool"
    ],
    "readline_completion_function": [
        "readline_completion_function ( callable $callback ) : bool"
    ],
    "readline_info": [
        "readline_info ( string|null $var_name = null , int|string|bool|null $value = null ) : mixed"
    ],
    "readline_list_history": [
        "readline_list_history ( ) : array"
    ],
    "readline_on_new_line": [
        "readline_on_new_line ( ) : void"
    ],
    "readline_read_history": [
        "readline_read_history ( string|null $filename = null ) : bool"
    ],
    "readline_redisplay": [
        "readline_redisplay ( ) : void"
    ],
    "readline_write_history": [
        "readline_write_history ( string|null $filename = null ) : bool"
    ],
    "readlink": [
        "readlink ( string $path ) : string|false"
    ],
    "realpath": [
        "realpath ( string $path ) : string|false"
    ],
    "realpath_cache_get": [
        "realpath_cache_get ( ) : array"
    ],
    "realpath_cache_size": [
        "realpath_cache_size ( ) : int"
    ],
    "recode_file": [
        "recode_file ( string $request , resource $input , resource $output ) : bool"
    ],
    "recode_string": [
        "recode_string ( string $request , string $string ) : string"
    ],
    "RecursiveCachingIterator": [
        "public RecursiveCachingIterator::__construct ( Iterator $iterator , int $flags = self::CALL_TOSTRING )"
    ],
    "RecursiveCallbackFilterIterator": [
        "public RecursiveCallbackFilterIterator::__construct ( RecursiveIterator $iterator , string $callback )"
    ],
    "RecursiveDirectoryIterator": [
        "public RecursiveDirectoryIterator::__construct ( string $path , int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO )"
    ],
    "RecursiveFilterIterator": [
        "public RecursiveFilterIterator::__construct ( RecursiveIterator $iterator )"
    ],
    "RecursiveIteratorIterator": [
        "public RecursiveIteratorIterator::__construct ( Traversable $iterator , int $mode = RecursiveIteratorIterator::LEAVES_ONLY , int $flags = 0 )"
    ],
    "RecursiveRegexIterator": [
        "public RecursiveRegexIterator::__construct ( RecursiveIterator $iterator , string $regex , int $mode = self::MATCH , int $flags = 0 , int $preg_flags = 0 )"
    ],
    "RecursiveTreeIterator": [
        "public RecursiveTreeIterator::__construct ( RecursiveIterator|IteratorAggregate $it , int $flags = RecursiveTreeIterator::BYPASS_KEY , int $cit_flags = CachingIterator::CATCH_GET_CHILD , int $mode = RecursiveIteratorIterator::SELF_FIRST )"
    ],
    "ReflectionClass": [
        "public ReflectionClass::__construct ( object|string $objectOrClass )"
    ],
    "ReflectionClassConstant": [
        "public ReflectionClassConstant::__construct ( object|string $class , string $constant )"
    ],
    "ReflectionExtension": [
        "public ReflectionExtension::__construct ( string $name )"
    ],
    "ReflectionFunction": [
        "public ReflectionFunction::__construct ( Closure|string $function )"
    ],
    "ReflectionGenerator": [
        "public ReflectionGenerator::__construct ( Generator $generator )"
    ],
    "ReflectionMethod": [
        "public ReflectionMethod::__construct ( object|string $objectOrMethod , string $method )",
        "public ReflectionMethod::__construct ( string $classMethod )"
    ],
    "ReflectionObject": [
        "public ReflectionObject::__construct ( object $object )"
    ],
    "ReflectionParameter": [
        "public ReflectionParameter::__construct ( string|array|object $function , int|string $param )"
    ],
    "ReflectionProperty": [
        "public ReflectionProperty::__construct ( object|string $class , string $property )"
    ],
    "ReflectionZendExtension": [
        "public ReflectionZendExtension::__construct ( string $name )"
    ],
    "RegexIterator": [
        "public RegexIterator::__construct ( Iterator $iterator , string $regex , int $mode = self::MATCH , int $flags = 0 , int $preg_flags = 0 )"
    ],
    "register_shutdown_function": [
        "register_shutdown_function ( callable $callback , mixed ...$args ) : void"
    ],
    "register_tick_function": [
        "register_tick_function ( callable $callback , mixed ...$args ) : bool"
    ],
    "rename": [
        "rename ( string $oldname , string $newname , resource $context = ? ) : bool"
    ],
    "reset": [
        "reset ( array|object &$array ) : mixed"
    ],
    "ResourceBundle": [
        "public ResourceBundle::__construct ( string $locale , string $bundlename , bool $fallback = ? )"
    ],
    "resourcebundle_count": [
        "resourcebundle_count ( ResourceBundle $r ) : int"
    ],
    "resourcebundle_create": [
        "resourcebundle_create ( string $locale , string $bundlename , bool $fallback = ? ) : ResourceBundle"
    ],
    "resourcebundle_get": [
        "resourcebundle_get ( ResourceBundle $r , string|int $index , bool $fallback = true ) : mixed"
    ],
    "resourcebundle_get_error_code": [
        "resourcebundle_get_error_code ( ResourceBundle $r ) : int"
    ],
    "resourcebundle_get_error_message": [
        "resourcebundle_get_error_message ( ResourceBundle $r ) : string"
    ],
    "resourcebundle_locales": [
        "resourcebundle_locales ( string $bundlename ) : array"
    ],
    "restore_error_handler": [
        "restore_error_handler ( ) : bool"
    ],
    "restore_exception_handler": [
        "restore_exception_handler ( ) : bool"
    ],
    "restore_include_path": [
        "restore_include_path ( ) : void"
    ],
    "rewind": [
        "rewind ( resource $stream ) : bool"
    ],
    "rewinddir": [
        "rewinddir ( resource $dir_handle = ? ) : void"
    ],
    "rmdir": [
        "rmdir ( string $dirname , resource $context = ? ) : bool"
    ],
    "round": [
        "round ( float $val , int $precision = 0 , int $mode = PHP_ROUND_HALF_UP ) : float"
    ],
    "rpmaddtag": [
        "rpmaddtag ( int $tag ) : bool"
    ],
    "rpmdbinfo": [
        "rpmdbinfo ( string $nevr , bool $full = false ) : array"
    ],
    "rpmdbsearch": [
        "rpmdbsearch ( string $pattern , int $rpmtag = RPMTAG_NAME , int $rpmmire = -1 , bool $full = false ) : array"
    ],
    "rpminfo": [
        "rpminfo ( string $path , bool $full = false , string &$error = ? ) : array"
    ],
    "rpmvercmp": [
        "rpmvercmp ( string $evr1 , string $evr2 ) : int"
    ],
    "rrd_create": [
        "rrd_create ( string $filename , array $options ) : bool"
    ],
    "rrd_error": [
        "rrd_error ( ) : string"
    ],
    "rrd_fetch": [
        "rrd_fetch ( string $filename , array $options ) : array"
    ],
    "rrd_first": [
        "rrd_first ( string $file , int $raaindex = 0 ) : int"
    ],
    "rrd_graph": [
        "rrd_graph ( string $filename , array $options ) : array"
    ],
    "rrd_info": [
        "rrd_info ( string $filename ) : array"
    ],
    "rrd_last": [
        "rrd_last ( string $filename ) : int"
    ],
    "rrd_lastupdate": [
        "rrd_lastupdate ( string $filename ) : array"
    ],
    "rrd_restore": [
        "rrd_restore ( string $xml_file , string $rrd_file , array $options = ? ) : bool"
    ],
    "rrd_tune": [
        "rrd_tune ( string $filename , array $options ) : bool"
    ],
    "rrd_update": [
        "rrd_update ( string $filename , array $options ) : bool"
    ],
    "rrd_version": [
        "rrd_version ( ) : string"
    ],
    "rrd_xport": [
        "rrd_xport ( array $options ) : array"
    ],
    "rrdc_disconnect": [
        "rrdc_disconnect ( ) : void"
    ],
    "RRDCreator": [
        "public RRDCreator::__construct ( string $path , string $startTime = ? , int $step = 0 )"
    ],
    "RRDGraph": [
        "public RRDGraph::__construct ( string $path )"
    ],
    "RRDUpdater": [
        "public RRDUpdater::__construct ( string $path )"
    ],
    "rsort": [
        "rsort ( array &$array , int $flags = SORT_REGULAR ) : bool"
    ],
    "rtrim": [
        "rtrim ( string $string , string $characters = \" \\n\\r\\t\\v\\0\" ) : string"
    ],
    "runkit7_constant_add": [
        "runkit7_constant_add ( string $constname , mixed $value , int $newVisibility = ? ) : bool"
    ],
    "runkit7_constant_redefine": [
        "runkit7_constant_redefine ( string $constname , mixed $value , string $newVisibility = ? ) : bool"
    ],
    "runkit7_constant_remove": [
        "runkit7_constant_remove ( string $constname ) : bool"
    ],
    "runkit7_function_add": [
        "runkit7_function_add ( string $funcname , string $arglist , string $code , bool $return_by_reference = null , string $doc_comment = null , string $return_type = ? , bool $is_strict = ? ) : bool",
        "runkit7_function_add ( string $funcname , Closure $closure , string $doc_comment = null , string $return_type = ? , bool $is_strict = ? ) : bool"
    ],
    "runkit7_function_copy": [
        "runkit7_function_copy ( string $funcname , string $targetname ) : bool"
    ],
    "runkit7_function_redefine": [
        "runkit7_function_redefine ( string $funcname , string $arglist , string $code , bool $return_by_reference = null , string $doc_comment = null , string $return_type = ? , string $is_strict = ? ) : bool",
        "runkit7_function_redefine ( string $funcname , Closure $closure , string $doc_comment = null , string $return_type = ? , string $is_strict = ? ) : bool"
    ],
    "runkit7_function_remove": [
        "runkit7_function_remove ( string $funcname ) : bool"
    ],
    "runkit7_function_rename": [
        "runkit7_function_rename ( string $funcname , string $newname ) : bool"
    ],
    "runkit7_import": [
        "runkit7_import ( string $filename , int $flags = ? ) : bool"
    ],
    "runkit7_method_add": [
        "runkit7_method_add ( string $classname , string $methodname , string $args , string $code , int $flags = RUNKIT7_ACC_PUBLIC , string $doc_comment = null , string $return_type = ? , bool $is_strict = ? ) : bool",
        "runkit7_method_add ( string $classname , string $methodname , Closure $closure , int $flags = RUNKIT7_ACC_PUBLIC , string $doc_comment = null , string $return_type = ? , bool $is_strict = ? ) : bool"
    ],
    "runkit7_method_copy": [
        "runkit7_method_copy ( string $dClass , string $dMethod , string $sClass , string $sMethod = ? ) : bool"
    ],
    "runkit7_method_redefine": [
        "runkit7_method_redefine ( string $classname , string $methodname , string $args , string $code , int $flags = RUNKIT7_ACC_PUBLIC , string $doc_comment = null , string $return_type = ? , bool $is_strict = ? ) : bool",
        "runkit7_method_redefine ( string $classname , string $methodname , Closure $closure , int $flags = RUNKIT7_ACC_PUBLIC , string $doc_comment = null , string $return_type = ? , bool $is_strict = ? ) : bool"
    ],
    "runkit7_method_remove": [
        "runkit7_method_remove ( string $classname , string $methodname ) : bool"
    ],
    "runkit7_method_rename": [
        "runkit7_method_rename ( string $classname , string $methodname , string $newname ) : bool"
    ],
    "runkit7_object_id": [
        "runkit7_object_id ( object $obj ) : int"
    ],
    "runkit7_superglobals": [
        "runkit7_superglobals ( ) : array"
    ],
    "runkit7_zval_inspect": [
        "runkit7_zval_inspect ( string $value ) : array"
    ],
    "sapi_windows_cp_conv": [
        "sapi_windows_cp_conv ( int|string $in_codepage , int|string $out_codepage , string $subject ) : string"
    ],
    "sapi_windows_cp_get": [
        "sapi_windows_cp_get ( string $kind = \"\" ) : int"
    ],
    "sapi_windows_cp_is_utf8": [
        "sapi_windows_cp_is_utf8 ( ) : bool"
    ],
    "sapi_windows_cp_set": [
        "sapi_windows_cp_set ( int $cp ) : bool"
    ],
    "sapi_windows_generate_ctrl_event": [
        "sapi_windows_generate_ctrl_event ( int $event , int $pid = 0 ) : bool"
    ],
    "sapi_windows_set_ctrl_handler": [
        "sapi_windows_set_ctrl_handler ( callable $callable , bool $add = true ) : bool"
    ],
    "sapi_windows_vt100_support": [
        "sapi_windows_vt100_support ( resource $stream , bool $enable = ? ) : bool"
    ],
    "scandir": [
        "scandir ( string $directory , int $sorting_order = SCANDIR_SORT_ASCENDING , resource $context = ? ) : array"
    ],
    "scoutapm_get_calls": [
        "scoutapm_get_calls ( ) : array"
    ],
    "scoutapm_list_instrumented_functions": [
        "scoutapm_list_instrumented_functions ( ) : array"
    ],
    "SeasLog": [
        "public SeasLog::__construct ( )"
    ],
    "seaslog_get_author": [
        "seaslog_get_author ( ) : string"
    ],
    "seaslog_get_version": [
        "seaslog_get_version ( ) : string"
    ],
    "sem_acquire": [
        "sem_acquire ( SysvSemaphore $semaphore , bool $non_blocking = false ) : bool"
    ],
    "sem_get": [
        "sem_get ( int $key , int $max_acquire = 1 , int $permissions = 0666 , bool $auto_release = true ) : SysvSemaphore|false"
    ],
    "sem_release": [
        "sem_release ( SysvSemaphore $semaphore ) : bool"
    ],
    "sem_remove": [
        "sem_remove ( SysvSemaphore $semaphore ) : bool"
    ],
    "serialize": [
        "serialize ( mixed $value ) : string"
    ],
    "session_abort": [
        "session_abort ( ) : bool"
    ],
    "session_cache_expire": [
        "session_cache_expire ( int|null $value = null ) : int|false"
    ],
    "session_cache_limiter": [
        "session_cache_limiter ( string|null $value = null ) : string|false"
    ],
    "session_create_id": [
        "session_create_id ( string $prefix = \"\" ) : string|false"
    ],
    "session_decode": [
        "session_decode ( string $data ) : bool"
    ],
    "session_destroy": [
        "session_destroy ( ) : bool"
    ],
    "session_encode": [
        "session_encode ( ) : string|false"
    ],
    "session_gc": [
        "session_gc ( ) : int|false"
    ],
    "session_get_cookie_params": [
        "session_get_cookie_params ( ) : array"
    ],
    "session_id": [
        "session_id ( string|null $id = null ) : string|false"
    ],
    "session_is_registered": [
        "session_is_registered ( string $name ) : bool"
    ],
    "session_module_name": [
        "session_module_name ( string|null $module = null ) : string|false"
    ],
    "session_name": [
        "session_name ( string|null $name = null ) : string|false"
    ],
    "session_regenerate_id": [
        "session_regenerate_id ( bool $delete_old_session = false ) : bool"
    ],
    "session_register_shutdown": [
        "session_register_shutdown ( ) : void"
    ],
    "session_reset": [
        "session_reset ( ) : bool"
    ],
    "session_save_path": [
        "session_save_path ( string|null $path = null ) : string|false"
    ],
    "session_set_cookie_params": [
        "session_set_cookie_params ( int $lifetime_or_options , string|null $path = null , string|null $domain = null , bool|null $secure = null , bool|null $httponly = null ) : bool",
        "session_set_cookie_params ( array $lifetime_or_options ) : bool"
    ],
    "session_set_save_handler": [
        "session_set_save_handler ( callable $open , callable $close , callable $read , callable $write , callable $destroy , callable $gc , callable $create_sid = ? , callable $validate_sid = ? , callable $update_timestamp = ? ) : bool",
        "session_set_save_handler ( object $sessionhandler , bool $register_shutdown = true ) : bool"
    ],
    "session_start": [
        "session_start ( array $options = [] ) : bool"
    ],
    "session_status": [
        "session_status ( ) : int"
    ],
    "session_unregister": [
        "session_unregister ( string $name ) : bool"
    ],
    "session_unset": [
        "session_unset ( ) : bool"
    ],
    "session_write_close": [
        "session_write_close ( ) : bool"
    ],
    "set_error_handler": [
        "set_error_handler ( callable $error_handler , int $error_types = E_ALL | E_STRICT ) : mixed"
    ],
    "set_exception_handler": [
        "set_exception_handler ( callable $exception_handler ) : callable"
    ],
    "set_include_path": [
        "set_include_path ( string $include_path ) : string|false"
    ],
    "set_time_limit": [
        "set_time_limit ( int $seconds ) : bool"
    ],
    "setcookie": [
        "setcookie ( string $name , string $value = \"\" , int $expires = 0 , string $path = \"\" , string $domain = \"\" , bool $secure = false , bool $httponly = false ) : bool",
        "setcookie ( string $name , string $value = \"\" , array $options = [] ) : bool"
    ],
    "setlocale": [
        "setlocale ( int $category , string $locales , string ...$rest ) : string|false",
        "setlocale ( int $category , array $locale_array ) : string|false"
    ],
    "setproctitle": [
        "setproctitle ( string $title ) : void"
    ],
    "setrawcookie": [
        "setrawcookie ( string $name , string $value = ? , int $expires = 0 , string $path = ? , string $domain = ? , bool $secure = false , bool $httponly = false ) : bool",
        "setrawcookie ( string $name , string $value = ? , array $options = [] ) : bool"
    ],
    "setthreadtitle": [
        "setthreadtitle ( string $title ) : bool"
    ],
    "settype": [
        "settype ( mixed &$var , string $type ) : bool"
    ],
    "sha1": [
        "sha1 ( string $string , bool $binary = false ) : string"
    ],
    "sha1_file": [
        "sha1_file ( string $filename , bool $binary = false ) : string|false"
    ],
    "shell_exec": [
        "shell_exec ( string $cmd ) : string"
    ],
    "shm_attach": [
        "shm_attach ( int $key , int|null $size = null , int $permissions = 0666 ) : SysvSharedMemory|false"
    ],
    "shm_detach": [
        "shm_detach ( SysvSharedMemory $shm ) : bool"
    ],
    "shm_get_var": [
        "shm_get_var ( SysvSharedMemory $shm , int $key ) : mixed"
    ],
    "shm_has_var": [
        "shm_has_var ( SysvSharedMemory $shm , int $key ) : bool"
    ],
    "shm_put_var": [
        "shm_put_var ( SysvSharedMemory $shm , int $key , mixed $value ) : bool"
    ],
    "shm_remove": [
        "shm_remove ( SysvSharedMemory $shm ) : bool"
    ],
    "shm_remove_var": [
        "shm_remove_var ( SysvSharedMemory $shm , int $key ) : bool"
    ],
    "shmop_close": [
        "shmop_close ( Shmop $shmop ) : void"
    ],
    "shmop_delete": [
        "shmop_delete ( Shmop $shmop ) : bool"
    ],
    "shmop_open": [
        "shmop_open ( int $key , string $mode , int $permissions , int $size ) : Shmop|false"
    ],
    "shmop_read": [
        "shmop_read ( Shmop $shmop , int $offset , int $size ) : string"
    ],
    "shmop_size": [
        "shmop_size ( Shmop $shmop ) : int"
    ],
    "shmop_write": [
        "shmop_write ( Shmop $shmop , string $data , int $offset ) : int"
    ],
    "shuffle": [
        "shuffle ( array &$array ) : bool"
    ],
    "similar_text": [
        "similar_text ( string $string1 , string $string2 , float &$percent = null ) : int"
    ],
    "simplexml_import_dom": [
        "simplexml_import_dom ( DOMNode $node , string $class_name = \"SimpleXMLElement\" ) : SimpleXMLElement|null"
    ],
    "simplexml_load_file": [
        "simplexml_load_file ( string $filename , string $class_name = \"SimpleXMLElement\" , int $options = 0 , string $ns = \"\" , bool $is_prefix = false ) : SimpleXMLElement|false"
    ],
    "simplexml_load_string": [
        "simplexml_load_string ( string $data , string $class_name = \"SimpleXMLElement\" , int $options = 0 , string $ns = \"\" , bool $is_prefix = false ) : SimpleXMLElement|false"
    ],
    "SimpleXMLElement": [
        "final public SimpleXMLElement::__construct ( string $data , int $options = 0 , bool $data_is_url = false , string $ns = \"\" , bool $is_prefix = false )"
    ],
    "sin": [
        "sin ( float $num ) : float"
    ],
    "sinh": [
        "sinh ( float $num ) : float"
    ],
    "sleep": [
        "sleep ( int $seconds ) : int"
    ],
    "SNMP": [
        "public SNMP::__construct ( int $version , string $hostname , string $community , int $timeout = -1 , int $retries = -1 )"
    ],
    "snmp2_get": [
        "snmp2_get ( string $hostname , string $community , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : stdClass|array|string|bool"
    ],
    "snmp2_getnext": [
        "snmp2_getnext ( string $hostname , string $community , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : stdClass|array|string|bool"
    ],
    "snmp2_real_walk": [
        "snmp2_real_walk ( string $hostname , string $community , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "snmp2_set": [
        "snmp2_set ( string $hostname , string $community , array|string $object_id , array|string $type , array|string $value , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "snmp2_walk": [
        "snmp2_walk ( string $hostname , string $community , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "snmp3_get": [
        "snmp3_get ( string $hostname , string $security_name , string $security_level , string $auth_protocol , string $auth_passphrase , string $privacy_protocol , string $privacy_passphrase , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : stdClass|array|string|bool"
    ],
    "snmp3_getnext": [
        "snmp3_getnext ( string $hostname , string $security_name , string $security_level , string $auth_protocol , string $auth_passphrase , string $privacy_protocol , string $privacy_passphrase , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : stdClass|array|string|bool"
    ],
    "snmp3_real_walk": [
        "snmp3_real_walk ( string $hostname , string $security_name , string $security_level , string $auth_protocol , string $auth_passphrase , string $privacy_protocol , string $privacy_passphrase , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "snmp3_set": [
        "snmp3_set ( string $hostname , string $security_name , string $security_level , string $auth_protocol , string $auth_passphrase , string $privacy_protocol , string $privacy_passphrase , array|string $object_id , array|string $type , array|string $value , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "snmp3_walk": [
        "snmp3_walk ( string $hostname , string $security_name , string $security_level , string $auth_protocol , string $auth_passphrase , string $privacy_protocol , string $privacy_passphrase , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "snmp_get_quick_print": [
        "snmp_get_quick_print ( ) : bool"
    ],
    "snmp_get_valueretrieval": [
        "snmp_get_valueretrieval ( ) : int"
    ],
    "snmp_read_mib": [
        "snmp_read_mib ( string $filename ) : bool"
    ],
    "snmp_set_enum_print": [
        "snmp_set_enum_print ( bool $enable ) : bool"
    ],
    "snmp_set_oid_numeric_print": [
        "snmp_set_oid_numeric_print ( int $format ) : bool"
    ],
    "snmp_set_oid_output_format": [
        "snmp_set_oid_output_format ( int $format ) : bool"
    ],
    "snmp_set_quick_print": [
        "snmp_set_quick_print ( bool $enable ) : bool"
    ],
    "snmp_set_valueretrieval": [
        "snmp_set_valueretrieval ( int $method ) : bool"
    ],
    "snmpget": [
        "snmpget ( string $hostname , string $community , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : stdClass|array|string|bool"
    ],
    "snmpgetnext": [
        "snmpgetnext ( string $hostname , string $community , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : stdClass|array|string|bool"
    ],
    "snmprealwalk": [
        "snmprealwalk ( string $hostname , string $community , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "snmpset": [
        "snmpset ( string $hostname , string $community , array|string $object_id , array|string $type , array|string $value , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "snmpwalk": [
        "snmpwalk ( string $hostname , string $community , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "snmpwalkoid": [
        "snmpwalkoid ( string $hostname , string $community , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "SoapClient": [
        "public SoapClient::__construct ( string|null $wsdl , array $options = [] )"
    ],
    "SoapFault": [
        "public SoapFault::__construct ( array|string|null $code , string $string , string|null $actor = null , mixed $details = null , string|null $name = null , mixed $headerFault = null )"
    ],
    "SoapHeader": [
        "SoapHeader::__construct ( string $namespace , string $name , mixed $data = ? , bool $mustunderstand = ? , string $actor = ? )"
    ],
    "SoapParam": [
        "public SoapParam::__construct ( mixed $data , string $name )"
    ],
    "SoapServer": [
        "public SoapServer::__construct ( string|null $wsdl , array $options = [] )"
    ],
    "SoapVar": [
        "public SoapVar::__construct ( mixed $data , int|null $encoding , string $typeName = \"\" , string $typeNamespace = \"\" , string $nodeName = \"\" , string $nodeNamespace = \"\" )"
    ],
    "socket_accept": [
        "socket_accept ( Socket $socket ) : Socket|false"
    ],
    "socket_addrinfo_bind": [
        "socket_addrinfo_bind ( AddressInfo $address ) : Socket|false"
    ],
    "socket_addrinfo_connect": [
        "socket_addrinfo_connect ( AddressInfo $address ) : Socket|false"
    ],
    "socket_addrinfo_explain": [
        "socket_addrinfo_explain ( AddressInfo $address ) : array"
    ],
    "socket_addrinfo_lookup": [
        "socket_addrinfo_lookup ( string $host , string|null $service = null , array $hints = [] ) : array|false"
    ],
    "socket_bind": [
        "socket_bind ( Socket $socket , string $address , int $port = 0 ) : bool"
    ],
    "socket_clear_error": [
        "socket_clear_error ( Socket|null $socket = null ) : void"
    ],
    "socket_close": [
        "socket_close ( Socket $socket ) : void"
    ],
    "socket_cmsg_space": [
        "socket_cmsg_space ( int $level , int $type , int $num = 0 ) : int|null"
    ],
    "socket_connect": [
        "socket_connect ( Socket $socket , string $address , int|null $port = null ) : bool"
    ],
    "socket_create": [
        "socket_create ( int $domain , int $type , int $protocol ) : Socket|false"
    ],
    "socket_create_listen": [
        "socket_create_listen ( int $port , int $backlog = 128 ) : Socket|false"
    ],
    "socket_create_pair": [
        "socket_create_pair ( int $domain , int $type , int $protocol , array &$pair ) : bool"
    ],
    "socket_export_stream": [
        "socket_export_stream ( Socket $socket ) : resource|false"
    ],
    "socket_get_option": [
        "socket_get_option ( Socket $socket , int $level , int $option ) : array|int|false"
    ],
    "socket_getpeername": [
        "socket_getpeername ( Socket $socket , string &$address , int &$port = null ) : bool"
    ],
    "socket_getsockname": [
        "socket_getsockname ( Socket $socket , string &$address , int &$port = null ) : bool"
    ],
    "socket_import_stream": [
        "socket_import_stream ( resource $stream ) : Socket|false"
    ],
    "socket_last_error": [
        "socket_last_error ( Socket|null $socket = null ) : int"
    ],
    "socket_listen": [
        "socket_listen ( Socket $socket , int $backlog = 0 ) : bool"
    ],
    "socket_read": [
        "socket_read ( Socket $socket , int $length , int $mode = PHP_BINARY_READ ) : string|false"
    ],
    "socket_recv": [
        "socket_recv ( Socket $socket , string|null &$data , int $length , int $flags ) : int|false"
    ],
    "socket_recvfrom": [
        "socket_recvfrom ( Socket $socket , string &$data , int $length , int $flags , string &$address , int &$port = null ) : int|false"
    ],
    "socket_recvmsg": [
        "socket_recvmsg ( Socket $socket , array &$message , int $flags = 0 ) : int|false"
    ],
    "socket_select": [
        "socket_select ( array|null &$read , array|null &$write , array|null &$except , int|null $seconds , int $microseconds = 0 ) : int|false"
    ],
    "socket_send": [
        "socket_send ( Socket $socket , string $data , int $length , int $flags ) : int|false"
    ],
    "socket_sendmsg": [
        "socket_sendmsg ( Socket $socket , array $message , int $flags = 0 ) : int|false"
    ],
    "socket_sendto": [
        "socket_sendto ( Socket $socket , string $data , int $length , int $flags , string $address , int|null $port = null ) : int|false"
    ],
    "socket_set_block": [
        "socket_set_block ( Socket $socket ) : bool"
    ],
    "socket_set_nonblock": [
        "socket_set_nonblock ( Socket $socket ) : bool"
    ],
    "socket_set_option": [
        "socket_set_option ( Socket $socket , int $level , int $option , array|string|int $value ) : bool"
    ],
    "socket_shutdown": [
        "socket_shutdown ( Socket $socket , int $mode = 2 ) : bool"
    ],
    "socket_strerror": [
        "socket_strerror ( int $error_code ) : string"
    ],
    "socket_write": [
        "socket_write ( Socket $socket , string $data , int|null $length = null ) : int|false"
    ],
    "socket_wsaprotocol_info_export": [
        "socket_wsaprotocol_info_export ( Socket $socket , int $process_id ) : string|false"
    ],
    "socket_wsaprotocol_info_import": [
        "socket_wsaprotocol_info_import ( string $info_id ) : Socket|false"
    ],
    "socket_wsaprotocol_info_release": [
        "socket_wsaprotocol_info_release ( string $info_id ) : bool"
    ],
    "sodium_add": [
        "sodium_add ( string &$string1 , string $string2 ) : void"
    ],
    "sodium_base642bin": [
        "sodium_base642bin ( string $string , int $id , string $ignore = \"\" ) : string"
    ],
    "sodium_bin2base64": [
        "sodium_bin2base64 ( string $string , int $id ) : string"
    ],
    "sodium_bin2hex": [
        "sodium_bin2hex ( string $string ) : string"
    ],
    "sodium_compare": [
        "sodium_compare ( string $string1 , string $string2 ) : int"
    ],
    "sodium_crypto_aead_aes256gcm_decrypt": [
        "sodium_crypto_aead_aes256gcm_decrypt ( string $ciphertext , string $additional_data , string $nonce , string $key ) : string|false"
    ],
    "sodium_crypto_aead_aes256gcm_encrypt": [
        "sodium_crypto_aead_aes256gcm_encrypt ( string $message , string $additional_data , string $nonce , string $key ) : string"
    ],
    "sodium_crypto_aead_aes256gcm_is_available": [
        "sodium_crypto_aead_aes256gcm_is_available ( ) : bool"
    ],
    "sodium_crypto_aead_aes256gcm_keygen": [
        "sodium_crypto_aead_aes256gcm_keygen ( ) : string"
    ],
    "sodium_crypto_aead_chacha20poly1305_decrypt": [
        "sodium_crypto_aead_chacha20poly1305_decrypt ( string $ciphertext , string $additional_data , string $nonce , string $key ) : string|false"
    ],
    "sodium_crypto_aead_chacha20poly1305_encrypt": [
        "sodium_crypto_aead_chacha20poly1305_encrypt ( string $message , string $additional_data , string $nonce , string $key ) : string"
    ],
    "sodium_crypto_aead_chacha20poly1305_ietf_decrypt": [
        "sodium_crypto_aead_chacha20poly1305_ietf_decrypt ( string $ciphertext , string $additional_data , string $nonce , string $key ) : string|false"
    ],
    "sodium_crypto_aead_chacha20poly1305_ietf_encrypt": [
        "sodium_crypto_aead_chacha20poly1305_ietf_encrypt ( string $message , string $additional_data , string $nonce , string $key ) : string"
    ],
    "sodium_crypto_aead_chacha20poly1305_ietf_keygen": [
        "sodium_crypto_aead_chacha20poly1305_ietf_keygen ( ) : string"
    ],
    "sodium_crypto_aead_chacha20poly1305_keygen": [
        "sodium_crypto_aead_chacha20poly1305_keygen ( ) : string"
    ],
    "sodium_crypto_aead_xchacha20poly1305_ietf_decrypt": [
        "sodium_crypto_aead_xchacha20poly1305_ietf_decrypt ( string $ciphertext , string $additional_data , string $nonce , string $key ) : string|false"
    ],
    "sodium_crypto_aead_xchacha20poly1305_ietf_encrypt": [
        "sodium_crypto_aead_xchacha20poly1305_ietf_encrypt ( string $message , string $additional_data , string $nonce , string $key ) : string"
    ],
    "sodium_crypto_aead_xchacha20poly1305_ietf_keygen": [
        "sodium_crypto_aead_xchacha20poly1305_ietf_keygen ( ) : string"
    ],
    "sodium_crypto_auth": [
        "sodium_crypto_auth ( string $message , string $key ) : string"
    ],
    "sodium_crypto_auth_keygen": [
        "sodium_crypto_auth_keygen ( ) : string"
    ],
    "sodium_crypto_auth_verify": [
        "sodium_crypto_auth_verify ( string $mac , string $message , string $key ) : bool"
    ],
    "sodium_crypto_box": [
        "sodium_crypto_box ( string $message , string $nonce , string $key_pair ) : string"
    ],
    "sodium_crypto_box_keypair": [
        "sodium_crypto_box_keypair ( ) : string"
    ],
    "sodium_crypto_box_keypair_from_secretkey_and_publickey": [
        "sodium_crypto_box_keypair_from_secretkey_and_publickey ( string $secret_key , string $public_key ) : string"
    ],
    "sodium_crypto_box_open": [
        "sodium_crypto_box_open ( string $ciphertext , string $nonce , string $key_pair ) : string|false"
    ],
    "sodium_crypto_box_publickey": [
        "sodium_crypto_box_publickey ( string $key_pair ) : string"
    ],
    "sodium_crypto_box_publickey_from_secretkey": [
        "sodium_crypto_box_publickey_from_secretkey ( string $secret_key ) : string"
    ],
    "sodium_crypto_box_seal": [
        "sodium_crypto_box_seal ( string $message , string $key_pair ) : string"
    ],
    "sodium_crypto_box_seal_open": [
        "sodium_crypto_box_seal_open ( string $ciphertext , string $key_pair ) : string|false"
    ],
    "sodium_crypto_box_secretkey": [
        "sodium_crypto_box_secretkey ( string $key_pair ) : string"
    ],
    "sodium_crypto_box_seed_keypair": [
        "sodium_crypto_box_seed_keypair ( string $seed ) : string"
    ],
    "sodium_crypto_generichash": [
        "sodium_crypto_generichash ( string $message , string $key = \"\" , int $length = SODIUM_CRYPTO_GENERICHASH_BYTES ) : string"
    ],
    "sodium_crypto_generichash_final": [
        "sodium_crypto_generichash_final ( string &$state , int $length = SODIUM_CRYPTO_GENERICHASH_BYTES ) : string"
    ],
    "sodium_crypto_generichash_init": [
        "sodium_crypto_generichash_init ( string $key = \"\" , int $length = SODIUM_CRYPTO_GENERICHASH_BYTES ) : string"
    ],
    "sodium_crypto_generichash_keygen": [
        "sodium_crypto_generichash_keygen ( ) : string"
    ],
    "sodium_crypto_generichash_update": [
        "sodium_crypto_generichash_update ( string &$state , string $message ) : bool"
    ],
    "sodium_crypto_kdf_derive_from_key": [
        "sodium_crypto_kdf_derive_from_key ( int $subkey_length , int $subkey_id , string $context , string $key ) : string"
    ],
    "sodium_crypto_kdf_keygen": [
        "sodium_crypto_kdf_keygen ( ) : string"
    ],
    "sodium_crypto_kx_client_session_keys": [
        "sodium_crypto_kx_client_session_keys ( string $client_key_pair , string $server_key ) : array"
    ],
    "sodium_crypto_kx_keypair": [
        "sodium_crypto_kx_keypair ( ) : string"
    ],
    "sodium_crypto_kx_publickey": [
        "sodium_crypto_kx_publickey ( string $key_pair ) : string"
    ],
    "sodium_crypto_kx_secretkey": [
        "sodium_crypto_kx_secretkey ( string $key_pair ) : string"
    ],
    "sodium_crypto_kx_seed_keypair": [
        "sodium_crypto_kx_seed_keypair ( string $seed ) : string"
    ],
    "sodium_crypto_kx_server_session_keys": [
        "sodium_crypto_kx_server_session_keys ( string $server_key_pair , string $client_key ) : array"
    ],
    "sodium_crypto_pwhash": [
        "sodium_crypto_pwhash ( int $length , string $password , string $salt , int $opslimit , int $memlimit , int $algo = SODIUM_CRYPTO_PWHASH_ALG_DEFAULT ) : string"
    ],
    "sodium_crypto_pwhash_scryptsalsa208sha256": [
        "sodium_crypto_pwhash_scryptsalsa208sha256 ( int $length , string $password , string $salt , int $opslimit , int $memlimit ) : string"
    ],
    "sodium_crypto_pwhash_scryptsalsa208sha256_str": [
        "sodium_crypto_pwhash_scryptsalsa208sha256_str ( string $password , int $opslimit , int $memlimit ) : string"
    ],
    "sodium_crypto_pwhash_scryptsalsa208sha256_str_verify": [
        "sodium_crypto_pwhash_scryptsalsa208sha256_str_verify ( string $hash , string $password ) : bool"
    ],
    "sodium_crypto_pwhash_str": [
        "sodium_crypto_pwhash_str ( string $password , int $opslimit , int $memlimit ) : string"
    ],
    "sodium_crypto_pwhash_str_needs_rehash": [
        "sodium_crypto_pwhash_str_needs_rehash ( string $password , int $opslimit , int $memlimit ) : bool"
    ],
    "sodium_crypto_pwhash_str_verify": [
        "sodium_crypto_pwhash_str_verify ( string $hash , string $password ) : bool"
    ],
    "sodium_crypto_scalarmult": [
        "sodium_crypto_scalarmult ( string $n , string $p ) : string"
    ],
    "sodium_crypto_secretbox": [
        "sodium_crypto_secretbox ( string $message , string $nonce , string $key ) : string"
    ],
    "sodium_crypto_secretbox_keygen": [
        "sodium_crypto_secretbox_keygen ( ) : string"
    ],
    "sodium_crypto_secretbox_open": [
        "sodium_crypto_secretbox_open ( string $ciphertext , string $nonce , string $key ) : string|false"
    ],
    "sodium_crypto_secretstream_xchacha20poly1305_init_pull": [
        "sodium_crypto_secretstream_xchacha20poly1305_init_pull ( string $header , string $key ) : string"
    ],
    "sodium_crypto_secretstream_xchacha20poly1305_init_push": [
        "sodium_crypto_secretstream_xchacha20poly1305_init_push ( string $key ) : array"
    ],
    "sodium_crypto_secretstream_xchacha20poly1305_keygen": [
        "sodium_crypto_secretstream_xchacha20poly1305_keygen ( ) : string"
    ],
    "sodium_crypto_secretstream_xchacha20poly1305_pull": [
        "sodium_crypto_secretstream_xchacha20poly1305_pull ( string &$state , string $ciphertext , string $additional_data = \"\" ) : array|false"
    ],
    "sodium_crypto_secretstream_xchacha20poly1305_push": [
        "sodium_crypto_secretstream_xchacha20poly1305_push ( string &$state , string $message , string $additional_data = \"\" , int $tag = SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_MESSAGE ) : string"
    ],
    "sodium_crypto_secretstream_xchacha20poly1305_rekey": [
        "sodium_crypto_secretstream_xchacha20poly1305_rekey ( string &$state ) : void"
    ],
    "sodium_crypto_shorthash": [
        "sodium_crypto_shorthash ( string $message , string $key ) : string"
    ],
    "sodium_crypto_shorthash_keygen": [
        "sodium_crypto_shorthash_keygen ( ) : string"
    ],
    "sodium_crypto_sign": [
        "sodium_crypto_sign ( string $message , string $secret_key ) : string"
    ],
    "sodium_crypto_sign_detached": [
        "sodium_crypto_sign_detached ( string $message , string $secret_key ) : string"
    ],
    "sodium_crypto_sign_ed25519_pk_to_curve25519": [
        "sodium_crypto_sign_ed25519_pk_to_curve25519 ( string $public_key ) : string"
    ],
    "sodium_crypto_sign_ed25519_sk_to_curve25519": [
        "sodium_crypto_sign_ed25519_sk_to_curve25519 ( string $secret_key ) : string"
    ],
    "sodium_crypto_sign_keypair": [
        "sodium_crypto_sign_keypair ( ) : string"
    ],
    "sodium_crypto_sign_keypair_from_secretkey_and_publickey": [
        "sodium_crypto_sign_keypair_from_secretkey_and_publickey ( string $secret_key , string $public_key ) : string"
    ],
    "sodium_crypto_sign_open": [
        "sodium_crypto_sign_open ( string $ciphertext , string $public_key ) : string|false"
    ],
    "sodium_crypto_sign_publickey": [
        "sodium_crypto_sign_publickey ( string $key_pair ) : string"
    ],
    "sodium_crypto_sign_publickey_from_secretkey": [
        "sodium_crypto_sign_publickey_from_secretkey ( string $secret_key ) : string"
    ],
    "sodium_crypto_sign_secretkey": [
        "sodium_crypto_sign_secretkey ( string $key_pair ) : string"
    ],
    "sodium_crypto_sign_seed_keypair": [
        "sodium_crypto_sign_seed_keypair ( string $seed ) : string"
    ],
    "sodium_crypto_sign_verify_detached": [
        "sodium_crypto_sign_verify_detached ( string $signature , string $message , string $public_key ) : bool"
    ],
    "sodium_crypto_stream": [
        "sodium_crypto_stream ( int $length , string $nonce , string $key ) : string"
    ],
    "sodium_crypto_stream_keygen": [
        "sodium_crypto_stream_keygen ( ) : string"
    ],
    "sodium_crypto_stream_xor": [
        "sodium_crypto_stream_xor ( string $message , string $nonce , string $key ) : string"
    ],
    "sodium_hex2bin": [
        "sodium_hex2bin ( string $string , string $ignore = \"\" ) : string"
    ],
    "sodium_increment": [
        "sodium_increment ( string &$string ) : void"
    ],
    "sodium_memcmp": [
        "sodium_memcmp ( string $string1 , string $string2 ) : int"
    ],
    "sodium_memzero": [
        "sodium_memzero ( string &$string ) : void"
    ],
    "sodium_pad": [
        "sodium_pad ( string $string , int $length ) : string"
    ],
    "sodium_unpad": [
        "sodium_unpad ( string $string , int $block_size ) : string"
    ],
    "solr_get_version": [
        "solr_get_version ( ) : string"
    ],
    "SolrClient": [
        "public SolrClient::__construct ( array $clientOptions )"
    ],
    "SolrCollapseFunction": [
        "public SolrCollapseFunction::__construct ( string $field = ? )"
    ],
    "SolrDisMaxQuery": [
        "public SolrDisMaxQuery::__construct ( string $q = ? )"
    ],
    "SolrDocument": [
        "public SolrDocument::__construct ( )"
    ],
    "SolrDocumentField": [
        "public SolrDocumentField::__construct ( )"
    ],
    "SolrGenericResponse": [
        "public SolrGenericResponse::__construct ( )"
    ],
    "SolrInputDocument": [
        "public SolrInputDocument::__construct ( )"
    ],
    "SolrModifiableParams": [
        "public SolrModifiableParams::__construct ( )"
    ],
    "SolrObject": [
        "public SolrObject::__construct ( )"
    ],
    "SolrPingResponse": [
        "public SolrPingResponse::__construct ( )"
    ],
    "SolrQuery": [
        "public SolrQuery::__construct ( string $q = ? )"
    ],
    "SolrQueryResponse": [
        "public SolrQueryResponse::__construct ( )"
    ],
    "SolrUpdateResponse": [
        "public SolrUpdateResponse::__construct ( )"
    ],
    "sort": [
        "sort ( array &$array , int $flags = SORT_REGULAR ) : bool"
    ],
    "soundex": [
        "soundex ( string $string ) : string"
    ],
    "SphinxClient": [
        "public SphinxClient::__construct ( )"
    ],
    "spl_autoload": [
        "spl_autoload ( string $class_name , string $file_extensions = spl_autoload_extensions() ) : void"
    ],
    "spl_autoload_call": [
        "spl_autoload_call ( string $class_name ) : void"
    ],
    "spl_autoload_extensions": [
        "spl_autoload_extensions ( string $file_extensions = ? ) : string"
    ],
    "spl_autoload_functions": [
        "spl_autoload_functions ( ) : array"
    ],
    "spl_autoload_register": [
        "spl_autoload_register ( callable $autoload_function = ? , bool $throw = true , bool $prepend = false ) : bool"
    ],
    "spl_autoload_unregister": [
        "spl_autoload_unregister ( mixed $autoload_function ) : bool"
    ],
    "spl_classes": [
        "spl_classes ( ) : array"
    ],
    "spl_object_hash": [
        "spl_object_hash ( object $obj ) : string"
    ],
    "spl_object_id": [
        "spl_object_id ( object $obj ) : int"
    ],
    "SplDoublyLinkedList": [
        "public SplDoublyLinkedList::__construct ( )"
    ],
    "SplFileInfo": [
        "public SplFileInfo::__construct ( string $file_name )"
    ],
    "SplFileObject": [
        "public SplFileObject::__construct ( string $filename , string $open_mode = \"r\" , bool $use_include_path = false , resource $context = ? )"
    ],
    "SplFixedArray": [
        "public SplFixedArray::__construct ( int $size = 0 )"
    ],
    "SplHeap": [
        "public SplHeap::__construct ( )"
    ],
    "split": [
        "split ( string $pattern , string $string , int $limit = -1 ) : array"
    ],
    "spliti": [
        "spliti ( string $pattern , string $string , int $limit = -1 ) : array"
    ],
    "SplPriorityQueue": [
        "public SplPriorityQueue::__construct ( )"
    ],
    "SplQueue": [
        "public SplQueue::__construct ( )"
    ],
    "SplStack": [
        "public SplStack::__construct ( )"
    ],
    "SplTempFileObject": [
        "public SplTempFileObject::__construct ( int $max_memory = ? )"
    ],
    "Spoofchecker": [
        "public Spoofchecker::__construct ( )"
    ],
    "sprintf": [
        "sprintf ( string $format , mixed ...$values ) : string"
    ],
    "sql_regcase": [
        "sql_regcase ( string $string ) : string"
    ],
    "SQLite3": [
        "public SQLite3::__construct ( string $filename , int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE , string $encryptionKey = \"\" )"
    ],
    "sqlsrv_begin_transaction": [
        "sqlsrv_begin_transaction ( resource $conn ) : bool"
    ],
    "sqlsrv_cancel": [
        "sqlsrv_cancel ( resource $stmt ) : bool"
    ],
    "sqlsrv_client_info": [
        "sqlsrv_client_info ( resource $conn ) : array"
    ],
    "sqlsrv_close": [
        "sqlsrv_close ( resource $conn ) : bool"
    ],
    "sqlsrv_commit": [
        "sqlsrv_commit ( resource $conn ) : bool"
    ],
    "sqlsrv_configure": [
        "sqlsrv_configure ( string $setting , mixed $value ) : bool"
    ],
    "sqlsrv_connect": [
        "sqlsrv_connect ( string $serverName , array $connectionInfo = ? ) : resource"
    ],
    "sqlsrv_errors": [
        "sqlsrv_errors ( int $errorsOrWarnings = ? ) : mixed"
    ],
    "sqlsrv_execute": [
        "sqlsrv_execute ( resource $stmt ) : bool"
    ],
    "sqlsrv_fetch": [
        "sqlsrv_fetch ( resource $stmt , int $row = ? , int $offset = ? ) : mixed"
    ],
    "sqlsrv_fetch_array": [
        "sqlsrv_fetch_array ( resource $stmt , int $fetchType = ? , int $row = ? , int $offset = ? ) : array"
    ],
    "sqlsrv_fetch_object": [
        "sqlsrv_fetch_object ( resource $stmt , string $className = ? , array $ctorParams = ? , int $row = ? , int $offset = ? ) : mixed"
    ],
    "sqlsrv_field_metadata": [
        "sqlsrv_field_metadata ( resource $stmt ) : mixed"
    ],
    "sqlsrv_free_stmt": [
        "sqlsrv_free_stmt ( resource $stmt ) : bool"
    ],
    "sqlsrv_get_config": [
        "sqlsrv_get_config ( string $setting ) : mixed"
    ],
    "sqlsrv_get_field": [
        "sqlsrv_get_field ( resource $stmt , int $fieldIndex , int $getAsType = ? ) : mixed"
    ],
    "sqlsrv_has_rows": [
        "sqlsrv_has_rows ( resource $stmt ) : bool"
    ],
    "sqlsrv_next_result": [
        "sqlsrv_next_result ( resource $stmt ) : mixed"
    ],
    "sqlsrv_num_fields": [
        "sqlsrv_num_fields ( resource $stmt ) : mixed"
    ],
    "sqlsrv_num_rows": [
        "sqlsrv_num_rows ( resource $stmt ) : mixed"
    ],
    "sqlsrv_prepare": [
        "sqlsrv_prepare ( resource $conn , string $sql , array $params = ? , array $options = ? ) : mixed"
    ],
    "sqlsrv_query": [
        "sqlsrv_query ( resource $conn , string $sql , array $params = ? , array $options = ? ) : mixed"
    ],
    "sqlsrv_rollback": [
        "sqlsrv_rollback ( resource $conn ) : bool"
    ],
    "sqlsrv_rows_affected": [
        "sqlsrv_rows_affected ( resource $stmt ) : int"
    ],
    "sqlsrv_send_stream_data": [
        "sqlsrv_send_stream_data ( resource $stmt ) : bool"
    ],
    "sqlsrv_server_info": [
        "sqlsrv_server_info ( resource $conn ) : array"
    ],
    "sqrt": [
        "sqrt ( float $num ) : float"
    ],
    "srand": [
        "srand ( int $seed = ? ) : void"
    ],
    "sscanf": [
        "sscanf ( string $string , string $format , mixed &...$vars ) : array|int|null"
    ],
    "ssdeep_fuzzy_compare": [
        "ssdeep_fuzzy_compare ( string $signature1 , string $signature2 ) : int"
    ],
    "ssdeep_fuzzy_hash": [
        "ssdeep_fuzzy_hash ( string $to_hash ) : string"
    ],
    "ssdeep_fuzzy_hash_filename": [
        "ssdeep_fuzzy_hash_filename ( string $file_name ) : string"
    ],
    "ssh2_auth_agent": [
        "ssh2_auth_agent ( resource $session , string $username ) : bool"
    ],
    "ssh2_auth_hostbased_file": [
        "ssh2_auth_hostbased_file ( resource $session , string $username , string $hostname , string $pubkeyfile , string $privkeyfile , string $passphrase = ? , string $local_username = ? ) : bool"
    ],
    "ssh2_auth_none": [
        "ssh2_auth_none ( resource $session , string $username ) : mixed"
    ],
    "ssh2_auth_password": [
        "ssh2_auth_password ( resource $session , string $username , string $password ) : bool"
    ],
    "ssh2_auth_pubkey_file": [
        "ssh2_auth_pubkey_file ( resource $session , string $username , string $pubkeyfile , string $privkeyfile , string $passphrase = ? ) : bool"
    ],
    "ssh2_connect": [
        "ssh2_connect ( string $host , int $port = 22 , array $methods = ? , array $callbacks = ? ) : resource"
    ],
    "ssh2_disconnect": [
        "ssh2_disconnect ( resource $session ) : bool"
    ],
    "ssh2_exec": [
        "ssh2_exec ( resource $session , string $command , string $pty = ? , array $env = ? , int $width = 80 , int $height = 25 , int $width_height_type = SSH2_TERM_UNIT_CHARS ) : resource|false"
    ],
    "ssh2_fetch_stream": [
        "ssh2_fetch_stream ( resource $channel , int $streamid ) : resource"
    ],
    "ssh2_fingerprint": [
        "ssh2_fingerprint ( resource $session , int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX ) : string"
    ],
    "ssh2_forward_accept": [
        "ssh2_forward_accept ( resource $listener ) : resource|false"
    ],
    "ssh2_forward_listen": [
        "ssh2_forward_listen ( resource $session , int $port , string $host = ? , int $max_connections = 16 ) : resource|false"
    ],
    "ssh2_methods_negotiated": [
        "ssh2_methods_negotiated ( resource $session ) : array"
    ],
    "ssh2_poll": [
        "ssh2_poll ( array &$desc , int $timeout = 30 ) : int"
    ],
    "ssh2_publickey_add": [
        "ssh2_publickey_add ( resource $pkey , string $algoname , string $blob , bool $overwrite = false , array $attributes = ? ) : bool"
    ],
    "ssh2_publickey_init": [
        "ssh2_publickey_init ( resource $session ) : resource|false"
    ],
    "ssh2_publickey_list": [
        "ssh2_publickey_list ( resource $pkey ) : array"
    ],
    "ssh2_publickey_remove": [
        "ssh2_publickey_remove ( resource $pkey , string $algoname , string $blob ) : bool"
    ],
    "ssh2_scp_recv": [
        "ssh2_scp_recv ( resource $session , string $remote_file , string $local_file ) : bool"
    ],
    "ssh2_scp_send": [
        "ssh2_scp_send ( resource $session , string $local_file , string $remote_file , int $create_mode = 0644 ) : bool"
    ],
    "ssh2_sftp": [
        "ssh2_sftp ( resource $session ) : resource|false"
    ],
    "ssh2_sftp_chmod": [
        "ssh2_sftp_chmod ( resource $sftp , string $filename , int $mode ) : bool"
    ],
    "ssh2_sftp_lstat": [
        "ssh2_sftp_lstat ( resource $sftp , string $path ) : array"
    ],
    "ssh2_sftp_mkdir": [
        "ssh2_sftp_mkdir ( resource $sftp , string $dirname , int $mode = 0777 , bool $recursive = false ) : bool"
    ],
    "ssh2_sftp_readlink": [
        "ssh2_sftp_readlink ( resource $sftp , string $link ) : string"
    ],
    "ssh2_sftp_realpath": [
        "ssh2_sftp_realpath ( resource $sftp , string $filename ) : string"
    ],
    "ssh2_sftp_rename": [
        "ssh2_sftp_rename ( resource $sftp , string $from , string $to ) : bool"
    ],
    "ssh2_sftp_rmdir": [
        "ssh2_sftp_rmdir ( resource $sftp , string $dirname ) : bool"
    ],
    "ssh2_sftp_stat": [
        "ssh2_sftp_stat ( resource $sftp , string $path ) : array"
    ],
    "ssh2_sftp_symlink": [
        "ssh2_sftp_symlink ( resource $sftp , string $target , string $link ) : bool"
    ],
    "ssh2_sftp_unlink": [
        "ssh2_sftp_unlink ( resource $sftp , string $filename ) : bool"
    ],
    "ssh2_shell": [
        "ssh2_shell ( resource $session , string $term_type = \"vanilla\" , array|null $env = null , int $width = 80 , int $height = 25 , int $width_height_type = SSH2_TERM_UNIT_CHARS ) : resource|false"
    ],
    "ssh2_tunnel": [
        "ssh2_tunnel ( resource $session , string $host , int $port ) : resource"
    ],
    "stat": [
        "stat ( string $filename ) : array|false"
    ],
    "stats_absolute_deviation": [
        "stats_absolute_deviation ( array $a ) : float"
    ],
    "stats_cdf_beta": [
        "stats_cdf_beta ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_binomial": [
        "stats_cdf_binomial ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_cauchy": [
        "stats_cdf_cauchy ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_chisquare": [
        "stats_cdf_chisquare ( float $par1 , float $par2 , int $which ) : float"
    ],
    "stats_cdf_exponential": [
        "stats_cdf_exponential ( float $par1 , float $par2 , int $which ) : float"
    ],
    "stats_cdf_f": [
        "stats_cdf_f ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_gamma": [
        "stats_cdf_gamma ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_laplace": [
        "stats_cdf_laplace ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_logistic": [
        "stats_cdf_logistic ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_negative_binomial": [
        "stats_cdf_negative_binomial ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_noncentral_chisquare": [
        "stats_cdf_noncentral_chisquare ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_noncentral_f": [
        "stats_cdf_noncentral_f ( float $par1 , float $par2 , float $par3 , float $par4 , int $which ) : float"
    ],
    "stats_cdf_noncentral_t": [
        "stats_cdf_noncentral_t ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_normal": [
        "stats_cdf_normal ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_poisson": [
        "stats_cdf_poisson ( float $par1 , float $par2 , int $which ) : float"
    ],
    "stats_cdf_t": [
        "stats_cdf_t ( float $par1 , float $par2 , int $which ) : float"
    ],
    "stats_cdf_uniform": [
        "stats_cdf_uniform ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_weibull": [
        "stats_cdf_weibull ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_covariance": [
        "stats_covariance ( array $a , array $b ) : float"
    ],
    "stats_dens_beta": [
        "stats_dens_beta ( float $x , float $a , float $b ) : float"
    ],
    "stats_dens_cauchy": [
        "stats_dens_cauchy ( float $x , float $ave , float $stdev ) : float"
    ],
    "stats_dens_chisquare": [
        "stats_dens_chisquare ( float $x , float $dfr ) : float"
    ],
    "stats_dens_exponential": [
        "stats_dens_exponential ( float $x , float $scale ) : float"
    ],
    "stats_dens_f": [
        "stats_dens_f ( float $x , float $dfr1 , float $dfr2 ) : float"
    ],
    "stats_dens_gamma": [
        "stats_dens_gamma ( float $x , float $shape , float $scale ) : float"
    ],
    "stats_dens_laplace": [
        "stats_dens_laplace ( float $x , float $ave , float $stdev ) : float"
    ],
    "stats_dens_logistic": [
        "stats_dens_logistic ( float $x , float $ave , float $stdev ) : float"
    ],
    "stats_dens_normal": [
        "stats_dens_normal ( float $x , float $ave , float $stdev ) : float"
    ],
    "stats_dens_pmf_binomial": [
        "stats_dens_pmf_binomial ( float $x , float $n , float $pi ) : float"
    ],
    "stats_dens_pmf_hypergeometric": [
        "stats_dens_pmf_hypergeometric ( float $n1 , float $n2 , float $N1 , float $N2 ) : float"
    ],
    "stats_dens_pmf_negative_binomial": [
        "stats_dens_pmf_negative_binomial ( float $x , float $n , float $pi ) : float"
    ],
    "stats_dens_pmf_poisson": [
        "stats_dens_pmf_poisson ( float $x , float $lb ) : float"
    ],
    "stats_dens_t": [
        "stats_dens_t ( float $x , float $dfr ) : float"
    ],
    "stats_dens_uniform": [
        "stats_dens_uniform ( float $x , float $a , float $b ) : float"
    ],
    "stats_dens_weibull": [
        "stats_dens_weibull ( float $x , float $a , float $b ) : float"
    ],
    "stats_harmonic_mean": [
        "stats_harmonic_mean ( array $a ) : number"
    ],
    "stats_kurtosis": [
        "stats_kurtosis ( array $a ) : float"
    ],
    "stats_rand_gen_beta": [
        "stats_rand_gen_beta ( float $a , float $b ) : float"
    ],
    "stats_rand_gen_chisquare": [
        "stats_rand_gen_chisquare ( float $df ) : float"
    ],
    "stats_rand_gen_exponential": [
        "stats_rand_gen_exponential ( float $av ) : float"
    ],
    "stats_rand_gen_f": [
        "stats_rand_gen_f ( float $dfn , float $dfd ) : float"
    ],
    "stats_rand_gen_funiform": [
        "stats_rand_gen_funiform ( float $low , float $high ) : float"
    ],
    "stats_rand_gen_gamma": [
        "stats_rand_gen_gamma ( float $a , float $r ) : float"
    ],
    "stats_rand_gen_ibinomial": [
        "stats_rand_gen_ibinomial ( int $n , float $pp ) : int"
    ],
    "stats_rand_gen_ibinomial_negative": [
        "stats_rand_gen_ibinomial_negative ( int $n , float $p ) : int"
    ],
    "stats_rand_gen_int": [
        "stats_rand_gen_int ( ) : int"
    ],
    "stats_rand_gen_ipoisson": [
        "stats_rand_gen_ipoisson ( float $mu ) : int"
    ],
    "stats_rand_gen_iuniform": [
        "stats_rand_gen_iuniform ( int $low , int $high ) : int"
    ],
    "stats_rand_gen_noncentral_chisquare": [
        "stats_rand_gen_noncentral_chisquare ( float $df , float $xnonc ) : float"
    ],
    "stats_rand_gen_noncentral_f": [
        "stats_rand_gen_noncentral_f ( float $dfn , float $dfd , float $xnonc ) : float"
    ],
    "stats_rand_gen_noncentral_t": [
        "stats_rand_gen_noncentral_t ( float $df , float $xnonc ) : float"
    ],
    "stats_rand_gen_normal": [
        "stats_rand_gen_normal ( float $av , float $sd ) : float"
    ],
    "stats_rand_gen_t": [
        "stats_rand_gen_t ( float $df ) : float"
    ],
    "stats_rand_get_seeds": [
        "stats_rand_get_seeds ( ) : array"
    ],
    "stats_rand_phrase_to_seeds": [
        "stats_rand_phrase_to_seeds ( string $phrase ) : array"
    ],
    "stats_rand_ranf": [
        "stats_rand_ranf ( ) : float"
    ],
    "stats_rand_setall": [
        "stats_rand_setall ( int $iseed1 , int $iseed2 ) : void"
    ],
    "stats_skew": [
        "stats_skew ( array $a ) : float"
    ],
    "stats_standard_deviation": [
        "stats_standard_deviation ( array $a , bool $sample = false ) : float"
    ],
    "stats_stat_binomial_coef": [
        "stats_stat_binomial_coef ( int $x , int $n ) : float"
    ],
    "stats_stat_correlation": [
        "stats_stat_correlation ( array $arr1 , array $arr2 ) : float"
    ],
    "stats_stat_factorial": [
        "stats_stat_factorial ( int $n ) : float"
    ],
    "stats_stat_independent_t": [
        "stats_stat_independent_t ( array $arr1 , array $arr2 ) : float"
    ],
    "stats_stat_innerproduct": [
        "stats_stat_innerproduct ( array $arr1 , array $arr2 ) : float"
    ],
    "stats_stat_paired_t": [
        "stats_stat_paired_t ( array $arr1 , array $arr2 ) : float"
    ],
    "stats_stat_percentile": [
        "stats_stat_percentile ( array $arr , float $perc ) : float"
    ],
    "stats_stat_powersum": [
        "stats_stat_powersum ( array $arr , float $power ) : float"
    ],
    "stats_variance": [
        "stats_variance ( array $a , bool $sample = false ) : float"
    ],
    "Stomp": [
        "public Stomp::__construct ( string $broker = ini_get(\"stomp.default_broker_uri\") , string $username = ? , string $password = ? , array $headers = ? )"
    ],
    "stomp_abort": [
        "stomp_abort ( resource $link , string $transaction_id , array $headers = ? ) : bool"
    ],
    "stomp_ack": [
        "stomp_ack ( resource $link , mixed $msg , array $headers = ? ) : bool"
    ],
    "stomp_begin": [
        "stomp_begin ( resource $link , string $transaction_id , array $headers = ? ) : bool"
    ],
    "stomp_close": [
        "stomp_close ( resource $link ) : bool"
    ],
    "stomp_commit": [
        "stomp_commit ( resource $link , string $transaction_id , array $headers = ? ) : bool"
    ],
    "stomp_connect": [
        "stomp_connect ( string $broker = ini_get(\"stomp.default_broker_uri\") , string $username = ? , string $password = ? , array $headers = ? ) : resource"
    ],
    "stomp_connect_error": [
        "stomp_connect_error ( ) : string"
    ],
    "stomp_error": [
        "stomp_error ( resource $link ) : string"
    ],
    "stomp_get_read_timeout": [
        "stomp_get_read_timeout ( resource $link ) : array"
    ],
    "stomp_get_session_id": [
        "stomp_get_session_id ( resource $link ) : string|false"
    ],
    "stomp_has_frame": [
        "stomp_has_frame ( resource $link ) : bool"
    ],
    "stomp_read_frame": [
        "stomp_read_frame ( resource $link ) : array"
    ],
    "stomp_send": [
        "stomp_send ( resource $link , string $destination , mixed $msg , array $headers = ? ) : bool"
    ],
    "stomp_set_read_timeout": [
        "stomp_set_read_timeout ( resource $link , int $seconds , int $microseconds = ? ) : void"
    ],
    "stomp_subscribe": [
        "stomp_subscribe ( resource $link , string $destination , array $headers = ? ) : bool"
    ],
    "stomp_unsubscribe": [
        "stomp_unsubscribe ( resource $link , string $destination , array $headers = ? ) : bool"
    ],
    "stomp_version": [
        "stomp_version ( ) : string"
    ],
    "StompFrame": [
        "StompFrame::__construct ( string $command = ? , array $headers = ? , string $body = ? )"
    ],
    "str_contains": [
        "str_contains ( string $haystack , string $needle ) : bool"
    ],
    "str_ends_with": [
        "str_ends_with ( string $haystack , string $needle ) : bool"
    ],
    "str_getcsv": [
        "str_getcsv ( string $string , string $separator = \",\" , string $enclosure = \"\\\"\" , string $escape = '\\\\' ) : array"
    ],
    "str_ireplace": [
        "str_ireplace ( array|string $search , array|string $replace , string|array $subject , int &$count = null ) : string|array"
    ],
    "str_pad": [
        "str_pad ( string $string , int $length , string $pad_string = \" \" , int $pad_type = STR_PAD_RIGHT ) : string"
    ],
    "str_repeat": [
        "str_repeat ( string $string , int $times ) : string"
    ],
    "str_replace": [
        "str_replace ( array|string $search , array|string $replace , string|array $subject , int &$count = null ) : string|array"
    ],
    "str_rot13": [
        "str_rot13 ( string $string ) : string"
    ],
    "str_shuffle": [
        "str_shuffle ( string $string ) : string"
    ],
    "str_split": [
        "str_split ( string $string , int $length = 1 ) : array"
    ],
    "str_starts_with": [
        "str_starts_with ( string $haystack , string $needle ) : bool"
    ],
    "str_word_count": [
        "str_word_count ( string $string , int $format = 0 , string|null $characters = null ) : array|int"
    ],
    "strcasecmp": [
        "strcasecmp ( string $str1 , string $str2 ) : int"
    ],
    "strcmp": [
        "strcmp ( string $str1 , string $str2 ) : int"
    ],
    "strcoll": [
        "strcoll ( string $string1 , string $string2 ) : int"
    ],
    "strcspn": [
        "strcspn ( string $string , string $characters , int $offset = 0 , int|null $length = null ) : int"
    ],
    "stream_bucket_append": [
        "stream_bucket_append ( resource $brigade , object $bucket ) : void"
    ],
    "stream_bucket_make_writeable": [
        "stream_bucket_make_writeable ( resource $brigade ) : object"
    ],
    "stream_bucket_new": [
        "stream_bucket_new ( resource $stream , string $buffer ) : object"
    ],
    "stream_bucket_prepend": [
        "stream_bucket_prepend ( resource $brigade , object $bucket ) : void"
    ],
    "stream_context_create": [
        "stream_context_create ( array $options = ? , array $params = ? ) : resource"
    ],
    "stream_context_get_default": [
        "stream_context_get_default ( array $options = ? ) : resource"
    ],
    "stream_context_get_options": [
        "stream_context_get_options ( resource $stream_or_context ) : array"
    ],
    "stream_context_get_params": [
        "stream_context_get_params ( resource $stream_or_context ) : array"
    ],
    "stream_context_set_default": [
        "stream_context_set_default ( array $options ) : resource"
    ],
    "stream_context_set_option": [
        "stream_context_set_option ( resource $stream_or_context , string $wrapper , string $option , mixed $value ) : bool",
        "stream_context_set_option ( resource $stream_or_context , array $options ) : bool"
    ],
    "stream_context_set_params": [
        "stream_context_set_params ( resource $context , array $params ) : bool"
    ],
    "stream_copy_to_stream": [
        "stream_copy_to_stream ( resource $source , resource $dest , int $maxlength = -1 , int $offset = 0 ) : int|false"
    ],
    "stream_filter_append": [
        "stream_filter_append ( resource $stream , string $filtername , int $read_write = ? , mixed $params = ? ) : resource"
    ],
    "stream_filter_prepend": [
        "stream_filter_prepend ( resource $stream , string $filtername , int $read_write = ? , mixed $params = ? ) : resource"
    ],
    "stream_filter_register": [
        "stream_filter_register ( string $filter_name , string $class ) : bool"
    ],
    "stream_filter_remove": [
        "stream_filter_remove ( resource $stream_filter ) : bool"
    ],
    "stream_get_contents": [
        "stream_get_contents ( resource $handle , int $maxlength = -1 , int $offset = -1 ) : string|false"
    ],
    "stream_get_filters": [
        "stream_get_filters ( ) : array"
    ],
    "stream_get_line": [
        "stream_get_line ( resource $handle , int $length , string $ending = ? ) : string"
    ],
    "stream_get_meta_data": [
        "stream_get_meta_data ( resource $stream ) : array"
    ],
    "stream_get_transports": [
        "stream_get_transports ( ) : array"
    ],
    "stream_get_wrappers": [
        "stream_get_wrappers ( ) : array"
    ],
    "stream_is_local": [
        "stream_is_local ( resource|string $stream ) : bool"
    ],
    "stream_isatty": [
        "stream_isatty ( resource $stream ) : bool"
    ],
    "stream_notification_callback": [
        "stream_notification_callback ( int $notification_code , int $severity , string $message , int $message_code , int $bytes_transferred , int $bytes_max ) : void"
    ],
    "stream_resolve_include_path": [
        "stream_resolve_include_path ( string $filename ) : string|false"
    ],
    "stream_select": [
        "stream_select ( array &$read , array &$write , array &$except , int $tv_sec , int $tv_usec = 0 ) : int"
    ],
    "stream_set_blocking": [
        "stream_set_blocking ( resource $stream , bool $enable ) : bool"
    ],
    "stream_set_chunk_size": [
        "stream_set_chunk_size ( resource $stream , int $size ) : int"
    ],
    "stream_set_read_buffer": [
        "stream_set_read_buffer ( resource $stream , int $size ) : int"
    ],
    "stream_set_timeout": [
        "stream_set_timeout ( resource $stream , int $seconds , int $microseconds = 0 ) : bool"
    ],
    "stream_set_write_buffer": [
        "stream_set_write_buffer ( resource $stream , int $buffer ) : int"
    ],
    "stream_socket_accept": [
        "stream_socket_accept ( resource $server_socket , float $timeout = ini_get(\"default_socket_timeout\") , string &$peername = ? ) : resource|false"
    ],
    "stream_socket_client": [
        "stream_socket_client ( string $remote_socket , int &$errno = ? , string &$errstr = ? , float $timeout = ini_get(\"default_socket_timeout\") , int $flags = STREAM_CLIENT_CONNECT , resource $context = ? ) : resource"
    ],
    "stream_socket_enable_crypto": [
        "stream_socket_enable_crypto ( resource $stream , bool $enable , int $crypto_type = ? , resource $session_stream = ? ) : mixed"
    ],
    "stream_socket_get_name": [
        "stream_socket_get_name ( resource $handle , bool $want_peer ) : string"
    ],
    "stream_socket_pair": [
        "stream_socket_pair ( int $domain , int $type , int $protocol ) : array|false"
    ],
    "stream_socket_recvfrom": [
        "stream_socket_recvfrom ( resource $socket , int $length , int $flags = 0 , string &$address = ? ) : string"
    ],
    "stream_socket_sendto": [
        "stream_socket_sendto ( resource $socket , string $data , int $flags = 0 , string $address = ? ) : int"
    ],
    "stream_socket_server": [
        "stream_socket_server ( string $local_socket , int &$errno = ? , string &$errstr = ? , int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN , resource $context = ? ) : resource"
    ],
    "stream_socket_shutdown": [
        "stream_socket_shutdown ( resource $stream , int $mode ) : bool"
    ],
    "stream_supports_lock": [
        "stream_supports_lock ( resource $stream ) : bool"
    ],
    "stream_wrapper_register": [
        "stream_wrapper_register ( string $protocol , string $class , int $flags = 0 ) : bool"
    ],
    "stream_wrapper_restore": [
        "stream_wrapper_restore ( string $protocol ) : bool"
    ],
    "stream_wrapper_unregister": [
        "stream_wrapper_unregister ( string $protocol ) : bool"
    ],
    "streamWrapper": [
        "streamWrapper::__construct ( )"
    ],
    "strftime": [
        "strftime ( string $format , int|null $timestamp = null ) : string|false"
    ],
    "strip_tags": [
        "strip_tags ( string $string , array|string|null $allowed_tags = null ) : string"
    ],
    "stripcslashes": [
        "stripcslashes ( string $string ) : string"
    ],
    "stripos": [
        "stripos ( string $haystack , string $needle , int $offset = 0 ) : int|false"
    ],
    "stripslashes": [
        "stripslashes ( string $string ) : string"
    ],
    "stristr": [
        "stristr ( string $haystack , string $needle , bool $before_needle = false ) : string|false"
    ],
    "strlen": [
        "strlen ( string $string ) : int"
    ],
    "strnatcasecmp": [
        "strnatcasecmp ( string $string1 , string $string2 ) : int"
    ],
    "strnatcmp": [
        "strnatcmp ( string $string1 , string $string2 ) : int"
    ],
    "strncasecmp": [
        "strncasecmp ( string $str1 , string $str2 , int $len ) : int"
    ],
    "strncmp": [
        "strncmp ( string $str1 , string $str2 , int $len ) : int"
    ],
    "strpbrk": [
        "strpbrk ( string $string , string $characters ) : string|false"
    ],
    "strpos": [
        "strpos ( string $haystack , string $needle , int $offset = 0 ) : int|false"
    ],
    "strptime": [
        "strptime ( string $timestamp , string $format ) : array|false"
    ],
    "strrchr": [
        "strrchr ( string $haystack , string $needle ) : string|false"
    ],
    "strrev": [
        "strrev ( string $string ) : string"
    ],
    "strripos": [
        "strripos ( string $haystack , string $needle , int $offset = 0 ) : int|false"
    ],
    "strrpos": [
        "strrpos ( string $haystack , string $needle , int $offset = 0 ) : int|false"
    ],
    "strspn": [
        "strspn ( string $string , string $characters , int $offset = 0 , int|null $length = null ) : int"
    ],
    "strstr": [
        "strstr ( string $haystack , string $needle , bool $before_needle = false ) : string|false"
    ],
    "strtok": [
        "strtok ( string $string , string $token ) : string|false",
        "strtok ( string $token ) : string|false"
    ],
    "strtolower": [
        "strtolower ( string $string ) : string"
    ],
    "strtotime": [
        "strtotime ( string $datetime , int|null $baseTimestamp = null ) : int|false"
    ],
    "strtoupper": [
        "strtoupper ( string $string ) : string"
    ],
    "strtr": [
        "strtr ( string $string , string $from , string $to ) : string",
        "strtr ( string $string , array $replace_pairs ) : string"
    ],
    "strval": [
        "strval ( mixed $value ) : string"
    ],
    "substr": [
        "substr ( string $string , int $offset , int|null $length = null ) : string"
    ],
    "substr_compare": [
        "substr_compare ( string $haystack , string $needle , int $offset , int|null $length = null , bool $case_insensitive = false ) : int"
    ],
    "substr_count": [
        "substr_count ( string $haystack , string $needle , int $offset = 0 , int|null $length = null ) : int"
    ],
    "substr_replace": [
        "substr_replace ( array|string $string , array|string $replace , array|int $offset , array|int|null $length = null ) : string|array"
    ],
    "SVM": [
        "public SVM::__construct ( )"
    ],
    "SVMModel": [
        "public SVMModel::__construct ( string $filename = ? )"
    ],
    "svn_add": [
        "svn_add ( string $path , bool $recursive = true , bool $force = false ) : bool"
    ],
    "svn_auth_get_parameter": [
        "svn_auth_get_parameter ( string $key ) : string"
    ],
    "svn_auth_set_parameter": [
        "svn_auth_set_parameter ( string $key , string $value ) : void"
    ],
    "svn_blame": [
        "svn_blame ( string $repository_url , int $revision_no = SVN_REVISION_HEAD ) : array"
    ],
    "svn_cat": [
        "svn_cat ( string $repos_url , int $revision_no = ? ) : string"
    ],
    "svn_checkout": [
        "svn_checkout ( string $repos , string $targetpath , int $revision = ? , int $flags = 0 ) : bool"
    ],
    "svn_cleanup": [
        "svn_cleanup ( string $workingdir ) : bool"
    ],
    "svn_client_version": [
        "svn_client_version ( ) : string"
    ],
    "svn_commit": [
        "svn_commit ( string $log , array $targets , bool $recursive = true ) : array"
    ],
    "svn_delete": [
        "svn_delete ( string $path , bool $force = false ) : bool"
    ],
    "svn_diff": [
        "svn_diff ( string $path1 , int $rev1 , string $path2 , int $rev2 ) : array"
    ],
    "svn_export": [
        "svn_export ( string $frompath , string $topath , bool $working_copy = true , int $revision_no = -1 ) : bool"
    ],
    "svn_fs_abort_txn": [
        "svn_fs_abort_txn ( resource $txn ) : bool"
    ],
    "svn_fs_apply_text": [
        "svn_fs_apply_text ( resource $root , string $path ) : resource"
    ],
    "svn_fs_begin_txn2": [
        "svn_fs_begin_txn2 ( resource $repos , int $rev ) : resource"
    ],
    "svn_fs_change_node_prop": [
        "svn_fs_change_node_prop ( resource $root , string $path , string $name , string $value ) : bool"
    ],
    "svn_fs_check_path": [
        "svn_fs_check_path ( resource $fsroot , string $path ) : int"
    ],
    "svn_fs_contents_changed": [
        "svn_fs_contents_changed ( resource $root1 , string $path1 , resource $root2 , string $path2 ) : bool"
    ],
    "svn_fs_copy": [
        "svn_fs_copy ( resource $from_root , string $from_path , resource $to_root , string $to_path ) : bool"
    ],
    "svn_fs_delete": [
        "svn_fs_delete ( resource $root , string $path ) : bool"
    ],
    "svn_fs_dir_entries": [
        "svn_fs_dir_entries ( resource $fsroot , string $path ) : array"
    ],
    "svn_fs_file_contents": [
        "svn_fs_file_contents ( resource $fsroot , string $path ) : resource"
    ],
    "svn_fs_file_length": [
        "svn_fs_file_length ( resource $fsroot , string $path ) : int"
    ],
    "svn_fs_is_dir": [
        "svn_fs_is_dir ( resource $root , string $path ) : bool"
    ],
    "svn_fs_is_file": [
        "svn_fs_is_file ( resource $root , string $path ) : bool"
    ],
    "svn_fs_make_dir": [
        "svn_fs_make_dir ( resource $root , string $path ) : bool"
    ],
    "svn_fs_make_file": [
        "svn_fs_make_file ( resource $root , string $path ) : bool"
    ],
    "svn_fs_node_created_rev": [
        "svn_fs_node_created_rev ( resource $fsroot , string $path ) : int"
    ],
    "svn_fs_node_prop": [
        "svn_fs_node_prop ( resource $fsroot , string $path , string $propname ) : string"
    ],
    "svn_fs_props_changed": [
        "svn_fs_props_changed ( resource $root1 , string $path1 , resource $root2 , string $path2 ) : bool"
    ],
    "svn_fs_revision_prop": [
        "svn_fs_revision_prop ( resource $fs , int $revnum , string $propname ) : string"
    ],
    "svn_fs_revision_root": [
        "svn_fs_revision_root ( resource $fs , int $revnum ) : resource"
    ],
    "svn_fs_txn_root": [
        "svn_fs_txn_root ( resource $txn ) : resource"
    ],
    "svn_fs_youngest_rev": [
        "svn_fs_youngest_rev ( resource $fs ) : int"
    ],
    "svn_import": [
        "svn_import ( string $path , string $url , bool $nonrecursive ) : bool"
    ],
    "svn_log": [
        "svn_log ( string $repos_url , int $start_revision = ? , int $end_revision = ? , int $limit = 0 , int $flags = SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY ) : array"
    ],
    "svn_ls": [
        "svn_ls ( string $repos_url , int $revision_no = SVN_REVISION_HEAD , bool $recurse = false , bool $peg = false ) : array"
    ],
    "svn_mkdir": [
        "svn_mkdir ( string $path , string $log_message = ? ) : bool"
    ],
    "svn_repos_create": [
        "svn_repos_create ( string $path , array $config = ? , array $fsconfig = ? ) : resource"
    ],
    "svn_repos_fs": [
        "svn_repos_fs ( resource $repos ) : resource"
    ],
    "svn_repos_fs_begin_txn_for_commit": [
        "svn_repos_fs_begin_txn_for_commit ( resource $repos , int $rev , string $author , string $log_msg ) : resource"
    ],
    "svn_repos_fs_commit_txn": [
        "svn_repos_fs_commit_txn ( resource $txn ) : int"
    ],
    "svn_repos_hotcopy": [
        "svn_repos_hotcopy ( string $repospath , string $destpath , bool $cleanlogs ) : bool"
    ],
    "svn_repos_open": [
        "svn_repos_open ( string $path ) : resource"
    ],
    "svn_repos_recover": [
        "svn_repos_recover ( string $path ) : bool"
    ],
    "svn_revert": [
        "svn_revert ( string $path , bool $recursive = false ) : bool"
    ],
    "svn_status": [
        "svn_status ( string $path , int $flags = 0 ) : array"
    ],
    "svn_update": [
        "svn_update ( string $path , int $revno = SVN_REVISION_HEAD , bool $recurse = true ) : int"
    ],
    "swoole_async_dns_lookup": [
        "swoole_async_dns_lookup ( string $hostname , callable $callback ) : bool"
    ],
    "swoole_async_read": [
        "swoole_async_read ( string $filename , callable $callback , int $chunk_size = 65536 , int $offset = 0 ) : bool"
    ],
    "swoole_async_readfile": [
        "swoole_async_readfile ( string $filename , callable $callback ) : bool"
    ],
    "swoole_async_set": [
        "swoole_async_set ( array $settings ) : void"
    ],
    "swoole_async_write": [
        "swoole_async_write ( string $filename , string $content , int $offset = ? , callable $callback = ? ) : bool"
    ],
    "swoole_async_writefile": [
        "swoole_async_writefile ( string $filename , string $content , callable $callback = ? , int $flags = 0 ) : bool"
    ],
    "swoole_client_select": [
        "swoole_client_select ( array &$read_array , array &$write_array , array &$error_array , float $timeout = 0.5 ) : int"
    ],
    "swoole_cpu_num": [
        "swoole_cpu_num ( ) : int"
    ],
    "swoole_errno": [
        "swoole_errno ( ) : int"
    ],
    "swoole_event_add": [
        "swoole_event_add ( int $fd , callable $read_callback = ? , callable $write_callback = ? , int $events = 0 ) : int"
    ],
    "swoole_event_defer": [
        "swoole_event_defer ( callable $callback ) : bool"
    ],
    "swoole_event_del": [
        "swoole_event_del ( int $fd ) : bool"
    ],
    "swoole_event_exit": [
        "swoole_event_exit ( ) : void"
    ],
    "swoole_event_set": [
        "swoole_event_set ( int $fd , callable $read_callback = ? , callable $write_callback = ? , int $events = 0 ) : bool"
    ],
    "swoole_event_wait": [
        "swoole_event_wait ( ) : void"
    ],
    "swoole_event_write": [
        "swoole_event_write ( int $fd , string $data ) : bool"
    ],
    "swoole_get_local_ip": [
        "swoole_get_local_ip ( ) : array"
    ],
    "swoole_last_error": [
        "swoole_last_error ( ) : int"
    ],
    "swoole_load_module": [
        "swoole_load_module ( string $filename ) : mixed"
    ],
    "swoole_select": [
        "swoole_select ( array &$read_array , array &$write_array , array &$error_array , float $timeout = ? ) : int"
    ],
    "swoole_set_process_name": [
        "swoole_set_process_name ( string $process_name , int $size = 128 ) : void"
    ],
    "swoole_strerror": [
        "swoole_strerror ( int $errno , int $error_type = 0 ) : string"
    ],
    "swoole_timer_after": [
        "swoole_timer_after ( int $ms , callable $callback , mixed $param = ? ) : int"
    ],
    "swoole_timer_clear": [
        "swoole_timer_clear ( int $timer_id ) : void"
    ],
    "swoole_timer_exists": [
        "swoole_timer_exists ( int $timer_id ) : bool"
    ],
    "swoole_timer_tick": [
        "swoole_timer_tick ( int $ms , callable $callback , mixed $param = ? ) : int"
    ],
    "swoole_version": [
        "swoole_version ( ) : string"
    ],
    "symlink": [
        "symlink ( string $target , string $link ) : bool"
    ],
    "SyncEvent": [
        "public SyncEvent::__construct ( string $name = ? , bool $manual = false , bool $prefire = false )"
    ],
    "SyncMutex": [
        "public SyncMutex::__construct ( string $name = ? )"
    ],
    "SyncReaderWriter": [
        "public SyncReaderWriter::__construct ( string $name = ? , bool $autounlock = true )"
    ],
    "SyncSemaphore": [
        "public SyncSemaphore::__construct ( string $name = ? , int $initialval = 1 , bool $autounlock = true )"
    ],
    "SyncSharedMemory": [
        "public SyncSharedMemory::__construct ( string $name , int $size )"
    ],
    "sys_get_temp_dir": [
        "sys_get_temp_dir ( ) : string"
    ],
    "sys_getloadavg": [
        "sys_getloadavg ( ) : array|false"
    ],
    "syslog": [
        "syslog ( int $priority , string $message ) : bool"
    ],
    "system": [
        "system ( string $command , int &$result_code = null ) : string|false"
    ],
    "taint": [
        "taint ( string &$string , string ...$strings ) : bool"
    ],
    "tan": [
        "tan ( float $num ) : float"
    ],
    "tanh": [
        "tanh ( float $num ) : float"
    ],
    "tcpwrap_check": [
        "tcpwrap_check ( string $daemon , string $address , string $user = ? , bool $nodns = false ) : bool"
    ],
    "tempnam": [
        "tempnam ( string $directory , string $prefix ) : string|false"
    ],
    "textdomain": [
        "textdomain ( string|null $domain ) : string"
    ],
    "tidy": [
        "public tidy::__construct ( string|null $filename = null , array|string|null $config = null , string|null $encoding = null , bool $useIncludePath = false )"
    ],
    "tidy_access_count": [
        "tidy_access_count ( tidy $tidy ) : int"
    ],
    "tidy_clean_repair": [
        "tidy_clean_repair ( tidy $tidy ) : bool"
    ],
    "tidy_config_count": [
        "tidy_config_count ( tidy $tidy ) : int"
    ],
    "tidy_diagnose": [
        "tidy_diagnose ( tidy $tidy ) : bool"
    ],
    "tidy_error_count": [
        "tidy_error_count ( tidy $tidy ) : int"
    ],
    "tidy_get_body": [
        "tidy_get_body ( tidy $tidy ) : tidyNode|null"
    ],
    "tidy_get_config": [
        "tidy_get_config ( tidy $tidy ) : array"
    ],
    "tidy_get_error_buffer": [
        "tidy_get_error_buffer ( tidy $tidy ) : string|false"
    ],
    "tidy_get_head": [
        "tidy_get_head ( tidy $tidy ) : tidyNode|null"
    ],
    "tidy_get_html": [
        "tidy_get_html ( tidy $tidy ) : tidyNode|null"
    ],
    "tidy_get_html_ver": [
        "tidy_get_html_ver ( tidy $tidy ) : int"
    ],
    "tidy_get_opt_doc": [
        "tidy_get_opt_doc ( tidy $tidy , string $option ) : string|false"
    ],
    "tidy_get_output": [
        "tidy_get_output ( tidy $tidy ) : string"
    ],
    "tidy_get_release": [
        "tidy_get_release ( ) : string"
    ],
    "tidy_get_root": [
        "tidy_get_root ( tidy $tidy ) : tidyNode|null"
    ],
    "tidy_get_status": [
        "tidy_get_status ( tidy $tidy ) : int"
    ],
    "tidy_getopt": [
        "tidy_getopt ( tidy $tidy , string $option ) : string|int|bool"
    ],
    "tidy_is_xhtml": [
        "tidy_is_xhtml ( tidy $tidy ) : bool"
    ],
    "tidy_is_xml": [
        "tidy_is_xml ( tidy $tidy ) : bool"
    ],
    "tidy_parse_file": [
        "tidy_parse_file ( string $filename , array|string|null $config = null , string|null $encoding = null , bool $useIncludePath = false ) : tidy|false"
    ],
    "tidy_parse_string": [
        "tidy_parse_string ( string $string , array|string|null $config = null , string|null $encoding = null ) : tidy|false"
    ],
    "tidy_repair_file": [
        "tidy_repair_file ( string $filename , array|string|null $config = null , string|null $encoding = null , bool $useIncludePath = false ) : string|false"
    ],
    "tidy_repair_string": [
        "tidy_repair_string ( string $string , array|string|null $config = null , string|null $encoding = null ) : string|false"
    ],
    "tidy_warning_count": [
        "tidy_warning_count ( tidy $tidy ) : int"
    ],
    "tidyNode": [
        "private tidyNode::__construct ( )"
    ],
    "time": [
        "time ( ) : int"
    ],
    "time_nanosleep": [
        "time_nanosleep ( int $seconds , int $nanoseconds ) : array|bool"
    ],
    "time_sleep_until": [
        "time_sleep_until ( float $timestamp ) : bool"
    ],
    "timezone_abbreviations_list": [
        "timezone_abbreviations_list ( ) : array"
    ],
    "timezone_identifiers_list": [
        "timezone_identifiers_list ( int $timezoneGroup = DateTimeZone::ALL , string|null $countryCode = null ) : array"
    ],
    "timezone_location_get": [
        "timezone_location_get ( DateTimeZone $object ) : array|false"
    ],
    "timezone_name_from_abbr": [
        "timezone_name_from_abbr ( string $abbr , int $utcOffset = -1 , int $isDST = -1 ) : string|false"
    ],
    "timezone_name_get": [
        "timezone_name_get ( DateTimeZone $object ) : string"
    ],
    "timezone_offset_get": [
        "timezone_offset_get ( DateTimeZone $object , DateTimeInterface $datetime ) : int"
    ],
    "timezone_open": [
        "timezone_open ( string $timezone ) : DateTimeZone|false"
    ],
    "timezone_transitions_get": [
        "timezone_transitions_get ( DateTimeZone $object , int $timestampBegin = PHP_INT_MIN , int $timestampEnd = PHP_INT_MAX ) : array|false"
    ],
    "timezone_version_get": [
        "timezone_version_get ( ) : string"
    ],
    "tmpfile": [
        "tmpfile ( ) : resource|false"
    ],
    "token_get_all": [
        "token_get_all ( string $code , int $flags = 0 ) : array"
    ],
    "token_name": [
        "token_name ( int $id ) : string"
    ],
    "TokyoTyrant": [
        "public TokyoTyrant::__construct ( string $host = ? , int $port = TokyoTyrant::RDBDEF_PORT , array $options = ? )"
    ],
    "TokyoTyrantIterator": [
        "public TokyoTyrantIterator::__construct ( mixed $object )"
    ],
    "TokyoTyrantQuery": [
        "public TokyoTyrantQuery::__construct ( TokyoTyrantTable $table )"
    ],
    "touch": [
        "touch ( string $filename , int $time = time() , int $atime = ? ) : bool"
    ],
    "trader_acos": [
        "trader_acos ( array $real ) : array"
    ],
    "trader_ad": [
        "trader_ad ( array $high , array $low , array $close , array $volume ) : array"
    ],
    "trader_add": [
        "trader_add ( array $real0 , array $real1 ) : array"
    ],
    "trader_adosc": [
        "trader_adosc ( array $high , array $low , array $close , array $volume , int $fastPeriod = ? , int $slowPeriod = ? ) : array"
    ],
    "trader_adx": [
        "trader_adx ( array $high , array $low , array $close , int $timePeriod = ? ) : array"
    ],
    "trader_adxr": [
        "trader_adxr ( array $high , array $low , array $close , int $timePeriod = ? ) : array"
    ],
    "trader_apo": [
        "trader_apo ( array $real , int $fastPeriod = ? , int $slowPeriod = ? , int $mAType = ? ) : array"
    ],
    "trader_aroon": [
        "trader_aroon ( array $high , array $low , int $timePeriod = ? ) : array"
    ],
    "trader_aroonosc": [
        "trader_aroonosc ( array $high , array $low , int $timePeriod = ? ) : array"
    ],
    "trader_asin": [
        "trader_asin ( array $real ) : array"
    ],
    "trader_atan": [
        "trader_atan ( array $real ) : array"
    ],
    "trader_atr": [
        "trader_atr ( array $high , array $low , array $close , int $timePeriod = ? ) : array"
    ],
    "trader_avgprice": [
        "trader_avgprice ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_bbands": [
        "trader_bbands ( array $real , int $timePeriod = ? , float $nbDevUp = ? , float $nbDevDn = ? , int $mAType = ? ) : array"
    ],
    "trader_beta": [
        "trader_beta ( array $real0 , array $real1 , int $timePeriod = ? ) : array"
    ],
    "trader_bop": [
        "trader_bop ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cci": [
        "trader_cci ( array $high , array $low , array $close , int $timePeriod = ? ) : array"
    ],
    "trader_cdl2crows": [
        "trader_cdl2crows ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdl3blackcrows": [
        "trader_cdl3blackcrows ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdl3inside": [
        "trader_cdl3inside ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdl3linestrike": [
        "trader_cdl3linestrike ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdl3outside": [
        "trader_cdl3outside ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdl3starsinsouth": [
        "trader_cdl3starsinsouth ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdl3whitesoldiers": [
        "trader_cdl3whitesoldiers ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlabandonedbaby": [
        "trader_cdlabandonedbaby ( array $open , array $high , array $low , array $close , float $penetration = ? ) : array"
    ],
    "trader_cdladvanceblock": [
        "trader_cdladvanceblock ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlbelthold": [
        "trader_cdlbelthold ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlbreakaway": [
        "trader_cdlbreakaway ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlclosingmarubozu": [
        "trader_cdlclosingmarubozu ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlconcealbabyswall": [
        "trader_cdlconcealbabyswall ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlcounterattack": [
        "trader_cdlcounterattack ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdldarkcloudcover": [
        "trader_cdldarkcloudcover ( array $open , array $high , array $low , array $close , float $penetration = ? ) : array"
    ],
    "trader_cdldoji": [
        "trader_cdldoji ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdldojistar": [
        "trader_cdldojistar ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdldragonflydoji": [
        "trader_cdldragonflydoji ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlengulfing": [
        "trader_cdlengulfing ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdleveningdojistar": [
        "trader_cdleveningdojistar ( array $open , array $high , array $low , array $close , float $penetration = ? ) : array"
    ],
    "trader_cdleveningstar": [
        "trader_cdleveningstar ( array $open , array $high , array $low , array $close , float $penetration = ? ) : array"
    ],
    "trader_cdlgapsidesidewhite": [
        "trader_cdlgapsidesidewhite ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlgravestonedoji": [
        "trader_cdlgravestonedoji ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlhammer": [
        "trader_cdlhammer ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlhangingman": [
        "trader_cdlhangingman ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlharami": [
        "trader_cdlharami ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlharamicross": [
        "trader_cdlharamicross ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlhighwave": [
        "trader_cdlhighwave ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlhikkake": [
        "trader_cdlhikkake ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlhikkakemod": [
        "trader_cdlhikkakemod ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlhomingpigeon": [
        "trader_cdlhomingpigeon ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlidentical3crows": [
        "trader_cdlidentical3crows ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlinneck": [
        "trader_cdlinneck ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlinvertedhammer": [
        "trader_cdlinvertedhammer ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlkicking": [
        "trader_cdlkicking ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlkickingbylength": [
        "trader_cdlkickingbylength ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlladderbottom": [
        "trader_cdlladderbottom ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdllongleggeddoji": [
        "trader_cdllongleggeddoji ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdllongline": [
        "trader_cdllongline ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlmarubozu": [
        "trader_cdlmarubozu ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlmatchinglow": [
        "trader_cdlmatchinglow ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlmathold": [
        "trader_cdlmathold ( array $open , array $high , array $low , array $close , float $penetration = ? ) : array"
    ],
    "trader_cdlmorningdojistar": [
        "trader_cdlmorningdojistar ( array $open , array $high , array $low , array $close , float $penetration = ? ) : array"
    ],
    "trader_cdlmorningstar": [
        "trader_cdlmorningstar ( array $open , array $high , array $low , array $close , float $penetration = ? ) : array"
    ],
    "trader_cdlonneck": [
        "trader_cdlonneck ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlpiercing": [
        "trader_cdlpiercing ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlrickshawman": [
        "trader_cdlrickshawman ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlrisefall3methods": [
        "trader_cdlrisefall3methods ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlseparatinglines": [
        "trader_cdlseparatinglines ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlshootingstar": [
        "trader_cdlshootingstar ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlshortline": [
        "trader_cdlshortline ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlspinningtop": [
        "trader_cdlspinningtop ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlstalledpattern": [
        "trader_cdlstalledpattern ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlsticksandwich": [
        "trader_cdlsticksandwich ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdltakuri": [
        "trader_cdltakuri ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdltasukigap": [
        "trader_cdltasukigap ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlthrusting": [
        "trader_cdlthrusting ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdltristar": [
        "trader_cdltristar ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlunique3river": [
        "trader_cdlunique3river ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlupsidegap2crows": [
        "trader_cdlupsidegap2crows ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlxsidegap3methods": [
        "trader_cdlxsidegap3methods ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_ceil": [
        "trader_ceil ( array $real ) : array"
    ],
    "trader_cmo": [
        "trader_cmo ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_correl": [
        "trader_correl ( array $real0 , array $real1 , int $timePeriod = ? ) : array"
    ],
    "trader_cos": [
        "trader_cos ( array $real ) : array"
    ],
    "trader_cosh": [
        "trader_cosh ( array $real ) : array"
    ],
    "trader_dema": [
        "trader_dema ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_div": [
        "trader_div ( array $real0 , array $real1 ) : array"
    ],
    "trader_dx": [
        "trader_dx ( array $high , array $low , array $close , int $timePeriod = ? ) : array"
    ],
    "trader_ema": [
        "trader_ema ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_errno": [
        "trader_errno ( ) : int"
    ],
    "trader_exp": [
        "trader_exp ( array $real ) : array"
    ],
    "trader_floor": [
        "trader_floor ( array $real ) : array"
    ],
    "trader_get_compat": [
        "trader_get_compat ( ) : int"
    ],
    "trader_get_unstable_period": [
        "trader_get_unstable_period ( int $functionId ) : int"
    ],
    "trader_ht_dcperiod": [
        "trader_ht_dcperiod ( array $real ) : array"
    ],
    "trader_ht_dcphase": [
        "trader_ht_dcphase ( array $real ) : array"
    ],
    "trader_ht_phasor": [
        "trader_ht_phasor ( array $real ) : array"
    ],
    "trader_ht_sine": [
        "trader_ht_sine ( array $real ) : array"
    ],
    "trader_ht_trendline": [
        "trader_ht_trendline ( array $real ) : array"
    ],
    "trader_ht_trendmode": [
        "trader_ht_trendmode ( array $real ) : array"
    ],
    "trader_kama": [
        "trader_kama ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_linearreg": [
        "trader_linearreg ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_linearreg_angle": [
        "trader_linearreg_angle ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_linearreg_intercept": [
        "trader_linearreg_intercept ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_linearreg_slope": [
        "trader_linearreg_slope ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_ln": [
        "trader_ln ( array $real ) : array"
    ],
    "trader_log10": [
        "trader_log10 ( array $real ) : array"
    ],
    "trader_ma": [
        "trader_ma ( array $real , int $timePeriod = ? , int $mAType = ? ) : array"
    ],
    "trader_macd": [
        "trader_macd ( array $real , int $fastPeriod = ? , int $slowPeriod = ? , int $signalPeriod = ? ) : array"
    ],
    "trader_macdext": [
        "trader_macdext ( array $real , int $fastPeriod = ? , int $fastMAType = ? , int $slowPeriod = ? , int $slowMAType = ? , int $signalPeriod = ? , int $signalMAType = ? ) : array"
    ],
    "trader_macdfix": [
        "trader_macdfix ( array $real , int $signalPeriod = ? ) : array"
    ],
    "trader_mama": [
        "trader_mama ( array $real , float $fastLimit = ? , float $slowLimit = ? ) : array"
    ],
    "trader_mavp": [
        "trader_mavp ( array $real , array $periods , int $minPeriod = ? , int $maxPeriod = ? , int $mAType = ? ) : array"
    ],
    "trader_max": [
        "trader_max ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_maxindex": [
        "trader_maxindex ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_medprice": [
        "trader_medprice ( array $high , array $low ) : array"
    ],
    "trader_mfi": [
        "trader_mfi ( array $high , array $low , array $close , array $volume , int $timePeriod = ? ) : array"
    ],
    "trader_midpoint": [
        "trader_midpoint ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_midprice": [
        "trader_midprice ( array $high , array $low , int $timePeriod = ? ) : array"
    ],
    "trader_min": [
        "trader_min ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_minindex": [
        "trader_minindex ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_minmax": [
        "trader_minmax ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_minmaxindex": [
        "trader_minmaxindex ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_minus_di": [
        "trader_minus_di ( array $high , array $low , array $close , int $timePeriod = ? ) : array"
    ],
    "trader_minus_dm": [
        "trader_minus_dm ( array $high , array $low , int $timePeriod = ? ) : array"
    ],
    "trader_mom": [
        "trader_mom ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_mult": [
        "trader_mult ( array $real0 , array $real1 ) : array"
    ],
    "trader_natr": [
        "trader_natr ( array $high , array $low , array $close , int $timePeriod = ? ) : array"
    ],
    "trader_obv": [
        "trader_obv ( array $real , array $volume ) : array"
    ],
    "trader_plus_di": [
        "trader_plus_di ( array $high , array $low , array $close , int $timePeriod = ? ) : array"
    ],
    "trader_plus_dm": [
        "trader_plus_dm ( array $high , array $low , int $timePeriod = ? ) : array"
    ],
    "trader_ppo": [
        "trader_ppo ( array $real , int $fastPeriod = ? , int $slowPeriod = ? , int $mAType = ? ) : array"
    ],
    "trader_roc": [
        "trader_roc ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_rocp": [
        "trader_rocp ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_rocr": [
        "trader_rocr ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_rocr100": [
        "trader_rocr100 ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_rsi": [
        "trader_rsi ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_sar": [
        "trader_sar ( array $high , array $low , float $acceleration = ? , float $maximum = ? ) : array"
    ],
    "trader_sarext": [
        "trader_sarext ( array $high , array $low , float $startValue = ? , float $offsetOnReverse = ? , float $accelerationInitLong = ? , float $accelerationLong = ? , float $accelerationMaxLong = ? , float $accelerationInitShort = ? , float $accelerationShort = ? , float $accelerationMaxShort = ? ) : array"
    ],
    "trader_set_compat": [
        "trader_set_compat ( int $compatId ) : void"
    ],
    "trader_set_unstable_period": [
        "trader_set_unstable_period ( int $functionId , int $timePeriod ) : void"
    ],
    "trader_sin": [
        "trader_sin ( array $real ) : array"
    ],
    "trader_sinh": [
        "trader_sinh ( array $real ) : array"
    ],
    "trader_sma": [
        "trader_sma ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_sqrt": [
        "trader_sqrt ( array $real ) : array"
    ],
    "trader_stddev": [
        "trader_stddev ( array $real , int $timePeriod = ? , float $nbDev = ? ) : array"
    ],
    "trader_stoch": [
        "trader_stoch ( array $high , array $low , array $close , int $fastK_Period = ? , int $slowK_Period = ? , int $slowK_MAType = ? , int $slowD_Period = ? , int $slowD_MAType = ? ) : array"
    ],
    "trader_stochf": [
        "trader_stochf ( array $high , array $low , array $close , int $fastK_Period = ? , int $fastD_Period = ? , int $fastD_MAType = ? ) : array"
    ],
    "trader_stochrsi": [
        "trader_stochrsi ( array $real , int $timePeriod = ? , int $fastK_Period = ? , int $fastD_Period = ? , int $fastD_MAType = ? ) : array"
    ],
    "trader_sub": [
        "trader_sub ( array $real0 , array $real1 ) : array"
    ],
    "trader_sum": [
        "trader_sum ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_t3": [
        "trader_t3 ( array $real , int $timePeriod = ? , float $vFactor = ? ) : array"
    ],
    "trader_tan": [
        "trader_tan ( array $real ) : array"
    ],
    "trader_tanh": [
        "trader_tanh ( array $real ) : array"
    ],
    "trader_tema": [
        "trader_tema ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_trange": [
        "trader_trange ( array $high , array $low , array $close ) : array"
    ],
    "trader_trima": [
        "trader_trima ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_trix": [
        "trader_trix ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_tsf": [
        "trader_tsf ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_typprice": [
        "trader_typprice ( array $high , array $low , array $close ) : array"
    ],
    "trader_ultosc": [
        "trader_ultosc ( array $high , array $low , array $close , int $timePeriod1 = ? , int $timePeriod2 = ? , int $timePeriod3 = ? ) : array"
    ],
    "trader_var": [
        "trader_var ( array $real , int $timePeriod = ? , float $nbDev = ? ) : array"
    ],
    "trader_wclprice": [
        "trader_wclprice ( array $high , array $low , array $close ) : array"
    ],
    "trader_willr": [
        "trader_willr ( array $high , array $low , array $close , int $timePeriod = ? ) : array"
    ],
    "trader_wma": [
        "trader_wma ( array $real , int $timePeriod = ? ) : array"
    ],
    "trait_exists": [
        "trait_exists ( string $traitname , bool $autoload = ? ) : bool"
    ],
    "Transliterator": [
        "private Transliterator::__construct ( )"
    ],
    "transliterator_create": [
        "transliterator_create ( string $id , int $direction = ? ) : Transliterator"
    ],
    "transliterator_create_from_rules": [
        "transliterator_create_from_rules ( string $id , int $direction = ? ) : Transliterator"
    ],
    "transliterator_create_inverse": [
        "transliterator_create_inverse ( ) : Transliterator"
    ],
    "transliterator_get_error_code": [
        "transliterator_get_error_code ( Transliterator $trans ) : int"
    ],
    "transliterator_get_error_message": [
        "transliterator_get_error_message ( Transliterator $trans ) : string"
    ],
    "transliterator_list_ids": [
        "transliterator_list_ids ( ) : array|false"
    ],
    "transliterator_transliterate": [
        "transliterator_transliterate ( mixed $transliterator , string $subject , int $start = ? , int $end = ? )"
    ],
    "trigger_error": [
        "trigger_error ( string $error_msg , int $error_type = E_USER_NOTICE ) : bool"
    ],
    "trim": [
        "trim ( string $string , string $characters = \" \\n\\r\\t\\v\\0\" ) : string"
    ],
    "uasort": [
        "uasort ( array &$array , callable $callback ) : bool"
    ],
    "ucfirst": [
        "ucfirst ( string $string ) : string"
    ],
    "UConverter": [
        "public UConverter::__construct ( string $destination_encoding = ? , string $source_encoding = ? )"
    ],
    "ucwords": [
        "ucwords ( string $string , string $separators = \" \\t\\r\\n\\f\\v\" ) : string"
    ],
    "uksort": [
        "uksort ( array &$array , callable $callback ) : bool"
    ],
    "umask": [
        "umask ( int $mask = ? ) : int"
    ],
    "uniqid": [
        "uniqid ( string $prefix = \"\" , bool $more_entropy = false ) : string"
    ],
    "unixtojd": [
        "unixtojd ( int|null $timestamp = null ) : int|false"
    ],
    "unlink": [
        "unlink ( string $filename , resource $context = ? ) : bool"
    ],
    "unpack": [
        "unpack ( string $format , string $string , int $offset = 0 ) : array|false"
    ],
    "unregister_tick_function": [
        "unregister_tick_function ( callable $callback ) : void"
    ],
    "unserialize": [
        "unserialize ( string $data , array $options = [] ) : mixed"
    ],
    "unset": [
        "unset ( mixed $var , mixed ...$vars ) : void"
    ],
    "untaint": [
        "untaint ( string &$string , string ...$strings ) : bool"
    ],
    "uopz_add_function": [
        "uopz_add_function ( string $function , Closure $handler , int &$flags = ZEND_ACC_PUBLIC ) : bool",
        "uopz_add_function ( string $class , string $function , Closure $handler , int &$flags = ZEND_ACC_PUBLIC , int &$all = true ) : bool"
    ],
    "uopz_allow_exit": [
        "uopz_allow_exit ( bool $allow ) : void"
    ],
    "uopz_backup": [
        "uopz_backup ( string $function ) : void",
        "uopz_backup ( string $class , string $function ) : void"
    ],
    "uopz_compose": [
        "uopz_compose ( string $name , array $classes , array $methods = ? , array $properties = ? , int $flags = ? ) : void"
    ],
    "uopz_copy": [
        "uopz_copy ( string $function ) : Closure",
        "uopz_copy ( string $class , string $function ) : Closure"
    ],
    "uopz_del_function": [
        "uopz_del_function ( string $function ) : bool",
        "uopz_del_function ( string $class , string $function , int &$all = true ) : bool"
    ],
    "uopz_delete": [
        "uopz_delete ( string $function ) : void",
        "uopz_delete ( string $class , string $function ) : void"
    ],
    "uopz_extend": [
        "uopz_extend ( string $class , string $parent ) : bool"
    ],
    "uopz_flags": [
        "uopz_flags ( string $function , int $flags = PHP_INT_MAX ) : int",
        "uopz_flags ( string $class , string $function , int $flags = PHP_INT_MAX ) : int"
    ],
    "uopz_function": [
        "uopz_function ( string $function , Closure $handler , int $modifiers = ? ) : void",
        "uopz_function ( string $class , string $function , Closure $handler , int $modifiers = ? ) : void"
    ],
    "uopz_get_exit_status": [
        "uopz_get_exit_status ( ) : mixed"
    ],
    "uopz_get_hook": [
        "uopz_get_hook ( string $function ) : Closure",
        "uopz_get_hook ( string $class , string $function ) : Closure"
    ],
    "uopz_get_mock": [
        "uopz_get_mock ( string $class ) : mixed"
    ],
    "uopz_get_property": [
        "uopz_get_property ( string $class , string $property ) : mixed",
        "uopz_get_property ( object $instance , string $property ) : mixed"
    ],
    "uopz_get_return": [
        "uopz_get_return ( string $function ) : mixed",
        "uopz_get_return ( string $class , string $function ) : mixed"
    ],
    "uopz_get_static": [
        "uopz_get_static ( string $class , string $function ) : array",
        "uopz_get_static ( string $function ) : array"
    ],
    "uopz_implement": [
        "uopz_implement ( string $class , string $interface ) : bool"
    ],
    "uopz_overload": [
        "uopz_overload ( int $opcode , Callable $callable ) : void"
    ],
    "uopz_redefine": [
        "uopz_redefine ( string $constant , mixed $value ) : bool",
        "uopz_redefine ( string $class , string $constant , mixed $value ) : bool"
    ],
    "uopz_rename": [
        "uopz_rename ( string $function , string $rename ) : void",
        "uopz_rename ( string $class , string $function , string $rename ) : void"
    ],
    "uopz_restore": [
        "uopz_restore ( string $function ) : void",
        "uopz_restore ( string $class , string $function ) : void"
    ],
    "uopz_set_hook": [
        "uopz_set_hook ( string $function , Closure $hook ) : bool",
        "uopz_set_hook ( string $class , string $function , Closure $hook ) : bool"
    ],
    "uopz_set_mock": [
        "uopz_set_mock ( string $class , mixed $mock ) : void"
    ],
    "uopz_set_property": [
        "uopz_set_property ( string $class , string $property , mixed $value ) : void",
        "uopz_set_property ( object $instance , string $property , mixed $value ) : void"
    ],
    "uopz_set_return": [
        "uopz_set_return ( string $function , mixed $value , bool $execute = false ) : bool",
        "uopz_set_return ( string $class , string $function , mixed $value , bool $execute = false ) : bool"
    ],
    "uopz_set_static": [
        "uopz_set_static ( string $function , array $static ) : void",
        "uopz_set_static ( string $class , string $function , array $static ) : void"
    ],
    "uopz_undefine": [
        "uopz_undefine ( string $constant ) : bool",
        "uopz_undefine ( string $class , string $constant ) : bool"
    ],
    "uopz_unset_hook": [
        "uopz_unset_hook ( string $function ) : bool",
        "uopz_unset_hook ( string $class , string $function ) : bool"
    ],
    "uopz_unset_mock": [
        "uopz_unset_mock ( string $class ) : void"
    ],
    "uopz_unset_return": [
        "uopz_unset_return ( string $function ) : bool",
        "uopz_unset_return ( string $class , string $function ) : bool"
    ],
    "urldecode": [
        "urldecode ( string $string ) : string"
    ],
    "urlencode": [
        "urlencode ( string $string ) : string"
    ],
    "use_soap_error_handler": [
        "use_soap_error_handler ( bool $enable = true ) : bool"
    ],
    "usleep": [
        "usleep ( int $microseconds ) : void"
    ],
    "usort": [
        "usort ( array &$array , callable $callback ) : bool"
    ],
    "utf8_decode": [
        "utf8_decode ( string $string ) : string"
    ],
    "utf8_encode": [
        "utf8_encode ( string $string ) : string"
    ],
    "V8Js": [
        "public V8Js::__construct ( string $object_name = \"PHP\" , array $variables = array() , array $extensions = array() , bool $report_uncaught_exceptions = true )"
    ],
    "var_dump": [
        "var_dump ( mixed $value , mixed ...$values ) : void"
    ],
    "var_export": [
        "var_export ( mixed $value , bool $return = false ) : string|null"
    ],
    "variant": [
        "public variant::__construct ( mixed $value = null , int $type = VT_EMPTY , int $codepage = CP_ACP )"
    ],
    "variant_abs": [
        "variant_abs ( mixed $value ) : variant"
    ],
    "variant_add": [
        "variant_add ( mixed $left , mixed $right ) : variant"
    ],
    "variant_and": [
        "variant_and ( mixed $left , mixed $right ) : variant"
    ],
    "variant_cast": [
        "variant_cast ( variant $variant , int $type ) : variant"
    ],
    "variant_cat": [
        "variant_cat ( mixed $left , mixed $right ) : variant"
    ],
    "variant_cmp": [
        "variant_cmp ( mixed $left , mixed $right , int $locale_id = LOCALE_SYSTEM_DEFAULT , int $flags = 0 ) : int"
    ],
    "variant_date_from_timestamp": [
        "variant_date_from_timestamp ( int $timestamp ) : variant"
    ],
    "variant_date_to_timestamp": [
        "variant_date_to_timestamp ( variant $variant ) : int|null"
    ],
    "variant_div": [
        "variant_div ( mixed $left , mixed $right ) : variant"
    ],
    "variant_eqv": [
        "variant_eqv ( mixed $left , mixed $right ) : variant"
    ],
    "variant_fix": [
        "variant_fix ( mixed $value ) : variant"
    ],
    "variant_get_type": [
        "variant_get_type ( variant $variant ) : int"
    ],
    "variant_idiv": [
        "variant_idiv ( mixed $left , mixed $right ) : variant"
    ],
    "variant_imp": [
        "variant_imp ( mixed $left , mixed $right ) : variant"
    ],
    "variant_int": [
        "variant_int ( mixed $value ) : variant"
    ],
    "variant_mod": [
        "variant_mod ( mixed $left , mixed $right ) : variant"
    ],
    "variant_mul": [
        "variant_mul ( mixed $left , mixed $right ) : variant"
    ],
    "variant_neg": [
        "variant_neg ( mixed $value ) : variant"
    ],
    "variant_not": [
        "variant_not ( mixed $value ) : variant"
    ],
    "variant_or": [
        "variant_or ( mixed $left , mixed $right ) : variant"
    ],
    "variant_pow": [
        "variant_pow ( mixed $left , mixed $right ) : variant"
    ],
    "variant_round": [
        "variant_round ( mixed $value , int $decimals ) : variant|null"
    ],
    "variant_set": [
        "variant_set ( variant $variant , mixed $value ) : void"
    ],
    "variant_set_type": [
        "variant_set_type ( variant $variant , int $type ) : void"
    ],
    "variant_sub": [
        "variant_sub ( mixed $left , mixed $right ) : variant"
    ],
    "variant_xor": [
        "variant_xor ( mixed $left , mixed $right ) : variant"
    ],
    "VarnishAdmin": [
        "public VarnishAdmin::__construct ( array $args = ? )"
    ],
    "VarnishLog": [
        "public VarnishLog::__construct ( array $args = ? )"
    ],
    "VarnishStat": [
        "public VarnishStat::__construct ( array $args = ? )"
    ],
    "version_compare": [
        "version_compare ( string $version1 , string $version2 ) : int",
        "version_compare ( string $version1 , string $version2 , string $operator ) : bool"
    ],
    "vfprintf": [
        "vfprintf ( resource $stream , string $format , array $values ) : int"
    ],
    "virtual": [
        "virtual ( string $uri ) : bool"
    ],
    "vprintf": [
        "vprintf ( string $format , array $values ) : int"
    ],
    "vsprintf": [
        "vsprintf ( string $format , array $values ) : string"
    ],
    "wddx_add_vars": [
        "wddx_add_vars ( resource $packet_id , mixed $var_name , mixed ...$var_names ) : bool"
    ],
    "wddx_deserialize": [
        "wddx_deserialize ( string $packet ) : mixed"
    ],
    "wddx_packet_end": [
        "wddx_packet_end ( resource $packet_id ) : string"
    ],
    "wddx_packet_start": [
        "wddx_packet_start ( string $comment = ? ) : resource"
    ],
    "wddx_serialize_value": [
        "wddx_serialize_value ( mixed $var , string $comment = ? ) : string"
    ],
    "wddx_serialize_vars": [
        "wddx_serialize_vars ( mixed $var_name , mixed ...$var_names ) : string"
    ],
    "WeakMap": [
        "public WeakMap::__construct ( )"
    ],
    "WeakRef": [
        "public Weakref::__construct ( object $object )"
    ],
    "WeakReference": [
        "public WeakReference::__construct ( )"
    ],
    "win32_continue_service": [
        "win32_continue_service ( string $servicename , string $machine = ? ) : void"
    ],
    "win32_create_service": [
        "win32_create_service ( array $details , string $machine = ? ) : void"
    ],
    "win32_delete_service": [
        "win32_delete_service ( string $servicename , string $machine = ? ) : void"
    ],
    "win32_get_last_control_message": [
        "win32_get_last_control_message ( ) : int"
    ],
    "win32_pause_service": [
        "win32_pause_service ( string $servicename , string $machine = ? ) : void"
    ],
    "win32_query_service_status": [
        "win32_query_service_status ( string $servicename , string $machine = ? ) : array"
    ],
    "win32_send_custom_control": [
        "win32_send_custom_control ( string $servicename , int $control , string $machine = ? ) : void"
    ],
    "win32_set_service_exit_code": [
        "win32_set_service_exit_code ( int $exitCode = 1 ) : int"
    ],
    "win32_set_service_exit_mode": [
        "win32_set_service_exit_mode ( bool $gracefulMode = true ) : bool"
    ],
    "win32_set_service_status": [
        "win32_set_service_status ( int $status , int $checkpoint = 0 ) : void"
    ],
    "win32_start_service": [
        "win32_start_service ( string $servicename , string $machine = ? ) : void"
    ],
    "win32_start_service_ctrl_dispatcher": [
        "win32_start_service_ctrl_dispatcher ( string $name , bool $gracefulMode = true ) : void"
    ],
    "win32_stop_service": [
        "win32_stop_service ( string $servicename , string $machine = ? ) : void"
    ],
    "wincache_fcache_fileinfo": [
        "wincache_fcache_fileinfo ( bool $summaryonly = false ) : array|false"
    ],
    "wincache_fcache_meminfo": [
        "wincache_fcache_meminfo ( ) : array|false"
    ],
    "wincache_lock": [
        "wincache_lock ( string $key , bool $isglobal = false ) : bool"
    ],
    "wincache_ocache_fileinfo": [
        "wincache_ocache_fileinfo ( bool $summaryonly = false ) : array|false"
    ],
    "wincache_ocache_meminfo": [
        "wincache_ocache_meminfo ( ) : array|false"
    ],
    "wincache_refresh_if_changed": [
        "wincache_refresh_if_changed ( array $files = NULL ) : bool"
    ],
    "wincache_rplist_fileinfo": [
        "wincache_rplist_fileinfo ( bool $summaryonly = false ) : array|false"
    ],
    "wincache_rplist_meminfo": [
        "wincache_rplist_meminfo ( ) : array|false"
    ],
    "wincache_scache_info": [
        "wincache_scache_info ( bool $summaryonly = false ) : array|false"
    ],
    "wincache_scache_meminfo": [
        "wincache_scache_meminfo ( ) : array|false"
    ],
    "wincache_ucache_add": [
        "wincache_ucache_add ( string $key , mixed $value , int $ttl = 0 ) : bool",
        "wincache_ucache_add ( array $values , mixed $unused = NULL , int $ttl = 0 ) : bool"
    ],
    "wincache_ucache_cas": [
        "wincache_ucache_cas ( string $key , int $old_value , int $new_value ) : bool"
    ],
    "wincache_ucache_clear": [
        "wincache_ucache_clear ( ) : bool"
    ],
    "wincache_ucache_dec": [
        "wincache_ucache_dec ( string $key , int $dec_by = 1 , bool &$success = ? ) : mixed"
    ],
    "wincache_ucache_delete": [
        "wincache_ucache_delete ( mixed $key ) : bool"
    ],
    "wincache_ucache_exists": [
        "wincache_ucache_exists ( string $key ) : bool"
    ],
    "wincache_ucache_get": [
        "wincache_ucache_get ( mixed $key , bool &$success = ? ) : mixed"
    ],
    "wincache_ucache_inc": [
        "wincache_ucache_inc ( string $key , int $inc_by = 1 , bool &$success = ? ) : mixed"
    ],
    "wincache_ucache_info": [
        "wincache_ucache_info ( bool $summaryonly = false , string $key = NULL ) : array|false"
    ],
    "wincache_ucache_meminfo": [
        "wincache_ucache_meminfo ( ) : array|false"
    ],
    "wincache_ucache_set": [
        "wincache_ucache_set ( mixed $key , mixed $value , int $ttl = 0 ) : bool",
        "wincache_ucache_set ( array $values , mixed $unused = NULL , int $ttl = 0 ) : bool"
    ],
    "wincache_unlock": [
        "wincache_unlock ( string $key ) : bool"
    ],
    "wordwrap": [
        "wordwrap ( string $string , int $width = 75 , string $break = \"\\n\" , bool $cut_long_words = false ) : string"
    ],
    "xattr_get": [
        "xattr_get ( string $filename , string $name , int $flags = 0 ) : string"
    ],
    "xattr_list": [
        "xattr_list ( string $filename , int $flags = 0 ) : array"
    ],
    "xattr_remove": [
        "xattr_remove ( string $filename , string $name , int $flags = 0 ) : bool"
    ],
    "xattr_set": [
        "xattr_set ( string $filename , string $name , string $value , int $flags = 0 ) : bool"
    ],
    "xattr_supported": [
        "xattr_supported ( string $filename , int $flags = 0 ) : bool"
    ],
    "xdiff_file_bdiff": [
        "xdiff_file_bdiff ( string $old_file , string $new_file , string $dest ) : bool"
    ],
    "xdiff_file_bdiff_size": [
        "xdiff_file_bdiff_size ( string $file ) : int"
    ],
    "xdiff_file_bpatch": [
        "xdiff_file_bpatch ( string $file , string $patch , string $dest ) : bool"
    ],
    "xdiff_file_diff": [
        "xdiff_file_diff ( string $old_file , string $new_file , string $dest , int $context = 3 , bool $minimal = false ) : bool"
    ],
    "xdiff_file_diff_binary": [
        "xdiff_file_diff_binary ( string $old_file , string $new_file , string $dest ) : bool"
    ],
    "xdiff_file_merge3": [
        "xdiff_file_merge3 ( string $old_file , string $new_file1 , string $new_file2 , string $dest ) : mixed"
    ],
    "xdiff_file_patch": [
        "xdiff_file_patch ( string $file , string $patch , string $dest , int $flags = DIFF_PATCH_NORMAL ) : mixed"
    ],
    "xdiff_file_patch_binary": [
        "xdiff_file_patch_binary ( string $file , string $patch , string $dest ) : bool"
    ],
    "xdiff_file_rabdiff": [
        "xdiff_file_rabdiff ( string $old_file , string $new_file , string $dest ) : bool"
    ],
    "xdiff_string_bdiff": [
        "xdiff_string_bdiff ( string $old_data , string $new_data ) : string",
        "xdiff_string_bdiff ( string $old_data , string $new_data ) : string",
        "xdiff_string_bdiff ( string $old_data , string $new_data ) : string"
    ],
    "xdiff_string_bdiff_size": [
        "xdiff_string_bdiff_size ( string $patch ) : int"
    ],
    "xdiff_string_bpatch": [
        "xdiff_string_bpatch ( string $str , string $patch ) : string"
    ],
    "xdiff_string_diff": [
        "xdiff_string_diff ( string $old_data , string $new_data , int $context = 3 , bool $minimal = false ) : string"
    ],
    "xdiff_string_merge3": [
        "xdiff_string_merge3 ( string $old_data , string $new_data1 , string $new_data2 , string &$error = ? ) : mixed"
    ],
    "xdiff_string_patch": [
        "xdiff_string_patch ( string $str , string $patch , int $flags = ? , string &$error = ? ) : string"
    ],
    "xdiff_string_patch_binary": [
        "xdiff_string_patch_binary ( string $str , string $patch ) : string"
    ],
    "xhprof_disable": [
        "xhprof_disable ( ) : array"
    ],
    "xhprof_enable": [
        "xhprof_enable ( int $flags = 0 , array $options = ? ) : void"
    ],
    "xhprof_sample_disable": [
        "xhprof_sample_disable ( ) : array"
    ],
    "xhprof_sample_enable": [
        "xhprof_sample_enable ( ) : void"
    ],
    "xml_error_string": [
        "xml_error_string ( int $error_code ) : string|null"
    ],
    "xml_get_current_byte_index": [
        "xml_get_current_byte_index ( XMLParser $parser ) : int"
    ],
    "xml_get_current_column_number": [
        "xml_get_current_column_number ( XMLParser $parser ) : int"
    ],
    "xml_get_current_line_number": [
        "xml_get_current_line_number ( XMLParser $parser ) : int"
    ],
    "xml_get_error_code": [
        "xml_get_error_code ( XMLParser $parser ) : int"
    ],
    "xml_parse": [
        "xml_parse ( XMLParser $parser , string $data , bool $is_final = false ) : int"
    ],
    "xml_parse_into_struct": [
        "xml_parse_into_struct ( XMLParser $parser , string $data , array &$values , array &$index = null ) : int"
    ],
    "xml_parser_create": [
        "xml_parser_create ( string|null $encoding = null ) : XMLParser"
    ],
    "xml_parser_create_ns": [
        "xml_parser_create_ns ( string|null $encoding = null , string $separator = \":\" ) : XMLParser"
    ],
    "xml_parser_free": [
        "xml_parser_free ( XMLParser $parser ) : bool"
    ],
    "xml_parser_get_option": [
        "xml_parser_get_option ( XMLParser $parser , int $option ) : string|int"
    ],
    "xml_parser_set_option": [
        "xml_parser_set_option ( XMLParser $parser , int $option , string|int $value ) : bool"
    ],
    "xml_set_character_data_handler": [
        "xml_set_character_data_handler ( XMLParser $parser , callable $handler ) : bool"
    ],
    "xml_set_default_handler": [
        "xml_set_default_handler ( XMLParser $parser , callable $handler ) : bool"
    ],
    "xml_set_element_handler": [
        "xml_set_element_handler ( XMLParser $parser , callable $start_handler , callable $end_handler ) : bool"
    ],
    "xml_set_end_namespace_decl_handler": [
        "xml_set_end_namespace_decl_handler ( XMLParser $parser , callable $handler ) : bool"
    ],
    "xml_set_external_entity_ref_handler": [
        "xml_set_external_entity_ref_handler ( XMLParser $parser , callable $handler ) : bool"
    ],
    "xml_set_notation_decl_handler": [
        "xml_set_notation_decl_handler ( XMLParser $parser , callable $handler ) : bool"
    ],
    "xml_set_object": [
        "xml_set_object ( XMLParser $parser , object $object ) : bool"
    ],
    "xml_set_processing_instruction_handler": [
        "xml_set_processing_instruction_handler ( XMLParser $parser , callable $handler ) : bool"
    ],
    "xml_set_start_namespace_decl_handler": [
        "xml_set_start_namespace_decl_handler ( XMLParser $parser , callable $handler ) : bool"
    ],
    "xml_set_unparsed_entity_decl_handler": [
        "xml_set_unparsed_entity_decl_handler ( XMLParser $parser , callable $handler ) : bool"
    ],
    "xmlrpc_decode": [
        "xmlrpc_decode ( string $xml , string $encoding = \"iso-8859-1\" ) : mixed"
    ],
    "xmlrpc_decode_request": [
        "xmlrpc_decode_request ( string $xml , string &$method , string $encoding = ? ) : mixed"
    ],
    "xmlrpc_encode": [
        "xmlrpc_encode ( mixed $value ) : string"
    ],
    "xmlrpc_encode_request": [
        "xmlrpc_encode_request ( string $method , mixed $params , array $output_options = ? ) : string"
    ],
    "xmlrpc_get_type": [
        "xmlrpc_get_type ( mixed $value ) : string"
    ],
    "xmlrpc_is_fault": [
        "xmlrpc_is_fault ( array $arg ) : bool"
    ],
    "xmlrpc_parse_method_descriptions": [
        "xmlrpc_parse_method_descriptions ( string $xml ) : array"
    ],
    "xmlrpc_server_add_introspection_data": [
        "xmlrpc_server_add_introspection_data ( resource $server , array $desc ) : int"
    ],
    "xmlrpc_server_call_method": [
        "xmlrpc_server_call_method ( resource $server , string $xml , mixed $user_data , array $output_options = ? ) : string"
    ],
    "xmlrpc_server_create": [
        "xmlrpc_server_create ( ) : resource"
    ],
    "xmlrpc_server_destroy": [
        "xmlrpc_server_destroy ( resource $server ) : bool"
    ],
    "xmlrpc_server_register_introspection_callback": [
        "xmlrpc_server_register_introspection_callback ( resource $server , string $function ) : bool"
    ],
    "xmlrpc_server_register_method": [
        "xmlrpc_server_register_method ( resource $server , string $method_name , string $function ) : bool"
    ],
    "xmlrpc_set_type": [
        "xmlrpc_set_type ( string &$value , string $type ) : bool"
    ],
    "xmlwriter_end_attribute": [
        "xmlwriter_end_attribute ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_end_cdata": [
        "xmlwriter_end_cdata ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_end_comment": [
        "xmlwriter_end_comment ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_end_document": [
        "xmlwriter_end_document ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_end_dtd": [
        "xmlwriter_end_dtd ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_end_dtd_attlist": [
        "xmlwriter_end_dtd_attlist ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_end_dtd_element": [
        "xmlwriter_end_dtd_element ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_end_dtd_entity": [
        "xmlwriter_end_dtd_entity ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_end_element": [
        "xmlwriter_end_element ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_end_pi": [
        "xmlwriter_end_pi ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_flush": [
        "xmlwriter_flush ( XMLWriter $writer , bool $empty = true ) : string|int"
    ],
    "xmlwriter_full_end_element": [
        "xmlwriter_full_end_element ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_open_memory": [
        "xmlwriter_open_memory ( ) : XMLWriter|false"
    ],
    "xmlwriter_open_uri": [
        "xmlwriter_open_uri ( string $uri ) : XMLWriter|false"
    ],
    "xmlwriter_output_memory": [
        "xmlwriter_output_memory ( XMLWriter $writer , bool $flush = true ) : string"
    ],
    "xmlwriter_set_indent": [
        "xmlwriter_set_indent ( XMLWriter $writer , bool $enable ) : bool"
    ],
    "xmlwriter_set_indent_string": [
        "xmlwriter_set_indent_string ( XMLWriter $writer , string $indentation ) : bool"
    ],
    "xmlwriter_start_attribute": [
        "xmlwriter_start_attribute ( XMLWriter $writer , string $name ) : bool"
    ],
    "xmlwriter_start_attribute_ns": [
        "xmlwriter_start_attribute_ns ( XMLWriter $writer , string|null $prefix , string $name , string|null $namespace ) : bool"
    ],
    "xmlwriter_start_cdata": [
        "xmlwriter_start_cdata ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_start_comment": [
        "xmlwriter_start_comment ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_start_document": [
        "xmlwriter_start_document ( XMLWriter $writer , string|null $version = \"1.0\" , string|null $encoding = null , string|null $standalone = null ) : bool"
    ],
    "xmlwriter_start_dtd": [
        "xmlwriter_start_dtd ( XMLWriter $writer , string $qualifiedName , string|null $publicId = null , string|null $systemId = null ) : bool"
    ],
    "xmlwriter_start_dtd_attlist": [
        "xmlwriter_start_dtd_attlist ( XMLWriter $writer , string $name ) : bool"
    ],
    "xmlwriter_start_dtd_element": [
        "xmlwriter_start_dtd_element ( XMLWriter $writer , string $qualifiedName ) : bool"
    ],
    "xmlwriter_start_dtd_entity": [
        "xmlwriter_start_dtd_entity ( XMLWriter $writer , string $name , bool $isParam ) : bool"
    ],
    "xmlwriter_start_element": [
        "xmlwriter_start_element ( XMLWriter $writer , string $name ) : bool"
    ],
    "xmlwriter_start_element_ns": [
        "xmlwriter_start_element_ns ( XMLWriter $writer , string|null $prefix , string $name , string|null $namespace ) : bool"
    ],
    "xmlwriter_start_pi": [
        "xmlwriter_start_pi ( XMLWriter $writer , string $target ) : bool"
    ],
    "xmlwriter_text": [
        "xmlwriter_text ( XMLWriter $writer , string $content ) : bool"
    ],
    "xmlwriter_write_attribute": [
        "xmlwriter_write_attribute ( XMLWriter $writer , string $name , string $value ) : bool"
    ],
    "xmlwriter_write_attribute_ns": [
        "xmlwriter_write_attribute_ns ( XMLWriter $writer , string|null $prefix , string $name , string|null $namespace , string $value ) : bool"
    ],
    "xmlwriter_write_cdata": [
        "xmlwriter_write_cdata ( XMLWriter $writer , string $content ) : bool"
    ],
    "xmlwriter_write_comment": [
        "xmlwriter_write_comment ( XMLWriter $writer , string $content ) : bool"
    ],
    "xmlwriter_write_dtd": [
        "xmlwriter_write_dtd ( XMLWriter $writer , string $name , string|null $publicId = null , string|null $systemId = null , string|null $content = null ) : bool"
    ],
    "xmlwriter_write_dtd_attlist": [
        "xmlwriter_write_dtd_attlist ( XMLWriter $writer , string $name , string $content ) : bool"
    ],
    "xmlwriter_write_dtd_element": [
        "xmlwriter_write_dtd_element ( XMLWriter $writer , string $name , string $content ) : bool"
    ],
    "xmlwriter_write_dtd_entity": [
        "xmlwriter_write_dtd_entity ( XMLWriter $writer , string $name , string $content , bool $isParam = false , string|null $publicId = null , string|null $systemId = null , string|null $notationData = null ) : bool"
    ],
    "xmlwriter_write_element": [
        "xmlwriter_write_element ( XMLWriter $writer , string $name , string|null $content = null ) : bool"
    ],
    "xmlwriter_write_element_ns": [
        "xmlwriter_write_element_ns ( XMLWriter $writer , string|null $prefix , string $name , string|null $namespace , string|null $content = null ) : bool"
    ],
    "xmlwriter_write_pi": [
        "xmlwriter_write_pi ( XMLWriter $writer , string $target , string $content ) : bool"
    ],
    "xmlwriter_write_raw": [
        "xmlwriter_write_raw ( XMLWriter $writer , string $content ) : bool"
    ],
    "XSLTProcessor": [
        "XSLTProcessor::__construct ( )"
    ],
    "Yac": [
        "public Yac::__construct ( string $prefix = \"\" )"
    ],
    "Yaf_Application": [
        "public Yaf_Application::__construct ( mixed $config , string $envrion = ? )"
    ],
    "Yaf_Config_Ini": [
        "public Yaf_Config_Ini::__construct ( string $config_file , string $section = ? )"
    ],
    "Yaf_Config_Simple": [
        "public Yaf_Config_Simple::__construct ( array $configs , bool $readonly = false )"
    ],
    "Yaf_Controller_Abstract": [
        "final private Yaf_Controller_Abstract::__construct ( )"
    ],
    "Yaf_Dispatcher": [
        "public Yaf_Dispatcher::__construct ( )"
    ],
    "Yaf_Exception": [
        "public Yaf_Exception::__construct ( )"
    ],
    "Yaf_Loader": [
        "private Yaf_Loader::__construct ( )"
    ],
    "Yaf_Registry": [
        "private Yaf_Registry::__construct ( )"
    ],
    "Yaf_Request_Http": [
        "public Yaf_Request_Http::__construct ( string $request_uri = ? , string $base_uri = ? )"
    ],
    "Yaf_Request_Simple": [
        "public Yaf_Request_Simple::__construct ( string $method = ? , string $module = ? , string $controller = ? , string $action = ? , array $params = ? )"
    ],
    "Yaf_Response_Abstract": [
        "public Yaf_Response_Abstract::__construct ( )"
    ],
    "Yaf_Route_Map": [
        "public Yaf_Route_Map::__construct ( string $controller_prefer = false , string $delimiter = \"\" )"
    ],
    "Yaf_Route_Regex": [
        "public Yaf_Route_Regex::__construct ( string $match , array $route , array $map = ? , array $verify = ? , string $reverse = ? )"
    ],
    "Yaf_Route_Rewrite": [
        "public Yaf_Route_Rewrite::__construct ( string $match , array $route , array $verify = ? )"
    ],
    "Yaf_Route_Simple": [
        "public Yaf_Route_Simple::__construct ( string $module_name , string $controller_name , string $action_name )"
    ],
    "Yaf_Route_Supervar": [
        "public Yaf_Route_Supervar::__construct ( string $supervar_name )"
    ],
    "Yaf_Router": [
        "public Yaf_Router::__construct ( )"
    ],
    "Yaf_Session": [
        "private Yaf_Session::__construct ( )"
    ],
    "Yaf_View_Simple": [
        "final public Yaf_View_Simple::__construct ( string $template_dir , array $options = ? )"
    ],
    "yaml_emit": [
        "yaml_emit ( mixed $data , int $encoding = YAML_ANY_ENCODING , int $linebreak = YAML_ANY_BREAK , array $callbacks = null ) : string"
    ],
    "yaml_emit_file": [
        "yaml_emit_file ( string $filename , mixed $data , int $encoding = YAML_ANY_ENCODING , int $linebreak = YAML_ANY_BREAK , array $callbacks = null ) : bool"
    ],
    "yaml_parse": [
        "yaml_parse ( string $input , int $pos = 0 , int &$ndocs = ? , array $callbacks = null ) : mixed"
    ],
    "yaml_parse_file": [
        "yaml_parse_file ( string $filename , int $pos = 0 , int &$ndocs = ? , array $callbacks = null ) : mixed"
    ],
    "yaml_parse_url": [
        "yaml_parse_url ( string $url , int $pos = 0 , int &$ndocs = ? , array $callbacks = null ) : mixed"
    ],
    "Yar_Client": [
        "final public Yar_Client::__construct ( string $url , array $options = ? )"
    ],
    "Yar_Server": [
        "final public Yar_Server::__construct ( Object $obj )"
    ],
    "yaz_addinfo": [
        "yaz_addinfo ( resource $id ) : string"
    ],
    "yaz_ccl_conf": [
        "yaz_ccl_conf ( resource $id , array $config ) : void"
    ],
    "yaz_ccl_parse": [
        "yaz_ccl_parse ( resource $id , string $query , array &$result ) : bool"
    ],
    "yaz_close": [
        "yaz_close ( resource $id ) : bool"
    ],
    "yaz_connect": [
        "yaz_connect ( string $zurl , mixed $options = ? ) : mixed"
    ],
    "yaz_database": [
        "yaz_database ( resource $id , string $databases ) : bool"
    ],
    "yaz_element": [
        "yaz_element ( resource $id , string $elementset ) : bool"
    ],
    "yaz_errno": [
        "yaz_errno ( resource $id ) : int"
    ],
    "yaz_error": [
        "yaz_error ( resource $id ) : string"
    ],
    "yaz_es": [
        "yaz_es (  resource $id  ,  string $type  ,  array $args  ) : void"
    ],
    "yaz_es_result": [
        "yaz_es_result ( resource $id ) : array"
    ],
    "yaz_get_option": [
        "yaz_get_option ( resource $id , string $name ) : string"
    ],
    "yaz_hits": [
        "yaz_hits ( resource $id , array &$searchresult = ? ) : int"
    ],
    "yaz_itemorder": [
        "yaz_itemorder ( resource $id , array $args ) : void"
    ],
    "yaz_present": [
        "yaz_present ( resource $id ) : bool"
    ],
    "yaz_range": [
        "yaz_range ( resource $id , int $start , int $number ) : void"
    ],
    "yaz_record": [
        "yaz_record ( resource $id , int $pos , string $type ) : string"
    ],
    "yaz_scan": [
        "yaz_scan ( resource $id , string $type , string $startterm , array $flags = ? ) : void"
    ],
    "yaz_scan_result": [
        "yaz_scan_result ( resource $id , array &$result = ? ) : array"
    ],
    "yaz_schema": [
        "yaz_schema ( resource $id , string $schema ) : void"
    ],
    "yaz_search": [
        "yaz_search ( resource $id , string $type , string $query ) : bool"
    ],
    "yaz_set_option": [
        "yaz_set_option ( resource $id , string $name , string $value ) : void",
        "yaz_set_option ( resource $id , array $options ) : void"
    ],
    "yaz_sort": [
        "yaz_sort ( resource $id , string $criteria ) : void"
    ],
    "yaz_syntax": [
        "yaz_syntax ( resource $id , string $syntax ) : void"
    ],
    "yaz_wait": [
        "yaz_wait ( array &$options = ? ) : mixed"
    ],
    "zend_thread_id": [
        "zend_thread_id ( ) : int"
    ],
    "zend_version": [
        "zend_version ( ) : string"
    ],
    "zip_close": [
        "zip_close ( resource $zip ) : void"
    ],
    "zip_entry_close": [
        "zip_entry_close ( resource $zip_entry ) : bool"
    ],
    "zip_entry_compressedsize": [
        "zip_entry_compressedsize ( resource $zip_entry ) : int|false"
    ],
    "zip_entry_compressionmethod": [
        "zip_entry_compressionmethod ( resource $zip_entry ) : string|false"
    ],
    "zip_entry_filesize": [
        "zip_entry_filesize ( resource $zip_entry ) : int|false"
    ],
    "zip_entry_name": [
        "zip_entry_name ( resource $zip_entry ) : string|false"
    ],
    "zip_entry_open": [
        "zip_entry_open ( resource $zip_dp , resource $zip_entry , string $mode = \"rb\" ) : bool"
    ],
    "zip_entry_read": [
        "zip_entry_read ( resource $zip_entry , int $len = 1024 ) : string|false"
    ],
    "zip_open": [
        "zip_open ( string $filename ) : resource|int|false"
    ],
    "zip_read": [
        "zip_read ( resource $zip ) : resource|false"
    ],
    "zlib_decode": [
        "zlib_decode ( string $data , int $max_length = 0 ) : string|false"
    ],
    "zlib_encode": [
        "zlib_encode ( string $data , int $encoding , int $level = -1 ) : string|false"
    ],
    "zlib_get_coding_type": [
        "zlib_get_coding_type ( ) : string|false"
    ],
    "ZMQ": [
        "private ZMQ::__construct ( )"
    ],
    "ZMQContext": [
        "public ZMQContext::__construct ( int $io_threads = 1 , bool $is_persistent = true )"
    ],
    "ZMQDevice": [
        "public ZMQDevice::__construct ( ZMQSocket $frontend , ZMQSocket $backend , ZMQSocket $listener = ? )"
    ],
    "ZMQSocket": [
        "public ZMQSocket::__construct ( ZMQContext $context , int $type , string $persistent_id = null , callable $on_new_socket = null )"
    ],
    "Zookeeper": [
        "public Zookeeper::__construct ( string $host = '' , callable $watcher_cb = null , int $recv_timeout = 10000 )"
    ],
    "zookeeper_dispatch": [
        "zookeeper_dispatch ( ) : void"
    ]
}