{
    "__autoload": [
        "Attempt to load undefined class",
        "<span class=\"methodname\">__autoload<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "__halt_compiler": [
        "Halts the compiler execution",
        "<span class=\"methodname\">__halt_compiler<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "abs": [
        "Absolute value",
        "<span class=\"methodname\">abs<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $number<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">float<\/span><\/span>"
    ],
    "acos": [
        "Arc cosine",
        "<span class=\"methodname\">acos<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "acosh": [
        "Inverse hyperbolic cosine",
        "<span class=\"methodname\">acosh<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "addcslashes": [
        "Quote string with slashes in a C style",
        "<span class=\"methodname\">addcslashes<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $characters<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "AddressInfo": [
        "A fully opaque class which replaces AddressInfo resources as of PHP 8.0.0."
    ],
    "addslashes": [
        "Quote string with slashes",
        "<span class=\"methodname\">addslashes<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "apache_child_terminate": [
        "Terminate apache process after this request",
        "<span class=\"methodname\">apache_child_terminate<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "apache_get_modules": [
        "Get a list of loaded Apache modules",
        "<span class=\"methodname\">apache_get_modules<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "apache_get_version": [
        "Fetch Apache version",
        "<span class=\"methodname\">apache_get_version<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "apache_getenv": [
        "Get an Apache subprocess_env variable",
        "<span class=\"methodname\">apache_getenv<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $variable<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $walk_to_top<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "apache_lookup_uri": [
        "Perform a partial request for the specified URI and return all info about it",
        "<span class=\"methodname\">apache_lookup_uri<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\"><span class=\"type\">object<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "apache_note": [
        "Get and set apache request notes",
        "<span class=\"methodname\">apache_note<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $note_name<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $note_value<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "apache_request_headers": [
        "Fetch all HTTP request headers",
        "<span class=\"methodname\">apache_request_headers<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "apache_response_headers": [
        "Fetch all HTTP response headers",
        "<span class=\"methodname\">apache_response_headers<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "apache_setenv": [
        "Set an Apache subprocess_env variable",
        "<span class=\"methodname\">apache_setenv<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $variable<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $walk_to_top<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "apcu_add": [
        "Cache a new variable in the data store",
        "<span class=\"methodname\">apcu_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $var<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $ttl<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">apcu_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $values<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $unused<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $ttl<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "apcu_cache_info": [
        "Retrieves cached information from APCu's data store",
        "<span class=\"methodname\">apcu_cache_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $limited<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "apcu_cas": [
        "Updates an old value with a new value",
        "<span class=\"methodname\">apcu_cas<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $old<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $new<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "apcu_clear_cache": [
        "Clears the APCu cache",
        "<span class=\"methodname\">apcu_clear_cache<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "apcu_dec": [
        "Decrease a stored number",
        "<span class=\"methodname\">apcu_dec<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $step<span class=\"initializer\"> = 1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> &$success<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $ttl<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "apcu_delete": [
        "Removes a stored variable from the cache",
        "<span class=\"methodname\">apcu_delete<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $key<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "apcu_enabled": [
        "Whether APCu is usable in the current environment",
        "<span class=\"methodname\">apcu_enabled<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "apcu_entry": [
        "Atomically fetch or generate a cache entry",
        "<span class=\"methodname\">apcu_entry<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $generator<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $ttl<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "apcu_exists": [
        "Checks if entry exists",
        "<span class=\"methodname\">apcu_exists<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $keys<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "apcu_fetch": [
        "Fetch a stored variable from the cache",
        "<span class=\"methodname\">apcu_fetch<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> &$success<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "apcu_inc": [
        "Increase a stored number",
        "<span class=\"methodname\">apcu_inc<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $step<span class=\"initializer\"> = 1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> &$success<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $ttl<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "apcu_key_info": [
        "Get detailed information about the cache key",
        "<span class=\"methodname\">apcu_key_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "apcu_sma_info": [
        "Retrieves APCu Shared Memory Allocation information",
        "<span class=\"methodname\">apcu_sma_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $limited<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "apcu_store": [
        "Cache a variable in the data store",
        "<span class=\"methodname\">apcu_store<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $var<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $ttl<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">apcu_store<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $values<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $unused<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $ttl<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "APCUIterator": [
        "The APCUIterator class makes it easier to iterate over large APCu caches. This is helpful as it allows iterating over large caches in steps, while grabbing a defined number of entries per lock instance, so it frees the cache locks for other activities rather than hold up the entire cache to grab 100 (the default) entries. Also, using regular expression matching is more efficient as it's been moved to the C level.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">APCUIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $search<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $format<span class=\"initializer\"> = APC_ITER_ALL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $chunk_size<span class=\"initializer\"> = 100<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $list<span class=\"initializer\"> = APC_LIST_ACTIVE<\/span><\/span> )"
    ],
    "AppendIterator": [
        "An Iterator that iterates over several iterators one after the other.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">AppendIterator::__construct<\/span> ( )"
    ],
    "ArgumentCountError": [
        "ArgumentCountError is thrown when too few arguments are passed to a user-defined function or method."
    ],
    "ArithmeticError": [
        "ArithmeticError is thrown when an error occurs while performing mathematical operations. These errors include attempting to perform a bitshift by a negative amount, and any call to intdiv() that would result in a value outside the possible bounds of an int."
    ],
    "array": [
        "Create an array",
        "<span class=\"methodname\">array<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$values<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_change_key_case": [
        "Changes the case of all keys in an array",
        "<span class=\"methodname\">array_change_key_case<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $case<span class=\"initializer\"> = CASE_LOWER<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_chunk": [
        "Split an array into chunks",
        "<span class=\"methodname\">array_chunk<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $preserve_keys<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_column": [
        "Return the values from a single column in the input array",
        "<span class=\"methodname\">array_column<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $column_key<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $index_key<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_combine": [
        "Creates an array by using one array for keys and another for its values",
        "<span class=\"methodname\">array_combine<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $keys<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $values<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_count_values": [
        "Counts all the values of an array",
        "<span class=\"methodname\">array_count_values<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_diff": [
        "Computes the difference of arrays",
        "<span class=\"methodname\">array_diff<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_diff_assoc": [
        "Computes the difference of arrays with additional index check",
        "<span class=\"methodname\">array_diff_assoc<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_diff_key": [
        "Computes the difference of arrays using keys for comparison",
        "<span class=\"methodname\">array_diff_key<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_diff_uassoc": [
        "Computes the difference of arrays with additional index check which is performed by a user supplied callback function",
        "<span class=\"methodname\">array_diff_uassoc<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $key_compare_func<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_diff_ukey": [
        "Computes the difference of arrays using a callback function on the keys for comparison",
        "<span class=\"methodname\">array_diff_ukey<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $key_compare_func<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_fill": [
        "Fill an array with values",
        "<span class=\"methodname\">array_fill<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $start_index<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $count<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_fill_keys": [
        "Fill an array with values, specifying keys",
        "<span class=\"methodname\">array_fill_keys<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $keys<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_filter": [
        "Filters elements of an array using a callback function",
        "<span class=\"methodname\">array_filter<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">callable<\/span>|<span class=\"type\">null<\/span><\/span> $callback<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_flip": [
        "Exchanges all keys with their associated values in an array",
        "<span class=\"methodname\">array_flip<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_intersect": [
        "Computes the intersection of arrays",
        "<span class=\"methodname\">array_intersect<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_intersect_assoc": [
        "Computes the intersection of arrays with additional index check",
        "<span class=\"methodname\">array_intersect_assoc<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_intersect_key": [
        "Computes the intersection of arrays using keys for comparison",
        "<span class=\"methodname\">array_intersect_key<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_intersect_uassoc": [
        "Computes the intersection of arrays with additional index check, compares indexes by a callback function",
        "<span class=\"methodname\">array_intersect_uassoc<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $key_compare_func<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_intersect_ukey": [
        "Computes the intersection of arrays using a callback function on the keys for comparison",
        "<span class=\"methodname\">array_intersect_ukey<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $key_compare_func<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_key_exists": [
        "Checks if the given key or index exists in the array",
        "<span class=\"methodname\">array_key_exists<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span><\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "array_key_first": [
        "Gets the first key of an array",
        "<span class=\"methodname\">array_key_first<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "array_key_last": [
        "Gets the last key of an array",
        "<span class=\"methodname\">array_key_last<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "array_keys": [
        "Return all the keys or a subset of the keys of an array",
        "<span class=\"methodname\">array_keys<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> ) : <span class=\"type\">array<\/span>",
        "<span class=\"methodname\">array_keys<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $search_value<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $strict<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_map": [
        "Applies the callback to the elements of the given arrays",
        "<span class=\"methodname\">array_map<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">callable<\/span>|<span class=\"type\">null<\/span><\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_merge": [
        "Merge one or more arrays",
        "<span class=\"methodname\">array_merge<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_merge_recursive": [
        "Merge one or more arrays recursively",
        "<span class=\"methodname\">array_merge_recursive<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_multisort": [
        "Sort multiple or multi-dimensional arrays",
        "<span class=\"methodname\">array_multisort<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array1<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $array1_sort_order<span class=\"initializer\"> = SORT_ASC<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $array1_sort_flags<span class=\"initializer\"> = SORT_REGULAR<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$rest<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "array_pad": [
        "Pad array to the specified length with a value",
        "<span class=\"methodname\">array_pad<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_pop": [
        "Pop the element off the end of array",
        "<span class=\"methodname\">array_pop<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "array_product": [
        "Calculate the product of values in an array",
        "<span class=\"methodname\">array_product<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">float<\/span><\/span>"
    ],
    "array_push": [
        "Push one or more elements onto the end of array",
        "<span class=\"methodname\">array_push<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$values<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "array_rand": [
        "Pick one or more random keys out of an array",
        "<span class=\"methodname\">array_rand<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num<span class=\"initializer\"> = 1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span>"
    ],
    "array_reduce": [
        "Iteratively reduce the array to a single value using a callback function",
        "<span class=\"methodname\">array_reduce<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $initial<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "array_replace": [
        "Replaces elements from passed arrays into the first array",
        "<span class=\"methodname\">array_replace<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$replacements<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_replace_recursive": [
        "Replaces elements from passed arrays into the first array recursively",
        "<span class=\"methodname\">array_replace_recursive<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$replacements<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_reverse": [
        "Return an array with elements in reverse order",
        "<span class=\"methodname\">array_reverse<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $preserve_keys<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_search": [
        "Searches the array for a given value and returns the first corresponding key if successful",
        "<span class=\"methodname\">array_search<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $strict<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "array_shift": [
        "Shift an element off the beginning of array",
        "<span class=\"methodname\">array_shift<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "array_slice": [
        "Extract a slice of the array",
        "<span class=\"methodname\">array_slice<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $length<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $preserve_keys<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_splice": [
        "Remove a portion of the array and replace it with something else",
        "<span class=\"methodname\">array_splice<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $length<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $replacement<span class=\"initializer\"> = []<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_sum": [
        "Calculate the sum of values in an array",
        "<span class=\"methodname\">array_sum<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">float<\/span><\/span>"
    ],
    "array_udiff": [
        "Computes the difference of arrays by using a callback function for data comparison",
        "<span class=\"methodname\">array_udiff<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $value_compare_func<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_udiff_assoc": [
        "Computes the difference of arrays with additional index check, compares data by a callback function",
        "<span class=\"methodname\">array_udiff_assoc<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $value_compare_func<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_udiff_uassoc": [
        "Computes the difference of arrays with additional index check, compares data and indexes by a callback function",
        "<span class=\"methodname\">array_udiff_uassoc<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $value_compare_func<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $key_compare_func<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_uintersect": [
        "Computes the intersection of arrays, compares data by a callback function",
        "<span class=\"methodname\">array_uintersect<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $value_compare_func<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_uintersect_assoc": [
        "Computes the intersection of arrays with additional index check, compares data by a callback function",
        "<span class=\"methodname\">array_uintersect_assoc<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $value_compare_func<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_uintersect_uassoc": [
        "Computes the intersection of arrays with additional index check, compares data and indexes by separate callback functions",
        "<span class=\"methodname\">array_uintersect_uassoc<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array1<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> ...$arrays<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $value_compare_func<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $key_compare_func<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_unique": [
        "Removes duplicate values from an array",
        "<span class=\"methodname\">array_unique<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = SORT_STRING<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_unshift": [
        "Prepend one or more elements to the beginning of an array",
        "<span class=\"methodname\">array_unshift<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$values<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "array_values": [
        "Return all the values of an array",
        "<span class=\"methodname\">array_values<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "array_walk": [
        "Apply a user supplied function to every member of an array",
        "<span class=\"methodname\">array_walk<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">object<\/span><\/span> &$array<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $userdata<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "array_walk_recursive": [
        "Apply a user function recursively to every member of an array",
        "<span class=\"methodname\">array_walk_recursive<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">object<\/span><\/span> &$array<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $userdata<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ArrayAccess": [
        "Interface to provide accessing objects as arrays."
    ],
    "ArrayIterator": [
        "This iterator allows to unset and modify values and keys while iterating over Arrays and Objects.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ArrayIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $array<span class=\"initializer\"> = array()<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> )"
    ],
    "ArrayObject": [
        "This class allows objects to work as arrays.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ArrayObject::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $input<span class=\"initializer\"> = array()<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $iterator_class<span class=\"initializer\"> = \"ArrayIterator\"<\/span><\/span> )"
    ],
    "arsort": [
        "Sort an array in reverse order and maintain index association",
        "<span class=\"methodname\">arsort<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = SORT_REGULAR<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "asin": [
        "Arc sine",
        "<span class=\"methodname\">asin<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "asinh": [
        "Inverse hyperbolic sine",
        "<span class=\"methodname\">asinh<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "asort": [
        "Sort an array and maintain index association",
        "<span class=\"methodname\">asort<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = SORT_REGULAR<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "assert": [
        "Checks if assertion is false",
        "<span class=\"methodname\">assert<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $assertion<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $description<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">assert<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $assertion<\/span> , <span class=\"methodparam\"><span class=\"type\">Throwable<\/span> $exception<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "assert_options": [
        "Set\/get the various assert flags",
        "<span class=\"methodname\">assert_options<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $what<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "AssertionError": [
        "AssertionError is thrown when an assertion made via assert() fails."
    ],
    "atan": [
        "Arc tangent",
        "<span class=\"methodname\">atan<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "atan2": [
        "Arc tangent of two variables",
        "<span class=\"methodname\">atan2<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "atanh": [
        "Inverse hyperbolic tangent",
        "<span class=\"methodname\">atanh<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "BadFunctionCallException": [
        "Exception thrown if a callback refers to an undefined function or if some arguments are missing."
    ],
    "BadMethodCallException": [
        "Exception thrown if a callback refers to an undefined method or if some arguments are missing."
    ],
    "base64_decode": [
        "Decodes data encoded with MIME base64",
        "<span class=\"methodname\">base64_decode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $strict<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "base64_encode": [
        "Encodes data with MIME base64",
        "<span class=\"methodname\">base64_encode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "base_convert": [
        "Convert a number between arbitrary bases",
        "<span class=\"methodname\">base_convert<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $from_base<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $to_base<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "basename": [
        "Returns trailing name component of path",
        "<span class=\"methodname\">basename<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $suffix<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "bcadd": [
        "Add two arbitrary precision numbers",
        "<span class=\"methodname\">bcadd<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $num2<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $scale<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "bccomp": [
        "Compare two arbitrary precision numbers",
        "<span class=\"methodname\">bccomp<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $num2<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $scale<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "bcdiv": [
        "Divide two arbitrary precision numbers",
        "<span class=\"methodname\">bcdiv<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $num2<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $scale<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "bcmod": [
        "Get modulus of an arbitrary precision number",
        "<span class=\"methodname\">bcmod<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $num2<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $scale<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "bcmul": [
        "Multiply two arbitrary precision numbers",
        "<span class=\"methodname\">bcmul<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $num2<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $scale<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "bcpow": [
        "Raise an arbitrary precision number to another",
        "<span class=\"methodname\">bcpow<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $exponent<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $scale<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "bcpowmod": [
        "Raise an arbitrary precision number to another, reduced by a specified modulus",
        "<span class=\"methodname\">bcpowmod<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $exponent<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $modulus<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $scale<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "bcscale": [
        "Set or get default scale parameter for all bc math functions",
        "<span class=\"methodname\">bcscale<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $scale<\/span> ) : <span class=\"type\">int<\/span>",
        "<span class=\"methodname\">bcscale<\/span> ( <span class=\"methodparam\"><span class=\"type\">null<\/span> $scale<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "bcsqrt": [
        "Get the square root of an arbitrary precision number",
        "<span class=\"methodname\">bcsqrt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $scale<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "bcsub": [
        "Subtract one arbitrary precision number from another",
        "<span class=\"methodname\">bcsub<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $num2<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $scale<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "bin2hex": [
        "Convert binary data into hexadecimal representation",
        "<span class=\"methodname\">bin2hex<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "bind_textdomain_codeset": [
        "Specify or get the character encoding in which the messages from the DOMAIN message catalog will be returned",
        "<span class=\"methodname\">bind_textdomain_codeset<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $domain<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $codeset<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "bindec": [
        "Binary to decimal",
        "<span class=\"methodname\">bindec<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $binary_string<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">float<\/span><\/span>"
    ],
    "bindtextdomain": [
        "Sets or gets the path for a domain",
        "<span class=\"methodname\">bindtextdomain<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $domain<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $directory<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "boolval": [
        "Get the boolean value of a variable",
        "<span class=\"methodname\">boolval<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "bson_decode": [
        "Deserializes a BSON object into a PHP array",
        "<span class=\"methodname\">bson_decode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $bson<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "bson_encode": [
        "Serializes a PHP variable into a BSON string",
        "<span class=\"methodname\">bson_encode<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $anything<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "bzclose": [
        "Close a bzip2 file",
        "<span class=\"methodname\">bzclose<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $bz<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "bzcompress": [
        "Compress a string into bzip2 encoded data",
        "<span class=\"methodname\">bzcompress<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $block_size<span class=\"initializer\"> = 4<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $work_factor<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span><\/span>"
    ],
    "bzdecompress": [
        "Decompresses bzip2 encoded data",
        "<span class=\"methodname\">bzdecompress<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $use_less_memory<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "bzerrno": [
        "Returns a bzip2 error number",
        "<span class=\"methodname\">bzerrno<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $bz<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "bzerror": [
        "Returns the bzip2 error number and error string in an array",
        "<span class=\"methodname\">bzerror<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $bz<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "bzerrstr": [
        "Returns a bzip2 error string",
        "<span class=\"methodname\">bzerrstr<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $bz<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "bzflush": [
        "Do nothing",
        "<span class=\"methodname\">bzflush<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $bz<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "bzopen": [
        "Opens a bzip2 compressed file",
        "<span class=\"methodname\">bzopen<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">resource<\/span><\/span> $file<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "bzread": [
        "Binary safe bzip2 file read",
        "<span class=\"methodname\">bzread<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $bz<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<span class=\"initializer\"> = 1024<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "bzwrite": [
        "Binary safe bzip2 file write",
        "<span class=\"methodname\">bzwrite<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $bz<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $length<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "CachingIterator": [
        "This object supports cached iteration over another iterator.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">CachingIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">Iterator<\/span> $iterator<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = self::CALL_TOSTRING<\/span><\/span> )"
    ],
    "cal_days_in_month": [
        "Return the number of days in a month for a given year and calendar",
        "<span class=\"methodname\">cal_days_in_month<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $calendar<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $month<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $year<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "cal_from_jd": [
        "Converts from Julian Day Count to a supported calendar",
        "<span class=\"methodname\">cal_from_jd<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $julian_day<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $calendar<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "cal_info": [
        "Returns information about a particular calendar",
        "<span class=\"methodname\">cal_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $calendar<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "cal_to_jd": [
        "Converts from a supported calendar to Julian Day Count",
        "<span class=\"methodname\">cal_to_jd<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $calendar<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $month<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $day<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $year<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "call_user_func": [
        "Call the callback given by the first parameter",
        "<span class=\"methodname\">call_user_func<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$args<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "call_user_func_array": [
        "Call a callback with an array of parameters",
        "<span class=\"methodname\">call_user_func_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $args<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "CallbackFilterIterator": [
        "Create a filtered iterator from another iterator",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">CallbackFilterIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">Iterator<\/span> $iterator<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> )"
    ],
    "ceil": [
        "Round fractions up",
        "<span class=\"methodname\">ceil<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $value<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "chdir": [
        "Change directory",
        "<span class=\"methodname\">chdir<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $directory<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "checkdate": [
        "Validate a Gregorian date",
        "<span class=\"methodname\">checkdate<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $month<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $day<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $year<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "checkdnsrr": [
        "Check DNS records corresponding to a given Internet host name or IP address",
        "<span class=\"methodname\">checkdnsrr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $type<span class=\"initializer\"> = \"MX\"<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "chgrp": [
        "Changes file group",
        "<span class=\"methodname\">chgrp<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span><\/span> $group<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "chmod": [
        "Changes file mode",
        "<span class=\"methodname\">chmod<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $permissions<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "chown": [
        "Changes file owner",
        "<span class=\"methodname\">chown<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span><\/span> $user<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "chr": [
        "Generate a single-byte string from a number",
        "<span class=\"methodname\">chr<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $codepoint<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "chroot": [
        "Change the root directory",
        "<span class=\"methodname\">chroot<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $directory<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "chunk_split": [
        "Split a string into smaller chunks",
        "<span class=\"methodname\">chunk_split<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<span class=\"initializer\"> = 76<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $separator<span class=\"initializer\"> = \"\\r\\n\"<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "class_alias": [
        "Creates an alias for a class",
        "<span class=\"methodname\">class_alias<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $original<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $alias<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $autoload<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "class_exists": [
        "Checks if the class has been defined",
        "<span class=\"methodname\">class_exists<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class_name<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $autoload<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "class_implements": [
        "Return the interfaces which are implemented by the given class or interface",
        "<span class=\"methodname\">class_implements<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $autoload<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "class_parents": [
        "Return the parent classes of the given class",
        "<span class=\"methodname\">class_parents<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $autoload<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "class_uses": [
        "Return the traits used by the given class",
        "<span class=\"methodname\">class_uses<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $autoload<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "classkit_import": [
        "Import new class method definitions from a file",
        "<span class=\"methodname\">classkit_import<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "classkit_method_add": [
        "Dynamically adds a new method to a given class",
        "<span class=\"methodname\">classkit_method_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $classname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $methodname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $args<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $code<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = CLASSKIT_ACC_PUBLIC<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "classkit_method_copy": [
        "Copies a method from class to another",
        "<span class=\"methodname\">classkit_method_copy<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $dClass<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dMethod<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $sClass<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $sMethod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "classkit_method_redefine": [
        "Dynamically changes the code of the given method",
        "<span class=\"methodname\">classkit_method_redefine<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $classname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $methodname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $args<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $code<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = CLASSKIT_ACC_PUBLIC<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "classkit_method_remove": [
        "Dynamically removes the given method",
        "<span class=\"methodname\">classkit_method_remove<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $classname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $methodname<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "classkit_method_rename": [
        "Dynamically changes the name of the given method",
        "<span class=\"methodname\">classkit_method_rename<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $classname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $methodname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $newname<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "clearstatcache": [
        "Clears file status cache",
        "<span class=\"methodname\">clearstatcache<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $clear_realpath_cache<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "cli_get_process_title": [
        "Returns the current process title",
        "<span class=\"methodname\">cli_get_process_title<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "cli_set_process_title": [
        "Sets the process title",
        "<span class=\"methodname\">cli_set_process_title<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $title<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "closedir": [
        "Close directory handle",
        "<span class=\"methodname\">closedir<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $dir_handle<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "closelog": [
        "Close connection to system logger",
        "<span class=\"methodname\">closelog<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "Closure": [
        "Class used to represent anonymous functions.",
        "<span class=\"modifier\">private<\/span> <span class=\"methodname\">Closure::__construct<\/span> ( )"
    ],
    "Collator": [
        "Provides string comparison capability with support for appropriate locale-sensitive sort orderings.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Collator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> )"
    ],
    "collator_asort": [
        "Sort array maintaining index association",
        "<span class=\"methodname\">collator_asort<\/span> ( <span class=\"methodparam\"><span class=\"type\">Collator<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = Collator::SORT_REGULAR<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "collator_compare": [
        "Compare two Unicode strings",
        "<span class=\"methodname\">collator_compare<\/span> ( <span class=\"methodparam\"><span class=\"type\">Collator<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string2<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "collator_create": [
        "Create a collator",
        "<span class=\"methodname\">collator_create<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> ) : <span class=\"type\"><span class=\"type\">Collator<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "collator_get_attribute": [
        "Get collation attribute value",
        "<span class=\"methodname\">collator_get_attribute<\/span> ( <span class=\"methodparam\"><span class=\"type\">Collator<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $attribute<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "collator_get_error_code": [
        "Get collator's last error code",
        "<span class=\"methodname\">collator_get_error_code<\/span> ( <span class=\"methodparam\"><span class=\"type\">Collator<\/span> $object<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "collator_get_error_message": [
        "Get text for collator's last error code",
        "<span class=\"methodname\">collator_get_error_message<\/span> ( <span class=\"methodparam\"><span class=\"type\">Collator<\/span> $object<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "collator_get_locale": [
        "Get the locale name of the collator",
        "<span class=\"methodname\">collator_get_locale<\/span> ( <span class=\"methodparam\"><span class=\"type\">Collator<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "collator_get_sort_key": [
        "Get sorting key for a string",
        "<span class=\"methodname\">collator_get_sort_key<\/span> ( <span class=\"methodparam\"><span class=\"type\">Collator<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "collator_get_strength": [
        "Get current collation strength",
        "<span class=\"methodname\">collator_get_strength<\/span> ( <span class=\"methodparam\"><span class=\"type\">Collator<\/span> $object<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "collator_set_attribute": [
        "Set collation attribute",
        "<span class=\"methodname\">collator_set_attribute<\/span> ( <span class=\"methodparam\"><span class=\"type\">Collator<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $attribute<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "collator_set_strength": [
        "Set collation strength",
        "<span class=\"methodname\">collator_set_strength<\/span> ( <span class=\"methodparam\"><span class=\"type\">Collator<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $strength<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "collator_sort": [
        "Sort array using specified collator",
        "<span class=\"methodname\">collator_sort<\/span> ( <span class=\"methodparam\"><span class=\"type\">Collator<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = Collator::SORT_REGULAR<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "collator_sort_with_sort_keys": [
        "Sort array using specified collator and sort keys",
        "<span class=\"methodname\">collator_sort_with_sort_keys<\/span> ( <span class=\"methodparam\"><span class=\"type\">Collator<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "Collectable": [
        "Represents a garbage-collectable object."
    ],
    "com": [
        "The com class allows you to instantiate an OLE compatible COM object and call its methods and access its properties.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">com::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $module_name<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $server_name<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $codepage<span class=\"initializer\"> = CP_ACP<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $typelib<span class=\"initializer\"> = \"\"<\/span><\/span> )"
    ],
    "com_create_guid": [
        "Generate a globally unique identifier (GUID)",
        "<span class=\"methodname\">com_create_guid<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "com_event_sink": [
        "Connect events from a COM object to a PHP object",
        "<span class=\"methodname\">com_event_sink<\/span> ( <span class=\"methodparam\"><span class=\"type\">variant<\/span> $variant<\/span> , <span class=\"methodparam\"><span class=\"type\">object<\/span> $sink_object<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $sink_interface<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "com_get_active_object": [
        "Returns a handle to an already running instance of a COM object",
        "<span class=\"methodname\">com_get_active_object<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $prog_id<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $codepage<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "com_load_typelib": [
        "Loads a Typelib",
        "<span class=\"methodname\">com_load_typelib<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $typelib<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $case_insensitive<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "com_message_pump": [
        "Process COM messages, sleeping for up to timeoutms milliseconds",
        "<span class=\"methodname\">com_message_pump<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout_milliseconds<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "com_print_typeinfo": [
        "Print out a PHP class definition for a dispatchable interface",
        "<span class=\"methodname\">com_print_typeinfo<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">variant<\/span>|<span class=\"type\">string<\/span><\/span> $variant<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $dispatch_interface<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $display_sink<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "compact": [
        "Create array containing variables and their values",
        "<span class=\"methodname\">compact<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $var_name<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> ...$var_names<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "COMPersistHelper": [
        "COMPersistHelper improves the interoperability of COM and PHP with regard to the php.ini directive open_basedir, and stream resources.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">COMPersistHelper::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">variant<\/span>|<span class=\"type\">null<\/span><\/span> $variant<span class=\"initializer\"> = null<\/span><\/span> )"
    ],
    "CompileError": [
        "CompileError is thrown for some compilation errors, which formerly issued a fatal error."
    ],
    "Cond": [
        "The static methods contained in the Cond class provide direct access to Posix Condition Variables."
    ],
    "connection_aborted": [
        "Check whether client disconnected",
        "<span class=\"methodname\">connection_aborted<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "connection_status": [
        "Returns connection status bitfield",
        "<span class=\"methodname\">connection_status<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "constant": [
        "Returns the value of a constant",
        "<span class=\"methodname\">constant<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "convert_cyr_string": [
        "Convert from one Cyrillic character set to another",
        "<span class=\"methodname\">convert_cyr_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $str<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $from<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $to<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "convert_uudecode": [
        "Decode a uuencoded string",
        "<span class=\"methodname\">convert_uudecode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "convert_uuencode": [
        "Uuencode a string",
        "<span class=\"methodname\">convert_uuencode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "copy": [
        "Copies file",
        "<span class=\"methodname\">copy<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $source<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dest<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cos": [
        "Cosine",
        "<span class=\"methodname\">cos<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "cosh": [
        "Hyperbolic cosine",
        "<span class=\"methodname\">cosh<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "count": [
        "Count all elements in an array, or something in an object",
        "<span class=\"methodname\">count<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">Countable<\/span>|<span class=\"type\">array<\/span><\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = COUNT_NORMAL<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "count_chars": [
        "Return information about characters used in a string",
        "<span class=\"methodname\">count_chars<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span>"
    ],
    "Countable": [
        "Classes implementing Countable can be used with the count() function."
    ],
    "crc32": [
        "Calculates the crc32 polynomial of a string",
        "<span class=\"methodname\">crc32<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "create_function": [
        "Create an anonymous (lambda-style) function",
        "<span class=\"methodname\">create_function<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $args<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $code<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "crypt": [
        "One-way string hashing",
        "<span class=\"methodname\">crypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $salt<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ctype_alnum": [
        "Check for alphanumeric character(s)",
        "<span class=\"methodname\">ctype_alnum<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $text<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ctype_alpha": [
        "Check for alphabetic character(s)",
        "<span class=\"methodname\">ctype_alpha<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $text<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ctype_cntrl": [
        "Check for control character(s)",
        "<span class=\"methodname\">ctype_cntrl<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $text<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ctype_digit": [
        "Check for numeric character(s)",
        "<span class=\"methodname\">ctype_digit<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $text<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ctype_graph": [
        "Check for any printable character(s) except space",
        "<span class=\"methodname\">ctype_graph<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $text<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ctype_lower": [
        "Check for lowercase character(s)",
        "<span class=\"methodname\">ctype_lower<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $text<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ctype_print": [
        "Check for printable character(s)",
        "<span class=\"methodname\">ctype_print<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $text<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ctype_punct": [
        "Check for any printable character which is not whitespace or an\n   alphanumeric character",
        "<span class=\"methodname\">ctype_punct<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $text<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ctype_space": [
        "Check for whitespace character(s)",
        "<span class=\"methodname\">ctype_space<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $text<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ctype_upper": [
        "Check for uppercase character(s)",
        "<span class=\"methodname\">ctype_upper<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $text<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ctype_xdigit": [
        "Check for character(s) representing a hexadecimal digit",
        "<span class=\"methodname\">ctype_xdigit<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $text<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_affected_rows": [
        "Return the number of rows affected by the last SQL statement",
        "<span class=\"methodname\">cubrid_affected_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>",
        "<span class=\"methodname\">cubrid_affected_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $req_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "cubrid_bind": [
        "Bind variables to a prepared statement as parameters",
        "<span class=\"methodname\">cubrid_bind<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $req_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $bind_index<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $bind_value<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $bind_value_type<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_client_encoding": [
        "Return the current CUBRID connection charset",
        "<span class=\"methodname\">cubrid_client_encoding<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_close": [
        "Close CUBRID connection",
        "<span class=\"methodname\">cubrid_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_close_prepare": [
        "Close the request handle",
        "<span class=\"methodname\">cubrid_close_prepare<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $req_identifier<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_close_request": [
        "Close the request handle",
        "<span class=\"methodname\">cubrid_close_request<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $req_identifier<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_col_get": [
        "Get contents of collection type column using OID",
        "<span class=\"methodname\">cubrid_col_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $oid<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $attr_name<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "cubrid_col_size": [
        "Get the number of elements in collection type column using OID",
        "<span class=\"methodname\">cubrid_col_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $oid<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $attr_name<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "cubrid_column_names": [
        "Get the column names in result",
        "<span class=\"methodname\">cubrid_column_names<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $req_identifier<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "cubrid_column_types": [
        "Get column types in result",
        "<span class=\"methodname\">cubrid_column_types<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $req_identifier<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "cubrid_commit": [
        "Commit a transaction",
        "<span class=\"methodname\">cubrid_commit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_connect": [
        "Open a connection to a CUBRID Server",
        "<span class=\"methodname\">cubrid_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $host<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $port<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dbname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $userid<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $passwd<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $new_link<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "cubrid_connect_with_url": [
        "Establish the environment for connecting to CUBRID server",
        "<span class=\"methodname\">cubrid_connect_with_url<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $conn_url<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $userid<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $passwd<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $new_link<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "cubrid_current_oid": [
        "Get OID of the current cursor location",
        "<span class=\"methodname\">cubrid_current_oid<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $req_identifier<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_data_seek": [
        "Move the internal row pointer of the CUBRID result",
        "<span class=\"methodname\">cubrid_data_seek<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row_number<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_db_name": [
        "Get db name from results of cubrid_list_dbs",
        "<span class=\"methodname\">cubrid_db_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $index<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_disconnect": [
        "Close a database connection",
        "<span class=\"methodname\">cubrid_disconnect<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_drop": [
        "Delete an instance using OID",
        "<span class=\"methodname\">cubrid_drop<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $oid<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_errno": [
        "Return the numerical value of the error message from previous CUBRID operation",
        "<span class=\"methodname\">cubrid_errno<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "cubrid_error": [
        "Get the error message",
        "<span class=\"methodname\">cubrid_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_error_code": [
        "Get error code for the most recent function call",
        "<span class=\"methodname\">cubrid_error_code<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "cubrid_error_code_facility": [
        "Get the facility code of error",
        "<span class=\"methodname\">cubrid_error_code_facility<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "cubrid_error_msg": [
        "Get last error message for the most recent function call",
        "<span class=\"methodname\">cubrid_error_msg<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_execute": [
        "Execute a prepared SQL statement",
        "<span class=\"methodname\">cubrid_execute<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $sql<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">resource<\/span>",
        "<span class=\"methodname\">cubrid_execute<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $request_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_fetch": [
        "Fetch the next row from a result set",
        "<span class=\"methodname\">cubrid_fetch<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = CUBRID_BOTH<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "cubrid_fetch_array": [
        "Fetch a result row as an associative array, a numeric array, or both",
        "<span class=\"methodname\">cubrid_fetch_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = CUBRID_BOTH<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "cubrid_fetch_assoc": [
        "Return the associative array that corresponds to the fetched row",
        "<span class=\"methodname\">cubrid_fetch_assoc<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "cubrid_fetch_field": [
        "Get column information from a result and return as an object",
        "<span class=\"methodname\">cubrid_fetch_field<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "cubrid_fetch_lengths": [
        "Return an array with the lengths of the values of each field from the current row",
        "<span class=\"methodname\">cubrid_fetch_lengths<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "cubrid_fetch_object": [
        "Fetch the next row and return it as an object",
        "<span class=\"methodname\">cubrid_fetch_object<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $class_name<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $params<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "cubrid_fetch_row": [
        "Return a numerical array with the values of the current row",
        "<span class=\"methodname\">cubrid_fetch_row<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "cubrid_field_flags": [
        "Return a string with the flags of the given field offset",
        "<span class=\"methodname\">cubrid_field_flags<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_field_len": [
        "Get the maximum length of the specified field",
        "<span class=\"methodname\">cubrid_field_len<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "cubrid_field_name": [
        "Return the name of the specified field index",
        "<span class=\"methodname\">cubrid_field_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_field_seek": [
        "Move the result set cursor to the specified field offset",
        "<span class=\"methodname\">cubrid_field_seek<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_field_table": [
        "Return the name of the table of the specified field",
        "<span class=\"methodname\">cubrid_field_table<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_field_type": [
        "Return the type of the column corresponding to the given field offset",
        "<span class=\"methodname\">cubrid_field_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_free_result": [
        "Free the memory occupied by the result data",
        "<span class=\"methodname\">cubrid_free_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $req_identifier<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_get": [
        "Get a column using OID",
        "<span class=\"methodname\">cubrid_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $oid<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $attr<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "cubrid_get_autocommit": [
        "Get auto-commit mode of the connection",
        "<span class=\"methodname\">cubrid_get_autocommit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_get_charset": [
        "Return the current CUBRID connection charset",
        "<span class=\"methodname\">cubrid_get_charset<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_get_class_name": [
        "Get the class name using OID",
        "<span class=\"methodname\">cubrid_get_class_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $oid<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_get_client_info": [
        "Return the client library version",
        "<span class=\"methodname\">cubrid_get_client_info<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_get_db_parameter": [
        "Returns the CUBRID database parameters",
        "<span class=\"methodname\">cubrid_get_db_parameter<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "cubrid_get_query_timeout": [
        "Get the query timeout value of the request",
        "<span class=\"methodname\">cubrid_get_query_timeout<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $req_identifier<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "cubrid_get_server_info": [
        "Return the CUBRID server version",
        "<span class=\"methodname\">cubrid_get_server_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_insert_id": [
        "Return the ID generated for the last updated AUTO_INCREMENT column",
        "<span class=\"methodname\">cubrid_insert_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_is_instance": [
        "Check whether the instance pointed by OID exists",
        "<span class=\"methodname\">cubrid_is_instance<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $oid<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "cubrid_list_dbs": [
        "Return an array with the list of all existing CUBRID databases",
        "<span class=\"methodname\">cubrid_list_dbs<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "cubrid_load_from_glo": [
        "Read data from a GLO instance and save it in a file",
        "<span class=\"methodname\">cubrid_load_from_glo<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $oid<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $file_name<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "cubrid_lob2_bind": [
        "Bind a lob object or a string as a lob object to a prepared statement as parameters",
        "<span class=\"methodname\">cubrid_lob2_bind<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $req_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $bind_index<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $bind_value<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $bind_value_type<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_lob2_close": [
        "Close LOB object",
        "<span class=\"methodname\">cubrid_lob2_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $lob_identifier<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_lob2_export": [
        "Export the lob object to a file",
        "<span class=\"methodname\">cubrid_lob2_export<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $lob_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $file_name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_lob2_import": [
        "Import BLOB\/CLOB data from a file",
        "<span class=\"methodname\">cubrid_lob2_import<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $lob_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $file_name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_lob2_new": [
        "Create a lob object",
        "<span class=\"methodname\">cubrid_lob2_new<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $type<span class=\"initializer\"> = \"BLOB\"<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "cubrid_lob2_read": [
        "Read from BLOB\/CLOB data",
        "<span class=\"methodname\">cubrid_lob2_read<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $lob_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $len<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_lob2_seek": [
        "Move the cursor of a lob object",
        "<span class=\"methodname\">cubrid_lob2_seek<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $lob_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $origin<span class=\"initializer\"> = CUBRID_CURSOR_CURRENT<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_lob2_seek64": [
        "Move the cursor of a lob object",
        "<span class=\"methodname\">cubrid_lob2_seek64<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $lob_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $origin<span class=\"initializer\"> = CUBRID_CURSOR_CURRENT<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_lob2_size": [
        "Get a lob object's size",
        "<span class=\"methodname\">cubrid_lob2_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $lob_identifier<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "cubrid_lob2_size64": [
        "Get a lob object's size",
        "<span class=\"methodname\">cubrid_lob2_size64<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $lob_identifier<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_lob2_tell": [
        "Tell the cursor position of the LOB object",
        "<span class=\"methodname\">cubrid_lob2_tell<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $lob_identifier<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "cubrid_lob2_tell64": [
        "Tell the cursor position of the LOB object",
        "<span class=\"methodname\">cubrid_lob2_tell64<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $lob_identifier<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_lob2_write": [
        "Write to a lob object",
        "<span class=\"methodname\">cubrid_lob2_write<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $lob_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $buf<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_lob_close": [
        "Close BLOB\/CLOB data",
        "<span class=\"methodname\">cubrid_lob_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $lob_identifier_array<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_lob_export": [
        "Export BLOB\/CLOB data to file",
        "<span class=\"methodname\">cubrid_lob_export<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $lob_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path_name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_lob_get": [
        "Get BLOB\/CLOB data",
        "<span class=\"methodname\">cubrid_lob_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $sql<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "cubrid_lob_send": [
        "Read BLOB\/CLOB data and send straight to browser",
        "<span class=\"methodname\">cubrid_lob_send<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $lob_identifier<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_lob_size": [
        "Get BLOB\/CLOB data size",
        "<span class=\"methodname\">cubrid_lob_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $lob_identifier<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_lock_read": [
        "Set a read lock on the given OID",
        "<span class=\"methodname\">cubrid_lock_read<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $oid<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_lock_write": [
        "Set a write lock on the given OID",
        "<span class=\"methodname\">cubrid_lock_write<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $oid<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_move_cursor": [
        "Move the cursor in the result",
        "<span class=\"methodname\">cubrid_move_cursor<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $req_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $origin<span class=\"initializer\"> = CUBRID_CURSOR_CURRENT<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_new_glo": [
        "Create a glo instance",
        "<span class=\"methodname\">cubrid_new_glo<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $class_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $file_name<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_next_result": [
        "Get result of next query when executing multiple SQL statements",
        "<span class=\"methodname\">cubrid_next_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_num_cols": [
        "Return the number of columns in the result set",
        "<span class=\"methodname\">cubrid_num_cols<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "cubrid_num_fields": [
        "Return the number of columns in the result set",
        "<span class=\"methodname\">cubrid_num_fields<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "cubrid_num_rows": [
        "Get the number of rows in the result set",
        "<span class=\"methodname\">cubrid_num_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "cubrid_pconnect": [
        "Open a persistent connection to a CUBRID server",
        "<span class=\"methodname\">cubrid_pconnect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $host<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $port<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dbname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $userid<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $passwd<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "cubrid_pconnect_with_url": [
        "Open a persistent connection to CUBRID server",
        "<span class=\"methodname\">cubrid_pconnect_with_url<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $conn_url<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $userid<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $passwd<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "cubrid_ping": [
        "Ping a server connection or reconnect if there is no connection",
        "<span class=\"methodname\">cubrid_ping<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_prepare": [
        "Prepare a SQL statement for execution",
        "<span class=\"methodname\">cubrid_prepare<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $prepare_stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "cubrid_put": [
        "Update a column using OID",
        "<span class=\"methodname\">cubrid_put<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $oid<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $attr<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_query": [
        "Send a CUBRID query",
        "<span class=\"methodname\">cubrid_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "cubrid_real_escape_string": [
        "Escape special characters in a string for use in an SQL statement",
        "<span class=\"methodname\">cubrid_real_escape_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $unescaped_string<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_result": [
        "Return the value of a specific field in a specific row",
        "<span class=\"methodname\">cubrid_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $field<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "cubrid_rollback": [
        "Roll back a transaction",
        "<span class=\"methodname\">cubrid_rollback<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_save_to_glo": [
        "Save requested file in a GLO instance",
        "<span class=\"methodname\">cubrid_save_to_glo<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $oid<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $file_name<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "cubrid_schema": [
        "Get the requested schema information",
        "<span class=\"methodname\">cubrid_schema<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $schema_type<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $class_name<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $attr_name<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "cubrid_send_glo": [
        "Read data from glo and send it to std output",
        "<span class=\"methodname\">cubrid_send_glo<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $oid<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "cubrid_seq_drop": [
        "Delete an element from sequence type column using OID",
        "<span class=\"methodname\">cubrid_seq_drop<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $oid<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $attr_name<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $index<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_seq_insert": [
        "Insert an element to a sequence type column using OID",
        "<span class=\"methodname\">cubrid_seq_insert<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $oid<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $attr_name<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $index<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $seq_element<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_seq_put": [
        "Update the element value of sequence type column using OID",
        "<span class=\"methodname\">cubrid_seq_put<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $oid<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $attr_name<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $index<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $seq_element<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_set_add": [
        "Insert a single element to set type column using OID",
        "<span class=\"methodname\">cubrid_set_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $oid<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $attr_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $set_element<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_set_autocommit": [
        "Set autocommit mode of the connection",
        "<span class=\"methodname\">cubrid_set_autocommit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $mode<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_set_db_parameter": [
        "Sets the CUBRID database parameters",
        "<span class=\"methodname\">cubrid_set_db_parameter<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $param_type<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $param_value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_set_drop": [
        "Delete an element from set type column using OID",
        "<span class=\"methodname\">cubrid_set_drop<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $oid<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $attr_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $set_element<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_set_query_timeout": [
        "Set the timeout time of query execution",
        "<span class=\"methodname\">cubrid_set_query_timeout<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $req_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "cubrid_unbuffered_query": [
        "Perform a query without fetching the results into memory",
        "<span class=\"methodname\">cubrid_unbuffered_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "cubrid_version": [
        "Get the CUBRID PHP module's version",
        "<span class=\"methodname\">cubrid_version<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "curl_close": [
        "Close a cURL session",
        "<span class=\"methodname\">curl_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlHandle<\/span> $handle<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "curl_copy_handle": [
        "Copy a cURL handle along with all of its preferences",
        "<span class=\"methodname\">curl_copy_handle<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlHandle<\/span> $handle<\/span> ) : <span class=\"type\"><span class=\"type\">CurlHandle<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "curl_errno": [
        "Return the last error number",
        "<span class=\"methodname\">curl_errno<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlHandle<\/span> $handle<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "curl_error": [
        "Return a string containing the last error for the current session",
        "<span class=\"methodname\">curl_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlHandle<\/span> $handle<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "curl_escape": [
        "URL encodes the given string",
        "<span class=\"methodname\">curl_escape<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlHandle<\/span> $handle<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "curl_exec": [
        "Perform a cURL session",
        "<span class=\"methodname\">curl_exec<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlHandle<\/span> $handle<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "curl_file_create": [
        "Create a CURLFile object",
        "<span class=\"methodname\">curl_file_create<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $mime_type<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $posted_filename<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">CURLFile<\/span>"
    ],
    "curl_getinfo": [
        "Get information regarding a specific transfer",
        "<span class=\"methodname\">curl_getinfo<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlHandle<\/span> $handle<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $option<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "curl_init": [
        "Initialize a cURL session",
        "<span class=\"methodname\">curl_init<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $url<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">CurlHandle<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "curl_multi_add_handle": [
        "Add a normal cURL handle to a cURL multi handle",
        "<span class=\"methodname\">curl_multi_add_handle<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlMultiHandle<\/span> $multi_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">CurlHandle<\/span> $handle<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "curl_multi_close": [
        "Close a set of cURL handles",
        "<span class=\"methodname\">curl_multi_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlMultiHandle<\/span> $multi_handle<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "curl_multi_errno": [
        "Return the last multi curl error number",
        "<span class=\"methodname\">curl_multi_errno<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlMultiHandle<\/span> $multi_handle<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "curl_multi_exec": [
        "Run the sub-connections of the current cURL handle",
        "<span class=\"methodname\">curl_multi_exec<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlMultiHandle<\/span> $multi_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$still_running<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "curl_multi_getcontent": [
        "Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set",
        "<span class=\"methodname\">curl_multi_getcontent<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlHandle<\/span> $handle<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "curl_multi_info_read": [
        "Get information about the current transfers",
        "<span class=\"methodname\">curl_multi_info_read<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlMultiHandle<\/span> $multi_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$queued_messages<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "curl_multi_init": [
        "Returns a new cURL multi handle",
        "<span class=\"methodname\">curl_multi_init<\/span> ( ) : <span class=\"type\">CurlMultiHandle<\/span>"
    ],
    "curl_multi_remove_handle": [
        "Remove a multi handle from a set of cURL handles",
        "<span class=\"methodname\">curl_multi_remove_handle<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlMultiHandle<\/span> $multi_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">CurlHandle<\/span> $handle<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "curl_multi_select": [
        "Wait for activity on any curl_multi connection",
        "<span class=\"methodname\">curl_multi_select<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlMultiHandle<\/span> $multi_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $timeout<span class=\"initializer\"> = 1.0<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "curl_multi_setopt": [
        "Set an option for the cURL multi handle",
        "<span class=\"methodname\">curl_multi_setopt<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlMultiHandle<\/span> $multi_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "curl_multi_strerror": [
        "Return string describing error code",
        "<span class=\"methodname\">curl_multi_strerror<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $error_code<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "curl_pause": [
        "Pause and unpause a connection",
        "<span class=\"methodname\">curl_pause<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlHandle<\/span> $handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "curl_reset": [
        "Reset all options of a libcurl session handle",
        "<span class=\"methodname\">curl_reset<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlHandle<\/span> $handle<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "curl_setopt": [
        "Set an option for a cURL transfer",
        "<span class=\"methodname\">curl_setopt<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlHandle<\/span> $handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "curl_setopt_array": [
        "Set multiple options for a cURL transfer",
        "<span class=\"methodname\">curl_setopt_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlHandle<\/span> $handle<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "curl_share_close": [
        "Close a cURL share handle",
        "<span class=\"methodname\">curl_share_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlShareHandle<\/span> $share_handle<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "curl_share_errno": [
        "Return the last share curl error number",
        "<span class=\"methodname\">curl_share_errno<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlShareHandle<\/span> $share_handle<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "curl_share_init": [
        "Initialize a cURL share handle",
        "<span class=\"methodname\">curl_share_init<\/span> ( ) : <span class=\"type\">CurlShareHandle<\/span>"
    ],
    "curl_share_setopt": [
        "Set an option for a cURL share handle",
        "<span class=\"methodname\">curl_share_setopt<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlShareHandle<\/span> $share_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "curl_share_strerror": [
        "Return string describing the given error code",
        "<span class=\"methodname\">curl_share_strerror<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $error_code<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "curl_strerror": [
        "Return string describing the given error code",
        "<span class=\"methodname\">curl_strerror<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $error_code<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "curl_unescape": [
        "Decodes the given URL encoded string",
        "<span class=\"methodname\">curl_unescape<\/span> ( <span class=\"methodparam\"><span class=\"type\">CurlHandle<\/span> $handle<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "curl_version": [
        "Gets cURL version information",
        "<span class=\"methodname\">curl_version<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "CURLFile": [
        "CURLFile should be used to upload a file with CURLOPT_POSTFIELDS.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">CURLFile::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $mime_type<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $posted_filename<span class=\"initializer\"> = null<\/span><\/span> )"
    ],
    "CurlHandle": [
        "A fully opaque class which replaces curl resources as of PHP 8.0.0."
    ],
    "CurlMultiHandle": [
        "A fully opaque class which replaces curl_multi resources as of PHP 8.0.0."
    ],
    "CurlShareHandle": [
        "A fully opaque class which replaces curl_share resources as of PHP 8.0.0."
    ],
    "current": [
        "Return the current element in an array",
        "<span class=\"methodname\">current<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">object<\/span><\/span> $array<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "date": [
        "Format a local time\/date",
        "<span class=\"methodname\">date<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $timestamp<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "date_add": [
        "Adds an amount of days, months, years, hours, minutes and seconds to a\n   DateTime object",
        "<span class=\"methodname\">date_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTime<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">DateInterval<\/span> $interval<\/span> ) : <span class=\"type\">DateTime<\/span>"
    ],
    "date_create": [
        "Returns new DateTime object",
        "<span class=\"methodname\">date_create<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $datetime<span class=\"initializer\"> = \"now\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">DateTimeZone<\/span>|<span class=\"type\">null<\/span><\/span> $timezone<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">DateTime<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "date_create_from_format": [
        "Parses a time string according to a specified format",
        "<span class=\"methodname\">date_create_from_format<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $datetime<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">DateTimeZone<\/span>|<span class=\"type\">null<\/span><\/span> $timezone<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">DateTime<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "date_create_immutable": [
        "Returns new DateTimeImmutable object",
        "<span class=\"methodname\">date_create_immutable<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $datetime<span class=\"initializer\"> = \"now\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">DateTimeZone<\/span>|<span class=\"type\">null<\/span><\/span> $timezone<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">DateTimeImmutable<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "date_create_immutable_from_format": [
        "Parses a time string according to a specified format",
        "<span class=\"methodname\">date_create_immutable_from_format<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $datetime<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">DateTimeZone<\/span>|<span class=\"type\">null<\/span><\/span> $timezone<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">DateTimeImmutable<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "date_date_set": [
        "Sets the date",
        "<span class=\"methodname\">date_date_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTime<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $year<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $month<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $day<\/span> ) : <span class=\"type\">DateTime<\/span>"
    ],
    "date_default_timezone_get": [
        "Gets the default timezone used by all date\/time functions in a script",
        "<span class=\"methodname\">date_default_timezone_get<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "date_default_timezone_set": [
        "Sets the default timezone used by all date\/time functions in a script",
        "<span class=\"methodname\">date_default_timezone_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $timezoneId<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "date_diff": [
        "Returns the difference between two DateTime objects",
        "<span class=\"methodname\">date_diff<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTimeInterface<\/span> $baseObject<\/span> , <span class=\"methodparam\"><span class=\"type\">DateTimeInterface<\/span> $targetObject<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $absolute<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">DateInterval<\/span>"
    ],
    "date_format": [
        "Returns date formatted according to given format",
        "<span class=\"methodname\">date_format<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTimeInterface<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "date_get_last_errors": [
        "Returns the warnings and errors",
        "<span class=\"methodname\">date_get_last_errors<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "date_isodate_set": [
        "Sets the ISO date",
        "<span class=\"methodname\">date_isodate_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTime<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $year<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $week<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dayOfWeek<span class=\"initializer\"> = 1<\/span><\/span> ) : <span class=\"type\">DateTime<\/span>"
    ],
    "date_modify": [
        "Alters the timestamp",
        "<span class=\"methodname\">date_modify<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTime<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $modifier<\/span> ) : <span class=\"type\"><span class=\"type\">DateTime<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "date_offset_get": [
        "Returns the timezone offset",
        "<span class=\"methodname\">date_offset_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTimeInterface<\/span> $object<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "date_parse": [
        "Returns associative array with detailed info about given date\/time",
        "<span class=\"methodname\">date_parse<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $datetime<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "date_parse_from_format": [
        "Get info about given date formatted according to the specified format",
        "<span class=\"methodname\">date_parse_from_format<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $datetime<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "date_sub": [
        "Subtracts an amount of days, months, years, hours, minutes and seconds from\n   a DateTime object",
        "<span class=\"methodname\">date_sub<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTime<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">DateInterval<\/span> $interval<\/span> ) : <span class=\"type\">DateTime<\/span>"
    ],
    "date_sun_info": [
        "Returns an array with information about sunset\/sunrise and twilight begin\/end",
        "<span class=\"methodname\">date_sun_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $timestamp<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $latitude<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $longitude<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "date_sunrise": [
        "Returns time of sunrise for a given day and location",
        "<span class=\"methodname\">date_sunrise<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $timestamp<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $returnFormat<span class=\"initializer\"> = SUNFUNCS_RET_STRING<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">float<\/span>|<span class=\"type\">null<\/span><\/span> $latitude<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">float<\/span>|<span class=\"type\">null<\/span><\/span> $longitude<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">float<\/span>|<span class=\"type\">null<\/span><\/span> $zenith<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">float<\/span>|<span class=\"type\">null<\/span><\/span> $utcOffset<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">float<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "date_sunset": [
        "Returns time of sunset for a given day and location",
        "<span class=\"methodname\">date_sunset<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $timestamp<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $returnFormat<span class=\"initializer\"> = SUNFUNCS_RET_STRING<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">float<\/span>|<span class=\"type\">null<\/span><\/span> $latitude<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">float<\/span>|<span class=\"type\">null<\/span><\/span> $longitude<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">float<\/span>|<span class=\"type\">null<\/span><\/span> $zenith<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">float<\/span>|<span class=\"type\">null<\/span><\/span> $utcOffset<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">float<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "date_time_set": [
        "Sets the time",
        "<span class=\"methodname\">date_time_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTime<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $hour<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $minute<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $second<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $microsecond<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">DateTime<\/span>"
    ],
    "date_timestamp_get": [
        "Gets the Unix timestamp",
        "<span class=\"methodname\">date_timestamp_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTimeInterface<\/span> $object<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "date_timestamp_set": [
        "Sets the date and time based on an Unix timestamp",
        "<span class=\"methodname\">date_timestamp_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTime<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timestamp<\/span> ) : <span class=\"type\">DateTime<\/span>"
    ],
    "date_timezone_get": [
        "Return time zone relative to given DateTime",
        "<span class=\"methodname\">date_timezone_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTimeInterface<\/span> $object<\/span> ) : <span class=\"type\"><span class=\"type\">DateTimeZone<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "date_timezone_set": [
        "Sets the time zone for the DateTime object",
        "<span class=\"methodname\">date_timezone_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTime<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">DateTimeZone<\/span> $timezone<\/span> ) : <span class=\"type\">DateTime<\/span>"
    ],
    "datefmt_create": [
        "Create a date formatter",
        "<span class=\"methodname\">datefmt_create<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $locale<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dateType<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeType<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">IntlTimeZone<\/span>|<span class=\"type\">DateTimeZone<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $timezone<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">IntlCalendar<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $calendar<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">IntlDateFormatter<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "datefmt_format": [
        "Format the date\/time value as a string",
        "<span class=\"methodname\">datefmt_format<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlDateFormatter<\/span> $formatter<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">IntlCalendar<\/span>|<span class=\"type\">DateTimeInterface<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">float<\/span><\/span> $datetime<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "datefmt_format_object": [
        "Formats an object",
        "<span class=\"methodname\">datefmt_format_object<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">IntlCalendar<\/span>|<span class=\"type\">DateTimeInterface<\/span><\/span> $datetime<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $format<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $locale<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "datefmt_get_calendar": [
        "Get the calendar type used for the IntlDateFormatter",
        "<span class=\"methodname\">datefmt_get_calendar<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlDateFormatter<\/span> $formatter<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "datefmt_get_calendar_object": [
        "Get copy of formatter\u02bcs calendar object",
        "<span class=\"methodname\">datefmt_get_calendar_object<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlDateFormatter<\/span> $formatter<\/span> ) : <span class=\"type\"><span class=\"type\">IntlCalendar<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "datefmt_get_datetype": [
        "Get the datetype used for the IntlDateFormatter",
        "<span class=\"methodname\">datefmt_get_datetype<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlDateFormatter<\/span> $formatter<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "datefmt_get_error_code": [
        "Get the error code from last operation",
        "<span class=\"methodname\">datefmt_get_error_code<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlDateFormatter<\/span> $formatter<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "datefmt_get_error_message": [
        "Get the error text from the last operation",
        "<span class=\"methodname\">datefmt_get_error_message<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlDateFormatter<\/span> $formatter<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "datefmt_get_locale": [
        "Get the locale used by formatter",
        "<span class=\"methodname\">datefmt_get_locale<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlDateFormatter<\/span> $formatter<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = ULOC_ACTUAL_LOCALE<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "datefmt_get_pattern": [
        "Get the pattern used for the IntlDateFormatter",
        "<span class=\"methodname\">datefmt_get_pattern<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlDateFormatter<\/span> $formatter<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "datefmt_get_timetype": [
        "Get the timetype used for the IntlDateFormatter",
        "<span class=\"methodname\">datefmt_get_timetype<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlDateFormatter<\/span> $formatter<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "datefmt_get_timezone": [
        "Get formatter\u02bcs timezone",
        "<span class=\"methodname\">datefmt_get_timezone<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlDateFormatter<\/span> $formatter<\/span> ) : <span class=\"type\"><span class=\"type\">IntlTimeZone<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "datefmt_get_timezone_id": [
        "Get the timezone-id used for the IntlDateFormatter",
        "<span class=\"methodname\">datefmt_get_timezone_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlDateFormatter<\/span> $formatter<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "datefmt_is_lenient": [
        "Get the lenient used for the IntlDateFormatter",
        "<span class=\"methodname\">datefmt_is_lenient<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlDateFormatter<\/span> $formatter<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "datefmt_localtime": [
        "Parse string to a field-based time value",
        "<span class=\"methodname\">datefmt_localtime<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlDateFormatter<\/span> $formatter<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$offset<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "datefmt_parse": [
        "Parse string to a timestamp value",
        "<span class=\"methodname\">datefmt_parse<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlDateFormatter<\/span> $formatter<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$offset<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">float<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "datefmt_set_calendar": [
        "Sets the calendar type used by the formatter",
        "<span class=\"methodname\">datefmt_set_calendar<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlDateFormatter<\/span> $formatter<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">IntlCalendar<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $calendar<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "datefmt_set_lenient": [
        "Set the leniency of the parser",
        "<span class=\"methodname\">datefmt_set_lenient<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlDateFormatter<\/span> $formatter<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $lenient<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "datefmt_set_pattern": [
        "Set the pattern used for the IntlDateFormatter",
        "<span class=\"methodname\">datefmt_set_pattern<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlDateFormatter<\/span> $formatter<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "datefmt_set_timezone": [
        "Sets formatter\u02bcs timezone",
        "<span class=\"methodname\">datefmt_set_timezone<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlDateFormatter<\/span> $formatter<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">IntlTimeZone<\/span>|<span class=\"type\">DateTimeZone<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $timezone<\/span> ) : <span class=\"type\"><span class=\"type\">bool<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "DateInterval": [
        "Represents a date interval.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">DateInterval::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $duration<\/span> )"
    ],
    "DatePeriod": [
        "Represents a date period.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">DatePeriod::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTimeInterface<\/span> $start<\/span> , <span class=\"methodparam\"><span class=\"type\">DateInterval<\/span> $interval<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $recurrences<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> )",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">DatePeriod::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTimeInterface<\/span> $start<\/span> , <span class=\"methodparam\"><span class=\"type\">DateInterval<\/span> $interval<\/span> , <span class=\"methodparam\"><span class=\"type\">DateTimeInterface<\/span> $end<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> )",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">DatePeriod::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $isostr<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> )"
    ],
    "DateTime": [
        "This class behaves the same as DateTimeImmutable except objects are modified itself when modification methods such as DateTime::modify() are called.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">DateTime::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $datetime<span class=\"initializer\"> = \"now\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">DateTimeZone<\/span>|<span class=\"type\">null<\/span><\/span> $timezone<span class=\"initializer\"> = null<\/span><\/span> )"
    ],
    "DateTimeImmutable": [
        "Representation of date and time.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">DateTimeImmutable::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $datetime<span class=\"initializer\"> = \"now\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">DateTimeZone<\/span>|<span class=\"type\">null<\/span><\/span> $timezone<span class=\"initializer\"> = null<\/span><\/span> )"
    ],
    "DateTimeInterface": [
        "DateTimeInterface is meant so that both DateTime and DateTimeImmutable can be type hinted for. It is not possible to implement this interface with userland classes."
    ],
    "DateTimeZone": [
        "Representation of time zone.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">DateTimeZone::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $timezone<\/span> )"
    ],
    "db2_autocommit": [
        "Returns or sets the AUTOCOMMIT state for a database connection",
        "<span class=\"methodname\">db2_autocommit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $value<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "db2_bind_param": [
        "Binds a PHP variable to an SQL statement parameter",
        "<span class=\"methodname\">db2_bind_param<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $parameter_number<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $variable_name<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $parameter_type<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $data_type<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $precision<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $scale<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "db2_client_info": [
        "Returns an object with properties that describe the DB2 database client",
        "<span class=\"methodname\">db2_client_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "db2_close": [
        "Closes a database connection",
        "<span class=\"methodname\">db2_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "db2_column_privileges": [
        "Returns a result set listing the columns and associated privileges for a table",
        "<span class=\"methodname\">db2_column_privileges<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $qualifier<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $schema<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table-name<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $column-name<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "db2_columns": [
        "Returns a result set listing the columns and associated metadata for a table",
        "<span class=\"methodname\">db2_columns<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $qualifier<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $schema<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table-name<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $column-name<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "db2_commit": [
        "Commits a transaction",
        "<span class=\"methodname\">db2_commit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "db2_conn_error": [
        "Returns a string containing the SQLSTATE returned by the last connection attempt",
        "<span class=\"methodname\">db2_conn_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "db2_conn_errormsg": [
        "Returns the last connection error message and SQLCODE value",
        "<span class=\"methodname\">db2_conn_errormsg<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "db2_connect": [
        "Returns a connection to a database",
        "<span class=\"methodname\">db2_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "db2_cursor_type": [
        "Returns the cursor type used by a statement resource",
        "<span class=\"methodname\">db2_cursor_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "db2_escape_string": [
        "Used to escape certain characters",
        "<span class=\"methodname\">db2_escape_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string_literal<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "db2_exec": [
        "Executes an SQL statement directly",
        "<span class=\"methodname\">db2_exec<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "db2_execute": [
        "Executes a prepared SQL statement",
        "<span class=\"methodname\">db2_execute<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $parameters<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "db2_fetch_array": [
        "Returns an array, indexed by column position, representing a row in a result set",
        "<span class=\"methodname\">db2_fetch_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row_number<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "db2_fetch_assoc": [
        "Returns an array, indexed by column name, representing a row in a result set",
        "<span class=\"methodname\">db2_fetch_assoc<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row_number<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "db2_fetch_both": [
        "Returns an array, indexed by both column name and position, representing a row in a result set",
        "<span class=\"methodname\">db2_fetch_both<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row_number<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "db2_fetch_object": [
        "Returns an object with properties representing columns in the fetched row",
        "<span class=\"methodname\">db2_fetch_object<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row_number<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "db2_fetch_row": [
        "Sets the result set pointer to the next row or requested row",
        "<span class=\"methodname\">db2_fetch_row<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row_number<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "db2_field_display_size": [
        "Returns the maximum number of bytes required to display a column",
        "<span class=\"methodname\">db2_field_display_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $column<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "db2_field_name": [
        "Returns the name of the column in the result set",
        "<span class=\"methodname\">db2_field_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $column<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "db2_field_num": [
        "Returns the position of the named column in a result set",
        "<span class=\"methodname\">db2_field_num<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $column<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "db2_field_precision": [
        "Returns the precision of the indicated column in a result set",
        "<span class=\"methodname\">db2_field_precision<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $column<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "db2_field_scale": [
        "Returns the scale of the indicated column in a result set",
        "<span class=\"methodname\">db2_field_scale<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $column<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "db2_field_type": [
        "Returns the data type of the indicated column in a result set",
        "<span class=\"methodname\">db2_field_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $column<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "db2_field_width": [
        "Returns the width of the current value of the indicated column in a result set",
        "<span class=\"methodname\">db2_field_width<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $column<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "db2_foreign_keys": [
        "Returns a result set listing the foreign keys for a table",
        "<span class=\"methodname\">db2_foreign_keys<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $qualifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $schema<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table-name<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "db2_free_result": [
        "Frees resources associated with a result set",
        "<span class=\"methodname\">db2_free_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "db2_free_stmt": [
        "Frees resources associated with the indicated statement resource",
        "<span class=\"methodname\">db2_free_stmt<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "db2_get_option": [
        "Retrieves an option value for a statement resource or a connection resource",
        "<span class=\"methodname\">db2_get_option<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $resource<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $option<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "db2_last_insert_id": [
        "Returns the auto generated ID of the last insert query that successfully \n  executed on this connection",
        "<span class=\"methodname\">db2_last_insert_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $resource<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "db2_lob_read": [
        "Gets a user defined size of LOB files with each invocation",
        "<span class=\"methodname\">db2_lob_read<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $colnum<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "db2_next_result": [
        "Requests the next result set from a stored procedure",
        "<span class=\"methodname\">db2_next_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "db2_num_fields": [
        "Returns the number of fields contained in a result set",
        "<span class=\"methodname\">db2_num_fields<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "db2_num_rows": [
        "Returns the number of rows affected by an SQL statement",
        "<span class=\"methodname\">db2_num_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "db2_pclose": [
        "Closes a persistent database connection",
        "<span class=\"methodname\">db2_pclose<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $resource<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "db2_pconnect": [
        "Returns a persistent connection to a database",
        "<span class=\"methodname\">db2_pconnect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "db2_prepare": [
        "Prepares an SQL statement to be executed",
        "<span class=\"methodname\">db2_prepare<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "db2_primary_keys": [
        "Returns a result set listing primary keys for a table",
        "<span class=\"methodname\">db2_primary_keys<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $qualifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $schema<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table-name<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "db2_procedure_columns": [
        "Returns a result set listing stored procedure parameters",
        "<span class=\"methodname\">db2_procedure_columns<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $qualifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $schema<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $procedure<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $parameter<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "db2_procedures": [
        "Returns a result set listing the stored procedures registered in a database",
        "<span class=\"methodname\">db2_procedures<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $qualifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $schema<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $procedure<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "db2_result": [
        "Returns a single column from a row in the result set",
        "<span class=\"methodname\">db2_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $column<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "db2_rollback": [
        "Rolls back a transaction",
        "<span class=\"methodname\">db2_rollback<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "db2_server_info": [
        "Returns an object with properties that describe the DB2 database server",
        "<span class=\"methodname\">db2_server_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "db2_set_option": [
        "Set options for connection or statement resources",
        "<span class=\"methodname\">db2_set_option<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $resource<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "db2_special_columns": [
        "Returns a result set listing the unique row identifier columns for a table",
        "<span class=\"methodname\">db2_special_columns<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $qualifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $schema<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table_name<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $scope<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "db2_statistics": [
        "Returns a result set listing the index and statistics for a table",
        "<span class=\"methodname\">db2_statistics<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $qualifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $schema<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table-name<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $unique<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "db2_stmt_error": [
        "Returns a string containing the SQLSTATE returned by an SQL statement",
        "<span class=\"methodname\">db2_stmt_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "db2_stmt_errormsg": [
        "Returns a string containing the last SQL statement error message",
        "<span class=\"methodname\">db2_stmt_errormsg<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "db2_table_privileges": [
        "Returns a result set listing the tables and associated privileges in a database",
        "<span class=\"methodname\">db2_table_privileges<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $qualifier<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $schema<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table_name<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "db2_tables": [
        "Returns a result set listing the tables and associated metadata in a database",
        "<span class=\"methodname\">db2_tables<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $qualifier<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $schema<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table-name<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table-type<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "dba_close": [
        "Close a DBA database",
        "<span class=\"methodname\">dba_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $dba<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "dba_delete": [
        "Delete DBA entry specified by key",
        "<span class=\"methodname\">dba_delete<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $dba<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "dba_exists": [
        "Check whether key exists",
        "<span class=\"methodname\">dba_exists<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $dba<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "dba_fetch": [
        "Fetch data specified by key",
        "<span class=\"methodname\">dba_fetch<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $handle<\/span> ) : <span class=\"type\">string<\/span>",
        "<span class=\"methodname\">dba_fetch<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $skip<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $handle<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "dba_firstkey": [
        "Fetch first key",
        "<span class=\"methodname\">dba_firstkey<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $dba<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "dba_handlers": [
        "List all the handlers available",
        "<span class=\"methodname\">dba_handlers<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $full_info<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "dba_insert": [
        "Insert entry",
        "<span class=\"methodname\">dba_insert<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $dba<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "dba_key_split": [
        "Splits a key in string representation into array representation",
        "<span class=\"methodname\">dba_key_split<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span>|<span class=\"type\">null<\/span><\/span> $key<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "dba_list": [
        "List all open database files",
        "<span class=\"methodname\">dba_list<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "dba_nextkey": [
        "Fetch next key",
        "<span class=\"methodname\">dba_nextkey<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $dba<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "dba_open": [
        "Open database",
        "<span class=\"methodname\">dba_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $handler<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> ...$args<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "dba_optimize": [
        "Optimize database",
        "<span class=\"methodname\">dba_optimize<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $dba<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "dba_popen": [
        "Open database persistently",
        "<span class=\"methodname\">dba_popen<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $handler<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$args<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "dba_replace": [
        "Replace or insert entry",
        "<span class=\"methodname\">dba_replace<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $dba<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "dba_sync": [
        "Synchronize database",
        "<span class=\"methodname\">dba_sync<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $dba<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "dbase_add_record": [
        "Adds a record to a database",
        "<span class=\"methodname\">dbase_add_record<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $database<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $data<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "dbase_close": [
        "Closes a database",
        "<span class=\"methodname\">dbase_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $database<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "dbase_create": [
        "Creates a database",
        "<span class=\"methodname\">dbase_create<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $fields<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = DBASE_TYPE_DBASE<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "dbase_delete_record": [
        "Deletes a record from a database",
        "<span class=\"methodname\">dbase_delete_record<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $database<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $number<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "dbase_get_header_info": [
        "Gets the header info of a database",
        "<span class=\"methodname\">dbase_get_header_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $database<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "dbase_get_record": [
        "Gets a record from a database as an indexed array",
        "<span class=\"methodname\">dbase_get_record<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $database<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $number<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "dbase_get_record_with_names": [
        "Gets a record from a database as an associative array",
        "<span class=\"methodname\">dbase_get_record_with_names<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $database<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $number<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "dbase_numfields": [
        "Gets the number of fields of a database",
        "<span class=\"methodname\">dbase_numfields<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $database<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbase_numrecords": [
        "Gets the number of records in a database",
        "<span class=\"methodname\">dbase_numrecords<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $database<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbase_open": [
        "Opens a database",
        "<span class=\"methodname\">dbase_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "dbase_pack": [
        "Packs a database",
        "<span class=\"methodname\">dbase_pack<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $database<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "dbase_replace_record": [
        "Replaces a record in a database",
        "<span class=\"methodname\">dbase_replace_record<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $database<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $number<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "dbplus_add": [
        "Add a tuple to a relation",
        "<span class=\"methodname\">dbplus_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $tuple<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_aql": [
        "Perform AQL query",
        "<span class=\"methodname\">dbplus_aql<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $server<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dbpath<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "dbplus_chdir": [
        "Get\/Set database virtual current directory",
        "<span class=\"methodname\">dbplus_chdir<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $newdir<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "dbplus_close": [
        "Close a relation",
        "<span class=\"methodname\">dbplus_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "dbplus_curr": [
        "Get current tuple from relation",
        "<span class=\"methodname\">dbplus_curr<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$tuple<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_errcode": [
        "Get error string for given errorcode or last error",
        "<span class=\"methodname\">dbplus_errcode<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $errno<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "dbplus_errno": [
        "Get error code for last operation",
        "<span class=\"methodname\">dbplus_errno<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_find": [
        "Set a constraint on a relation",
        "<span class=\"methodname\">dbplus_find<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $constraints<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $tuple<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_first": [
        "Get first tuple from relation",
        "<span class=\"methodname\">dbplus_first<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$tuple<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_flush": [
        "Flush all changes made on a relation",
        "<span class=\"methodname\">dbplus_flush<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_freealllocks": [
        "Free all locks held by this client",
        "<span class=\"methodname\">dbplus_freealllocks<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_freelock": [
        "Release write lock on tuple",
        "<span class=\"methodname\">dbplus_freelock<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $tuple<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_freerlocks": [
        "Free all tuple locks on given relation",
        "<span class=\"methodname\">dbplus_freerlocks<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_getlock": [
        "Get a write lock on a tuple",
        "<span class=\"methodname\">dbplus_getlock<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $tuple<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_getunique": [
        "Get an id number unique to a relation",
        "<span class=\"methodname\">dbplus_getunique<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $uniqueid<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_info": [
        "Get information about a relation",
        "<span class=\"methodname\">dbplus_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$result<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_last": [
        "Get last tuple from relation",
        "<span class=\"methodname\">dbplus_last<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$tuple<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_lockrel": [
        "Request write lock on relation",
        "<span class=\"methodname\">dbplus_lockrel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_next": [
        "Get next tuple from relation",
        "<span class=\"methodname\">dbplus_next<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$tuple<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_open": [
        "Open relation file",
        "<span class=\"methodname\">dbplus_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "dbplus_prev": [
        "Get previous tuple from relation",
        "<span class=\"methodname\">dbplus_prev<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$tuple<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_rchperm": [
        "Change relation permissions",
        "<span class=\"methodname\">dbplus_rchperm<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mask<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $user<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $group<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_rcreate": [
        "Creates a new DB++ relation",
        "<span class=\"methodname\">dbplus_rcreate<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $domlist<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $overwrite<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "dbplus_rcrtexact": [
        "Creates an exact but empty copy of a relation including indices",
        "<span class=\"methodname\">dbplus_rcrtexact<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $overwrite<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "dbplus_rcrtlike": [
        "Creates an empty copy of a relation with default indices",
        "<span class=\"methodname\">dbplus_rcrtlike<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $overwrite<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "dbplus_resolve": [
        "Resolve host information for relation",
        "<span class=\"methodname\">dbplus_resolve<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $relation_name<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "dbplus_restorepos": [
        "Restore position",
        "<span class=\"methodname\">dbplus_restorepos<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $tuple<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_rkeys": [
        "Specify new primary key for a relation",
        "<span class=\"methodname\">dbplus_rkeys<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $domlist<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "dbplus_ropen": [
        "Open relation file local",
        "<span class=\"methodname\">dbplus_ropen<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "dbplus_rquery": [
        "Perform local (raw) AQL query",
        "<span class=\"methodname\">dbplus_rquery<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dbpath<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "dbplus_rrename": [
        "Rename a relation",
        "<span class=\"methodname\">dbplus_rrename<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_rsecindex": [
        "Create a new secondary index for a relation",
        "<span class=\"methodname\">dbplus_rsecindex<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $domlist<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "dbplus_runlink": [
        "Remove relation from filesystem",
        "<span class=\"methodname\">dbplus_runlink<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_rzap": [
        "Remove all tuples from relation",
        "<span class=\"methodname\">dbplus_rzap<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_savepos": [
        "Save position",
        "<span class=\"methodname\">dbplus_savepos<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_setindex": [
        "Set index",
        "<span class=\"methodname\">dbplus_setindex<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $idx_name<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_setindexbynumber": [
        "Set index by number",
        "<span class=\"methodname\">dbplus_setindexbynumber<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $idx_number<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_sql": [
        "Perform SQL query",
        "<span class=\"methodname\">dbplus_sql<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $server<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dbpath<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "dbplus_tcl": [
        "Execute TCL code on server side",
        "<span class=\"methodname\">dbplus_tcl<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $sid<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $script<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "dbplus_tremove": [
        "Remove tuple and return new current tuple",
        "<span class=\"methodname\">dbplus_tremove<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $tuple<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$current<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_undo": [
        "Undo",
        "<span class=\"methodname\">dbplus_undo<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_undoprepare": [
        "Prepare undo",
        "<span class=\"methodname\">dbplus_undoprepare<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_unlockrel": [
        "Give up write lock on relation",
        "<span class=\"methodname\">dbplus_unlockrel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_unselect": [
        "Remove a constraint from relation",
        "<span class=\"methodname\">dbplus_unselect<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_update": [
        "Update specified tuple in relation",
        "<span class=\"methodname\">dbplus_update<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $old<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $new<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_xlockrel": [
        "Request exclusive lock on relation",
        "<span class=\"methodname\">dbplus_xlockrel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dbplus_xunlockrel": [
        "Free exclusive lock on relation",
        "<span class=\"methodname\">dbplus_xunlockrel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $relation<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dcgettext": [
        "Overrides the domain for a single lookup",
        "<span class=\"methodname\">dcgettext<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $domain<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $category<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "dcngettext": [
        "Plural version of dcgettext",
        "<span class=\"methodname\">dcngettext<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $domain<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $singular<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $plural<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $count<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $category<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "debug_backtrace": [
        "Generates a backtrace",
        "<span class=\"methodname\">debug_backtrace<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = DEBUG_BACKTRACE_PROVIDE_OBJECT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $limit<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "debug_print_backtrace": [
        "Prints a backtrace",
        "<span class=\"methodname\">debug_print_backtrace<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $limit<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "debug_zval_dump": [
        "Dumps a string representation of an internal zval structure to output",
        "<span class=\"methodname\">debug_zval_dump<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$values<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "decbin": [
        "Decimal to binary",
        "<span class=\"methodname\">decbin<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $num<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "dechex": [
        "Decimal to hexadecimal",
        "<span class=\"methodname\">dechex<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $num<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "decoct": [
        "Decimal to octal",
        "<span class=\"methodname\">decoct<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $num<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "define": [
        "Defines a named constant",
        "<span class=\"methodname\">define<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $case_insensitive<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "defined": [
        "Checks whether a given named constant exists",
        "<span class=\"methodname\">defined<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "deflate_add": [
        "Incrementally deflate data",
        "<span class=\"methodname\">deflate_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">DeflateContext<\/span> $context<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flush_mode<span class=\"initializer\"> = ZLIB_SYNC_FLUSH<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "deflate_init": [
        "Initialize an incremental deflate context",
        "<span class=\"methodname\">deflate_init<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $encoding<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = []<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">DeflateContext<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "DeflateContext": [
        "A fully opaque class which replaces zlib.deflate resources as of PHP 8.0.0."
    ],
    "deg2rad": [
        "Converts the number in degrees to the radian equivalent",
        "<span class=\"methodname\">deg2rad<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "dgettext": [
        "Override the current domain",
        "<span class=\"methodname\">dgettext<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $domain<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "dio_close": [
        "Closes the file descriptor given by fd",
        "<span class=\"methodname\">dio_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fd<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "dio_fcntl": [
        "Performs a c library fcntl on fd",
        "<span class=\"methodname\">dio_fcntl<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cmd<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $args<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "dio_open": [
        "Opens a file (creating it if necessary) at a lower level than the\n   C library input\/ouput stream functions allow",
        "<span class=\"methodname\">dio_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "dio_read": [
        "Reads bytes from a file descriptor",
        "<span class=\"methodname\">dio_read<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $len<span class=\"initializer\"> = 1024<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "dio_seek": [
        "Seeks to pos on fd from whence",
        "<span class=\"methodname\">dio_seek<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pos<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $whence<span class=\"initializer\"> = SEEK_SET<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dio_stat": [
        "Gets stat information about the file descriptor fd",
        "<span class=\"methodname\">dio_stat<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fd<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "dio_tcsetattr": [
        "Sets terminal attributes and baud rate for a serial port",
        "<span class=\"methodname\">dio_tcsetattr<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "dio_truncate": [
        "Truncates file descriptor fd to offset bytes",
        "<span class=\"methodname\">dio_truncate<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "dio_write": [
        "Writes data to fd with optional truncation at length",
        "<span class=\"methodname\">dio_write<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $len<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "dir": [
        "Return an instance of the Directory class",
        "<span class=\"methodname\">dir<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $directory<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">Directory<\/span>"
    ],
    "Directory": [
        "Instances of Directory are created by calling the dir() function, not by the new operator."
    ],
    "DirectoryIterator": [
        "The DirectoryIterator class provides a simple interface for viewing the contents of filesystem directories.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">DirectoryIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> )"
    ],
    "dirname": [
        "Returns a parent directory's path",
        "<span class=\"methodname\">dirname<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $levels<span class=\"initializer\"> = 1<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "disk_free_space": [
        "Returns available space on filesystem or disk partition",
        "<span class=\"methodname\">disk_free_space<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $directory<\/span> ) : <span class=\"type\"><span class=\"type\">float<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "disk_total_space": [
        "Returns the total size of a filesystem or disk partition",
        "<span class=\"methodname\">disk_total_space<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $directory<\/span> ) : <span class=\"type\"><span class=\"type\">float<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "DivisionByZeroError": [
        "DivisionByZeroError is thrown when an attempt is made to divide a number by zero."
    ],
    "dl": [
        "Loads a PHP extension at runtime",
        "<span class=\"methodname\">dl<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $extension_filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "dngettext": [
        "Plural version of dgettext",
        "<span class=\"methodname\">dngettext<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $domain<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $singular<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $plural<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $count<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "dns_get_record": [
        "Fetch DNS Resource Records associated with a hostname",
        "<span class=\"methodname\">dns_get_record<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = DNS_ANY<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$authoritative_name_servers<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$additional_records<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $raw<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "dom_import_simplexml": [
        "Gets a DOMElement object from a\n   SimpleXMLElement object",
        "<span class=\"methodname\">dom_import_simplexml<\/span> ( <span class=\"methodparam\"><span class=\"type\">object<\/span> $node<\/span> ) : <span class=\"type\"><span class=\"type\">DOMElement<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "DomainException": [
        "Exception thrown if a value does not adhere to a defined valid data domain."
    ],
    "DOMAttr": [
        "DOMAttr represents an attribute in the DOMElement object.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">DOMAttr::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<span class=\"initializer\"> = \"\"<\/span><\/span> )"
    ],
    "DOMCdataSection": [
        "The DOMCdataSection inherits from DOMText for textural representation of CData constructs.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">DOMCdataSection::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> )"
    ],
    "DOMCharacterData": [
        "Represents nodes with character data. No nodes directly correspond to this class, but other nodes do inherit from it."
    ],
    "DOMComment": [
        "Represents comment nodes, characters delimited by <!-- and -->.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">DOMComment::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<span class=\"initializer\"> = \"\"<\/span><\/span> )"
    ],
    "DOMDocument": [
        "Represents an entire HTML or XML document; serves as the root of the document tree.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">DOMDocument::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $version<span class=\"initializer\"> = \"1.0\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $encoding<span class=\"initializer\"> = \"\"<\/span><\/span> )"
    ],
    "DOMDocumentType": [
        "Each DOMDocument has a doctype attribute whose value is either null or a DOMDocumentType object."
    ],
    "DOMElement": [
        "Creates a new DOMElement object",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">DOMElement::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $qualifiedName<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $value<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $namespace<span class=\"initializer\"> = \"\"<\/span><\/span> )"
    ],
    "DOMEntity": [
        "This interface represents a known entity, either parsed or unparsed, in an XML document."
    ],
    "DOMEntityReference": [
        "Creates a new DOMEntityReference object",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">DOMEntityReference::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> )"
    ],
    "DOMException": [
        "DOM operations raise exceptions under particular circumstances, i.e., when an operation is impossible to perform for logical reasons."
    ],
    "DOMImplementation": [
        "The DOMImplementation class provides a number of methods for performing operations that are independent of any particular instance of the document object model.",
        "<span class=\"methodname\">DOMImplementation::__construct<\/span> ( )"
    ],
    "DOMProcessingInstruction": [
        "Creates a new DOMProcessingInstruction object",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">DOMProcessingInstruction::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<span class=\"initializer\"> = \"\"<\/span><\/span> )"
    ],
    "DOMText": [
        "The DOMText class inherits from DOMCharacterData and represents the textual content of a DOMElement or DOMAttr.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">DOMText::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<span class=\"initializer\"> = \"\"<\/span><\/span> )"
    ],
    "DOMXPath": [
        "Supports XPath 1.0",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">DOMXPath::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">DOMDocument<\/span> $document<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $registerNodeNS<span class=\"initializer\"> = true<\/span><\/span> )"
    ],
    "dotnet": [
        "The dotnet class allows you to instantiate a class from a .Net assembly and call its methods and access its properties, if the class and the methods and properties are \u00bb\u00a0visible to COM.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">dotnet::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $assembly_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $datatype_name<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $codepage<span class=\"initializer\"> = CP_ACP<\/span><\/span> )"
    ],
    "each": [
        "Return the current key and value pair from an array and advance the array cursor",
        "<span class=\"methodname\">each<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">object<\/span><\/span> &$array<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "easter_date": [
        "Get Unix timestamp for midnight on Easter of a given year",
        "<span class=\"methodname\">easter_date<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $year<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = CAL_EASTER_DEFAULT<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "easter_days": [
        "Get number of days after March 21 on which Easter falls for a given year",
        "<span class=\"methodname\">easter_days<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $year<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = CAL_EASTER_DEFAULT<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "echo": [
        "Output one or more strings",
        "<span class=\"methodname\">echo<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $arg<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> ...$args<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "eio_busy": [
        "Artificially increase load. Could be useful in tests,\n  benchmarking",
        "<span class=\"methodname\">eio_busy<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $delay<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_cancel": [
        "Cancels a request",
        "<span class=\"methodname\">eio_cancel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $req<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "eio_chmod": [
        "Change file\/directory permissions",
        "<span class=\"methodname\">eio_chmod<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_chown": [
        "Change file\/directory permissions",
        "<span class=\"methodname\">eio_chown<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $uid<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $gid<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_close": [
        "Close file",
        "<span class=\"methodname\">eio_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_custom": [
        "Execute custom request like any other eio_* call",
        "<span class=\"methodname\">eio_custom<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $execute<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_dup2": [
        "Duplicate a file descriptor",
        "<span class=\"methodname\">eio_dup2<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $fd2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_event_loop": [
        "Polls libeio until all requests proceeded",
        "<span class=\"methodname\">eio_event_loop<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "eio_fallocate": [
        "Allows the caller to directly manipulate the allocated disk\n  space for a file",
        "<span class=\"methodname\">eio_fallocate<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_fchmod": [
        "Change file permissions",
        "<span class=\"methodname\">eio_fchmod<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_fchown": [
        "Change file ownership",
        "<span class=\"methodname\">eio_fchown<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $uid<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $gid<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_fdatasync": [
        "Synchronize a file's in-core state with storage device",
        "<span class=\"methodname\">eio_fdatasync<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_fstat": [
        "Get file status",
        "<span class=\"methodname\">eio_fstat<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_fstatvfs": [
        "Get file system statistics",
        "<span class=\"methodname\">eio_fstatvfs<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_fsync": [
        "Synchronize a file's in-core state with storage device",
        "<span class=\"methodname\">eio_fsync<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_ftruncate": [
        "Truncate a file",
        "<span class=\"methodname\">eio_ftruncate<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_futime": [
        "Change file last access and modification times",
        "<span class=\"methodname\">eio_futime<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $atime<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $mtime<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_get_event_stream": [
        "Get stream representing a variable used in internal communications with libeio",
        "<span class=\"methodname\">eio_get_event_stream<\/span> ( ) : <span class=\"type\">mixed<\/span>"
    ],
    "eio_get_last_error": [
        "Returns string describing the last error associated with a request resource",
        "<span class=\"methodname\">eio_get_last_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $req<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "eio_grp": [
        "Creates a request group",
        "<span class=\"methodname\">eio_grp<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_grp_add": [
        "Adds a request to the request group",
        "<span class=\"methodname\">eio_grp_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $grp<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $req<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "eio_grp_cancel": [
        "Cancels a request group",
        "<span class=\"methodname\">eio_grp_cancel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $grp<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "eio_grp_limit": [
        "Set group limit",
        "<span class=\"methodname\">eio_grp_limit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $grp<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $limit<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "eio_init": [
        "(Re-)initialize Eio",
        "<span class=\"methodname\">eio_init<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "eio_link": [
        "Create a hardlink for file",
        "<span class=\"methodname\">eio_link<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_lstat": [
        "Get file status",
        "<span class=\"methodname\">eio_lstat<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_mkdir": [
        "Create directory",
        "<span class=\"methodname\">eio_mkdir<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_mknod": [
        "Create a special or ordinary file",
        "<span class=\"methodname\">eio_mknod<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dev<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_nop": [
        "Does nothing, except go through the whole request cycle",
        "<span class=\"methodname\">eio_nop<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_npending": [
        "Returns number of finished, but unhandled requests",
        "<span class=\"methodname\">eio_npending<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "eio_nready": [
        "Returns number of not-yet handled requests",
        "<span class=\"methodname\">eio_nready<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "eio_nreqs": [
        "Returns number of requests to be processed",
        "<span class=\"methodname\">eio_nreqs<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "eio_nthreads": [
        "Returns number of threads currently in use",
        "<span class=\"methodname\">eio_nthreads<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "eio_open": [
        "Opens a file",
        "<span class=\"methodname\">eio_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_poll": [
        "Can be to be called whenever there are pending requests that need finishing",
        "<span class=\"methodname\">eio_poll<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "eio_read": [
        "Read from a file descriptor at given offset",
        "<span class=\"methodname\">eio_read<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_readahead": [
        "Perform file readahead into page cache",
        "<span class=\"methodname\">eio_readahead<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_readdir": [
        "Reads through a whole directory",
        "<span class=\"methodname\">eio_readdir<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_readlink": [
        "Read value of a symbolic link",
        "<span class=\"methodname\">eio_readlink<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_realpath": [
        "Get the canonicalized absolute pathname",
        "<span class=\"methodname\">eio_realpath<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_rename": [
        "Change the name or location of a file",
        "<span class=\"methodname\">eio_rename<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_rmdir": [
        "Remove a directory",
        "<span class=\"methodname\">eio_rmdir<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_seek": [
        "Repositions the offset of the open file associated with the fd argument to the argument offset according to the directive whence",
        "<span class=\"methodname\">eio_seek<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $whence<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_sendfile": [
        "Transfer data between file descriptors",
        "<span class=\"methodname\">eio_sendfile<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $out_fd<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $in_fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_set_max_idle": [
        "Set maximum number of idle threads",
        "<span class=\"methodname\">eio_set_max_idle<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $nthreads<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "eio_set_max_parallel": [
        "Set maximum parallel threads",
        "<span class=\"methodname\">eio_set_max_parallel<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $nthreads<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "eio_set_max_poll_reqs": [
        "Set maximum number of requests processed in a poll",
        "<span class=\"methodname\">eio_set_max_poll_reqs<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $nreqs<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "eio_set_max_poll_time": [
        "Set maximum poll time",
        "<span class=\"methodname\">eio_set_max_poll_time<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $nseconds<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "eio_set_min_parallel": [
        "Set minimum parallel thread number",
        "<span class=\"methodname\">eio_set_min_parallel<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $nthreads<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "eio_stat": [
        "Get file status",
        "<span class=\"methodname\">eio_stat<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_statvfs": [
        "Get file system statistics",
        "<span class=\"methodname\">eio_statvfs<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_symlink": [
        "Create a symbolic link",
        "<span class=\"methodname\">eio_symlink<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_sync": [
        "Commit buffer cache to disk",
        "<span class=\"methodname\">eio_sync<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_sync_file_range": [
        "Sync a file segment with disk",
        "<span class=\"methodname\">eio_sync_file_range<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $nbytes<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_syncfs": [
        "Calls Linux' syncfs syscall, if available",
        "<span class=\"methodname\">eio_syncfs<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_truncate": [
        "Truncate a file",
        "<span class=\"methodname\">eio_truncate<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_unlink": [
        "Delete a name and possibly the file it refers to",
        "<span class=\"methodname\">eio_unlink<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_utime": [
        "Change file last access and modification times",
        "<span class=\"methodname\">eio_utime<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $atime<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $mtime<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "eio_write": [
        "Write to file",
        "<span class=\"methodname\">eio_write<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $str<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pri<span class=\"initializer\"> = EIO_PRI_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "empty": [
        "Determine whether a variable is empty",
        "<span class=\"methodname\">empty<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $var<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "EmptyIterator": [
        "The EmptyIterator class for an empty iterator."
    ],
    "enchant_broker_describe": [
        "Enumerates the Enchant providers",
        "<span class=\"methodname\">enchant_broker_describe<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantBroker<\/span> $broker<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "enchant_broker_dict_exists": [
        "Whether a dictionary exists or not. Using non-empty tag",
        "<span class=\"methodname\">enchant_broker_dict_exists<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantBroker<\/span> $broker<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $tag<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "enchant_broker_free": [
        "Free the broker resource and its dictionaries",
        "<span class=\"methodname\">enchant_broker_free<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantBroker<\/span> $broker<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "enchant_broker_free_dict": [
        "Free a dictionary resource",
        "<span class=\"methodname\">enchant_broker_free_dict<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantDictionary<\/span> $dictionary<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "enchant_broker_get_dict_path": [
        "Get the directory path for a given backend",
        "<span class=\"methodname\">enchant_broker_get_dict_path<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantBroker<\/span> $broker<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "enchant_broker_get_error": [
        "Returns the last error of the broker",
        "<span class=\"methodname\">enchant_broker_get_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantBroker<\/span> $broker<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "enchant_broker_init": [
        "Create a new broker object capable of requesting",
        "<span class=\"methodname\">enchant_broker_init<\/span> ( ) : <span class=\"type\"><span class=\"type\">EnchantBroker<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "enchant_broker_list_dicts": [
        "Returns a list of available dictionaries",
        "<span class=\"methodname\">enchant_broker_list_dicts<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantBroker<\/span> $broker<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "enchant_broker_request_dict": [
        "Create a new dictionary using a tag",
        "<span class=\"methodname\">enchant_broker_request_dict<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantBroker<\/span> $broker<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $tag<\/span> ) : <span class=\"type\"><span class=\"type\">EnchantDictionary<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "enchant_broker_request_pwl_dict": [
        "Creates a dictionary using a PWL file",
        "<span class=\"methodname\">enchant_broker_request_pwl_dict<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantBroker<\/span> $broker<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\"><span class=\"type\">EnchantDictionary<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "enchant_broker_set_dict_path": [
        "Set the directory path for a given backend",
        "<span class=\"methodname\">enchant_broker_set_dict_path<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantBroker<\/span> $broker<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "enchant_broker_set_ordering": [
        "Declares a preference of dictionaries to use for the language",
        "<span class=\"methodname\">enchant_broker_set_ordering<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantBroker<\/span> $broker<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $tag<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $ordering<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "enchant_dict_add": [
        "Add a word to personal word list",
        "<span class=\"methodname\">enchant_dict_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantDictionary<\/span> $dictionary<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $word<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "enchant_dict_add_to_session": [
        "Add 'word' to this spell-checking session",
        "<span class=\"methodname\">enchant_dict_add_to_session<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantDictionary<\/span> $dictionary<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $word<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "enchant_dict_check": [
        "Check whether a word is correctly spelled or not",
        "<span class=\"methodname\">enchant_dict_check<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantDictionary<\/span> $dictionary<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $word<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "enchant_dict_describe": [
        "Describes an individual dictionary",
        "<span class=\"methodname\">enchant_dict_describe<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantDictionary<\/span> $dictionary<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "enchant_dict_get_error": [
        "Returns the last error of the current spelling-session",
        "<span class=\"methodname\">enchant_dict_get_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantDictionary<\/span> $dictionary<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "enchant_dict_is_added": [
        "Whether or not 'word' exists in this spelling-session",
        "<span class=\"methodname\">enchant_dict_is_added<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantDictionary<\/span> $dictionary<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $word<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "enchant_dict_quick_check": [
        "Check the word is correctly spelled and provide suggestions",
        "<span class=\"methodname\">enchant_dict_quick_check<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantDictionary<\/span> $dictionary<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $word<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$suggestions<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "enchant_dict_store_replacement": [
        "Add a correction for a word",
        "<span class=\"methodname\">enchant_dict_store_replacement<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantDictionary<\/span> $dictionary<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $misspelled<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $correct<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "enchant_dict_suggest": [
        "Will return a list of values if any of those pre-conditions are not met",
        "<span class=\"methodname\">enchant_dict_suggest<\/span> ( <span class=\"methodparam\"><span class=\"type\">EnchantDictionary<\/span> $dictionary<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $word<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "EnchantBroker": [
        "A fully opaque class which replaces enchant_broker resources as of PHP 8.0.0."
    ],
    "EnchantDictionary": [
        "A fully opaque class which replaces enchant_dict resources as of PHP 8.0.0."
    ],
    "end": [
        "Set the internal pointer of an array to its last element",
        "<span class=\"methodname\">end<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">object<\/span><\/span> &$array<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "ereg": [
        "Regular expression match",
        "<span class=\"methodname\">ereg<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$regs<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ereg_replace": [
        "Replace regular expression",
        "<span class=\"methodname\">ereg_replace<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $replacement<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "eregi": [
        "Case insensitive regular expression match",
        "<span class=\"methodname\">eregi<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$regs<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "eregi_replace": [
        "Replace regular expression case insensitive",
        "<span class=\"methodname\">eregi_replace<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $replacement<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "Error": [
        "Error is the base class for all internal PHP errors.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Error::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $code<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">Throwable<\/span> $previous<span class=\"initializer\"> = null<\/span><\/span> )"
    ],
    "error_clear_last": [
        "Clear the most recent error",
        "<span class=\"methodname\">error_clear_last<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "error_get_last": [
        "Get the last occurred error",
        "<span class=\"methodname\">error_get_last<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "error_log": [
        "Send an error message to the defined error handling routines",
        "<span class=\"methodname\">error_log<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $message_type<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $destination<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $extra_headers<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "error_reporting": [
        "Sets which PHP errors are reported",
        "<span class=\"methodname\">error_reporting<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $level<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ErrorException": [
        "An Error Exception.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ErrorException::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $code<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $severity<span class=\"initializer\"> = E_ERROR<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<span class=\"initializer\"> = __FILE__<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $lineno<span class=\"initializer\"> = __LINE__<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">Exception<\/span> $previous<span class=\"initializer\"> = null<\/span><\/span> )"
    ],
    "escapeshellarg": [
        "Escape a string to be used as a shell argument",
        "<span class=\"methodname\">escapeshellarg<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $arg<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "escapeshellcmd": [
        "Escape shell metacharacters",
        "<span class=\"methodname\">escapeshellcmd<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $command<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "Ev": [
        "Ev is a static class providing access to the default loop and to some common operations."
    ],
    "eval": [
        "Evaluate a string as PHP code",
        "<span class=\"methodname\">eval<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $code<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "EvCheck": [
        "EvPrepare and EvCheck watchers are usually used in pairs. EvPrepare watchers get invoked before the process blocks, EvCheck afterwards.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EvCheck::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">callable<\/span> $callback <\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $data <span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"> <span class=\"type\">int<\/span> $priority <span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "EvChild": [
        "EvChild watchers trigger when the process receives a SIGCHLD in response to some child status changes (most typically when a child dies or exits). It is permissible to install an EvChild watcher after the child has been forked(which implies it might have already exited), as long as the event loop isn't entered(or is continued from a watcher), i.e. forking and then immediately registering a watcher for the child is fine, but forking and registering a watcher a few event loop iterations later or in the next callback invocation is not.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EvChild::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">int<\/span> $pid <\/span> , <span class=\"methodparam\"> <span class=\"type\">bool<\/span> $trace <\/span> , <span class=\"methodparam\"> <span class=\"type\">callable<\/span> $callback <\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $data <span class=\"initializer\"> = null<\/span> <\/span> , <span class=\"methodparam\"> <span class=\"type\">int<\/span> $priority <span class=\"initializer\"> = 0<\/span> <\/span> )"
    ],
    "EvEmbed": [
        "Used to embed one event loop into another.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EvEmbed::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">object<\/span> $other <\/span> , <span class=\"methodparam\"> <span class=\"type\">callable<\/span> $callback <span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $data <span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"> <span class=\"type\">int<\/span> $priority <span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "Event": [
        "Event class represents and event firing on a file descriptor being ready to read from or write to; a file descriptor becoming ready to read from or write to(edge-triggered I\/O only); a timeout expiring; a signal occuring; a user-triggered event.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Event::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">EventBase<\/span> $base <\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $fd <\/span> , <span class=\"methodparam\"> <span class=\"type\">int<\/span> $what <\/span> , <span class=\"methodparam\"> <span class=\"type\">callable<\/span> $cb <\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $arg <span class=\"initializer\"> = NULL<\/span> <\/span> )"
    ],
    "EventBase": [
        "EventBase class represents libevent's event base structure. It holds a set of events and can poll to determine which events are active.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EventBase::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">EventConfig<\/span> $cfg <span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "EventBuffer": [
        "EventBuffer represents Libevent's \"evbuffer\", an utility functionality for buffered I\/O.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EventBuffer::__construct<\/span> ( )"
    ],
    "EventBufferEvent": [
        "Represents Libevent's buffer event.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EventBufferEvent::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">EventBase<\/span> $base <\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $socket <span class=\"initializer\"> = null<\/span> <\/span> , <span class=\"methodparam\"> <span class=\"type\">int<\/span> $options <span class=\"initializer\"> = 0<\/span> <\/span> , <span class=\"methodparam\"> <span class=\"type\">callable<\/span> $readcb <span class=\"initializer\"> = null<\/span> <\/span> , <span class=\"methodparam\"> <span class=\"type\">callable<\/span> $writecb <span class=\"initializer\"> = null<\/span> <\/span> , <span class=\"methodparam\"> <span class=\"type\">callable<\/span> $eventcb <span class=\"initializer\"> = null<\/span> <\/span> )"
    ],
    "EventConfig": [
        "Represents configuration structure which could be used in construction of the EventBase .",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EventConfig::__construct<\/span> ( )"
    ],
    "EventDnsBase": [
        "Represents Libevent's DNS base structure. Used to resolve DNS asyncronously, parse configuration files like resolv.conf etc.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EventDnsBase::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">EventBase<\/span> $base <\/span> , <span class=\"methodparam\"> <span class=\"type\">bool<\/span> $initialize <\/span> )"
    ],
    "EventHttp": [
        "Represents HTTP server.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EventHttp::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">EventBase<\/span> $base <\/span> , <span class=\"methodparam\"> <span class=\"type\">EventSslContext<\/span> $ctx <span class=\"initializer\"> = null<\/span> <\/span> )"
    ],
    "EventHttpConnection": [
        "Represents an HTTP connection.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EventHttpConnection::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">EventBase<\/span> $base <\/span> , <span class=\"methodparam\"> <span class=\"type\">EventDnsBase<\/span> $dns_base <\/span> , <span class=\"methodparam\"> <span class=\"type\">string<\/span> $address <\/span> , <span class=\"methodparam\"> <span class=\"type\">int<\/span> $port <\/span> , <span class=\"methodparam\"> <span class=\"type\">EventSslContext<\/span> $ctx <span class=\"initializer\"> = null<\/span> <\/span> )"
    ],
    "EventHttpRequest": [
        "Represents an HTTP request.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EventHttpRequest::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">callable<\/span> $callback <\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $data <span class=\"initializer\"> = null<\/span> <\/span> )"
    ],
    "EventListener": [
        "Represents a connection listener.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EventListener::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">EventBase<\/span> $base <\/span> , <span class=\"methodparam\"> <span class=\"type\">callable<\/span> $cb <\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $data <\/span> , <span class=\"methodparam\"> <span class=\"type\">int<\/span> $flags <\/span> , <span class=\"methodparam\"> <span class=\"type\">int<\/span> $backlog <\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $target <\/span> )"
    ],
    "EventSslContext": [
        "Represents SSL_CTX structure. Provides methods and properties to configure the SSL context.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EventSslContext::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">string<\/span> $method <\/span> , <span class=\"methodparam\"> <span class=\"type\">string<\/span> $options <\/span> )"
    ],
    "EventUtil": [
        "EventUtil is a singleton with supplimentary methods and constants.",
        "<span class=\"modifier\">abstract<\/span> <span class=\"modifier\">public<\/span> <span class=\"methodname\">EventUtil::__construct<\/span> ( )"
    ],
    "EvFork": [
        "Fork watchers are called when a fork() was detected (usually because whoever signalled libev about it by calling EvLoop::fork() ). The invocation is done before the event loop blocks next and before EvCheck watchers are being called, and only in the child after the fork. Note, that if whoever calling EvLoop::fork() calls it in the wrong process, the fork handlers will be invoked, too.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EvFork::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">callable<\/span> $callback <\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $data <span class=\"initializer\"> = null<\/span> <\/span> , <span class=\"methodparam\"> <span class=\"type\">int<\/span> $priority <span class=\"initializer\"> = 0<\/span> <\/span> )"
    ],
    "EvIdle": [
        "EvIdle watchers trigger events when no other events of the same or higher priority are pending ( EvPrepare , EvCheck and other EvIdle watchers do not count as receiving events ).",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EvIdle::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">callable<\/span> $callback <\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $data <span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"> <span class=\"type\">int<\/span> $priority <span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "EvIo": [
        "EvIo watchers check whether a file descriptor(or socket, or a stream castable to numeric file descriptor) is readable or writable in each iteration of the event loop, or, more precisely, when reading would not block the process and writing would at least be able to write some data. This behaviour is called level-triggering because events are kept receiving as long as the condition persists. To stop receiving events just stop the watcher.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EvIo::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $fd <\/span> , <span class=\"methodparam\"> <span class=\"type\">int<\/span> $events <\/span> , <span class=\"methodparam\"> <span class=\"type\">callable<\/span> $callback <\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $data <span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"> <span class=\"type\">int<\/span> $priority <span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "EvLoop": [
        "Represents an event loop that is always distinct from the default loop . Unlike the default loop , it cannot handle EvChild watchers.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EvLoop::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">int<\/span> $flags <span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $data <span class=\"initializer\"> = NULL<\/span> <\/span> , <span class=\"methodparam\"> <span class=\"type\">float<\/span> $io_interval <span class=\"initializer\"> = 0.0<\/span> <\/span> , <span class=\"methodparam\"> <span class=\"type\">float<\/span> $timeout_interval <span class=\"initializer\"> = 0.0<\/span> <\/span> )"
    ],
    "EvPeriodic": [
        "Periodic watchers are also timers of a kind, but they are very versatile.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EvPeriodic::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">float<\/span> $offset <\/span> , <span class=\"methodparam\"> <span class=\"type\">string<\/span> $interval <\/span> , <span class=\"methodparam\"> <span class=\"type\">callable<\/span> $reschedule_cb <\/span> , <span class=\"methodparam\"> <span class=\"type\">callable<\/span> $callback <\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $data <span class=\"initializer\"> = null<\/span> <\/span> , <span class=\"methodparam\"> <span class=\"type\">int<\/span> $priority <span class=\"initializer\"> = 0<\/span> <\/span> )"
    ],
    "EvPrepare": [
        "EvPrepare and EvCheck watchers are usually used in pairs. EvPrepare watchers get invoked before the process blocks, EvCheck afterwards.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EvPrepare::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">string<\/span> $callback <\/span> , <span class=\"methodparam\"> <span class=\"type\">string<\/span> $data <span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"> <span class=\"type\">string<\/span> $priority <span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "EvSignal": [
        "EvSignal watchers will trigger an event when the process receives a specific signal one or more times. Even though signals are very asynchronous, libev will try its best to deliver signals synchronously, i.e. as part of the normal event processing, like any other event.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EvSignal::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">int<\/span> $signum <\/span> , <span class=\"methodparam\"> <span class=\"type\">callable<\/span> $callback <\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $data <span class=\"initializer\"> = null<\/span> <\/span> , <span class=\"methodparam\"> <span class=\"type\">int<\/span> $priority <span class=\"initializer\"> = 0<\/span> <\/span> )"
    ],
    "EvStat": [
        "EvStat monitors a file system path for attribute changes. It calls stat() on that path in regular intervals(or when the OS signals it changed) and sees if it changed compared to the last time, invoking the callback if it did.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EvStat::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">string<\/span> $path <\/span> , <span class=\"methodparam\"> <span class=\"type\">float<\/span> $interval <\/span> , <span class=\"methodparam\"> <span class=\"type\">callable<\/span> $callback <\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $data <span class=\"initializer\"> = null<\/span> <\/span> , <span class=\"methodparam\"> <span class=\"type\">int<\/span> $priority <span class=\"initializer\"> = 0<\/span> <\/span> )"
    ],
    "EvTimer": [
        "EvTimer watchers are simple relative timers that generate an event after a given time, and optionally repeating in regular intervals after that.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">EvTimer::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">float<\/span> $after <\/span> , <span class=\"methodparam\"> <span class=\"type\">float<\/span> $repeat <\/span> , <span class=\"methodparam\"> <span class=\"type\">callable<\/span> $callback <\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $data <span class=\"initializer\"> = null<\/span> <\/span> , <span class=\"methodparam\"> <span class=\"type\">int<\/span> $priority <span class=\"initializer\"> = 0<\/span> <\/span> )"
    ],
    "EvWatcher": [
        "EvWatcher is a base class for all watchers( EvCheck , EvChild etc.). Since EvWatcher 's constructor is abstract , one can't(and don't need to) create EvWatcher objects directly.",
        "<span class=\"modifier\">abstract<\/span> <span class=\"modifier\">public<\/span> <span class=\"methodname\">EvWatcher::__construct<\/span> ( )"
    ],
    "Exception": [
        "Exception is the base class for all user exceptions.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Exception::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $code<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">Throwable<\/span> $previous<span class=\"initializer\"> = null<\/span><\/span> )"
    ],
    "exec": [
        "Execute an external program",
        "<span class=\"methodname\">exec<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $command<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$output<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$result_code<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "exif_imagetype": [
        "Determine the type of an image",
        "<span class=\"methodname\">exif_imagetype<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "exif_read_data": [
        "Reads the EXIF headers from an image file",
        "<span class=\"methodname\">exif_read_data<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">string<\/span><\/span> $file<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $required_sections<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $as_arrays<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $read_thumbnail<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "exif_tagname": [
        "Get the header name for an index",
        "<span class=\"methodname\">exif_tagname<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $index<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "exif_thumbnail": [
        "Retrieve the embedded thumbnail of an image",
        "<span class=\"methodname\">exif_thumbnail<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">string<\/span><\/span> $file<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$width<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$height<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$image_type<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "exit": [
        "Output a message and terminate the current script",
        "<span class=\"methodname\">exit<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $status<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>",
        "<span class=\"methodname\">exit<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $status<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "exp": [
        "Calculates the exponent of e",
        "<span class=\"methodname\">exp<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "expect_expectl": [
        "Waits until the output from a process matches one\n  of the patterns, a specified time period has passed, or an EOF is seen",
        "<span class=\"methodname\">expect_expectl<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $expect<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $cases<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$match<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "expect_popen": [
        "Execute command via Bourne shell, and open the PTY stream to\n  the process",
        "<span class=\"methodname\">expect_popen<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $command<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "explode": [
        "Split a string by a string",
        "<span class=\"methodname\">explode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $separator<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $limit<span class=\"initializer\"> = PHP_INT_MAX<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "expm1": [
        "Returns exp(number) - 1, computed in a way that is accurate even\n   when the value of number is close to zero",
        "<span class=\"methodname\">expm1<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "extension_loaded": [
        "Find out whether an extension is loaded",
        "<span class=\"methodname\">extension_loaded<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "extract": [
        "Import variables into the current symbol table from an array",
        "<span class=\"methodname\">extract<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = EXTR_OVERWRITE<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $prefix<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ezmlm_hash": [
        "Calculate the hash value needed by EZMLM",
        "<span class=\"methodname\">ezmlm_hash<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $addr<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_cascadetrain_on_data": [
        "Trains on an entire dataset, for a period of time using the Cascade2 training algorithm",
        "<span class=\"methodname\">fann_cascadetrain_on_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max_neurons<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $neurons_between_reports<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $desired_error<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_cascadetrain_on_file": [
        "Trains on an entire dataset read from file, for a period of time using the Cascade2 training algorithm",
        "<span class=\"methodname\">fann_cascadetrain_on_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max_neurons<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $neurons_between_reports<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $desired_error<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_clear_scaling_params": [
        "Clears scaling parameters",
        "<span class=\"methodname\">fann_clear_scaling_params<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_copy": [
        "Creates a copy of a fann structure",
        "<span class=\"methodname\">fann_copy<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fann_create_from_file": [
        "Constructs a backpropagation neural network from a configuration file",
        "<span class=\"methodname\">fann_create_from_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $configuration_file<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fann_create_shortcut": [
        "Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections",
        "<span class=\"methodname\">fann_create_shortcut<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_layers<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_neurons1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_neurons2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> ...$num_neuronsN<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fann_create_shortcut_array": [
        "Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections",
        "<span class=\"methodname\">fann_create_shortcut_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_layers<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $layers<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fann_create_sparse": [
        "Creates a standard backpropagation neural network, which is not fully connected",
        "<span class=\"methodname\">fann_create_sparse<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $connection_rate<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_layers<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_neurons1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_neurons2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> ...$num_neuronsN<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fann_create_sparse_array": [
        "Creates a standard backpropagation neural network, which is not fully connected using an array of layer sizes",
        "<span class=\"methodname\">fann_create_sparse_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $connection_rate<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_layers<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $layers<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fann_create_standard": [
        "Creates a standard fully connected backpropagation neural network",
        "<span class=\"methodname\">fann_create_standard<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_layers<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_neurons1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_neurons2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> ...$num_neuronsN<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fann_create_standard_array": [
        "Creates a standard fully connected backpropagation neural network using an array of layer sizes",
        "<span class=\"methodname\">fann_create_standard_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_layers<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $layers<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fann_create_train": [
        "Creates an empty training data struct",
        "<span class=\"methodname\">fann_create_train<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_input<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_output<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fann_create_train_from_callback": [
        "Creates the training data struct from a user supplied function",
        "<span class=\"methodname\">fann_create_train_from_callback<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_input<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_output<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $user_function<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fann_descale_input": [
        "Scale data in input vector after get it from ann based on previously calculated parameters",
        "<span class=\"methodname\">fann_descale_input<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $input_vector<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_descale_output": [
        "Scale data in output vector after get it from ann based on previously calculated parameters",
        "<span class=\"methodname\">fann_descale_output<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $output_vector<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_descale_train": [
        "Descale input and output data based on previously calculated parameters",
        "<span class=\"methodname\">fann_descale_train<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $train_data<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_destroy": [
        "Destroys the entire network and properly freeing all the associated memory",
        "<span class=\"methodname\">fann_destroy<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_destroy_train": [
        "Destructs the training data",
        "<span class=\"methodname\">fann_destroy_train<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $train_data<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_duplicate_train_data": [
        "Returns an exact copy of a fann train data",
        "<span class=\"methodname\">fann_duplicate_train_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $data<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fann_get_activation_function": [
        "Returns the activation function",
        "<span class=\"methodname\">fann_get_activation_function<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $layer<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $neuron<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_activation_steepness": [
        "Returns the activation steepness for supplied neuron and layer number",
        "<span class=\"methodname\">fann_get_activation_steepness<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $layer<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $neuron<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_bias_array": [
        "Get the number of bias in each layer in the network",
        "<span class=\"methodname\">fann_get_bias_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "fann_get_bit_fail": [
        "The number of fail bits",
        "<span class=\"methodname\">fann_get_bit_fail<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_bit_fail_limit": [
        "Returns the bit fail limit used during training",
        "<span class=\"methodname\">fann_get_bit_fail_limit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_cascade_activation_functions": [
        "Returns the cascade activation functions",
        "<span class=\"methodname\">fann_get_cascade_activation_functions<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "fann_get_cascade_activation_functions_count": [
        "Returns the number of cascade activation functions",
        "<span class=\"methodname\">fann_get_cascade_activation_functions_count<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_cascade_activation_steepnesses": [
        "Returns the cascade activation steepnesses",
        "<span class=\"methodname\">fann_get_cascade_activation_steepnesses<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "fann_get_cascade_activation_steepnesses_count": [
        "The number of activation steepnesses",
        "<span class=\"methodname\">fann_get_cascade_activation_steepnesses_count<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_cascade_candidate_change_fraction": [
        "Returns the cascade candidate change fraction",
        "<span class=\"methodname\">fann_get_cascade_candidate_change_fraction<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_cascade_candidate_limit": [
        "Return the candidate limit",
        "<span class=\"methodname\">fann_get_cascade_candidate_limit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_cascade_candidate_stagnation_epochs": [
        "Returns the number of cascade candidate stagnation epochs",
        "<span class=\"methodname\">fann_get_cascade_candidate_stagnation_epochs<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_cascade_max_cand_epochs": [
        "Returns the maximum candidate epochs",
        "<span class=\"methodname\">fann_get_cascade_max_cand_epochs<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_cascade_max_out_epochs": [
        "Returns the maximum out epochs",
        "<span class=\"methodname\">fann_get_cascade_max_out_epochs<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_cascade_min_cand_epochs": [
        "Returns the minimum candidate epochs",
        "<span class=\"methodname\">fann_get_cascade_min_cand_epochs<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_cascade_min_out_epochs": [
        "Returns the minimum out epochs",
        "<span class=\"methodname\">fann_get_cascade_min_out_epochs<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_cascade_num_candidate_groups": [
        "Returns the number of candidate groups",
        "<span class=\"methodname\">fann_get_cascade_num_candidate_groups<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_cascade_num_candidates": [
        "Returns the number of candidates used during training",
        "<span class=\"methodname\">fann_get_cascade_num_candidates<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_cascade_output_change_fraction": [
        "Returns the cascade output change fraction",
        "<span class=\"methodname\">fann_get_cascade_output_change_fraction<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_cascade_output_stagnation_epochs": [
        "Returns the number of cascade output stagnation epochs",
        "<span class=\"methodname\">fann_get_cascade_output_stagnation_epochs<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_cascade_weight_multiplier": [
        "Returns the weight multiplier",
        "<span class=\"methodname\">fann_get_cascade_weight_multiplier<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_connection_array": [
        "Get connections in the network",
        "<span class=\"methodname\">fann_get_connection_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "fann_get_connection_rate": [
        "Get the connection rate used when the network was created",
        "<span class=\"methodname\">fann_get_connection_rate<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_errno": [
        "Returns the last error number",
        "<span class=\"methodname\">fann_get_errno<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $errdat<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_errstr": [
        "Returns the last errstr",
        "<span class=\"methodname\">fann_get_errstr<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $errdat<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fann_get_layer_array": [
        "Get the number of neurons in each layer in the network",
        "<span class=\"methodname\">fann_get_layer_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "fann_get_learning_momentum": [
        "Returns the learning momentum",
        "<span class=\"methodname\">fann_get_learning_momentum<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_learning_rate": [
        "Returns the learning rate",
        "<span class=\"methodname\">fann_get_learning_rate<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_MSE": [
        "Reads the mean square error from the network",
        "<span class=\"methodname\">fann_get_MSE<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_network_type": [
        "Get the type of neural network it was created as",
        "<span class=\"methodname\">fann_get_network_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_num_input": [
        "Get the number of input neurons",
        "<span class=\"methodname\">fann_get_num_input<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_num_layers": [
        "Get the number of layers in the neural network",
        "<span class=\"methodname\">fann_get_num_layers<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_num_output": [
        "Get the number of output neurons",
        "<span class=\"methodname\">fann_get_num_output<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_quickprop_decay": [
        "Returns the decay which is a factor that weights should decrease in each iteration during quickprop training",
        "<span class=\"methodname\">fann_get_quickprop_decay<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_quickprop_mu": [
        "Returns the mu factor",
        "<span class=\"methodname\">fann_get_quickprop_mu<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_rprop_decrease_factor": [
        "Returns the increase factor used during RPROP training",
        "<span class=\"methodname\">fann_get_rprop_decrease_factor<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_rprop_delta_max": [
        "Returns the maximum step-size",
        "<span class=\"methodname\">fann_get_rprop_delta_max<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_rprop_delta_min": [
        "Returns the minimum step-size",
        "<span class=\"methodname\">fann_get_rprop_delta_min<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_rprop_delta_zero": [
        "Returns the initial step-size",
        "<span class=\"methodname\">fann_get_rprop_delta_zero<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_rprop_increase_factor": [
        "Returns the increase factor used during RPROP training",
        "<span class=\"methodname\">fann_get_rprop_increase_factor<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_sarprop_step_error_shift": [
        "Returns the sarprop step error shift",
        "<span class=\"methodname\">fann_get_sarprop_step_error_shift<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_sarprop_step_error_threshold_factor": [
        "Returns the sarprop step error threshold factor",
        "<span class=\"methodname\">fann_get_sarprop_step_error_threshold_factor<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_sarprop_temperature": [
        "Returns the sarprop temperature",
        "<span class=\"methodname\">fann_get_sarprop_temperature<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_sarprop_weight_decay_shift": [
        "Returns the sarprop weight decay shift",
        "<span class=\"methodname\">fann_get_sarprop_weight_decay_shift<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_get_total_connections": [
        "Get the total number of connections in the entire network",
        "<span class=\"methodname\">fann_get_total_connections<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_total_neurons": [
        "Get the total number of neurons in the entire network",
        "<span class=\"methodname\">fann_get_total_neurons<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_train_error_function": [
        "Returns the error function used during training",
        "<span class=\"methodname\">fann_get_train_error_function<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_train_stop_function": [
        "Returns the stop function used during training",
        "<span class=\"methodname\">fann_get_train_stop_function<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_get_training_algorithm": [
        "Returns the training algorithm",
        "<span class=\"methodname\">fann_get_training_algorithm<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_init_weights": [
        "Initialize the weights using Widrow + Nguyen\u2019s algorithm",
        "<span class=\"methodname\">fann_init_weights<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $train_data<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_length_train_data": [
        "Returns the number of training patterns in the train data",
        "<span class=\"methodname\">fann_length_train_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $data<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_merge_train_data": [
        "Merges the train data",
        "<span class=\"methodname\">fann_merge_train_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $data1<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $data2<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fann_num_input_train_data": [
        "Returns the number of inputs in each of the training patterns in the train data",
        "<span class=\"methodname\">fann_num_input_train_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $data<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_num_output_train_data": [
        "Returns the number of outputs in each of the training patterns in the train data",
        "<span class=\"methodname\">fann_num_output_train_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $data<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fann_print_error": [
        "Prints the error string",
        "<span class=\"methodname\">fann_print_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $errdat<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "fann_randomize_weights": [
        "Give each connection a random weight between min_weight and max_weight",
        "<span class=\"methodname\">fann_randomize_weights<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $min_weight<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $max_weight<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_read_train_from_file": [
        "Reads a file that stores training data",
        "<span class=\"methodname\">fann_read_train_from_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fann_reset_errno": [
        "Resets the last error number",
        "<span class=\"methodname\">fann_reset_errno<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $errdat<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "fann_reset_errstr": [
        "Resets the last error string",
        "<span class=\"methodname\">fann_reset_errstr<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $errdat<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "fann_reset_MSE": [
        "Resets the mean square error from the network",
        "<span class=\"methodname\">fann_reset_MSE<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $ann<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_run": [
        "Will run input through the neural network",
        "<span class=\"methodname\">fann_run<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $input<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "fann_save": [
        "Saves the entire network to a configuration file",
        "<span class=\"methodname\">fann_save<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $configuration_file<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_save_train": [
        "Save the training structure to a file",
        "<span class=\"methodname\">fann_save_train<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $file_name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_scale_input": [
        "Scale data in input vector before feed it to ann based on previously calculated parameters",
        "<span class=\"methodname\">fann_scale_input<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $input_vector<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_scale_input_train_data": [
        "Scales the inputs in the training data to the specified range",
        "<span class=\"methodname\">fann_scale_input_train_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $train_data<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $new_min<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $new_max<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_scale_output": [
        "Scale data in output vector before feed it to ann based on previously calculated parameters",
        "<span class=\"methodname\">fann_scale_output<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $output_vector<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_scale_output_train_data": [
        "Scales the outputs in the training data to the specified range",
        "<span class=\"methodname\">fann_scale_output_train_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $train_data<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $new_min<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $new_max<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_scale_train": [
        "Scale input and output data based on previously calculated parameters",
        "<span class=\"methodname\">fann_scale_train<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $train_data<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_scale_train_data": [
        "Scales the inputs and outputs in the training data to the specified range",
        "<span class=\"methodname\">fann_scale_train_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $train_data<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $new_min<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $new_max<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_activation_function": [
        "Sets the activation function for supplied neuron and layer",
        "<span class=\"methodname\">fann_set_activation_function<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $activation_function<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $layer<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $neuron<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_activation_function_hidden": [
        "Sets the activation function for all of the hidden layers",
        "<span class=\"methodname\">fann_set_activation_function_hidden<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $activation_function<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_activation_function_layer": [
        "Sets the activation function for all the neurons in the supplied layer",
        "<span class=\"methodname\">fann_set_activation_function_layer<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $activation_function<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $layer<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_activation_function_output": [
        "Sets the activation function for the output layer",
        "<span class=\"methodname\">fann_set_activation_function_output<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $activation_function<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_activation_steepness": [
        "Sets the activation steepness for supplied neuron and layer number",
        "<span class=\"methodname\">fann_set_activation_steepness<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $activation_steepness<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $layer<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $neuron<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_activation_steepness_hidden": [
        "Sets the steepness of the activation steepness for all neurons in the all hidden layers",
        "<span class=\"methodname\">fann_set_activation_steepness_hidden<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $activation_steepness<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_activation_steepness_layer": [
        "Sets the activation steepness for all of the neurons in the supplied layer number",
        "<span class=\"methodname\">fann_set_activation_steepness_layer<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $activation_steepness<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $layer<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_activation_steepness_output": [
        "Sets the steepness of the activation steepness in the output layer",
        "<span class=\"methodname\">fann_set_activation_steepness_output<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $activation_steepness<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_bit_fail_limit": [
        "Set the bit fail limit used during training",
        "<span class=\"methodname\">fann_set_bit_fail_limit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $bit_fail_limit<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_callback": [
        "Sets the callback function for use during training",
        "<span class=\"methodname\">fann_set_callback<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_cascade_activation_functions": [
        "Sets the array of cascade candidate activation functions",
        "<span class=\"methodname\">fann_set_cascade_activation_functions<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $cascade_activation_functions<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_cascade_activation_steepnesses": [
        "Sets the array of cascade candidate activation steepnesses",
        "<span class=\"methodname\">fann_set_cascade_activation_steepnesses<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $cascade_activation_steepnesses_count<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_cascade_candidate_change_fraction": [
        "Sets the cascade candidate change fraction",
        "<span class=\"methodname\">fann_set_cascade_candidate_change_fraction<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $cascade_candidate_change_fraction<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_cascade_candidate_limit": [
        "Sets the candidate limit",
        "<span class=\"methodname\">fann_set_cascade_candidate_limit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $cascade_candidate_limit<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_cascade_candidate_stagnation_epochs": [
        "Sets the number of cascade candidate stagnation epochs",
        "<span class=\"methodname\">fann_set_cascade_candidate_stagnation_epochs<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cascade_candidate_stagnation_epochs<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_cascade_max_cand_epochs": [
        "Sets the max candidate epochs",
        "<span class=\"methodname\">fann_set_cascade_max_cand_epochs<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cascade_max_cand_epochs<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_cascade_max_out_epochs": [
        "Sets the maximum out epochs",
        "<span class=\"methodname\">fann_set_cascade_max_out_epochs<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cascade_max_out_epochs<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_cascade_min_cand_epochs": [
        "Sets the min candidate epochs",
        "<span class=\"methodname\">fann_set_cascade_min_cand_epochs<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cascade_min_cand_epochs<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_cascade_min_out_epochs": [
        "Sets the minimum out epochs",
        "<span class=\"methodname\">fann_set_cascade_min_out_epochs<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cascade_min_out_epochs<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_cascade_num_candidate_groups": [
        "Sets the number of candidate groups",
        "<span class=\"methodname\">fann_set_cascade_num_candidate_groups<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cascade_num_candidate_groups<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_cascade_output_change_fraction": [
        "Sets the cascade output change fraction",
        "<span class=\"methodname\">fann_set_cascade_output_change_fraction<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $cascade_output_change_fraction<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_cascade_output_stagnation_epochs": [
        "Sets the number of cascade output stagnation epochs",
        "<span class=\"methodname\">fann_set_cascade_output_stagnation_epochs<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cascade_output_stagnation_epochs<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_cascade_weight_multiplier": [
        "Sets the weight multiplier",
        "<span class=\"methodname\">fann_set_cascade_weight_multiplier<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $cascade_weight_multiplier<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_error_log": [
        "Sets where the errors are logged to",
        "<span class=\"methodname\">fann_set_error_log<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $errdat<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $log_file<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "fann_set_input_scaling_params": [
        "Calculate input scaling parameters for future use based on training data",
        "<span class=\"methodname\">fann_set_input_scaling_params<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $train_data<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $new_input_min<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $new_input_max<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_learning_momentum": [
        "Sets the learning momentum",
        "<span class=\"methodname\">fann_set_learning_momentum<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $learning_momentum<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_learning_rate": [
        "Sets the learning rate",
        "<span class=\"methodname\">fann_set_learning_rate<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $learning_rate<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_output_scaling_params": [
        "Calculate output scaling parameters for future use based on training data",
        "<span class=\"methodname\">fann_set_output_scaling_params<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $train_data<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $new_output_min<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $new_output_max<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_quickprop_decay": [
        "Sets the quickprop decay factor",
        "<span class=\"methodname\">fann_set_quickprop_decay<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $quickprop_decay<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_quickprop_mu": [
        "Sets the quickprop mu factor",
        "<span class=\"methodname\">fann_set_quickprop_mu<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $quickprop_mu<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_rprop_decrease_factor": [
        "Sets the decrease factor used during RPROP training",
        "<span class=\"methodname\">fann_set_rprop_decrease_factor<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $rprop_decrease_factor<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_rprop_delta_max": [
        "Sets the maximum step-size",
        "<span class=\"methodname\">fann_set_rprop_delta_max<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $rprop_delta_max<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_rprop_delta_min": [
        "Sets the minimum step-size",
        "<span class=\"methodname\">fann_set_rprop_delta_min<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $rprop_delta_min<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_rprop_delta_zero": [
        "Sets the initial step-size",
        "<span class=\"methodname\">fann_set_rprop_delta_zero<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $rprop_delta_zero<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_rprop_increase_factor": [
        "Sets the increase factor used during RPROP training",
        "<span class=\"methodname\">fann_set_rprop_increase_factor<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $rprop_increase_factor<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_sarprop_step_error_shift": [
        "Sets the sarprop step error shift",
        "<span class=\"methodname\">fann_set_sarprop_step_error_shift<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $sarprop_step_error_shift<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_sarprop_step_error_threshold_factor": [
        "Sets the sarprop step error threshold factor",
        "<span class=\"methodname\">fann_set_sarprop_step_error_threshold_factor<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $sarprop_step_error_threshold_factor<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_sarprop_temperature": [
        "Sets the sarprop temperature",
        "<span class=\"methodname\">fann_set_sarprop_temperature<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $sarprop_temperature<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_sarprop_weight_decay_shift": [
        "Sets the sarprop weight decay shift",
        "<span class=\"methodname\">fann_set_sarprop_weight_decay_shift<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $sarprop_weight_decay_shift<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_scaling_params": [
        "Calculate input and output scaling parameters for future use based on training data",
        "<span class=\"methodname\">fann_set_scaling_params<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $train_data<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $new_input_min<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $new_input_max<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $new_output_min<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $new_output_max<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_train_error_function": [
        "Sets the error function used during training",
        "<span class=\"methodname\">fann_set_train_error_function<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $error_function<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_train_stop_function": [
        "Sets the stop function used during training",
        "<span class=\"methodname\">fann_set_train_stop_function<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $stop_function<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_training_algorithm": [
        "Sets the training algorithm",
        "<span class=\"methodname\">fann_set_training_algorithm<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $training_algorithm<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_weight": [
        "Set a connection in the network",
        "<span class=\"methodname\">fann_set_weight<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $from_neuron<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $to_neuron<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $weight<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_set_weight_array": [
        "Set connections in the network",
        "<span class=\"methodname\">fann_set_weight_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $connections<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_shuffle_train_data": [
        "Shuffles training data, randomizing the order",
        "<span class=\"methodname\">fann_shuffle_train_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $train_data<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_subset_train_data": [
        "Returns an copy of a subset of the train data",
        "<span class=\"methodname\">fann_subset_train_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pos<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fann_test": [
        "Test with a set of inputs, and a set of desired outputs",
        "<span class=\"methodname\">fann_test<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $input<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $desired_output<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "fann_test_data": [
        "Test a set of training data and calculates the MSE for the training data",
        "<span class=\"methodname\">fann_test_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $data<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_train": [
        "Train one iteration with a set of inputs, and a set of desired outputs",
        "<span class=\"methodname\">fann_train<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $input<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $desired_output<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_train_epoch": [
        "Train one epoch with a set of training data",
        "<span class=\"methodname\">fann_train_epoch<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $data<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fann_train_on_data": [
        "Trains on an entire dataset for a period of time",
        "<span class=\"methodname\">fann_train_on_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max_epochs<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $epochs_between_reports<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $desired_error<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fann_train_on_file": [
        "Trains on an entire dataset, which is read from file, for a period of time",
        "<span class=\"methodname\">fann_train_on_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ann<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max_epochs<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $epochs_between_reports<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $desired_error<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "FANNConnection": [
        "FANNConnection is used for the neural network connection. The objects of this class are used in fann_get_connection_array() and fann_set_weight_array().",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">FANNConnection::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $from_neuron<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $to_neuron<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $weight<\/span> )"
    ],
    "fastcgi_finish_request": [
        "Flushes all response data to the client",
        "<span class=\"methodname\">fastcgi_finish_request<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "fbird_blob_cancel": [
        "Cancel creating blob",
        "<span class=\"methodname\">fbird_blob_cancel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $blob_handle<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fbsql_affected_rows": [
        "Get number of affected rows in previous FrontBase operation",
        "<span class=\"methodname\">fbsql_affected_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fbsql_autocommit": [
        "Enable or disable autocommit",
        "<span class=\"methodname\">fbsql_autocommit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $OnOff<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fbsql_blob_size": [
        "Get the size of a BLOB",
        "<span class=\"methodname\">fbsql_blob_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $blob_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fbsql_change_user": [
        "Change logged in user of the active connection",
        "<span class=\"methodname\">fbsql_change_user<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $user<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $database<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fbsql_clob_size": [
        "Get the size of a CLOB",
        "<span class=\"methodname\">fbsql_clob_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $clob_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fbsql_close": [
        "Close FrontBase connection",
        "<span class=\"methodname\">fbsql_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fbsql_commit": [
        "Commits a transaction to the database",
        "<span class=\"methodname\">fbsql_commit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fbsql_connect": [
        "Open a connection to a FrontBase Server",
        "<span class=\"methodname\">fbsql_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<span class=\"initializer\"> = ini_get(\"fbsql.default_host\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<span class=\"initializer\"> = ini_get(\"fbsql.default_user\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<span class=\"initializer\"> = ini_get(\"fbsql.default_password\")<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fbsql_create_blob": [
        "Create a BLOB",
        "<span class=\"methodname\">fbsql_create_blob<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $blob_data<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fbsql_create_clob": [
        "Create a CLOB",
        "<span class=\"methodname\">fbsql_create_clob<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $clob_data<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fbsql_create_db": [
        "Create a FrontBase database",
        "<span class=\"methodname\">fbsql_create_db<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database_name<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $database_options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fbsql_data_seek": [
        "Move internal result pointer",
        "<span class=\"methodname\">fbsql_data_seek<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row_number<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fbsql_database": [
        "Get or set the database name used with a connection",
        "<span class=\"methodname\">fbsql_database<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $database<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fbsql_database_password": [
        "Sets or retrieves the password for a FrontBase database",
        "<span class=\"methodname\">fbsql_database_password<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $database_password<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fbsql_db_query": [
        "Send a FrontBase query",
        "<span class=\"methodname\">fbsql_db_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fbsql_db_status": [
        "Get the status for a given database",
        "<span class=\"methodname\">fbsql_db_status<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database_name<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fbsql_drop_db": [
        "Drop (delete) a FrontBase database",
        "<span class=\"methodname\">fbsql_drop_db<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database_name<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fbsql_errno": [
        "Returns the error number from previous operation",
        "<span class=\"methodname\">fbsql_errno<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fbsql_error": [
        "Returns the error message from previous operation",
        "<span class=\"methodname\">fbsql_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fbsql_fetch_array": [
        "Fetch a result row as an associative array, a numeric array, or both",
        "<span class=\"methodname\">fbsql_fetch_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $result_type<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "fbsql_fetch_assoc": [
        "Fetch a result row as an associative array",
        "<span class=\"methodname\">fbsql_fetch_assoc<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "fbsql_fetch_field": [
        "Get column information from a result and return as an object",
        "<span class=\"methodname\">fbsql_fetch_field<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "fbsql_fetch_lengths": [
        "Get the length of each output in a result",
        "<span class=\"methodname\">fbsql_fetch_lengths<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "fbsql_fetch_object": [
        "Fetch a result row as an object",
        "<span class=\"methodname\">fbsql_fetch_object<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "fbsql_fetch_row": [
        "Get a result row as an enumerated array",
        "<span class=\"methodname\">fbsql_fetch_row<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "fbsql_field_flags": [
        "Get the flags associated with the specified field in a result",
        "<span class=\"methodname\">fbsql_field_flags<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fbsql_field_len": [
        "Returns the length of the specified field",
        "<span class=\"methodname\">fbsql_field_len<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fbsql_field_name": [
        "Get the name of the specified field in a result",
        "<span class=\"methodname\">fbsql_field_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_index<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fbsql_field_seek": [
        "Set result pointer to a specified field offset",
        "<span class=\"methodname\">fbsql_field_seek<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fbsql_field_table": [
        "Get name of the table the specified field is in",
        "<span class=\"methodname\">fbsql_field_table<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fbsql_field_type": [
        "Get the type of the specified field in a result",
        "<span class=\"methodname\">fbsql_field_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fbsql_free_result": [
        "Free result memory",
        "<span class=\"methodname\">fbsql_free_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fbsql_get_autostart_info": [
        "<not documented>",
        "<span class=\"methodname\">fbsql_get_autostart_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "fbsql_hostname": [
        "Get or set the host name used with a connection",
        "<span class=\"methodname\">fbsql_hostname<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $host_name<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fbsql_insert_id": [
        "Get the id generated from the previous INSERT operation",
        "<span class=\"methodname\">fbsql_insert_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fbsql_list_dbs": [
        "List databases available on a FrontBase server",
        "<span class=\"methodname\">fbsql_list_dbs<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fbsql_list_fields": [
        "List FrontBase result fields",
        "<span class=\"methodname\">fbsql_list_fields<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table_name<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fbsql_list_tables": [
        "List tables in a FrontBase database",
        "<span class=\"methodname\">fbsql_list_tables<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fbsql_next_result": [
        "Move the internal result pointer to the next result",
        "<span class=\"methodname\">fbsql_next_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fbsql_num_fields": [
        "Get number of fields in result",
        "<span class=\"methodname\">fbsql_num_fields<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fbsql_num_rows": [
        "Get number of rows in result",
        "<span class=\"methodname\">fbsql_num_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fbsql_password": [
        "Get or set the user password used with a connection",
        "<span class=\"methodname\">fbsql_password<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fbsql_pconnect": [
        "Open a persistent connection to a FrontBase Server",
        "<span class=\"methodname\">fbsql_pconnect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<span class=\"initializer\"> = ini_get(\"fbsql.default_host\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<span class=\"initializer\"> = ini_get(\"fbsql.default_user\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<span class=\"initializer\"> = ini_get(\"fbsql.default_password\")<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fbsql_query": [
        "Send a FrontBase query",
        "<span class=\"methodname\">fbsql_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $batch_size<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fbsql_read_blob": [
        "Read a BLOB from the database",
        "<span class=\"methodname\">fbsql_read_blob<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $blob_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fbsql_read_clob": [
        "Read a CLOB from the database",
        "<span class=\"methodname\">fbsql_read_clob<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $clob_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fbsql_result": [
        "Get result data",
        "<span class=\"methodname\">fbsql_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $field<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "fbsql_rollback": [
        "Rollback a transaction to the database",
        "<span class=\"methodname\">fbsql_rollback<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fbsql_rows_fetched": [
        "Get the number of rows affected by the last statement",
        "<span class=\"methodname\">fbsql_rows_fetched<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fbsql_select_db": [
        "Select a FrontBase database",
        "<span class=\"methodname\">fbsql_select_db<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database_name<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fbsql_set_characterset": [
        "Change input\/output character set",
        "<span class=\"methodname\">fbsql_set_characterset<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $characterset<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $in_out_both<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "fbsql_set_lob_mode": [
        "Set the LOB retrieve mode for a FrontBase result set",
        "<span class=\"methodname\">fbsql_set_lob_mode<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $lob_mode<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fbsql_set_password": [
        "Change the password for a given user",
        "<span class=\"methodname\">fbsql_set_password<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $user<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $old_password<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fbsql_set_transaction": [
        "Set the transaction locking and isolation",
        "<span class=\"methodname\">fbsql_set_transaction<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $locking<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $isolation<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "fbsql_start_db": [
        "Start a database on local or remote server",
        "<span class=\"methodname\">fbsql_start_db<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database_name<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $database_options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fbsql_stop_db": [
        "Stop a database on local or remote server",
        "<span class=\"methodname\">fbsql_stop_db<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database_name<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fbsql_table_name": [
        "Get table name of field",
        "<span class=\"methodname\">fbsql_table_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $index<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fbsql_username": [
        "Get or set the username for the connection",
        "<span class=\"methodname\">fbsql_username<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fbsql_warnings": [
        "Enable or disable FrontBase warnings",
        "<span class=\"methodname\">fbsql_warnings<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $OnOff<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fclose": [
        "Closes an open file pointer",
        "<span class=\"methodname\">fclose<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdf_add_doc_javascript": [
        "Adds javascript code to the FDF document",
        "<span class=\"methodname\">fdf_add_doc_javascript<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $script_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $script_code<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdf_add_template": [
        "Adds a template into the FDF document",
        "<span class=\"methodname\">fdf_add_template<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $newpage<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $template<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $rename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdf_close": [
        "Close an FDF document",
        "<span class=\"methodname\">fdf_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "fdf_create": [
        "Create a new FDF document",
        "<span class=\"methodname\">fdf_create<\/span> ( ) : <span class=\"type\">resource<\/span>"
    ],
    "fdf_enum_values": [
        "Call a user defined function for each document value",
        "<span class=\"methodname\">fdf_enum_values<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $function<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $userdata<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdf_errno": [
        "Return error code for last fdf operation",
        "<span class=\"methodname\">fdf_errno<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "fdf_error": [
        "Return error description for FDF error code",
        "<span class=\"methodname\">fdf_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $error_code<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fdf_get_ap": [
        "Get the appearance of a field",
        "<span class=\"methodname\">fdf_get_ap<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $field<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $face<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdf_get_attachment": [
        "Extracts uploaded file embedded in the FDF",
        "<span class=\"methodname\">fdf_get_attachment<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fieldname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $savepath<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "fdf_get_encoding": [
        "Get the value of the \/Encoding key",
        "<span class=\"methodname\">fdf_get_encoding<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fdf_get_file": [
        "Get the value of the \/F key",
        "<span class=\"methodname\">fdf_get_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fdf_get_flags": [
        "Gets the flags of a field",
        "<span class=\"methodname\">fdf_get_flags<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fieldname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $whichflags<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fdf_get_opt": [
        "Gets a value from the opt array of a field",
        "<span class=\"methodname\">fdf_get_opt<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fieldname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $element<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "fdf_get_status": [
        "Get the value of the \/STATUS key",
        "<span class=\"methodname\">fdf_get_status<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fdf_get_value": [
        "Get the value of a field",
        "<span class=\"methodname\">fdf_get_value<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fieldname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "fdf_get_version": [
        "Gets version number for FDF API or file",
        "<span class=\"methodname\">fdf_get_version<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fdf_header": [
        "Sets FDF-specific output headers",
        "<span class=\"methodname\">fdf_header<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "fdf_next_field_name": [
        "Get the next field name",
        "<span class=\"methodname\">fdf_next_field_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fieldname<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fdf_open": [
        "Open a FDF document",
        "<span class=\"methodname\">fdf_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fdf_open_string": [
        "Read a FDF document from a string",
        "<span class=\"methodname\">fdf_open_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $fdf_data<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "fdf_remove_item": [
        "Sets target frame for form",
        "<span class=\"methodname\">fdf_remove_item<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fieldname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $item<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdf_save": [
        "Save a FDF document",
        "<span class=\"methodname\">fdf_save<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdf_save_string": [
        "Returns the FDF document as a string",
        "<span class=\"methodname\">fdf_save_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "fdf_set_ap": [
        "Set the appearance of a field",
        "<span class=\"methodname\">fdf_set_ap<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $field_name<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $face<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $page_number<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdf_set_encoding": [
        "Sets FDF character encoding",
        "<span class=\"methodname\">fdf_set_encoding<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $encoding<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdf_set_file": [
        "Set PDF document to display FDF data in",
        "<span class=\"methodname\">fdf_set_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $url<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $target_frame<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdf_set_flags": [
        "Sets a flag of a field",
        "<span class=\"methodname\">fdf_set_flags<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fieldname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $whichFlags<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $newFlags<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdf_set_javascript_action": [
        "Sets an javascript action of a field",
        "<span class=\"methodname\">fdf_set_javascript_action<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fieldname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $trigger<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $script<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdf_set_on_import_javascript": [
        "Adds javascript code to be executed when Acrobat opens the FDF",
        "<span class=\"methodname\">fdf_set_on_import_javascript<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $script<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $before_data_import<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdf_set_opt": [
        "Sets an option of a field",
        "<span class=\"methodname\">fdf_set_opt<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fieldname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $element<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $str1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $str2<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdf_set_status": [
        "Set the value of the \/STATUS key",
        "<span class=\"methodname\">fdf_set_status<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $status<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdf_set_submit_form_action": [
        "Sets a submit form action of a field",
        "<span class=\"methodname\">fdf_set_submit_form_action<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fieldname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $trigger<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $script<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdf_set_target_frame": [
        "Set target frame for form display",
        "<span class=\"methodname\">fdf_set_target_frame<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $frame_name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdf_set_value": [
        "Set the value of a field",
        "<span class=\"methodname\">fdf_set_value<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fieldname<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $isName<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdf_set_version": [
        "Sets version number for a FDF file",
        "<span class=\"methodname\">fdf_set_version<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fdf_document<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $version<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fdiv": [
        "Divides two numbers, according to IEEE 754",
        "<span class=\"methodname\">fdiv<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $num2<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "feof": [
        "Tests for end-of-file on a file pointer",
        "<span class=\"methodname\">feof<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "FFI": [
        "Objects of this class are created by the factory methods FFI::cdef(), FFI::load() or FFI::scope(). Defined C variables are made available as properties of the FFI instance, and defined C functions are made available as methods of the FFI instance. Declared C types can be used to create new C data structures using FFI::new() and FFI::type()."
    ],
    "fflush": [
        "Flushes the output to a file",
        "<span class=\"methodname\">fflush<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fgetc": [
        "Gets character from file pointer",
        "<span class=\"methodname\">fgetc<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "fgetcsv": [
        "Gets line from file pointer and parse for CSV fields",
        "<span class=\"methodname\">fgetcsv<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $delimiter<span class=\"initializer\"> = \",\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $enclosure<span class=\"initializer\"> = '\"'<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $escape<span class=\"initializer\"> = \"\\\\\"<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "fgets": [
        "Gets line from file pointer",
        "<span class=\"methodname\">fgets<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "fgetss": [
        "Gets line from file pointer and strip HTML tags",
        "<span class=\"methodname\">fgetss<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $allowable_tags<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "file": [
        "Reads entire file into an array",
        "<span class=\"methodname\">file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "file_exists": [
        "Checks whether a file or directory exists",
        "<span class=\"methodname\">file_exists<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "file_get_contents": [
        "Reads entire file into a string",
        "<span class=\"methodname\">file_get_contents<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $use_include_path<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $maxlen<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "file_put_contents": [
        "Write data to a file",
        "<span class=\"methodname\">file_put_contents<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fileatime": [
        "Gets last access time of file",
        "<span class=\"methodname\">fileatime<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "filectime": [
        "Gets inode change time of file",
        "<span class=\"methodname\">filectime<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "filegroup": [
        "Gets file group",
        "<span class=\"methodname\">filegroup<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "fileinode": [
        "Gets file inode",
        "<span class=\"methodname\">fileinode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "filemtime": [
        "Gets file modification time",
        "<span class=\"methodname\">filemtime<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "fileowner": [
        "Gets file owner",
        "<span class=\"methodname\">fileowner<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "fileperms": [
        "Gets file permissions",
        "<span class=\"methodname\">fileperms<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "filepro": [
        "Read and verify the map file",
        "<span class=\"methodname\">filepro<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $directory<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "filepro_fieldcount": [
        "Find out how many fields are in a filePro database",
        "<span class=\"methodname\">filepro_fieldcount<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "filepro_fieldname": [
        "Gets the name of a field",
        "<span class=\"methodname\">filepro_fieldname<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_number<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "filepro_fieldtype": [
        "Gets the type of a field",
        "<span class=\"methodname\">filepro_fieldtype<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_number<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "filepro_fieldwidth": [
        "Gets the width of a field",
        "<span class=\"methodname\">filepro_fieldwidth<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_number<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "filepro_retrieve": [
        "Retrieves data from a filePro database",
        "<span class=\"methodname\">filepro_retrieve<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $row_number<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_number<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "filepro_rowcount": [
        "Find out how many rows are in a filePro database",
        "<span class=\"methodname\">filepro_rowcount<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "filesize": [
        "Gets file size",
        "<span class=\"methodname\">filesize<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "FilesystemIterator": [
        "The Filesystem iterator",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">FilesystemIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS<\/span><\/span> )"
    ],
    "filetype": [
        "Gets file type",
        "<span class=\"methodname\">filetype<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "filter_has_var": [
        "Checks if variable of specified type exists",
        "<span class=\"methodname\">filter_has_var<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $input_type<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $var_name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "filter_id": [
        "Returns the filter ID belonging to a named filter",
        "<span class=\"methodname\">filter_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "filter_input": [
        "Gets a specific external variable by name and optionally filters it",
        "<span class=\"methodname\">filter_input<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $var_name<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $filter<span class=\"initializer\"> = FILTER_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">int<\/span><\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "filter_input_array": [
        "Gets external variables and optionally filters them",
        "<span class=\"methodname\">filter_input_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">int<\/span><\/span> $options<span class=\"initializer\"> = FILTER_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $add_empty<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "filter_list": [
        "Returns a list of all supported filters",
        "<span class=\"methodname\">filter_list<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "filter_var": [
        "Filters a variable with a specified filter",
        "<span class=\"methodname\">filter_var<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $filter<span class=\"initializer\"> = FILTER_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">int<\/span><\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "filter_var_array": [
        "Gets multiple variables and optionally filters them",
        "<span class=\"methodname\">filter_var_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">int<\/span><\/span> $options<span class=\"initializer\"> = FILTER_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $add_empty<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "FilterIterator": [
        "This abstract iterator filters out unwanted values. This class should be extended to implement custom iterator filters. The FilterIterator::accept() must be implemented in the subclass.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">FilterIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">Iterator<\/span> $iterator<\/span> )"
    ],
    "finfo": [
        "This class provides an object oriented interface into the fileinfo functions.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">finfo::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = FILEINFO_NONE<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $magic_database<span class=\"initializer\"> = \"\"<\/span><\/span> )"
    ],
    "finfo_buffer": [
        "Return information about a string buffer",
        "<span class=\"methodname\">finfo_buffer<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $finfo<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = FILEINFO_NONE<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">null<\/span><\/span> $context<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "finfo_close": [
        "Close fileinfo resource",
        "<span class=\"methodname\">finfo_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $finfo<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "finfo_file": [
        "Return information about a file",
        "<span class=\"methodname\">finfo_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $finfo<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = FILEINFO_NONE<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">null<\/span><\/span> $context<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "finfo_open": [
        "Create a new fileinfo resource",
        "<span class=\"methodname\">finfo_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = FILEINFO_NONE<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $magic_database<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "finfo_set_flags": [
        "Set libmagic configuration options",
        "<span class=\"methodname\">finfo_set_flags<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $finfo<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "floatval": [
        "Get float value of a variable",
        "<span class=\"methodname\">floatval<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "flock": [
        "Portable advisory file locking",
        "<span class=\"methodname\">flock<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $operation<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$would_block<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "floor": [
        "Round fractions down",
        "<span class=\"methodname\">floor<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $value<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "flush": [
        "Flush system output buffer",
        "<span class=\"methodname\">flush<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "fmod": [
        "Returns the floating point remainder (modulo) of the division\n  of the arguments",
        "<span class=\"methodname\">fmod<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $num2<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "fnmatch": [
        "Match filename against a pattern",
        "<span class=\"methodname\">fnmatch<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fopen": [
        "Opens file or URL",
        "<span class=\"methodname\">fopen<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $use_include_path<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "forward_static_call": [
        "Call a static method",
        "<span class=\"methodname\">forward_static_call<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$args<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "forward_static_call_array": [
        "Call a static method and pass the arguments as array",
        "<span class=\"methodname\">forward_static_call_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $args<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "fpassthru": [
        "Output all remaining data on a file pointer",
        "<span class=\"methodname\">fpassthru<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fprintf": [
        "Write a formatted string to a stream",
        "<span class=\"methodname\">fprintf<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$values<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fputcsv": [
        "Format line as CSV and write to file pointer",
        "<span class=\"methodname\">fputcsv<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $handle<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $fields<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $delimiter<span class=\"initializer\"> = \",\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $enclosure<span class=\"initializer\"> = '\"'<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $escape_char<span class=\"initializer\"> = \"\\\\\"<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "fread": [
        "Binary-safe file read",
        "<span class=\"methodname\">fread<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "frenchtojd": [
        "Converts a date from the French Republican Calendar to a Julian Day Count",
        "<span class=\"methodname\">frenchtojd<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $month<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $day<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $year<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fscanf": [
        "Parses input from a file according to a format",
        "<span class=\"methodname\">fscanf<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> &...$vars<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "fseek": [
        "Seeks on a file pointer",
        "<span class=\"methodname\">fseek<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $whence<span class=\"initializer\"> = SEEK_SET<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "fsockopen": [
        "Open Internet or Unix domain socket connection",
        "<span class=\"methodname\">fsockopen<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $port<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$error_code<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$error_message<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">float<\/span>|<span class=\"type\">null<\/span><\/span> $timeout<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "fstat": [
        "Gets information about a file using an open file pointer",
        "<span class=\"methodname\">fstat<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ftell": [
        "Returns the current position of the file read\/write pointer",
        "<span class=\"methodname\">ftell<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ftok": [
        "Convert a pathname and a project identifier to a System V IPC key",
        "<span class=\"methodname\">ftok<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $project_id<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ftp_alloc": [
        "Allocates space for a file to be uploaded",
        "<span class=\"methodname\">ftp_alloc<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $size<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$response<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ftp_append": [
        "Append the contents of a file to another file on the FTP server",
        "<span class=\"methodname\">ftp_append<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $remote_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $local_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = FTP_BINARY<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ftp_cdup": [
        "Changes to the parent directory",
        "<span class=\"methodname\">ftp_cdup<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ftp_chdir": [
        "Changes the current directory on a FTP server",
        "<span class=\"methodname\">ftp_chdir<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $directory<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ftp_chmod": [
        "Set permissions on a file via FTP",
        "<span class=\"methodname\">ftp_chmod<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $permissions<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ftp_close": [
        "Closes an FTP connection",
        "<span class=\"methodname\">ftp_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ftp_connect": [
        "Opens an FTP connection",
        "<span class=\"methodname\">ftp_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $port<span class=\"initializer\"> = 21<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = 90<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ftp_delete": [
        "Deletes a file on the FTP server",
        "<span class=\"methodname\">ftp_delete<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ftp_exec": [
        "Requests execution of a command on the FTP server",
        "<span class=\"methodname\">ftp_exec<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $command<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ftp_fget": [
        "Downloads a file from the FTP server and saves to an open file",
        "<span class=\"methodname\">ftp_fget<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $remote_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = FTP_BINARY<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ftp_fput": [
        "Uploads from an open file to the FTP server",
        "<span class=\"methodname\">ftp_fput<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $remote_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = FTP_BINARY<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ftp_get": [
        "Downloads a file from the FTP server",
        "<span class=\"methodname\">ftp_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $local_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $remote_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = FTP_BINARY<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ftp_get_option": [
        "Retrieves various runtime behaviours of the current FTP stream",
        "<span class=\"methodname\">ftp_get_option<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "ftp_login": [
        "Logs in to an FTP connection",
        "<span class=\"methodname\">ftp_login<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ftp_mdtm": [
        "Returns the last modified time of the given file",
        "<span class=\"methodname\">ftp_mdtm<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ftp_mkdir": [
        "Creates a directory",
        "<span class=\"methodname\">ftp_mkdir<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $directory<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ftp_mlsd": [
        "Returns a list of files in the given directory",
        "<span class=\"methodname\">ftp_mlsd<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $directory<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ftp_nb_continue": [
        "Continues retrieving\/sending a file (non-blocking)",
        "<span class=\"methodname\">ftp_nb_continue<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ftp_nb_fget": [
        "Retrieves a file from the FTP server and writes it to an open file (non-blocking)",
        "<span class=\"methodname\">ftp_nb_fget<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $remote_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = FTP_BINARY<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ftp_nb_fput": [
        "Stores a file from an open file to the FTP server (non-blocking)",
        "<span class=\"methodname\">ftp_nb_fput<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $remote_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = FTP_BINARY<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ftp_nb_get": [
        "Retrieves a file from the FTP server and writes it to a local file (non-blocking)",
        "<span class=\"methodname\">ftp_nb_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $local_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $remote_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = FTP_BINARY<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ftp_nb_put": [
        "Stores a file on the FTP server (non-blocking)",
        "<span class=\"methodname\">ftp_nb_put<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $remote_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $local_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = FTP_BINARY<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ftp_nlist": [
        "Returns a list of files in the given directory",
        "<span class=\"methodname\">ftp_nlist<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $directory<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ftp_pasv": [
        "Turns passive mode on or off",
        "<span class=\"methodname\">ftp_pasv<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $enable<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ftp_put": [
        "Uploads a file to the FTP server",
        "<span class=\"methodname\">ftp_put<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $remote_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $local_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = FTP_BINARY<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ftp_pwd": [
        "Returns the current directory name",
        "<span class=\"methodname\">ftp_pwd<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ftp_raw": [
        "Sends an arbitrary command to an FTP server",
        "<span class=\"methodname\">ftp_raw<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $command<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "ftp_rawlist": [
        "Returns a detailed list of files in the given directory",
        "<span class=\"methodname\">ftp_rawlist<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $directory<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $recursive<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ftp_rename": [
        "Renames a file or a directory on the FTP server",
        "<span class=\"methodname\">ftp_rename<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $from<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $to<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ftp_rmdir": [
        "Removes a directory",
        "<span class=\"methodname\">ftp_rmdir<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $directory<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ftp_set_option": [
        "Set miscellaneous runtime FTP options",
        "<span class=\"methodname\">ftp_set_option<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">bool<\/span><\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ftp_site": [
        "Sends a SITE command to the server",
        "<span class=\"methodname\">ftp_site<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $command<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ftp_size": [
        "Returns the size of the given file",
        "<span class=\"methodname\">ftp_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ftp_ssl_connect": [
        "Opens a Secure SSL-FTP connection",
        "<span class=\"methodname\">ftp_ssl_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $port<span class=\"initializer\"> = 21<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = 90<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ftp_systype": [
        "Returns the system type identifier of the remote FTP server",
        "<span class=\"methodname\">ftp_systype<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ftp<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ftruncate": [
        "Truncates a file to a given length",
        "<span class=\"methodname\">ftruncate<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $size<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "func_get_arg": [
        "Return an item from the argument list",
        "<span class=\"methodname\">func_get_arg<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $arg_num<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "func_get_args": [
        "Returns an array comprising a function's argument list",
        "<span class=\"methodname\">func_get_args<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "func_num_args": [
        "Returns the number of arguments passed to the function",
        "<span class=\"methodname\">func_num_args<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "function_exists": [
        "Return true if the given function has been defined",
        "<span class=\"methodname\">function_exists<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function_name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "fwrite": [
        "Binary-safe file write",
        "<span class=\"methodname\">fwrite<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $handle<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "gc_collect_cycles": [
        "Forces collection of any existing garbage cycles",
        "<span class=\"methodname\">gc_collect_cycles<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "gc_disable": [
        "Deactivates the circular reference collector",
        "<span class=\"methodname\">gc_disable<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "gc_enable": [
        "Activates the circular reference collector",
        "<span class=\"methodname\">gc_enable<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "gc_enabled": [
        "Returns status of the circular reference collector",
        "<span class=\"methodname\">gc_enabled<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "gc_mem_caches": [
        "Reclaims memory used by the Zend Engine memory manager",
        "<span class=\"methodname\">gc_mem_caches<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "gc_status": [
        "Gets information about the garbage collector",
        "<span class=\"methodname\">gc_status<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "gd_info": [
        "Retrieve information about the currently installed GD library",
        "<span class=\"methodname\">gd_info<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "GdImage": [
        "A fully opaque class which replaces gd resources as of PHP 8.0.0."
    ],
    "GearmanClient": [
        "Represents a class for connecting to a Gearman job server and making requests to perform some function on provided data. The function performed must be one registered by a Gearman worker and the data passed is opaque to the job server.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">GearmanClient::__construct<\/span> ( )"
    ],
    "GearmanJob": [
        "Create a GearmanJob instance",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">GearmanJob::__construct<\/span> ( )"
    ],
    "GearmanTask": [
        "Create a GearmanTask instance",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">GearmanTask::__construct<\/span> ( )"
    ],
    "GearmanWorker": [
        "Create a GearmanWorker instance",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">GearmanWorker::__construct<\/span> ( )"
    ],
    "Generator": [
        "Generator objects are returned from generators."
    ],
    "geoip_asnum_by_name": [
        "Get the Autonomous System Numbers (ASN)",
        "<span class=\"methodname\">geoip_asnum_by_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "geoip_continent_code_by_name": [
        "Get the two letter continent code",
        "<span class=\"methodname\">geoip_continent_code_by_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "geoip_country_code3_by_name": [
        "Get the three letter country code",
        "<span class=\"methodname\">geoip_country_code3_by_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "geoip_country_code_by_name": [
        "Get the two letter country code",
        "<span class=\"methodname\">geoip_country_code_by_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "geoip_country_name_by_name": [
        "Get the full country name",
        "<span class=\"methodname\">geoip_country_name_by_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "geoip_database_info": [
        "Get GeoIP Database information",
        "<span class=\"methodname\">geoip_database_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $database<span class=\"initializer\"> = GEOIP_COUNTRY_EDITION<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "geoip_db_avail": [
        "Determine if GeoIP Database is available",
        "<span class=\"methodname\">geoip_db_avail<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $database<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "geoip_db_filename": [
        "Returns the filename of the corresponding GeoIP Database",
        "<span class=\"methodname\">geoip_db_filename<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $database<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "geoip_db_get_all_info": [
        "Returns detailed information about all GeoIP database types",
        "<span class=\"methodname\">geoip_db_get_all_info<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "geoip_domain_by_name": [
        "Get the second level domain name",
        "<span class=\"methodname\">geoip_domain_by_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "geoip_id_by_name": [
        "Get the Internet connection type",
        "<span class=\"methodname\">geoip_id_by_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "geoip_isp_by_name": [
        "Get the Internet Service Provider (ISP) name",
        "<span class=\"methodname\">geoip_isp_by_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "geoip_netspeedcell_by_name": [
        "Get the Internet connection speed",
        "<span class=\"methodname\">geoip_netspeedcell_by_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "geoip_org_by_name": [
        "Get the organization name",
        "<span class=\"methodname\">geoip_org_by_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "geoip_record_by_name": [
        "Returns the detailed City information found in the GeoIP Database",
        "<span class=\"methodname\">geoip_record_by_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "geoip_region_by_name": [
        "Get the country code and region",
        "<span class=\"methodname\">geoip_region_by_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "geoip_region_name_by_code": [
        "Returns the region name for some country and region code combo",
        "<span class=\"methodname\">geoip_region_name_by_code<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $country_code<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $region_code<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "geoip_setup_custom_directory": [
        "Set a custom directory for the GeoIP database",
        "<span class=\"methodname\">geoip_setup_custom_directory<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "geoip_time_zone_by_country_and_region": [
        "Returns the time zone for some country and region code combo",
        "<span class=\"methodname\">geoip_time_zone_by_country_and_region<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $country_code<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $region_code<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "get_browser": [
        "Tells what the user's browser is capable of",
        "<span class=\"methodname\">get_browser<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $user_agent<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $return_array<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "get_called_class": [
        "The \"Late Static Binding\" class name",
        "<span class=\"methodname\">get_called_class<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "get_cfg_var": [
        "Gets the value of a PHP configuration option",
        "<span class=\"methodname\">get_cfg_var<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $option<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "get_class": [
        "Returns the name of the class of an object",
        "<span class=\"methodname\">get_class<\/span> ( <span class=\"methodparam\"><span class=\"type\">object<\/span> $object<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "get_class_methods": [
        "Gets the class methods' names",
        "<span class=\"methodname\">get_class_methods<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $class_name<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "get_class_vars": [
        "Get the default properties of the class",
        "<span class=\"methodname\">get_class_vars<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class_name<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "get_current_user": [
        "Gets the name of the owner of the current PHP script",
        "<span class=\"methodname\">get_current_user<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "get_declared_classes": [
        "Returns an array with the name of the defined classes",
        "<span class=\"methodname\">get_declared_classes<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "get_declared_interfaces": [
        "Returns an array of all declared interfaces",
        "<span class=\"methodname\">get_declared_interfaces<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "get_declared_traits": [
        "Returns an array of all declared traits",
        "<span class=\"methodname\">get_declared_traits<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "get_defined_constants": [
        "Returns an associative array with the names of all the constants and their values",
        "<span class=\"methodname\">get_defined_constants<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $categorize<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "get_defined_functions": [
        "Returns an array of all defined functions",
        "<span class=\"methodname\">get_defined_functions<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $exclude_disabled<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "get_defined_vars": [
        "Returns an array of all defined variables",
        "<span class=\"methodname\">get_defined_vars<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "get_extension_funcs": [
        "Returns an array with the names of the functions of a module",
        "<span class=\"methodname\">get_extension_funcs<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $module_name<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "get_headers": [
        "Fetches all the headers sent by the server in response to an HTTP request",
        "<span class=\"methodname\">get_headers<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $url<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $format<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "get_html_translation_table": [
        "Returns the translation table used by htmlspecialchars() and htmlentities()",
        "<span class=\"methodname\">get_html_translation_table<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $table<span class=\"initializer\"> = HTML_SPECIALCHARS<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = ENT_COMPAT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $encoding<span class=\"initializer\"> = \"UTF-8\"<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "get_include_path": [
        "Gets the current include_path configuration option",
        "<span class=\"methodname\">get_include_path<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "get_included_files": [
        "Returns an array with the names of included or required files",
        "<span class=\"methodname\">get_included_files<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "get_loaded_extensions": [
        "Returns an array with the names of all modules compiled and loaded",
        "<span class=\"methodname\">get_loaded_extensions<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $zend_extensions<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "get_magic_quotes_gpc": [
        "Gets the current configuration setting of magic_quotes_gpc",
        "<span class=\"methodname\">get_magic_quotes_gpc<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "get_magic_quotes_runtime": [
        "Gets the current active configuration setting of magic_quotes_runtime",
        "<span class=\"methodname\">get_magic_quotes_runtime<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "get_meta_tags": [
        "Extracts all meta tag content attributes from a file and returns an array",
        "<span class=\"methodname\">get_meta_tags<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $use_include_path<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "get_object_vars": [
        "Gets the properties of the given object",
        "<span class=\"methodname\">get_object_vars<\/span> ( <span class=\"methodparam\"><span class=\"type\">object<\/span> $object<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "get_parent_class": [
        "Retrieves the parent class name for object or class",
        "<span class=\"methodname\">get_parent_class<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $object<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "get_resource_id": [
        "Returns an integer identifier for the given resource",
        "<span class=\"methodname\">get_resource_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $res<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "get_resource_type": [
        "Returns the resource type",
        "<span class=\"methodname\">get_resource_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $handle<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "get_resources": [
        "Returns active resources",
        "<span class=\"methodname\">get_resources<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $type<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "getallheaders": [
        "Fetch all HTTP request headers",
        "<span class=\"methodname\">getallheaders<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "getcwd": [
        "Gets the current working directory",
        "<span class=\"methodname\">getcwd<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "getdate": [
        "Get date\/time information",
        "<span class=\"methodname\">getdate<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $timestamp<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "getenv": [
        "Gets the value of an environment variable",
        "<span class=\"methodname\">getenv<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $varname<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $local_only<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>",
        "<span class=\"methodname\">getenv<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "gethostbyaddr": [
        "Get the Internet host name corresponding to a given IP address",
        "<span class=\"methodname\">gethostbyaddr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $ip<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "gethostbyname": [
        "Get the IPv4 address corresponding to a given Internet host name",
        "<span class=\"methodname\">gethostbyname<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "gethostbynamel": [
        "Get a list of IPv4 addresses corresponding to a given Internet host\n   name",
        "<span class=\"methodname\">gethostbynamel<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "gethostname": [
        "Gets the host name",
        "<span class=\"methodname\">gethostname<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "getimagesize": [
        "Get the size of an image",
        "<span class=\"methodname\">getimagesize<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$image_info<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "getimagesizefromstring": [
        "Get the size of an image from a string",
        "<span class=\"methodname\">getimagesizefromstring<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$image_info<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "getlastmod": [
        "Gets time of last page modification",
        "<span class=\"methodname\">getlastmod<\/span> ( ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "getmxrr": [
        "Get MX records corresponding to a given Internet host name",
        "<span class=\"methodname\">getmxrr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$hosts<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$weights<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "getmygid": [
        "Get PHP script owner's GID",
        "<span class=\"methodname\">getmygid<\/span> ( ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "getmyinode": [
        "Gets the inode of the current script",
        "<span class=\"methodname\">getmyinode<\/span> ( ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "getmypid": [
        "Gets PHP's process ID",
        "<span class=\"methodname\">getmypid<\/span> ( ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "getmyuid": [
        "Gets PHP script owner's UID",
        "<span class=\"methodname\">getmyuid<\/span> ( ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "getopt": [
        "Gets options from the command line argument list",
        "<span class=\"methodname\">getopt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $short_options<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $long_options<span class=\"initializer\"> = []<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$rest_index<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "getprotobyname": [
        "Get protocol number associated with protocol name",
        "<span class=\"methodname\">getprotobyname<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $protocol<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "getprotobynumber": [
        "Get protocol name associated with protocol number",
        "<span class=\"methodname\">getprotobynumber<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $protocol<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "getrandmax": [
        "Show largest possible random value",
        "<span class=\"methodname\">getrandmax<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "getrusage": [
        "Gets the current resource usages",
        "<span class=\"methodname\">getrusage<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "getservbyname": [
        "Get port number associated with an Internet service and protocol",
        "<span class=\"methodname\">getservbyname<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $service<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $protocol<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "getservbyport": [
        "Get Internet service which corresponds to port and protocol",
        "<span class=\"methodname\">getservbyport<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $port<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $protocol<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "gettext": [
        "Lookup a message in the current domain",
        "<span class=\"methodname\">gettext<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "gettimeofday": [
        "Get current time",
        "<span class=\"methodname\">gettimeofday<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $as_float<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">float<\/span><\/span>"
    ],
    "gettype": [
        "Get the type of a variable",
        "<span class=\"methodname\">gettype<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "glob": [
        "Find pathnames matching a pattern",
        "<span class=\"methodname\">glob<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "GlobIterator": [
        "Iterates through a file system in a similar fashion to glob().",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">GlobIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO<\/span><\/span> )"
    ],
    "Gmagick": [
        "The Gmagick constructor",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Gmagick::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "GmagickPixel": [
        "The GmagickPixel constructor",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">GmagickPixel::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $color<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "gmdate": [
        "Format a GMT\/UTC date\/time",
        "<span class=\"methodname\">gmdate<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $timestamp<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "gmmktime": [
        "Get Unix timestamp for a GMT date",
        "<span class=\"methodname\">gmmktime<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $hour<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $minute<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $second<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $month<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $day<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $year<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "GMP": [
        "A GMP number. These objects support overloaded arithmetic, bitwise and comparison operators."
    ],
    "gmp_abs": [
        "Absolute value",
        "<span class=\"methodname\">gmp_abs<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_add": [
        "Add numbers",
        "<span class=\"methodname\">gmp_add<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_and": [
        "Bitwise AND",
        "<span class=\"methodname\">gmp_and<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_binomial": [
        "Calculates binomial coefficient",
        "<span class=\"methodname\">gmp_binomial<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $n<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $k<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_clrbit": [
        "Clear bit",
        "<span class=\"methodname\">gmp_clrbit<\/span> ( <span class=\"methodparam\"><span class=\"type\">GMP<\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $index<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "gmp_cmp": [
        "Compare numbers",
        "<span class=\"methodname\">gmp_cmp<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "gmp_com": [
        "Calculates one's complement",
        "<span class=\"methodname\">gmp_com<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_div_q": [
        "Divide numbers",
        "<span class=\"methodname\">gmp_div_q<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $rounding_mode<span class=\"initializer\"> = GMP_ROUND_ZERO<\/span><\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_div_qr": [
        "Divide numbers and get quotient and remainder",
        "<span class=\"methodname\">gmp_div_qr<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $rounding_mode<span class=\"initializer\"> = GMP_ROUND_ZERO<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "gmp_div_r": [
        "Remainder of the division of numbers",
        "<span class=\"methodname\">gmp_div_r<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $rounding_mode<span class=\"initializer\"> = GMP_ROUND_ZERO<\/span><\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_divexact": [
        "Exact division of numbers",
        "<span class=\"methodname\">gmp_divexact<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_export": [
        "Export to a binary string",
        "<span class=\"methodname\">gmp_export<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $word_size<span class=\"initializer\"> = 1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "gmp_fact": [
        "Factorial",
        "<span class=\"methodname\">gmp_fact<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_gcd": [
        "Calculate GCD",
        "<span class=\"methodname\">gmp_gcd<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_gcdext": [
        "Calculate GCD and multipliers",
        "<span class=\"methodname\">gmp_gcdext<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "gmp_hamdist": [
        "Hamming distance",
        "<span class=\"methodname\">gmp_hamdist<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "gmp_import": [
        "Import from a binary string",
        "<span class=\"methodname\">gmp_import<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $word_size<span class=\"initializer\"> = 1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN<\/span><\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_init": [
        "Create GMP number",
        "<span class=\"methodname\">gmp_init<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $base<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_intval": [
        "Convert GMP number to integer",
        "<span class=\"methodname\">gmp_intval<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "gmp_invert": [
        "Inverse by modulo",
        "<span class=\"methodname\">gmp_invert<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> ) : <span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "gmp_jacobi": [
        "Jacobi symbol",
        "<span class=\"methodname\">gmp_jacobi<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "gmp_kronecker": [
        "Kronecker symbol",
        "<span class=\"methodname\">gmp_kronecker<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "gmp_lcm": [
        "Calculate LCM",
        "<span class=\"methodname\">gmp_lcm<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_legendre": [
        "Legendre symbol",
        "<span class=\"methodname\">gmp_legendre<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "gmp_mod": [
        "Modulo operation",
        "<span class=\"methodname\">gmp_mod<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_mul": [
        "Multiply numbers",
        "<span class=\"methodname\">gmp_mul<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_neg": [
        "Negate number",
        "<span class=\"methodname\">gmp_neg<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_nextprime": [
        "Find next prime number",
        "<span class=\"methodname\">gmp_nextprime<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_or": [
        "Bitwise OR",
        "<span class=\"methodname\">gmp_or<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_perfect_power": [
        "Perfect power check",
        "<span class=\"methodname\">gmp_perfect_power<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "gmp_perfect_square": [
        "Perfect square check",
        "<span class=\"methodname\">gmp_perfect_square<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "gmp_popcount": [
        "Population count",
        "<span class=\"methodname\">gmp_popcount<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "gmp_pow": [
        "Raise number into power",
        "<span class=\"methodname\">gmp_pow<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $exponent<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_powm": [
        "Raise number into power with modulo",
        "<span class=\"methodname\">gmp_powm<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $exponent<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $modulus<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_prob_prime": [
        "Check if number is \"probably prime\"",
        "<span class=\"methodname\">gmp_prob_prime<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $repetitions<span class=\"initializer\"> = 10<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "gmp_random": [
        "Random number",
        "<span class=\"methodname\">gmp_random<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $limiter<span class=\"initializer\"> = 20<\/span><\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_random_bits": [
        "Random number",
        "<span class=\"methodname\">gmp_random_bits<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $bits<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_random_range": [
        "Random number",
        "<span class=\"methodname\">gmp_random_range<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $min<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $max<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_random_seed": [
        "Sets the RNG seed",
        "<span class=\"methodname\">gmp_random_seed<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $seed<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "gmp_root": [
        "Take the integer part of nth root",
        "<span class=\"methodname\">gmp_root<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $nth<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_rootrem": [
        "Take the integer part and remainder of nth root",
        "<span class=\"methodname\">gmp_rootrem<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $nth<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "gmp_scan0": [
        "Scan for 0",
        "<span class=\"methodname\">gmp_scan0<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $start<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "gmp_scan1": [
        "Scan for 1",
        "<span class=\"methodname\">gmp_scan1<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $start<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "gmp_setbit": [
        "Set bit",
        "<span class=\"methodname\">gmp_setbit<\/span> ( <span class=\"methodparam\"><span class=\"type\">GMP<\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $index<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $value<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "gmp_sign": [
        "Sign of number",
        "<span class=\"methodname\">gmp_sign<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "gmp_sqrt": [
        "Calculate square root",
        "<span class=\"methodname\">gmp_sqrt<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_sqrtrem": [
        "Square root with remainder",
        "<span class=\"methodname\">gmp_sqrtrem<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "gmp_strval": [
        "Convert GMP number to string",
        "<span class=\"methodname\">gmp_strval<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $base<span class=\"initializer\"> = 10<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "gmp_sub": [
        "Subtract numbers",
        "<span class=\"methodname\">gmp_sub<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmp_testbit": [
        "Tests if a bit is set",
        "<span class=\"methodname\">gmp_testbit<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $index<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "gmp_xor": [
        "Bitwise XOR",
        "<span class=\"methodname\">gmp_xor<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">GMP<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $num2<\/span> ) : <span class=\"type\">GMP<\/span>"
    ],
    "gmstrftime": [
        "Format a GMT\/UTC time\/date according to locale settings",
        "<span class=\"methodname\">gmstrftime<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $timestamp<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "gnupg_adddecryptkey": [
        "Add a key for decryption",
        "<span class=\"methodname\">gnupg_adddecryptkey<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fingerprint<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $passphrase<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "gnupg_addencryptkey": [
        "Add a key for encryption",
        "<span class=\"methodname\">gnupg_addencryptkey<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fingerprint<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "gnupg_addsignkey": [
        "Add a key for signing",
        "<span class=\"methodname\">gnupg_addsignkey<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fingerprint<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $passphrase<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "gnupg_cleardecryptkeys": [
        "Removes all keys which were set for decryption before",
        "<span class=\"methodname\">gnupg_cleardecryptkeys<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "gnupg_clearencryptkeys": [
        "Removes all keys which were set for encryption before",
        "<span class=\"methodname\">gnupg_clearencryptkeys<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "gnupg_clearsignkeys": [
        "Removes all keys which were set for signing before",
        "<span class=\"methodname\">gnupg_clearsignkeys<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "gnupg_decrypt": [
        "Decrypts a given text",
        "<span class=\"methodname\">gnupg_decrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "gnupg_decryptverify": [
        "Decrypts and verifies a given text",
        "<span class=\"methodname\">gnupg_decryptverify<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$plaintext<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "gnupg_encrypt": [
        "Encrypts a given text",
        "<span class=\"methodname\">gnupg_encrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $plaintext<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "gnupg_encryptsign": [
        "Encrypts and signs a given text",
        "<span class=\"methodname\">gnupg_encryptsign<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $plaintext<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "gnupg_export": [
        "Exports a key",
        "<span class=\"methodname\">gnupg_export<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fingerprint<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "gnupg_geterror": [
        "Returns the errortext, if a function fails",
        "<span class=\"methodname\">gnupg_geterror<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "gnupg_getprotocol": [
        "Returns the currently active protocol for all operations",
        "<span class=\"methodname\">gnupg_getprotocol<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "gnupg_import": [
        "Imports a key",
        "<span class=\"methodname\">gnupg_import<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $keydata<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "gnupg_init": [
        "Initialize a connection",
        "<span class=\"methodname\">gnupg_init<\/span> ( ) : <span class=\"type\">resource<\/span>"
    ],
    "gnupg_keyinfo": [
        "Returns an array with information about all keys that matches the given pattern",
        "<span class=\"methodname\">gnupg_keyinfo<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "gnupg_setarmor": [
        "Toggle armored output",
        "<span class=\"methodname\">gnupg_setarmor<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $armor<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "gnupg_seterrormode": [
        "Sets the mode for error_reporting",
        "<span class=\"methodname\">gnupg_seterrormode<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $errormode<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "gnupg_setsignmode": [
        "Sets the mode for signing",
        "<span class=\"methodname\">gnupg_setsignmode<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $signmode<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "gnupg_sign": [
        "Signs a given text",
        "<span class=\"methodname\">gnupg_sign<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $plaintext<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "gnupg_verify": [
        "Verifies a signed text",
        "<span class=\"methodname\">gnupg_verify<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $signed_text<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $signature<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$plaintext<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "grapheme_extract": [
        "Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8",
        "<span class=\"methodname\">grapheme_extract<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $size<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = GRAPHEME_EXTR_COUNT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$next<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "grapheme_stripos": [
        "Find position (in grapheme units) of first occurrence of a case-insensitive string",
        "<span class=\"methodname\">grapheme_stripos<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "grapheme_stristr": [
        "Returns part of haystack string from the first occurrence of case-insensitive needle to the end of haystack",
        "<span class=\"methodname\">grapheme_stristr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $beforeNeedle<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "grapheme_strlen": [
        "Get string length in grapheme units",
        "<span class=\"methodname\">grapheme_strlen<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "grapheme_strpos": [
        "Find position (in grapheme units) of first occurrence of a string",
        "<span class=\"methodname\">grapheme_strpos<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "grapheme_strripos": [
        "Find position (in grapheme units) of last occurrence of a case-insensitive string",
        "<span class=\"methodname\">grapheme_strripos<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "grapheme_strrpos": [
        "Find position (in grapheme units) of last occurrence of a string",
        "<span class=\"methodname\">grapheme_strrpos<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "grapheme_strstr": [
        "Returns part of haystack string from the first occurrence of needle to the end of haystack",
        "<span class=\"methodname\">grapheme_strstr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $beforeNeedle<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "grapheme_substr": [
        "Return part of a string",
        "<span class=\"methodname\">grapheme_substr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $length<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "gregoriantojd": [
        "Converts a Gregorian date to Julian Day Count",
        "<span class=\"methodname\">gregoriantojd<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $month<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $day<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $year<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "gzclose": [
        "Close an open gz-file pointer",
        "<span class=\"methodname\">gzclose<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "gzcompress": [
        "Compress a string",
        "<span class=\"methodname\">gzcompress<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $level<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $encoding<span class=\"initializer\"> = ZLIB_ENCODING_DEFLATE<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "gzdecode": [
        "Decodes a gzip compressed string",
        "<span class=\"methodname\">gzdecode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max_length<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "gzdeflate": [
        "Deflate a string",
        "<span class=\"methodname\">gzdeflate<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $level<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $encoding<span class=\"initializer\"> = ZLIB_ENCODING_RAW<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "gzencode": [
        "Create a gzip compressed string",
        "<span class=\"methodname\">gzencode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $level<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $encoding<span class=\"initializer\"> = ZLIB_ENCODING_GZIP<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "gzeof": [
        "Test for EOF on a gz-file pointer",
        "<span class=\"methodname\">gzeof<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "gzfile": [
        "Read entire gz-file into an array",
        "<span class=\"methodname\">gzfile<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $use_include_path<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "gzgetc": [
        "Get character from gz-file pointer",
        "<span class=\"methodname\">gzgetc<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "gzgets": [
        "Get line from file pointer",
        "<span class=\"methodname\">gzgets<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $length<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "gzgetss": [
        "Get line from gz-file pointer and strip HTML tags",
        "<span class=\"methodname\">gzgetss<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $zp<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $allowable_tags<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "gzinflate": [
        "Inflate a deflated string",
        "<span class=\"methodname\">gzinflate<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max_length<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "gzopen": [
        "Open gz-file",
        "<span class=\"methodname\">gzopen<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $use_include_path<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "gzpassthru": [
        "Output all remaining data on a gz-file pointer",
        "<span class=\"methodname\">gzpassthru<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "gzread": [
        "Binary-safe gz-file read",
        "<span class=\"methodname\">gzread<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "gzrewind": [
        "Rewind the position of a gz-file pointer",
        "<span class=\"methodname\">gzrewind<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "gzseek": [
        "Seek on a gz-file pointer",
        "<span class=\"methodname\">gzseek<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $whence<span class=\"initializer\"> = SEEK_SET<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "gztell": [
        "Tell gz-file pointer read\/write position",
        "<span class=\"methodname\">gztell<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "gzuncompress": [
        "Uncompress a compressed string",
        "<span class=\"methodname\">gzuncompress<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max_length<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "gzwrite": [
        "Binary-safe gz-file write",
        "<span class=\"methodname\">gzwrite<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $length<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "hash": [
        "Generate a hash value (message digest)",
        "<span class=\"methodname\">hash<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $algo<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $binary<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "hash_algos": [
        "Return a list of registered hashing algorithms",
        "<span class=\"methodname\">hash_algos<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "hash_copy": [
        "Copy hashing context",
        "<span class=\"methodname\">hash_copy<\/span> ( <span class=\"methodparam\"><span class=\"type\">HashContext<\/span> $context<\/span> ) : <span class=\"type\">HashContext<\/span>"
    ],
    "hash_equals": [
        "Timing attack safe string comparison",
        "<span class=\"methodname\">hash_equals<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $known_string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $user_string<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "hash_file": [
        "Generate a hash value using the contents of a given file",
        "<span class=\"methodname\">hash_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $algo<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $binary<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "hash_final": [
        "Finalize an incremental hash and return resulting digest",
        "<span class=\"methodname\">hash_final<\/span> ( <span class=\"methodparam\"><span class=\"type\">HashContext<\/span> $context<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $binary<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "hash_hkdf": [
        "Generate a HKDF key derivation of a supplied key input",
        "<span class=\"methodname\">hash_hkdf<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $algo<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $info<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $salt<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "hash_hmac": [
        "Generate a keyed hash value using the HMAC method",
        "<span class=\"methodname\">hash_hmac<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $algo<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $binary<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "hash_hmac_algos": [
        "Return a list of registered hashing algorithms suitable for hash_hmac",
        "<span class=\"methodname\">hash_hmac_algos<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "hash_hmac_file": [
        "Generate a keyed hash value using the HMAC method and the contents of a given file",
        "<span class=\"methodname\">hash_hmac_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $algo<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $binary<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "hash_init": [
        "Initialize an incremental hashing context",
        "<span class=\"methodname\">hash_init<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $algo<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\">HashContext<\/span>"
    ],
    "hash_pbkdf2": [
        "Generate a PBKDF2 key derivation of a supplied password",
        "<span class=\"methodname\">hash_pbkdf2<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $algo<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $salt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $iterations<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $binary<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "hash_update": [
        "Pump data into an active hashing context",
        "<span class=\"methodname\">hash_update<\/span> ( <span class=\"methodparam\"><span class=\"type\">HashContext<\/span> $context<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "hash_update_file": [
        "Pump data into an active hashing context from a file",
        "<span class=\"methodname\">hash_update_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">HashContext<\/span> $context<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">null<\/span><\/span> $stream_context<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "hash_update_stream": [
        "Pump data into an active hashing context from an open stream",
        "<span class=\"methodname\">hash_update_stream<\/span> ( <span class=\"methodparam\"><span class=\"type\">HashContext<\/span> $context<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "HashContext": [
        "Private constructor to disallow direct instantiation",
        "<span class=\"modifier\">private<\/span> <span class=\"methodname\">HashContext::__construct<\/span> ( )"
    ],
    "header": [
        "Send a raw HTTP header",
        "<span class=\"methodname\">header<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $header<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $replace<span class=\"initializer\"> = true<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $response_code<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "header_register_callback": [
        "Call a header function",
        "<span class=\"methodname\">header_register_callback<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "header_remove": [
        "Remove previously set headers",
        "<span class=\"methodname\">header_remove<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "headers_list": [
        "Returns a list of response headers sent (or ready to send)",
        "<span class=\"methodname\">headers_list<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "headers_sent": [
        "Checks if or where headers have been sent",
        "<span class=\"methodname\">headers_sent<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> &$filename<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$line<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "hebrev": [
        "Convert logical Hebrew text to visual text",
        "<span class=\"methodname\">hebrev<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max_chars_per_line<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "hebrevc": [
        "Convert logical Hebrew text to visual text with newline conversion",
        "<span class=\"methodname\">hebrevc<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hebrew_text<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max_chars_per_line<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "hex2bin": [
        "Decodes a hexadecimally encoded binary string",
        "<span class=\"methodname\">hex2bin<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "hexdec": [
        "Hexadecimal to decimal",
        "<span class=\"methodname\">hexdec<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hex_string<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">float<\/span><\/span>"
    ],
    "highlight_file": [
        "Syntax highlighting of a file",
        "<span class=\"methodname\">highlight_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $return<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "highlight_string": [
        "Syntax highlighting of a string",
        "<span class=\"methodname\">highlight_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $str<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $return<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "hrtime": [
        "Get the system's high resolution time",
        "<span class=\"methodname\">hrtime<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $as_number<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">float<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "html_entity_decode": [
        "Convert HTML entities to their corresponding characters",
        "<span class=\"methodname\">html_entity_decode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = ENT_COMPAT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "htmlentities": [
        "Convert all applicable characters to HTML entities",
        "<span class=\"methodname\">htmlentities<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = ENT_COMPAT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $double_encode<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "htmlspecialchars": [
        "Convert special characters to HTML entities",
        "<span class=\"methodname\">htmlspecialchars<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = ENT_COMPAT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $double_encode<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "htmlspecialchars_decode": [
        "Convert special HTML entities back to characters",
        "<span class=\"methodname\">htmlspecialchars_decode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = ENT_COMPAT<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "http_build_query": [
        "Generate URL-encoded query string",
        "<span class=\"methodname\">http_build_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $numeric_prefix<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $arg_separator<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $encoding_type<span class=\"initializer\"> = PHP_QUERY_RFC1738<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "http_response_code": [
        "Get or Set the HTTP response code",
        "<span class=\"methodname\">http_response_code<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $response_code<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "hypot": [
        "Calculate the length of the hypotenuse of a right-angle triangle",
        "<span class=\"methodname\">hypot<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $y<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "ibase_add_user": [
        "Add a user to a security database",
        "<span class=\"methodname\">ibase_add_user<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $service_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $user_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $first_name<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $middle_name<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $last_name<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ibase_affected_rows": [
        "Return the number of rows that were affected by the previous query",
        "<span class=\"methodname\">ibase_affected_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ibase_backup": [
        "Initiates a backup task in the service manager and returns immediately",
        "<span class=\"methodname\">ibase_backup<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $service_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $source_db<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dest_file<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $verbose<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "ibase_blob_add": [
        "Add data into a newly created blob",
        "<span class=\"methodname\">ibase_blob_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $blob_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "ibase_blob_cancel": [
        "Cancel creating blob",
        "<span class=\"methodname\">ibase_blob_cancel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $blob_handle<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ibase_blob_close": [
        "Close blob",
        "<span class=\"methodname\">ibase_blob_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $blob_handle<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "ibase_blob_create": [
        "Create a new blob for adding data",
        "<span class=\"methodname\">ibase_blob_create<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ibase_blob_echo": [
        "Output blob contents to browser",
        "<span class=\"methodname\">ibase_blob_echo<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $blob_id<\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">ibase_blob_echo<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $blob_id<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ibase_blob_get": [
        "Get len bytes data from open blob",
        "<span class=\"methodname\">ibase_blob_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $blob_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $len<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ibase_blob_import": [
        "Create blob, copy file in it, and close it",
        "<span class=\"methodname\">ibase_blob_import<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $file_handle<\/span> ) : <span class=\"type\">string<\/span>",
        "<span class=\"methodname\">ibase_blob_import<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $file_handle<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ibase_blob_info": [
        "Return blob length and other useful info",
        "<span class=\"methodname\">ibase_blob_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $blob_id<\/span> ) : <span class=\"type\">array<\/span>",
        "<span class=\"methodname\">ibase_blob_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $blob_id<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "ibase_blob_open": [
        "Open blob for retrieving data parts",
        "<span class=\"methodname\">ibase_blob_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $blob_id<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>",
        "<span class=\"methodname\">ibase_blob_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $blob_id<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ibase_close": [
        "Close a connection to an InterBase database",
        "<span class=\"methodname\">ibase_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection_id<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ibase_commit": [
        "Commit a transaction",
        "<span class=\"methodname\">ibase_commit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_or_trans_identifier<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ibase_commit_ret": [
        "Commit a transaction without closing it",
        "<span class=\"methodname\">ibase_commit_ret<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_or_trans_identifier<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ibase_connect": [
        "Open a connection to a database",
        "<span class=\"methodname\">ibase_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $charset<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $buffers<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dialect<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $role<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $sync<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "ibase_db_info": [
        "Request statistics about a database",
        "<span class=\"methodname\">ibase_db_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $service_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $db<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $action<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $argument<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ibase_delete_user": [
        "Delete a user from a security database",
        "<span class=\"methodname\">ibase_delete_user<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $service_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $user_name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ibase_drop_db": [
        "Drops a database",
        "<span class=\"methodname\">ibase_drop_db<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ibase_errcode": [
        "Return an error code",
        "<span class=\"methodname\">ibase_errcode<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "ibase_errmsg": [
        "Return error messages",
        "<span class=\"methodname\">ibase_errmsg<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "ibase_execute": [
        "Execute a previously prepared query",
        "<span class=\"methodname\">ibase_execute<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$values<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "ibase_fetch_assoc": [
        "Fetch a result row from a query as an associative array",
        "<span class=\"methodname\">ibase_fetch_assoc<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fetch_flag<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "ibase_fetch_object": [
        "Get an object from a InterBase database",
        "<span class=\"methodname\">ibase_fetch_object<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result_id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fetch_flag<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "ibase_fetch_row": [
        "Fetch a row from an InterBase database",
        "<span class=\"methodname\">ibase_fetch_row<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fetch_flag<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "ibase_field_info": [
        "Get information about a field",
        "<span class=\"methodname\">ibase_field_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_number<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "ibase_free_event_handler": [
        "Cancels a registered event handler",
        "<span class=\"methodname\">ibase_free_event_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $event<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ibase_free_query": [
        "Free memory allocated by a prepared query",
        "<span class=\"methodname\">ibase_free_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $query<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ibase_free_result": [
        "Free a result set",
        "<span class=\"methodname\">ibase_free_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result_identifier<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ibase_gen_id": [
        "Increments the named generator and returns its new value",
        "<span class=\"methodname\">ibase_gen_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $generator<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $increment<span class=\"initializer\"> = 1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "ibase_maintain_db": [
        "Execute a maintenance command on the database server",
        "<span class=\"methodname\">ibase_maintain_db<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $service_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $db<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $action<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $argument<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ibase_modify_user": [
        "Modify a user to a security database",
        "<span class=\"methodname\">ibase_modify_user<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $service_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $user_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $first_name<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $middle_name<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $last_name<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ibase_name_result": [
        "Assigns a name to a result set",
        "<span class=\"methodname\">ibase_name_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ibase_num_fields": [
        "Get the number of fields in a result set",
        "<span class=\"methodname\">ibase_num_fields<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result_id<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ibase_num_params": [
        "Return the number of parameters in a prepared query",
        "<span class=\"methodname\">ibase_num_params<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $query<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ibase_param_info": [
        "Return information about a parameter in a prepared query",
        "<span class=\"methodname\">ibase_param_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $param_number<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "ibase_pconnect": [
        "Open a persistent connection to an InterBase database",
        "<span class=\"methodname\">ibase_pconnect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $charset<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $buffers<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dialect<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $role<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $sync<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "ibase_prepare": [
        "Prepare a query for later binding of parameter placeholders and execution",
        "<span class=\"methodname\">ibase_prepare<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> ) : <span class=\"type\">resource<\/span>",
        "<span class=\"methodname\">ibase_prepare<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> ) : <span class=\"type\">resource<\/span>",
        "<span class=\"methodname\">ibase_prepare<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $trans<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "ibase_query": [
        "Execute a query on an InterBase database",
        "<span class=\"methodname\">ibase_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $bind_args<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "ibase_restore": [
        "Initiates a restore task in the service manager and returns immediately",
        "<span class=\"methodname\">ibase_restore<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $service_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $source_file<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dest_db<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $verbose<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "ibase_rollback": [
        "Roll back a transaction",
        "<span class=\"methodname\">ibase_rollback<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_or_trans_identifier<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ibase_rollback_ret": [
        "Roll back a transaction without closing it",
        "<span class=\"methodname\">ibase_rollback_ret<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_or_trans_identifier<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ibase_server_info": [
        "Request information about a database server",
        "<span class=\"methodname\">ibase_server_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $service_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $action<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ibase_service_attach": [
        "Connect to the service manager",
        "<span class=\"methodname\">ibase_service_attach<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $host<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dba_username<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dba_password<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ibase_service_detach": [
        "Disconnect from the service manager",
        "<span class=\"methodname\">ibase_service_detach<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $service_handle<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ibase_set_event_handler": [
        "Register a callback function to be called when events are posted",
        "<span class=\"methodname\">ibase_set_event_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $event_handler<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $event_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> ...$even_names<\/span> ) : <span class=\"type\">resource<\/span>",
        "<span class=\"methodname\">ibase_set_event_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $event_handler<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $event_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> ...$event_names<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "ibase_trans": [
        "Begin a transaction",
        "<span class=\"methodname\">ibase_trans<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $trans_args<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>",
        "<span class=\"methodname\">ibase_trans<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $trans_args<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "ibase_wait_event": [
        "Wait for an event to be posted by the database",
        "<span class=\"methodname\">ibase_wait_event<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $event_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> ...$event_names<\/span> ) : <span class=\"type\">string<\/span>",
        "<span class=\"methodname\">ibase_wait_event<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $event_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> ...$event_names<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "iconv": [
        "Convert string to requested character encoding",
        "<span class=\"methodname\">iconv<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $from_encoding<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $to_encoding<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "iconv_get_encoding": [
        "Retrieve internal configuration variables of iconv extension",
        "<span class=\"methodname\">iconv_get_encoding<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $type<span class=\"initializer\"> = \"all\"<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "iconv_mime_decode": [
        "Decodes a MIME header field",
        "<span class=\"methodname\">iconv_mime_decode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "iconv_mime_decode_headers": [
        "Decodes multiple MIME header fields at once",
        "<span class=\"methodname\">iconv_mime_decode_headers<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $headers<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "iconv_mime_encode": [
        "Composes a MIME header field",
        "<span class=\"methodname\">iconv_mime_encode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $field_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $field_value<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = []<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "iconv_set_encoding": [
        "Set current setting for character encoding conversion",
        "<span class=\"methodname\">iconv_set_encoding<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $encoding<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "iconv_strlen": [
        "Returns the character count of string",
        "<span class=\"methodname\">iconv_strlen<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "iconv_strpos": [
        "Finds position of first occurrence of a needle within a haystack",
        "<span class=\"methodname\">iconv_strpos<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "iconv_strrpos": [
        "Finds the last occurrence of a needle within a haystack",
        "<span class=\"methodname\">iconv_strrpos<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "iconv_substr": [
        "Cut out part of a string",
        "<span class=\"methodname\">iconv_substr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $length<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "idate": [
        "Format a local time\/date as integer",
        "<span class=\"methodname\">idate<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $timestamp<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "idn_to_ascii": [
        "Convert domain name to IDNA ASCII form",
        "<span class=\"methodname\">idn_to_ascii<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $domain<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = IDNA_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $variant<span class=\"initializer\"> = INTL_IDNA_VARIANT_UTS46<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$idna_info<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "idn_to_utf8": [
        "Convert domain name from IDNA ASCII to Unicode",
        "<span class=\"methodname\">idn_to_utf8<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $domain<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $variant<span class=\"initializer\"> = INTL_IDNA_VARIANT_UTS46<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$idna_info<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ignore_user_abort": [
        "Set whether a client disconnect should abort script execution",
        "<span class=\"methodname\">ignore_user_abort<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">bool<\/span>|<span class=\"type\">null<\/span><\/span> $enable<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "image2wbmp": [
        "Output image to browser or file",
        "<span class=\"methodname\">image2wbmp<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $foreground<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "image_type_to_extension": [
        "Get file extension for image type",
        "<span class=\"methodname\">image_type_to_extension<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $image_type<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $include_dot<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "image_type_to_mime_type": [
        "Get Mime-Type for image-type returned by getimagesize,\n   exif_read_data, exif_thumbnail, exif_imagetype",
        "<span class=\"methodname\">image_type_to_mime_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $image_type<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "imageaffine": [
        "Return an image containing the affine transformed src image, using an optional clipping area",
        "<span class=\"methodname\">imageaffine<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $affine<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $clip<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imageaffinematrixconcat": [
        "Concatenate two affine transformation matrices",
        "<span class=\"methodname\">imageaffinematrixconcat<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $m1<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $m2<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imageaffinematrixget": [
        "Get an affine transformation matrix",
        "<span class=\"methodname\">imageaffinematrixget<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imagealphablending": [
        "Set the blending mode for an image",
        "<span class=\"methodname\">imagealphablending<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $blendmode<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imageantialias": [
        "Should antialias functions be used or not",
        "<span class=\"methodname\">imageantialias<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $enabled<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagearc": [
        "Draws an arc",
        "<span class=\"methodname\">imagearc<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cx<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cy<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $width<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $height<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $start<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $end<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagebmp": [
        "Output a BMP image to browser or file",
        "<span class=\"methodname\">imagebmp<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $to<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $compressed<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagechar": [
        "Draw a character horizontally",
        "<span class=\"methodname\">imagechar<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $font<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $c<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagecharup": [
        "Draw a character vertically",
        "<span class=\"methodname\">imagecharup<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $font<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $c<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagecolorallocate": [
        "Allocate a color for an image",
        "<span class=\"methodname\">imagecolorallocate<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $red<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $green<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $blue<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imagecolorallocatealpha": [
        "Allocate a color for an image",
        "<span class=\"methodname\">imagecolorallocatealpha<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $red<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $green<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $blue<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $alpha<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imagecolorat": [
        "Get the index of the color of a pixel",
        "<span class=\"methodname\">imagecolorat<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imagecolorclosest": [
        "Get the index of the closest color to the specified color",
        "<span class=\"methodname\">imagecolorclosest<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $red<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $green<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $blue<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imagecolorclosestalpha": [
        "Get the index of the closest color to the specified color + alpha",
        "<span class=\"methodname\">imagecolorclosestalpha<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $red<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $green<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $blue<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $alpha<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imagecolorclosesthwb": [
        "Get the index of the color which has the hue, white and blackness",
        "<span class=\"methodname\">imagecolorclosesthwb<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $red<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $green<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $blue<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imagecolordeallocate": [
        "De-allocate a color for an image",
        "<span class=\"methodname\">imagecolordeallocate<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagecolorexact": [
        "Get the index of the specified color",
        "<span class=\"methodname\">imagecolorexact<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $red<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $green<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $blue<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imagecolorexactalpha": [
        "Get the index of the specified color + alpha",
        "<span class=\"methodname\">imagecolorexactalpha<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $red<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $green<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $blue<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $alpha<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imagecolormatch": [
        "Makes the colors of the palette version of an image more closely match the true color version",
        "<span class=\"methodname\">imagecolormatch<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image1<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image2<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagecolorresolve": [
        "Get the index of the specified color or its closest possible alternative",
        "<span class=\"methodname\">imagecolorresolve<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $red<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $green<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $blue<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imagecolorresolvealpha": [
        "Get the index of the specified color + alpha or its closest possible alternative",
        "<span class=\"methodname\">imagecolorresolvealpha<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $red<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $green<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $blue<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $alpha<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imagecolorset": [
        "Set the color for the specified palette index",
        "<span class=\"methodname\">imagecolorset<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $index<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $red<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $green<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $blue<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $alpha<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "imagecolorsforindex": [
        "Get the colors for an index",
        "<span class=\"methodname\">imagecolorsforindex<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $index<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "imagecolorstotal": [
        "Find out the number of colors in an image's palette",
        "<span class=\"methodname\">imagecolorstotal<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imagecolortransparent": [
        "Define a color as transparent",
        "<span class=\"methodname\">imagecolortransparent<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> ) : <span class=\"type\">int<\/span>",
        "<span class=\"methodname\">imagecolortransparent<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imageconvolution": [
        "Apply a 3x3 convolution matrix, using coefficient and offset",
        "<span class=\"methodname\">imageconvolution<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $matrix<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $div<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $offset<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagecopy": [
        "Copy part of an image",
        "<span class=\"methodname\">imagecopy<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $dst_im<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $src_im<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dst_x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dst_y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_w<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_h<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagecopymerge": [
        "Copy and merge part of an image",
        "<span class=\"methodname\">imagecopymerge<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $dst_im<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $src_im<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dst_x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dst_y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_w<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_h<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pct<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagecopymergegray": [
        "Copy and merge part of an image with gray scale",
        "<span class=\"methodname\">imagecopymergegray<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $dst_im<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $src_im<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dst_x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dst_y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_w<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_h<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pct<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagecopyresampled": [
        "Copy and resize part of an image with resampling",
        "<span class=\"methodname\">imagecopyresampled<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $dst_image<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $src_image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dst_x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dst_y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dst_w<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dst_h<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_w<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_h<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagecopyresized": [
        "Copy and resize part of an image",
        "<span class=\"methodname\">imagecopyresized<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $dst_image<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $src_image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dst_x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dst_y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dst_w<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dst_h<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_w<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $src_h<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagecreate": [
        "Create a new palette based image",
        "<span class=\"methodname\">imagecreate<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $width<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $height<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "imagecreatefrombmp": [
        "Create a new image from file or URL",
        "<span class=\"methodname\">imagecreatefrombmp<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "imagecreatefromgd": [
        "Create a new image from GD file or URL",
        "<span class=\"methodname\">imagecreatefromgd<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "imagecreatefromgd2": [
        "Create a new image from GD2 file or URL",
        "<span class=\"methodname\">imagecreatefromgd2<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "imagecreatefromgd2part": [
        "Create a new image from a given part of GD2 file or URL",
        "<span class=\"methodname\">imagecreatefromgd2part<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $srcX<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $srcY<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $width<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $height<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "imagecreatefromgif": [
        "Create a new image from file or URL",
        "<span class=\"methodname\">imagecreatefromgif<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "imagecreatefromjpeg": [
        "Create a new image from file or URL",
        "<span class=\"methodname\">imagecreatefromjpeg<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "imagecreatefrompng": [
        "Create a new image from file or URL",
        "<span class=\"methodname\">imagecreatefrompng<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "imagecreatefromstring": [
        "Create a new image from the image stream in the string",
        "<span class=\"methodname\">imagecreatefromstring<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $image<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "imagecreatefromwbmp": [
        "Create a new image from file or URL",
        "<span class=\"methodname\">imagecreatefromwbmp<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "imagecreatefromwebp": [
        "Create a new image from file or URL",
        "<span class=\"methodname\">imagecreatefromwebp<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "imagecreatefromxbm": [
        "Create a new image from file or URL",
        "<span class=\"methodname\">imagecreatefromxbm<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "imagecreatefromxpm": [
        "Create a new image from file or URL",
        "<span class=\"methodname\">imagecreatefromxpm<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "imagecreatetruecolor": [
        "Create a new true color image",
        "<span class=\"methodname\">imagecreatetruecolor<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $width<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $height<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "imagecrop": [
        "Crop an image to the given rectangle",
        "<span class=\"methodname\">imagecrop<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $rect<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imagecropauto": [
        "Crop an image automatically using one of the available modes",
        "<span class=\"methodname\">imagecropauto<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = IMG_CROP_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $threshold<span class=\"initializer\"> = .5<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imagedashedline": [
        "Draw a dashed line",
        "<span class=\"methodname\">imagedashedline<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagedestroy": [
        "Destroy an image",
        "<span class=\"methodname\">imagedestroy<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imageellipse": [
        "Draw an ellipse",
        "<span class=\"methodname\">imageellipse<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cx<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cy<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $width<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $height<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagefill": [
        "Flood fill",
        "<span class=\"methodname\">imagefill<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagefilledarc": [
        "Draw a partial arc and fill it",
        "<span class=\"methodname\">imagefilledarc<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cx<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cy<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $width<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $height<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $start<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $end<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $style<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagefilledellipse": [
        "Draw a filled ellipse",
        "<span class=\"methodname\">imagefilledellipse<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cx<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cy<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $width<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $height<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagefilledpolygon": [
        "Draw a filled polygon",
        "<span class=\"methodname\">imagefilledpolygon<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $points<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_points<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">imagefilledpolygon<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $points<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagefilledrectangle": [
        "Draw a filled rectangle",
        "<span class=\"methodname\">imagefilledrectangle<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagefilltoborder": [
        "Flood fill to specific color",
        "<span class=\"methodname\">imagefilltoborder<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $border<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagefilter": [
        "Applies a filter to an image",
        "<span class=\"methodname\">imagefilter<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $filtertype<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $arg1<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $arg2<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $arg3<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $arg4<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imageflip": [
        "Flips an image using a given mode",
        "<span class=\"methodname\">imageflip<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagefontheight": [
        "Get font height",
        "<span class=\"methodname\">imagefontheight<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $font<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imagefontwidth": [
        "Get font width",
        "<span class=\"methodname\">imagefontwidth<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $font<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imageftbbox": [
        "Give the bounding box of a text using fonts via freetype2",
        "<span class=\"methodname\">imageftbbox<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $size<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $angle<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fontfile<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $extrainfo<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "imagefttext": [
        "Write text to the image using fonts using FreeType 2",
        "<span class=\"methodname\">imagefttext<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $size<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $angle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fontfile<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $extrainfo<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "imagegammacorrect": [
        "Apply a gamma correction to a GD image",
        "<span class=\"methodname\">imagegammacorrect<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $inputgamma<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $outputgamma<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagegd": [
        "Output GD image to browser or file",
        "<span class=\"methodname\">imagegd<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $to<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagegd2": [
        "Output GD2 image to browser or file",
        "<span class=\"methodname\">imagegd2<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $to<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $chunk_size<span class=\"initializer\"> = 128<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = IMG_GD2_RAW<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagegetclip": [
        "Get the clipping rectangle",
        "<span class=\"methodname\">imagegetclip<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $im<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "imagegetinterpolation": [
        "Get the interpolation method",
        "<span class=\"methodname\">imagegetinterpolation<\/span> ( <span class=\"methodparam\"><span class=\"type\">GdImage<\/span> $image<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imagegif": [
        "Output image to browser or file",
        "<span class=\"methodname\">imagegif<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $to<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagegrabscreen": [
        "Captures the whole screen",
        "<span class=\"methodname\">imagegrabscreen<\/span> ( ) : <span class=\"type\">resource<\/span>"
    ],
    "imagegrabwindow": [
        "Captures a window",
        "<span class=\"methodname\">imagegrabwindow<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $window_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $client_area<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "imageinterlace": [
        "Enable or disable interlace",
        "<span class=\"methodname\">imageinterlace<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $interlace<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imageistruecolor": [
        "Finds whether an image is a truecolor image",
        "<span class=\"methodname\">imageistruecolor<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagejpeg": [
        "Output image to browser or file",
        "<span class=\"methodname\">imagejpeg<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $to<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $quality<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagelayereffect": [
        "Set the alpha blending flag to use layering effects",
        "<span class=\"methodname\">imagelayereffect<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $effect<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imageline": [
        "Draw a line",
        "<span class=\"methodname\">imageline<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imageloadfont": [
        "Load a new font",
        "<span class=\"methodname\">imageloadfont<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $file<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imageopenpolygon": [
        "Draws an open polygon",
        "<span class=\"methodname\">imageopenpolygon<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $points<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_points<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">imageopenpolygon<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $points<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagepalettecopy": [
        "Copy the palette from one image to another",
        "<span class=\"methodname\">imagepalettecopy<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $destination<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $source<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "imagepalettetotruecolor": [
        "Converts a palette based image to true color",
        "<span class=\"methodname\">imagepalettetotruecolor<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $src<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagepng": [
        "Output a PNG image to either the browser or a file",
        "<span class=\"methodname\">imagepng<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $to<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $quality<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $filters<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagepolygon": [
        "Draws a polygon",
        "<span class=\"methodname\">imagepolygon<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $points<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num_points<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">imagepolygon<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $points<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagerectangle": [
        "Draw a rectangle",
        "<span class=\"methodname\">imagerectangle<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imageresolution": [
        "Get or set the resolution of the image",
        "<span class=\"methodname\">imageresolution<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> ) : <span class=\"type\">mixed<\/span>",
        "<span class=\"methodname\">imageresolution<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $res_x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $res_y<span class=\"initializer\"> = $res_x<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "imagerotate": [
        "Rotate an image with a given angle",
        "<span class=\"methodname\">imagerotate<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $angle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $bgd_color<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dummy<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imagesavealpha": [
        "Whether to retain full alpha channel information when saving PNG images",
        "<span class=\"methodname\">imagesavealpha<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $saveflag<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagescale": [
        "Scale an image using the given new width and height",
        "<span class=\"methodname\">imagescale<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $new_width<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $new_height<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = IMG_BILINEAR_FIXED<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imagesetbrush": [
        "Set the brush image for line drawing",
        "<span class=\"methodname\">imagesetbrush<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $brush<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagesetclip": [
        "Set the clipping rectangle",
        "<span class=\"methodname\">imagesetclip<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $im<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y2<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagesetinterpolation": [
        "Set the interpolation method",
        "<span class=\"methodname\">imagesetinterpolation<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $method<span class=\"initializer\"> = IMG_BILINEAR_FIXED<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagesetpixel": [
        "Set a single pixel",
        "<span class=\"methodname\">imagesetpixel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagesetstyle": [
        "Set the style for line drawing",
        "<span class=\"methodname\">imagesetstyle<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $style<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagesetthickness": [
        "Set the thickness for line drawing",
        "<span class=\"methodname\">imagesetthickness<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $thickness<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagesettile": [
        "Set the tile image for filling",
        "<span class=\"methodname\">imagesettile<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $tile<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagestring": [
        "Draw a string horizontally",
        "<span class=\"methodname\">imagestring<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $font<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagestringup": [
        "Draw a string vertically",
        "<span class=\"methodname\">imagestringup<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $font<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagesx": [
        "Get image width",
        "<span class=\"methodname\">imagesx<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imagesy": [
        "Get image height",
        "<span class=\"methodname\">imagesy<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imagetruecolortopalette": [
        "Convert a true color image to a palette image",
        "<span class=\"methodname\">imagetruecolortopalette<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $dither<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $ncolors<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagettfbbox": [
        "Give the bounding box of a text using TrueType fonts",
        "<span class=\"methodname\">imagettfbbox<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $size<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $angle<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fontfile<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "imagettftext": [
        "Write text to the image using TrueType fonts",
        "<span class=\"methodname\">imagettftext<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $size<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $angle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fontfile<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "imagetypes": [
        "Return the image types supported by this PHP build",
        "<span class=\"methodname\">imagetypes<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "imagewbmp": [
        "Output image to browser or file",
        "<span class=\"methodname\">imagewbmp<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $to<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $foreground<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagewebp": [
        "Output a WebP image to browser or file",
        "<span class=\"methodname\">imagewebp<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $to<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $quality<span class=\"initializer\"> = 80<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imagexbm": [
        "Output an XBM image to browser or file",
        "<span class=\"methodname\">imagexbm<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $image<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $foreground<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "Imagick": [
        "The Imagick class has the ability to hold and operate on multiple images simultaneously. This is achieved through an internal stack. There is always an internal pointer that points at the current image. Some functions operate on all images in the Imagick class, but most operate only on the current image in the internal stack. As a convention, method names can contain the word Image to denote they affect only the current image in the stack.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Imagick::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $files<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "ImagickDraw": [
        "The ImagickDraw constructor",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ImagickDraw::__construct<\/span> ( )"
    ],
    "ImagickPixel": [
        "The ImagickPixel constructor",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ImagickPixel::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $color<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "ImagickPixelIterator": [
        "The ImagickPixelIterator constructor",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ImagickPixelIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">Imagick<\/span> $wand<\/span> )"
    ],
    "imap_8bit": [
        "Convert an 8bit string to a quoted-printable string",
        "<span class=\"methodname\">imap_8bit<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_alerts": [
        "Returns all IMAP alert messages that have occurred",
        "<span class=\"methodname\">imap_alerts<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_append": [
        "Append a string message to a specified mailbox",
        "<span class=\"methodname\">imap_append<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $folder<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $options<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $internal_date<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_base64": [
        "Decode BASE64 encoded text",
        "<span class=\"methodname\">imap_base64<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_binary": [
        "Convert an 8bit string to a base64 string",
        "<span class=\"methodname\">imap_binary<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_body": [
        "Read the message body",
        "<span class=\"methodname\">imap_body<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $message_num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_bodystruct": [
        "Read the structure of a specified body section of a specific message",
        "<span class=\"methodname\">imap_bodystruct<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $message_num<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $section<\/span> ) : <span class=\"type\"><span class=\"type\"><span class=\"type stdClass\">stdClass<\/span><\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_check": [
        "Check current mailbox",
        "<span class=\"methodname\">imap_check<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> ) : <span class=\"type\"><span class=\"type\"><span class=\"type stdClass\">stdClass<\/span><\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_clearflag_full": [
        "Clears flags on messages",
        "<span class=\"methodname\">imap_clearflag_full<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $sequence<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $flag<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_close": [
        "Close an IMAP stream",
        "<span class=\"methodname\">imap_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_createmailbox": [
        "Create a new mailbox",
        "<span class=\"methodname\">imap_createmailbox<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mailbox<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_delete": [
        "Mark a message for deletion from current mailbox",
        "<span class=\"methodname\">imap_delete<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $message_num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_deletemailbox": [
        "Delete a mailbox",
        "<span class=\"methodname\">imap_deletemailbox<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mailbox<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_errors": [
        "Returns all of the IMAP errors that have occurred",
        "<span class=\"methodname\">imap_errors<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_expunge": [
        "Delete all messages marked for deletion",
        "<span class=\"methodname\">imap_expunge<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_fetch_overview": [
        "Read an overview of the information in the headers of the given message",
        "<span class=\"methodname\">imap_fetch_overview<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $sequence<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_fetchbody": [
        "Fetch a particular section of the body of the message",
        "<span class=\"methodname\">imap_fetchbody<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $message_num<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $section<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_fetchheader": [
        "Returns header for a message",
        "<span class=\"methodname\">imap_fetchheader<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $message_num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_fetchmime": [
        "Fetch MIME headers for a particular section of the message",
        "<span class=\"methodname\">imap_fetchmime<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $message_num<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $section<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_fetchstructure": [
        "Read the structure of a particular message",
        "<span class=\"methodname\">imap_fetchstructure<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $message_num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\"><span class=\"type stdClass\">stdClass<\/span><\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_gc": [
        "Clears IMAP cache",
        "<span class=\"methodname\">imap_gc<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_get_quota": [
        "Retrieve the quota level settings, and usage statics per mailbox",
        "<span class=\"methodname\">imap_get_quota<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $quota_root<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_get_quotaroot": [
        "Retrieve the quota settings per user",
        "<span class=\"methodname\">imap_get_quotaroot<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mailbox<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_getacl": [
        "Gets the ACL for a given mailbox",
        "<span class=\"methodname\">imap_getacl<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mailbox<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_getmailboxes": [
        "Read the list of mailboxes, returning detailed information on each one",
        "<span class=\"methodname\">imap_getmailboxes<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $reference<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_getsubscribed": [
        "List all the subscribed mailboxes",
        "<span class=\"methodname\">imap_getsubscribed<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $reference<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_headerinfo": [
        "Read the header of the message",
        "<span class=\"methodname\">imap_headerinfo<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $message_num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $from_length<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $subject_length<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\"><span class=\"type stdClass\">stdClass<\/span><\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_headers": [
        "Returns headers for all messages in a mailbox",
        "<span class=\"methodname\">imap_headers<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_last_error": [
        "Gets the last IMAP error that occurred during this page request",
        "<span class=\"methodname\">imap_last_error<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_list": [
        "Read the list of mailboxes",
        "<span class=\"methodname\">imap_list<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $reference<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_listscan": [
        "Returns the list of mailboxes that matches the given text",
        "<span class=\"methodname\">imap_listscan<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $reference<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $content<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_lsub": [
        "List all the subscribed mailboxes",
        "<span class=\"methodname\">imap_lsub<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $reference<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_mail": [
        "Send an email message",
        "<span class=\"methodname\">imap_mail<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $to<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $subject<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $additional_headers<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $cc<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $bcc<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $return_path<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_mail_compose": [
        "Create a MIME message based on given envelope and body sections",
        "<span class=\"methodname\">imap_mail_compose<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $envelope<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $bodies<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_mail_copy": [
        "Copy specified messages to a mailbox",
        "<span class=\"methodname\">imap_mail_copy<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $message_nums<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mailbox<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_mail_move": [
        "Move specified messages to a mailbox",
        "<span class=\"methodname\">imap_mail_move<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $message_nums<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mailbox<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_mailboxmsginfo": [
        "Get information about the current mailbox",
        "<span class=\"methodname\">imap_mailboxmsginfo<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> ) : <span class=\"type\"><span class=\"type stdClass\">stdClass<\/span><\/span>"
    ],
    "imap_mime_header_decode": [
        "Decode MIME header elements",
        "<span class=\"methodname\">imap_mime_header_decode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_msgno": [
        "Gets the message sequence number for the given UID",
        "<span class=\"methodname\">imap_msgno<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $message_uid<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imap_mutf7_to_utf8": [
        "Decode a modified UTF-7 string to UTF-8",
        "<span class=\"methodname\">imap_mutf7_to_utf8<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_num_msg": [
        "Gets the number of messages in the current mailbox",
        "<span class=\"methodname\">imap_num_msg<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_num_recent": [
        "Gets the number of recent messages in current mailbox",
        "<span class=\"methodname\">imap_num_recent<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "imap_open": [
        "Open an IMAP stream to a mailbox",
        "<span class=\"methodname\">imap_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $mailbox<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $user<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = []<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_ping": [
        "Check if the IMAP stream is still active",
        "<span class=\"methodname\">imap_ping<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_qprint": [
        "Convert a quoted-printable string to an 8 bit string",
        "<span class=\"methodname\">imap_qprint<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_renamemailbox": [
        "Rename an old mailbox to new mailbox",
        "<span class=\"methodname\">imap_renamemailbox<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $from<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $to<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_reopen": [
        "Reopen IMAP stream to new mailbox",
        "<span class=\"methodname\">imap_reopen<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mailbox<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_rfc822_parse_adrlist": [
        "Parses an address string",
        "<span class=\"methodname\">imap_rfc822_parse_adrlist<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $default_hostname<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "imap_rfc822_parse_headers": [
        "Parse mail headers from a string",
        "<span class=\"methodname\">imap_rfc822_parse_headers<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $headers<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $default_hostname<span class=\"initializer\"> = \"UNKNOWN\"<\/span><\/span> ) : <span class=\"type\"><span class=\"type stdClass\">stdClass<\/span><\/span>"
    ],
    "imap_rfc822_write_address": [
        "Returns a properly formatted email address given the mailbox, host, and personal info",
        "<span class=\"methodname\">imap_rfc822_write_address<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $mailbox<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $personal<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_savebody": [
        "Save a specific body section to a file",
        "<span class=\"methodname\">imap_savebody<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">int<\/span><\/span> $file<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $message_num<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $section<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_search": [
        "This function returns an array of messages matching the given search criteria",
        "<span class=\"methodname\">imap_search<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $criteria<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = SE_FREE<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $charset<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_set_quota": [
        "Sets a quota for a given mailbox",
        "<span class=\"methodname\">imap_set_quota<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $quota_root<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mailbox_size<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_setacl": [
        "Sets the ACL for a given mailbox",
        "<span class=\"methodname\">imap_setacl<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mailbox<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $user_id<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $rights<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_setflag_full": [
        "Sets flags on messages",
        "<span class=\"methodname\">imap_setflag_full<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $sequence<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $flag<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_sort": [
        "Gets and sort messages",
        "<span class=\"methodname\">imap_sort<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $criteria<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $reverse<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $search_criteria<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $charset<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_status": [
        "Returns status information on a mailbox",
        "<span class=\"methodname\">imap_status<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mailbox<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<\/span> ) : <span class=\"type\"><span class=\"type\"><span class=\"type stdClass\">stdClass<\/span><\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_subscribe": [
        "Subscribe to a mailbox",
        "<span class=\"methodname\">imap_subscribe<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mailbox<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_thread": [
        "Returns a tree of threaded message",
        "<span class=\"methodname\">imap_thread<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = SE_FREE<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_timeout": [
        "Set or fetch imap timeout",
        "<span class=\"methodname\">imap_timeout<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout_type<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "imap_uid": [
        "This function returns the UID for the given message sequence number",
        "<span class=\"methodname\">imap_uid<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $message_num<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_undelete": [
        "Unmark the message which is marked deleted",
        "<span class=\"methodname\">imap_undelete<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $message_num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_unsubscribe": [
        "Unsubscribe from a mailbox",
        "<span class=\"methodname\">imap_unsubscribe<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $imap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mailbox<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "imap_utf7_decode": [
        "Decodes a modified UTF-7 encoded string",
        "<span class=\"methodname\">imap_utf7_decode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "imap_utf7_encode": [
        "Converts ISO-8859-1 string to modified UTF-7 text",
        "<span class=\"methodname\">imap_utf7_encode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "imap_utf8": [
        "Converts MIME-encoded text to UTF-8",
        "<span class=\"methodname\">imap_utf8<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $mime_encoded_text<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "imap_utf8_to_mutf7": [
        "Encode a UTF-8 string to modified UTF-7",
        "<span class=\"methodname\">imap_utf8_to_mutf7<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "implode": [
        "Join array elements with a string",
        "<span class=\"methodname\">implode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $separator<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> ) : <span class=\"type\">string<\/span>",
        "<span class=\"methodname\">implode<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> ) : <span class=\"type\">string<\/span>",
        "<span class=\"methodname\">implode<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $separator<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "in_array": [
        "Checks if a value exists in an array",
        "<span class=\"methodname\">in_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $strict<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "inet_ntop": [
        "Converts a packed internet address to a human readable representation",
        "<span class=\"methodname\">inet_ntop<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $ip<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "inet_pton": [
        "Converts a human readable IP address to its packed in_addr representation",
        "<span class=\"methodname\">inet_pton<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $ip<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "InfiniteIterator": [
        "The InfiniteIterator allows one to infinitely iterate over an iterator without having to manually rewind the iterator upon reaching its end.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">InfiniteIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">Iterator<\/span> $iterator<\/span> )"
    ],
    "inflate_add": [
        "Incrementally inflate encoded data",
        "<span class=\"methodname\">inflate_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">InflateContext<\/span> $context<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flush_mode<span class=\"initializer\"> = ZLIB_SYNC_FLUSH<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "inflate_get_read_len": [
        "Get number of bytes read so far",
        "<span class=\"methodname\">inflate_get_read_len<\/span> ( <span class=\"methodparam\"><span class=\"type\">InflateContext<\/span> $context<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "inflate_get_status": [
        "Get decompression status",
        "<span class=\"methodname\">inflate_get_status<\/span> ( <span class=\"methodparam\"><span class=\"type\">InflateContext<\/span> $context<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "inflate_init": [
        "Initialize an incremental inflate context",
        "<span class=\"methodname\">inflate_init<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $encoding<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = []<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">InflateContext<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "InflateContext": [
        "A fully opaque class which replaces zlib.inflate resources as of PHP 8.0.0."
    ],
    "ingres_autocommit": [
        "Switch autocommit on or off",
        "<span class=\"methodname\">ingres_autocommit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ingres_autocommit_state": [
        "Test if the connection is using autocommit",
        "<span class=\"methodname\">ingres_autocommit_state<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ingres_charset": [
        "Returns the installation character set",
        "<span class=\"methodname\">ingres_charset<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ingres_close": [
        "Close an Ingres database connection",
        "<span class=\"methodname\">ingres_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ingres_commit": [
        "Commit a transaction",
        "<span class=\"methodname\">ingres_commit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ingres_connect": [
        "Open a connection to an Ingres database",
        "<span class=\"methodname\">ingres_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ingres_cursor": [
        "Get a cursor name for a given result resource",
        "<span class=\"methodname\">ingres_cursor<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ingres_errno": [
        "Get the last Ingres error number generated",
        "<span class=\"methodname\">ingres_errno<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ingres_error": [
        "Get a meaningful error message for the last error generated",
        "<span class=\"methodname\">ingres_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ingres_errsqlstate": [
        "Get the last SQLSTATE error code generated",
        "<span class=\"methodname\">ingres_errsqlstate<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ingres_escape_string": [
        "Escape special characters for use in a query",
        "<span class=\"methodname\">ingres_escape_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $source_string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ingres_execute": [
        "Execute a prepared query",
        "<span class=\"methodname\">ingres_execute<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $params<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $types<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ingres_fetch_array": [
        "Fetch a row of result into an array",
        "<span class=\"methodname\">ingres_fetch_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $result_type<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "ingres_fetch_assoc": [
        "Fetch a row of result into an associative array",
        "<span class=\"methodname\">ingres_fetch_assoc<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "ingres_fetch_object": [
        "Fetch a row of result into an object",
        "<span class=\"methodname\">ingres_fetch_object<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $result_type<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "ingres_fetch_proc_return": [
        "Get the return value from a procedure call",
        "<span class=\"methodname\">ingres_fetch_proc_return<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ingres_fetch_row": [
        "Fetch a row of result into an enumerated array",
        "<span class=\"methodname\">ingres_fetch_row<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "ingres_field_length": [
        "Get the length of a field",
        "<span class=\"methodname\">ingres_field_length<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $index<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ingres_field_name": [
        "Get the name of a field in a query result",
        "<span class=\"methodname\">ingres_field_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $index<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ingres_field_nullable": [
        "Test if a field is nullable",
        "<span class=\"methodname\">ingres_field_nullable<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $index<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ingres_field_precision": [
        "Get the precision of a field",
        "<span class=\"methodname\">ingres_field_precision<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $index<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ingres_field_scale": [
        "Get the scale of a field",
        "<span class=\"methodname\">ingres_field_scale<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $index<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ingres_field_type": [
        "Get the type of a field in a query result",
        "<span class=\"methodname\">ingres_field_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $index<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ingres_free_result": [
        "Free the resources associated with a result identifier",
        "<span class=\"methodname\">ingres_free_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ingres_next_error": [
        "Get the next Ingres error",
        "<span class=\"methodname\">ingres_next_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ingres_num_fields": [
        "Get the number of fields returned by the last query",
        "<span class=\"methodname\">ingres_num_fields<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ingres_num_rows": [
        "Get the number of rows affected or returned by a query",
        "<span class=\"methodname\">ingres_num_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ingres_pconnect": [
        "Open a persistent connection to an Ingres database",
        "<span class=\"methodname\">ingres_pconnect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ingres_prepare": [
        "Prepare a query for later execution",
        "<span class=\"methodname\">ingres_prepare<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "ingres_query": [
        "Send an SQL query to Ingres",
        "<span class=\"methodname\">ingres_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $params<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $types<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "ingres_result_seek": [
        "Set the row position before fetching data",
        "<span class=\"methodname\">ingres_result_seek<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $position<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ingres_rollback": [
        "Roll back a transaction",
        "<span class=\"methodname\">ingres_rollback<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ingres_set_environment": [
        "Set environment features controlling output options",
        "<span class=\"methodname\">ingres_set_environment<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ingres_unbuffered_query": [
        "Send an unbuffered  SQL query to Ingres",
        "<span class=\"methodname\">ingres_unbuffered_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $params<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $types<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "ini_get": [
        "Gets the value of a configuration option",
        "<span class=\"methodname\">ini_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $option<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ini_get_all": [
        "Gets all configuration options",
        "<span class=\"methodname\">ini_get_all<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $extension<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $details<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "ini_restore": [
        "Restores the value of a configuration option",
        "<span class=\"methodname\">ini_restore<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $option<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "ini_set": [
        "Sets the value of a configuration option",
        "<span class=\"methodname\">ini_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $option<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "inotify_add_watch": [
        "Add a watch to an initialized inotify instance",
        "<span class=\"methodname\">inotify_add_watch<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $inotify_instance<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pathname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mask<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "inotify_init": [
        "Initialize an inotify instance",
        "<span class=\"methodname\">inotify_init<\/span> ( ) : <span class=\"type\">resource<\/span>"
    ],
    "inotify_queue_len": [
        "Return a number upper than zero if there are pending events",
        "<span class=\"methodname\">inotify_queue_len<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $inotify_instance<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "inotify_read": [
        "Read events from an inotify instance",
        "<span class=\"methodname\">inotify_read<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $inotify_instance<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "inotify_rm_watch": [
        "Remove an existing watch from an inotify instance",
        "<span class=\"methodname\">inotify_rm_watch<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $inotify_instance<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $watch_descriptor<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intdiv": [
        "Integer division",
        "<span class=\"methodname\">intdiv<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $num1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num2<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "interface_exists": [
        "Checks if the interface has been defined",
        "<span class=\"methodname\">interface_exists<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $interface_name<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $autoload<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intl_error_name": [
        "Get symbolic name for a given error code",
        "<span class=\"methodname\">intl_error_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $errorCode<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "intl_get_error_code": [
        "Get the last error code",
        "<span class=\"methodname\">intl_get_error_code<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "intl_get_error_message": [
        "Get description of the last error",
        "<span class=\"methodname\">intl_get_error_message<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "intl_is_failure": [
        "Check whether the given error code indicates failure",
        "<span class=\"methodname\">intl_is_failure<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $errorCode<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "IntlBreakIterator": [
        "A \u201cbreak iterator\u201d is an ICU object that exposes methods for locating boundaries in text (e.g. word or sentence boundaries). The PHP IntlBreakIterator serves as the base class for all types of ICU break iterators. Where extra functionality is available, the intl extension may expose the ICU break iterator with suitable subclasses, such as IntlRuleBasedBreakIterator or IntlCodePointBreakIterator.",
        "<span class=\"modifier\">private<\/span> <span class=\"methodname\">IntlBreakIterator::__construct<\/span> ( )"
    ],
    "intlcal_add": [
        "Add a (signed) amount of time to a field",
        "<span class=\"methodname\">intlcal_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $amount<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_after": [
        "Whether this object\u02bcs time is after that of the passed object",
        "<span class=\"methodname\">intlcal_after<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $other<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_before": [
        "Whether this object\u02bcs time is before that of the passed object",
        "<span class=\"methodname\">intlcal_before<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $other<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_clear": [
        "Clear a field or all fields",
        "<span class=\"methodname\">intlcal_clear<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_create_instance": [
        "Create a new IntlCalendar",
        "<span class=\"methodname\">intlcal_create_instance<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $timeZone<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\">IntlCalendar<\/span>"
    ],
    "intlcal_equals": [
        "Compare time of two IntlCalendar objects for equality",
        "<span class=\"methodname\">intlcal_equals<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $other<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_field_difference": [
        "Calculate difference between given time and this object\u02bcs time",
        "<span class=\"methodname\">intlcal_field_difference<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $when<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "intlcal_from_date_time": [
        "Create an IntlCalendar from a DateTime object or string",
        "<span class=\"methodname\">intlcal_from_date_time<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $dateTime<\/span> ) : <span class=\"type\">IntlCalendar<\/span>"
    ],
    "intlcal_get": [
        "Get the value for a field",
        "<span class=\"methodname\">intlcal_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "intlcal_get_actual_maximum": [
        "The maximum value for a field, considering the object\u02bcs current time",
        "<span class=\"methodname\">intlcal_get_actual_maximum<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "intlcal_get_actual_minimum": [
        "The minimum value for a field, considering the object\u02bcs current time",
        "<span class=\"methodname\">intlcal_get_actual_minimum<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "intlcal_get_available_locales": [
        "Get array of locales for which there is data",
        "<span class=\"methodname\">intlcal_get_available_locales<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "intlcal_get_day_of_week_type": [
        "Tell whether a day is a weekday, weekend or a day that has a transition between the two",
        "<span class=\"methodname\">intlcal_get_day_of_week_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dayOfWeek<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "intlcal_get_error_code": [
        "Get last error code on the object",
        "<span class=\"methodname\">intlcal_get_error_code<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $calendar<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "intlcal_get_error_message": [
        "Get last error message on the object",
        "<span class=\"methodname\">intlcal_get_error_message<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $calendar<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "intlcal_get_first_day_of_week": [
        "Get the first day of the week for the calendar\u02bcs locale",
        "<span class=\"methodname\">intlcal_get_first_day_of_week<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "intlcal_get_greatest_minimum": [
        "Get the largest local minimum value for a field",
        "<span class=\"methodname\">intlcal_get_greatest_minimum<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "intlcal_get_keyword_values_for_locale": [
        "Get set of locale keyword values",
        "<span class=\"modifier\">static<\/span> <span class=\"methodname\">intlcal_get_keyword_values_for_locale<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $commonlyUsed<\/span> ) : <span class=\"type\"><span class=\"type\">Iterator<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "intlcal_get_least_maximum": [
        "Get the smallest local maximum for a field",
        "<span class=\"methodname\">intlcal_get_least_maximum<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "intlcal_get_locale": [
        "Get the locale associated with the object",
        "<span class=\"methodname\">intlcal_get_locale<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $localeType<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "intlcal_get_maximum": [
        "Get the global maximum value for a field",
        "<span class=\"methodname\">intlcal_get_maximum<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "intlcal_get_minimal_days_in_first_week": [
        "Get minimal number of days the first week in a year or month can have",
        "<span class=\"methodname\">intlcal_get_minimal_days_in_first_week<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "intlcal_get_minimum": [
        "Get the global minimum value for a field",
        "<span class=\"methodname\">intlcal_get_minimum<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "intlcal_get_now": [
        "Get number representing the current time",
        "<span class=\"methodname\">intlcal_get_now<\/span> ( ) : <span class=\"type\">float<\/span>"
    ],
    "intlcal_get_repeated_wall_time_option": [
        "Get behavior for handling repeating wall time",
        "<span class=\"methodname\">intlcal_get_repeated_wall_time_option<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "intlcal_get_skipped_wall_time_option": [
        "Get behavior for handling skipped wall time",
        "<span class=\"methodname\">intlcal_get_skipped_wall_time_option<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "intlcal_get_time": [
        "Get time currently represented by the object",
        "<span class=\"methodname\">intlcal_get_time<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "intlcal_get_time_zone": [
        "Get the object\u02bcs timezone",
        "<span class=\"methodname\">intlcal_get_time_zone<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> ) : <span class=\"type\">IntlTimeZone<\/span>"
    ],
    "intlcal_get_type": [
        "Get the calendar type",
        "<span class=\"methodname\">intlcal_get_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "intlcal_get_weekend_transition": [
        "Get time of the day at which weekend begins or ends",
        "<span class=\"methodname\">intlcal_get_weekend_transition<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dayOfWeek<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "intlcal_in_daylight_time": [
        "Whether the object\u02bcs time is in Daylight Savings Time",
        "<span class=\"methodname\">intlcal_in_daylight_time<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_is_equivalent_to": [
        "Whether another calendar is equal but for a different time",
        "<span class=\"methodname\">intlcal_is_equivalent_to<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $other<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_is_lenient": [
        "Whether date\/time interpretation is in lenient mode",
        "<span class=\"methodname\">intlcal_is_lenient<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_is_set": [
        "Whether a field is set",
        "<span class=\"methodname\">intlcal_is_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_is_weekend": [
        "Whether a certain date\/time is in the weekend",
        "<span class=\"methodname\">intlcal_is_weekend<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $date<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_roll": [
        "Add value to field without carrying into more significant fields",
        "<span class=\"methodname\">intlcal_roll<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $amountOrUpOrDown<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_set": [
        "Set a time field or several common fields at once",
        "<span class=\"methodname\">intlcal_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">intlcal_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $year<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $month<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dayOfMonth<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $hour<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $minute<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $second<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_set_first_day_of_week": [
        "Set the day on which the week is deemed to start",
        "<span class=\"methodname\">intlcal_set_first_day_of_week<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dayOfWeek<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_set_lenient": [
        "Set whether date\/time interpretation is to be lenient",
        "<span class=\"methodname\">intlcal_set_lenient<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $isLenient<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_set_minimal_days_in_first_week": [
        "Set minimal number of days the first week in a year or month can have",
        "<span class=\"methodname\">intlcal_set_minimal_days_in_first_week<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $minimalDays<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_set_repeated_wall_time_option": [
        "Set behavior for handling repeating wall times at negative timezone offset transitions",
        "<span class=\"methodname\">intlcal_set_repeated_wall_time_option<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $wallTimeOption<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_set_skipped_wall_time_option": [
        "Set behavior for handling skipped wall times at positive timezone offset transitions",
        "<span class=\"methodname\">intlcal_set_skipped_wall_time_option<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $wallTimeOption<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_set_time": [
        "Set the calendar time in milliseconds since the epoch",
        "<span class=\"methodname\">intlcal_set_time<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $date<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_set_time_zone": [
        "Set the timezone used by this calendar",
        "<span class=\"methodname\">intlcal_set_time_zone<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $timeZone<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intlcal_to_date_time": [
        "Convert an IntlCalendar into a DateTime object",
        "<span class=\"methodname\">intlcal_to_date_time<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlCalendar<\/span> $cal<\/span> ) : <span class=\"type\">DateTime<\/span>"
    ],
    "IntlCalendar": [
        "Private constructor for disallowing instantiation",
        "<span class=\"modifier\">private<\/span> <span class=\"methodname\">IntlCalendar::__construct<\/span> ( )"
    ],
    "IntlChar": [
        "IntlChar provides access to a number of utility methods that can be used to access information about Unicode characters."
    ],
    "IntlCodePointBreakIterator": [
        "This break iterator identifies the boundaries between UTF-8 code points."
    ],
    "IntlDateFormatter": [
        "Create a date formatter",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">IntlDateFormatter::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $locale<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dateType<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeType<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">IntlTimeZone<\/span>|<span class=\"type\">DateTimeZone<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $timezone<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">IntlCalendar<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $calendar<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<span class=\"initializer\"> = \"\"<\/span><\/span> )"
    ],
    "IntlException": [
        "This class is used for generating exceptions when errors occur inside intl functions. Such exceptions are only generated when intl.use_exceptions is enabled."
    ],
    "IntlGregorianCalendar": [
        "Create the Gregorian Calendar class",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">IntlGregorianCalendar::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlTimeZone<\/span> $tz<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<span class=\"initializer\"> = ?<\/span><\/span> )",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">IntlGregorianCalendar::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeZoneOrYear<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $localeOrMonth<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dayOfMonth<\/span> )",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">IntlGregorianCalendar::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeZoneOrYear<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $localeOrMonth<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dayOfMonth<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $hour<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $minute<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $second<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "IntlIterator": [
        "This class represents iterator objects throughout the intl extension whenever the iterator cannot be identified with any other object provided by the extension. The distinct iterator object used internally by the foreach construct can only be obtained (in the relevant part here) from objects, so objects of this class serve the purpose of providing the hook through which this internal object can be obtained. As a convenience, this class also implements the Iterator interface, allowing the collection of values to be navigated using the methods defined in that interface. Both these methods and the internal iterator objects provided to foreach are backed by the same state (e.g. the position of the iterator and its current value)."
    ],
    "IntlPartsIterator": [
        "Objects of this class can be obtained from IntlBreakIterator objects. While the break iterators provide a sequence of boundary positions when iterated, IntlPartsIterator objects provide, as a convenience, the text fragments comprehended between two successive boundaries."
    ],
    "IntlRuleBasedBreakIterator": [
        "A subclass of IntlBreakIterator that encapsulates ICU break iterators whose behavior is specified using a set of rules. This is the most common kind of break iterators.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">IntlRuleBasedBreakIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $rules<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $areCompiled<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "intltz_count_equivalent_ids": [
        "Get the number of IDs in the equivalency group that includes the given ID",
        "<span class=\"methodname\">intltz_count_equivalent_ids<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $zoneId<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "intltz_create_default": [
        "Create a new copy of the default timezone for this host",
        "<span class=\"methodname\">intltz_create_default<\/span> ( ) : <span class=\"type\">IntlTimeZone<\/span>"
    ],
    "intltz_create_enumeration": [
        "Get an enumeration over time zone IDs associated with the\n  given country or offset",
        "<span class=\"methodname\">intltz_create_enumeration<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $countryOrRawOffset<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">IntlIterator<\/span>"
    ],
    "intltz_create_time_zone": [
        "Create a timezone object for the given ID",
        "<span class=\"methodname\">intltz_create_time_zone<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $zoneId<\/span> ) : <span class=\"type\">IntlTimeZone<\/span>"
    ],
    "intltz_create_time_zone_id_enumeration": [
        "Get an enumeration over system time zone IDs with the given filter conditions",
        "<span class=\"methodname\">intltz_create_time_zone_id_enumeration<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $zoneType<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $region<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $rawOffset<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">IntlIterator<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "intltz_from_date_time_zone": [
        "Create a timezone object from DateTimeZone",
        "<span class=\"methodname\">intltz_from_date_time_zone<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTimeZone<\/span> $zoneId<\/span> ) : <span class=\"type\">IntlTimeZone<\/span>"
    ],
    "intltz_get_canonical_id": [
        "Get the canonical system timezone ID or the normalized custom time zone ID for the given time zone ID",
        "<span class=\"methodname\">intltz_get_canonical_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $zoneId<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> &$isSystemID<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "intltz_get_display_name": [
        "Get a name of this time zone suitable for presentation to the user",
        "<span class=\"methodname\">intltz_get_display_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlTimeZone<\/span> $timezone<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $isDaylight<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $style<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "intltz_get_dst_savings": [
        "Get the amount of time to be added to local standard time to get local wall clock time",
        "<span class=\"methodname\">intltz_get_dst_savings<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlTimeZone<\/span> $timezone<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "intltz_get_equivalent_id": [
        "Get an ID in the equivalency group that includes the given ID",
        "<span class=\"methodname\">intltz_get_equivalent_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $zoneId<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $index<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "intltz_get_error_code": [
        "Get last error code on the object",
        "<span class=\"methodname\">intltz_get_error_code<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlTimeZone<\/span> $timezone<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "intltz_get_error_message": [
        "Get last error message on the object",
        "<span class=\"methodname\">intltz_get_error_message<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlTimeZone<\/span> $timezone<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "intltz_get_gmt": [
        "Create GMT (UTC) timezone",
        "<span class=\"methodname\">intltz_get_gmt<\/span> ( ) : <span class=\"type\">IntlTimeZone<\/span>"
    ],
    "intltz_get_id": [
        "Get timezone ID",
        "<span class=\"methodname\">intltz_get_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlTimeZone<\/span> $timezone<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "intltz_get_id_for_windows_id": [
        "Translate a Windows timezone into a system timezone",
        "<span class=\"methodname\">intltz_get_id_for_windows_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $timezone<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $region<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "intltz_get_offset": [
        "Get the time zone raw and GMT offset for the given moment in time",
        "<span class=\"methodname\">intltz_get_offset<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlTimeZone<\/span> $timezone<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $date<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $local<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$rawOffset<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$dstOffset<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intltz_get_raw_offset": [
        "Get the raw GMT offset (before taking daylight savings time into account",
        "<span class=\"methodname\">intltz_get_raw_offset<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlTimeZone<\/span> $timezone<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "intltz_get_region": [
        "Get the region code associated with the given system time zone ID",
        "<span class=\"methodname\">intltz_get_region<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $zoneId<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "intltz_get_tz_data_version": [
        "Get the timezone data version currently used by ICU",
        "<span class=\"methodname\">intltz_get_tz_data_version<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "intltz_get_unknown": [
        "Get the \"unknown\" time zone",
        "<span class=\"methodname\">intltz_get_unknown<\/span> ( ) : <span class=\"type\">IntlTimeZone<\/span>"
    ],
    "intltz_get_windows_id": [
        "Translate a system timezone into a Windows timezone",
        "<span class=\"methodname\">intltz_get_windows_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $timezone<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "intltz_has_same_rules": [
        "Check if this zone has the same rules and offset as another zone",
        "<span class=\"methodname\">intltz_has_same_rules<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlTimeZone<\/span> $timezone<\/span> , <span class=\"methodparam\"><span class=\"type\">IntlTimeZone<\/span> $otherTimeZone<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intltz_to_date_time_zone": [
        "Convert to DateTimeZone object",
        "<span class=\"methodname\">intltz_to_date_time_zone<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlTimeZone<\/span> $timezone<\/span> ) : <span class=\"type\">DateTimeZone<\/span>"
    ],
    "intltz_use_daylight_time": [
        "Check if this time zone uses daylight savings time",
        "<span class=\"methodname\">intltz_use_daylight_time<\/span> ( <span class=\"methodparam\"><span class=\"type\">IntlTimeZone<\/span> $timezone<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "intval": [
        "Get the integer value of a variable",
        "<span class=\"methodname\">intval<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $base<span class=\"initializer\"> = 10<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "InvalidArgumentException": [
        "Exception thrown if an argument is not of the expected type."
    ],
    "ip2long": [
        "Converts a string containing an (IPv4) Internet Protocol dotted address into a long integer",
        "<span class=\"methodname\">ip2long<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $ip<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "iptcembed": [
        "Embeds binary IPTC data into a JPEG image",
        "<span class=\"methodname\">iptcembed<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $iptc_data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $spool<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "iptcparse": [
        "Parse a binary IPTC block into single tags",
        "<span class=\"methodname\">iptcparse<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $iptc_block<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "is_a": [
        "Checks if the object is of this class or has this class as one of its parents",
        "<span class=\"methodname\">is_a<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $class_name<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $allow_string<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_array": [
        "Finds whether a variable is an array",
        "<span class=\"methodname\">is_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_bool": [
        "Finds out whether a variable is a boolean",
        "<span class=\"methodname\">is_bool<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_callable": [
        "Verify that the contents of a variable can be called as a function",
        "<span class=\"methodname\">is_callable<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $syntax_only<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$callable_name<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_countable": [
        "Verify that the contents of a variable is a countable value",
        "<span class=\"methodname\">is_countable<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_dir": [
        "Tells whether the filename is a directory",
        "<span class=\"methodname\">is_dir<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_executable": [
        "Tells whether the filename is executable",
        "<span class=\"methodname\">is_executable<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_file": [
        "Tells whether the filename is a regular file",
        "<span class=\"methodname\">is_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_finite": [
        "Finds whether a value is a legal finite number",
        "<span class=\"methodname\">is_finite<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_float": [
        "Finds whether the type of a variable is float",
        "<span class=\"methodname\">is_float<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_infinite": [
        "Finds whether a value is infinite",
        "<span class=\"methodname\">is_infinite<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_int": [
        "Find whether the type of a variable is integer",
        "<span class=\"methodname\">is_int<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_iterable": [
        "Verify that the contents of a variable is an iterable value",
        "<span class=\"methodname\">is_iterable<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_link": [
        "Tells whether the filename is a symbolic link",
        "<span class=\"methodname\">is_link<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_nan": [
        "Finds whether a value is not a number",
        "<span class=\"methodname\">is_nan<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_null": [
        "Finds whether a variable is null",
        "<span class=\"methodname\">is_null<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_numeric": [
        "Finds whether a variable is a number or a numeric string",
        "<span class=\"methodname\">is_numeric<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_object": [
        "Finds whether a variable is an object",
        "<span class=\"methodname\">is_object<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_readable": [
        "Tells whether a file exists and is readable",
        "<span class=\"methodname\">is_readable<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_resource": [
        "Finds whether a variable is a resource",
        "<span class=\"methodname\">is_resource<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_scalar": [
        "Finds whether a variable is a scalar",
        "<span class=\"methodname\">is_scalar<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_soap_fault": [
        "Checks if a SOAP call has failed",
        "<span class=\"methodname\">is_soap_fault<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $object<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_string": [
        "Find whether the type of a variable is string",
        "<span class=\"methodname\">is_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_subclass_of": [
        "Checks if the object has this class as one of its parents or implements it",
        "<span class=\"methodname\">is_subclass_of<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $class_name<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $allow_string<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_tainted": [
        "Checks whether a string is tainted",
        "<span class=\"methodname\">is_tainted<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_uploaded_file": [
        "Tells whether the file was uploaded via HTTP POST",
        "<span class=\"methodname\">is_uploaded_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "is_writable": [
        "Tells whether the filename is writable",
        "<span class=\"methodname\">is_writable<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "isset": [
        "Determine if a variable is declared and is different than null",
        "<span class=\"methodname\">isset<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $var<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$vars<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "Iterator": [
        "Interface for external iterators or objects that can be iterated themselves internally."
    ],
    "iterator_apply": [
        "Call a function for every element in an iterator",
        "<span class=\"methodname\">iterator_apply<\/span> ( <span class=\"methodparam\"><span class=\"type\">Traversable<\/span> $iterator<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $function<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $args<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "iterator_count": [
        "Count the elements in an iterator",
        "<span class=\"methodname\">iterator_count<\/span> ( <span class=\"methodparam\"><span class=\"type\">Traversable<\/span> $iterator<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "iterator_to_array": [
        "Copy the iterator into an array",
        "<span class=\"methodname\">iterator_to_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">Traversable<\/span> $iterator<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $use_keys<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "IteratorAggregate": [
        "Interface to create an external Iterator."
    ],
    "IteratorIterator": [
        "This iterator wrapper allows the conversion of anything that is Traversable into an Iterator. It is important to understand that most classes that do not implement Iterators have reasons as most likely they do not allow the full Iterator feature set. If so, techniques should be provided to prevent misuse, otherwise expect exceptions or fatal errors.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">IteratorIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">Traversable<\/span> $iterator<\/span> )"
    ],
    "jddayofweek": [
        "Returns the day of the week",
        "<span class=\"methodname\">jddayofweek<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $julian_day<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = CAL_DOW_DAYNO<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span>"
    ],
    "jdmonthname": [
        "Returns a month name",
        "<span class=\"methodname\">jdmonthname<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $julian_day<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "jdtofrench": [
        "Converts a Julian Day Count to the French Republican Calendar",
        "<span class=\"methodname\">jdtofrench<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $julian_day<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "jdtogregorian": [
        "Converts Julian Day Count to Gregorian date",
        "<span class=\"methodname\">jdtogregorian<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $julian_day<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "jdtojewish": [
        "Converts a Julian day count to a Jewish calendar date",
        "<span class=\"methodname\">jdtojewish<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $julian_day<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $hebrew<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "jdtojulian": [
        "Converts a Julian Day Count to a Julian Calendar Date",
        "<span class=\"methodname\">jdtojulian<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $julian_day<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "jdtounix": [
        "Convert Julian Day to Unix timestamp",
        "<span class=\"methodname\">jdtounix<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $julian_day<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "jewishtojd": [
        "Converts a date in the Jewish Calendar to Julian Day Count",
        "<span class=\"methodname\">jewishtojd<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $month<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $day<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $year<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "jpeg2wbmp": [
        "Convert JPEG image file to WBMP image file",
        "<span class=\"methodname\">jpeg2wbmp<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $jpegname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $wbmpname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dest_height<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dest_width<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $threshold<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "json_decode": [
        "Decodes a JSON string",
        "<span class=\"methodname\">json_decode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $json<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">bool<\/span>|<span class=\"type\">null<\/span><\/span> $associative<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $depth<span class=\"initializer\"> = 512<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "json_encode": [
        "Returns the JSON representation of a value",
        "<span class=\"methodname\">json_encode<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $depth<span class=\"initializer\"> = 512<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "json_last_error": [
        "Returns the last error occurred",
        "<span class=\"methodname\">json_last_error<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "json_last_error_msg": [
        "Returns the error string of the last json_encode() or json_decode() call",
        "<span class=\"methodname\">json_last_error_msg<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "JsonException": [
        "Exception thrown if JSON_THROW_ON_ERROR option is set for json_encode() or json_decode(). code contains the error type, for possible values see json_last_error()."
    ],
    "JsonSerializable": [
        "Objects implementing JsonSerializable can customize their JSON representation when encoded with json_encode()."
    ],
    "juliantojd": [
        "Converts a Julian Calendar date to Julian Day Count",
        "<span class=\"methodname\">juliantojd<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $month<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $day<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $year<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "key": [
        "Fetch a key from an array",
        "<span class=\"methodname\">key<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">object<\/span><\/span> $array<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "krsort": [
        "Sort an array by key in reverse order",
        "<span class=\"methodname\">krsort<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = SORT_REGULAR<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ksort": [
        "Sort an array by key",
        "<span class=\"methodname\">ksort<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = SORT_REGULAR<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "lcfirst": [
        "Make a string's first character lowercase",
        "<span class=\"methodname\">lcfirst<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "lcg_value": [
        "Combined linear congruential generator",
        "<span class=\"methodname\">lcg_value<\/span> ( ) : <span class=\"type\">float<\/span>"
    ],
    "lchgrp": [
        "Changes group ownership of symlink",
        "<span class=\"methodname\">lchgrp<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span><\/span> $group<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "lchown": [
        "Changes user ownership of symlink",
        "<span class=\"methodname\">lchown<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span><\/span> $user<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_8859_to_t61": [
        "Translate 8859 characters to t61 characters",
        "<span class=\"methodname\">ldap_8859_to_t61<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_add": [
        "Add entries to LDAP directory",
        "<span class=\"methodname\">ldap_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dn<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $entry<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_add_ext": [
        "Add entries to LDAP directory",
        "<span class=\"methodname\">ldap_add_ext<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dn<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $entry<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_bind": [
        "Bind to LDAP directory",
        "<span class=\"methodname\">ldap_bind<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $dn<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $password<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_bind_ext": [
        "Bind to LDAP directory",
        "<span class=\"methodname\">ldap_bind_ext<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $dn<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $password<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_compare": [
        "Compare value of attribute found in entry specified with DN",
        "<span class=\"methodname\">ldap_compare<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dn<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $attribute<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">bool<\/span>|<span class=\"type\">int<\/span><\/span>"
    ],
    "ldap_connect": [
        "Connect to an LDAP server",
        "<span class=\"methodname\">ldap_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $uri<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>",
        "<span class=\"methodname\">ldap_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $host<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $port<span class=\"initializer\"> = 389<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_control_paged_result": [
        "Send LDAP pagination control",
        "<span class=\"methodname\">ldap_control_paged_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pagesize<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $iscritical<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $cookie<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_control_paged_result_response": [
        "Retrieve the LDAP pagination cookie",
        "<span class=\"methodname\">ldap_control_paged_result_response<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$cookie<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$estimated<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_count_entries": [
        "Count the number of entries in a search",
        "<span class=\"methodname\">ldap_count_entries<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ldap_delete": [
        "Delete an entry from a directory",
        "<span class=\"methodname\">ldap_delete<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dn<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_delete_ext": [
        "Delete an entry from a directory",
        "<span class=\"methodname\">ldap_delete_ext<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dn<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_dn2ufn": [
        "Convert DN to User Friendly Naming format",
        "<span class=\"methodname\">ldap_dn2ufn<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $dn<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_err2str": [
        "Convert LDAP error number into string error message",
        "<span class=\"methodname\">ldap_err2str<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $errno<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ldap_errno": [
        "Return the LDAP error number of the last LDAP command",
        "<span class=\"methodname\">ldap_errno<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ldap_error": [
        "Return the LDAP error message of the last LDAP command",
        "<span class=\"methodname\">ldap_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ldap_escape": [
        "Escape a string for use in an LDAP filter or DN",
        "<span class=\"methodname\">ldap_escape<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $ignore<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ldap_exop": [
        "Performs an extended operation",
        "<span class=\"methodname\">ldap_exop<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $reqoid<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $reqdata<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $serverctrls<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$retdata<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$retoid<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "ldap_exop_passwd": [
        "PASSWD extended operation helper",
        "<span class=\"methodname\">ldap_exop_passwd<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $user<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $old_password<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_password<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "ldap_exop_refresh": [
        "Refresh extended operation helper",
        "<span class=\"methodname\">ldap_exop_refresh<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dn<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $ttl<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_exop_whoami": [
        "WHOAMI extended operation helper",
        "<span class=\"methodname\">ldap_exop_whoami<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_explode_dn": [
        "Splits DN into its component parts",
        "<span class=\"methodname\">ldap_explode_dn<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $dn<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $with_attrib<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_first_attribute": [
        "Return first attribute",
        "<span class=\"methodname\">ldap_first_attribute<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $entry<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_first_entry": [
        "Return first result id",
        "<span class=\"methodname\">ldap_first_entry<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_first_reference": [
        "Return first reference",
        "<span class=\"methodname\">ldap_first_reference<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_free_result": [
        "Free result memory",
        "<span class=\"methodname\">ldap_free_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_get_attributes": [
        "Get attributes from a search result entry",
        "<span class=\"methodname\">ldap_get_attributes<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $entry<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "ldap_get_dn": [
        "Get the DN of a result entry",
        "<span class=\"methodname\">ldap_get_dn<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $entry<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_get_entries": [
        "Get all result entries",
        "<span class=\"methodname\">ldap_get_entries<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_get_option": [
        "Get the current value for given option",
        "<span class=\"methodname\">ldap_get_option<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">int<\/span><\/span> &$value<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_get_values": [
        "Get all values from a result entry",
        "<span class=\"methodname\">ldap_get_values<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $entry<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $attribute<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_get_values_len": [
        "Get all binary values from a result entry",
        "<span class=\"methodname\">ldap_get_values_len<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $entry<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $attribute<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_list": [
        "Single-level search",
        "<span class=\"methodname\">ldap_list<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">array<\/span><\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $base<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $filter<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $attributes<span class=\"initializer\"> = []<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $attributes_only<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $sizelimit<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timelimit<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $deref<span class=\"initializer\"> = LDAP_DEREF_NEVER<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_mod_add": [
        "Add attribute values to current attributes",
        "<span class=\"methodname\">ldap_mod_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dn<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $entry<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_mod_add_ext": [
        "Add attribute values to current attributes",
        "<span class=\"methodname\">ldap_mod_add_ext<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dn<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $entry<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_mod_del": [
        "Delete attribute values from current attributes",
        "<span class=\"methodname\">ldap_mod_del<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dn<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $entry<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_mod_del_ext": [
        "Delete attribute values from current attributes",
        "<span class=\"methodname\">ldap_mod_del_ext<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dn<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $entry<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_mod_replace": [
        "Replace attribute values with new ones",
        "<span class=\"methodname\">ldap_mod_replace<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dn<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $entry<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_mod_replace_ext": [
        "Replace attribute values with new ones",
        "<span class=\"methodname\">ldap_mod_replace_ext<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dn<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $entry<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_modify_batch": [
        "Batch and execute modifications on an LDAP entry",
        "<span class=\"methodname\">ldap_modify_batch<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dn<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $modifications_info<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_next_attribute": [
        "Get the next attribute in result",
        "<span class=\"methodname\">ldap_next_attribute<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $entry<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_next_entry": [
        "Get next result entry",
        "<span class=\"methodname\">ldap_next_entry<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_next_reference": [
        "Get next reference",
        "<span class=\"methodname\">ldap_next_reference<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $entry<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_parse_exop": [
        "Parse result object from an LDAP extended operation",
        "<span class=\"methodname\">ldap_parse_exop<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$response_data<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$response_oid<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_parse_reference": [
        "Extract information from reference entry",
        "<span class=\"methodname\">ldap_parse_reference<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $entry<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$referrals<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_parse_result": [
        "Extract information from result",
        "<span class=\"methodname\">ldap_parse_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$error_code<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$matched_dn<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$error_message<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$referrals<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_read": [
        "Read an entry",
        "<span class=\"methodname\">ldap_read<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">array<\/span><\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $base<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $filter<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $attributes<span class=\"initializer\"> = []<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $attributes_only<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $sizelimit<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timelimit<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $deref<span class=\"initializer\"> = LDAP_DEREF_NEVER<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_rename": [
        "Modify the name of an entry",
        "<span class=\"methodname\">ldap_rename<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dn<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_rdn<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_parent<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $delete_old_rdn<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_rename_ext": [
        "Modify the name of an entry",
        "<span class=\"methodname\">ldap_rename_ext<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dn<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_rdn<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_parent<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $delete_old_rdn<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_sasl_bind": [
        "Bind to LDAP directory using SASL",
        "<span class=\"methodname\">ldap_sasl_bind<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $dn<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $password<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $mech<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $realm<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $authc_id<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $authz_id<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $props<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_search": [
        "Search LDAP tree",
        "<span class=\"methodname\">ldap_search<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">array<\/span><\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $base<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $filter<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $attributes<span class=\"initializer\"> = []<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $attributes_only<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $sizelimit<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timelimit<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $deref<span class=\"initializer\"> = LDAP_DEREF_NEVER<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $controls<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_set_option": [
        "Set the value of the given option",
        "<span class=\"methodname\">ldap_set_option<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">null<\/span><\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">bool<\/span><\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_set_rebind_proc": [
        "Set a callback function to do re-binds on referral chasing",
        "<span class=\"methodname\">ldap_set_rebind_proc<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">callable<\/span>|<span class=\"type\">null<\/span><\/span> $callback<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_sort": [
        "Sort LDAP result entries on the client side",
        "<span class=\"methodname\">ldap_sort<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $sortfilter<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_start_tls": [
        "Start TLS",
        "<span class=\"methodname\">ldap_start_tls<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ldap_t61_to_8859": [
        "Translate t61 characters to 8859 characters",
        "<span class=\"methodname\">ldap_t61_to_8859<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ldap_unbind": [
        "Unbind from LDAP directory",
        "<span class=\"methodname\">ldap_unbind<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $ldap<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "LengthException": [
        "Exception thrown if a length is invalid."
    ],
    "levenshtein": [
        "Calculate Levenshtein distance between two strings",
        "<span class=\"methodname\">levenshtein<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $insertion_cost<span class=\"initializer\"> = 1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $replacement_cost<span class=\"initializer\"> = 1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $deletion_cost<span class=\"initializer\"> = 1<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "libxml_clear_errors": [
        "Clear libxml error buffer",
        "<span class=\"methodname\">libxml_clear_errors<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "libxml_disable_entity_loader": [
        "Disable the ability to load external entities",
        "<span class=\"methodname\">libxml_disable_entity_loader<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $disable<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "libxml_get_errors": [
        "Retrieve array of errors",
        "<span class=\"methodname\">libxml_get_errors<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "libxml_get_last_error": [
        "Retrieve last error from libxml",
        "<span class=\"methodname\">libxml_get_last_error<\/span> ( ) : <span class=\"type\"><span class=\"type\">LibXMLError<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "libxml_set_external_entity_loader": [
        "Changes the default external entity loader",
        "<span class=\"methodname\">libxml_set_external_entity_loader<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">callable<\/span>|<span class=\"type\">null<\/span><\/span> $resolver_function<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "libxml_set_streams_context": [
        "Set the streams context for the next libxml document load or write",
        "<span class=\"methodname\">libxml_set_streams_context<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "libxml_use_internal_errors": [
        "Disable libxml errors and allow user to fetch error information as needed",
        "<span class=\"methodname\">libxml_use_internal_errors<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">bool<\/span>|<span class=\"type\">null<\/span><\/span> $use_errors<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "libXMLError": [
        "Contains various information about errors thrown by libxml. The error codes are described within the official \u00bb\u00a0xmlError API documentation."
    ],
    "LimitIterator": [
        "The LimitIterator class allows iteration over a limited subset of items in an Iterator.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">LimitIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">Iterator<\/span> $iterator<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $limit<span class=\"initializer\"> = -1<\/span><\/span> )"
    ],
    "link": [
        "Create a hard link",
        "<span class=\"methodname\">link<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $target<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $link<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "linkinfo": [
        "Gets information about a link",
        "<span class=\"methodname\">linkinfo<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "list": [
        "Assign variables as if they were an array",
        "<span class=\"methodname\">list<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $var<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$vars<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "Locale": [
        "Examples of identifiers include:"
    ],
    "locale_accept_from_http": [
        "Tries to find out best available locale based on HTTP \"Accept-Language\" header",
        "<span class=\"methodname\">locale_accept_from_http<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $header<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "locale_compose": [
        "Returns a correctly ordered and delimited locale ID",
        "<span class=\"methodname\">locale_compose<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $subtags<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "locale_filter_matches": [
        "Checks if a language tag filter matches with locale",
        "<span class=\"methodname\">locale_filter_matches<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $langtag<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $canonicalize<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "locale_get_all_variants": [
        "Gets the variants for the input locale",
        "<span class=\"methodname\">locale_get_all_variants<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "locale_get_default": [
        "Gets the default locale value from the INTL global 'default_locale'",
        "<span class=\"methodname\">locale_get_default<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "locale_get_display_language": [
        "Returns an appropriately localized display name for language of the inputlocale",
        "<span class=\"methodname\">locale_get_display_language<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $in_locale<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "locale_get_display_name": [
        "Returns an appropriately localized display name for the input locale",
        "<span class=\"methodname\">locale_get_display_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $in_locale<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "locale_get_display_region": [
        "Returns an appropriately localized display name for region of the input locale",
        "<span class=\"methodname\">locale_get_display_region<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $in_locale<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "locale_get_display_script": [
        "Returns an appropriately localized display name for script of the input locale",
        "<span class=\"methodname\">locale_get_display_script<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $in_locale<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "locale_get_display_variant": [
        "Returns an appropriately localized display name for variants of the input locale",
        "<span class=\"methodname\">locale_get_display_variant<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $in_locale<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "locale_get_keywords": [
        "Gets the keywords for the input locale",
        "<span class=\"methodname\">locale_get_keywords<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "locale_get_primary_language": [
        "Gets the primary language for the input locale",
        "<span class=\"methodname\">locale_get_primary_language<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "locale_get_region": [
        "Gets the region for the input locale",
        "<span class=\"methodname\">locale_get_region<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "locale_get_script": [
        "Gets the script for the input locale",
        "<span class=\"methodname\">locale_get_script<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "locale_lookup": [
        "Searches the language tag list for the best match to the language",
        "<span class=\"methodname\">locale_lookup<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $langtag<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $canonicalize<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $default<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "locale_parse": [
        "Returns a key-value array of locale ID subtag elements",
        "<span class=\"methodname\">locale_parse<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "locale_set_default": [
        "Sets the default runtime locale",
        "<span class=\"methodname\">locale_set_default<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "localeconv": [
        "Get numeric formatting information",
        "<span class=\"methodname\">localeconv<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "localtime": [
        "Get the local time",
        "<span class=\"methodname\">localtime<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $timestamp<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $associative<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "log": [
        "Natural logarithm",
        "<span class=\"methodname\">log<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $base<span class=\"initializer\"> = M_E<\/span><\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "log10": [
        "Base-10 logarithm",
        "<span class=\"methodname\">log10<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "log1p": [
        "Returns log(1 + number), computed in a way that is accurate even when\n   the value of number is close to zero",
        "<span class=\"methodname\">log1p<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "log_cmd_delete": [
        "Callback When Deleting Documents",
        "<span class=\"methodname\">log_cmd_delete<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $server<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $writeOptions<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $deleteOptions<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $protocolOptions<\/span> )"
    ],
    "log_cmd_insert": [
        "Callback When Inserting Documents",
        "<span class=\"methodname\">log_cmd_insert<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $server<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $document<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $writeOptions<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $protocolOptions<\/span> )"
    ],
    "log_cmd_update": [
        "Callback When Updating Documents",
        "<span class=\"methodname\">log_cmd_update<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $server<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $writeOptions<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $updateOptions<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $protocolOptions<\/span> )"
    ],
    "log_getmore": [
        "Callback When Retrieving Next Cursor Batch",
        "<span class=\"methodname\">log_getmore<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $server<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $info<\/span> )"
    ],
    "log_killcursor": [
        "Callback When Executing KILLCURSOR operations",
        "<span class=\"methodname\">log_killcursor<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $server<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $info<\/span> )"
    ],
    "log_reply": [
        "Callback When Reading the MongoDB reply",
        "<span class=\"methodname\">log_reply<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $server<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $messageHeaders<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $operationHeaders<\/span> )"
    ],
    "log_write_batch": [
        "Callback When Writing Batches",
        "<span class=\"methodname\">log_write_batch<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $server<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $writeOptions<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $batch<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $protocolOptions<\/span> )"
    ],
    "LogicException": [
        "Exception that represents error in the program logic. This kind of exception should lead directly to a fix in your code."
    ],
    "long2ip": [
        "Converts an long integer address into a string in (IPv4) Internet standard dotted format",
        "<span class=\"methodname\">long2ip<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $ip<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "lstat": [
        "Gives information about a file or symbolic link",
        "<span class=\"methodname\">lstat<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ltrim": [
        "Strip whitespace (or other characters) from the beginning of a string",
        "<span class=\"methodname\">ltrim<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $characters<span class=\"initializer\"> = \" \\n\\r\\t\\v\\0\"<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "Lua": [
        "Lua constructor",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Lua::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $lua_script_file<span class=\"initializer\"> = NULL<\/span><\/span> )"
    ],
    "LuaClosure": [
        "LuaClosure is a wrapper class for LUA_TFUNCTION which could be return from calling to Lua function."
    ],
    "LuaSandbox": [
        "The LuaSandbox class creates a Lua environment and allows for execution of Lua code."
    ],
    "LuaSandboxError": [
        "Base class for LuaSandbox exceptions"
    ],
    "LuaSandboxErrorError": [
        "Exception thrown when Lua encounters an error inside an error handler."
    ],
    "LuaSandboxFatalError": [
        "Uncatchable LuaSandbox exceptions."
    ],
    "LuaSandboxFunction": [
        "Represents a Lua function, allowing it to be called from PHP.",
        "<span class=\"modifier\">final<\/span> <span class=\"modifier\">private<\/span> <span class=\"methodname\">LuaSandboxFunction::__construct<\/span> ( )"
    ],
    "LuaSandboxMemoryError": [
        "Exception thrown when Lua cannot allocate memory."
    ],
    "LuaSandboxRuntimeError": [
        "Catchable LuaSandbox runtime exceptions."
    ],
    "LuaSandboxSyntaxError": [
        "Exception thrown when Lua code cannot be parsed."
    ],
    "LuaSandboxTimeoutError": [
        "Exception thrown when the configured CPU time limit is exceeded."
    ],
    "lzf_compress": [
        "LZF compression",
        "<span class=\"methodname\">lzf_compress<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "lzf_decompress": [
        "LZF decompression",
        "<span class=\"methodname\">lzf_decompress<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "lzf_optimized_for": [
        "Determines what LZF extension was optimized for",
        "<span class=\"methodname\">lzf_optimized_for<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "mail": [
        "Send mail",
        "<span class=\"methodname\">mail<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $to<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $subject<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $additional_headers<span class=\"initializer\"> = []<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $additional_params<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mailparse_determine_best_xfer_encoding": [
        "Gets the best way of encoding",
        "<span class=\"methodname\">mailparse_determine_best_xfer_encoding<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fp<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mailparse_msg_create": [
        "Create a mime mail resource",
        "<span class=\"methodname\">mailparse_msg_create<\/span> ( ) : <span class=\"type\">resource<\/span>"
    ],
    "mailparse_msg_extract_part": [
        "Extracts\/decodes a message section",
        "<span class=\"methodname\">mailparse_msg_extract_part<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $mimemail<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $msgbody<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callbackfunc<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "mailparse_msg_extract_part_file": [
        "Extracts\/decodes a message section",
        "<span class=\"methodname\">mailparse_msg_extract_part_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $mimemail<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callbackfunc<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mailparse_msg_extract_whole_part_file": [
        "Extracts a message section including headers without decoding the transfer encoding",
        "<span class=\"methodname\">mailparse_msg_extract_whole_part_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $mimemail<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callbackfunc<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mailparse_msg_free": [
        "Frees a MIME resource",
        "<span class=\"methodname\">mailparse_msg_free<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $mimemail<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mailparse_msg_get_part": [
        "Returns a handle on a given section in a mimemessage",
        "<span class=\"methodname\">mailparse_msg_get_part<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $mimemail<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mimesection<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "mailparse_msg_get_part_data": [
        "Returns an associative array of info about the message",
        "<span class=\"methodname\">mailparse_msg_get_part_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $mimemail<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mailparse_msg_get_structure": [
        "Returns an array of mime section names in the supplied message",
        "<span class=\"methodname\">mailparse_msg_get_structure<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $mimemail<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mailparse_msg_parse": [
        "Incrementally parse data into buffer",
        "<span class=\"methodname\">mailparse_msg_parse<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $mimemail<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mailparse_msg_parse_file": [
        "Parses a file",
        "<span class=\"methodname\">mailparse_msg_parse_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "mailparse_rfc822_parse_addresses": [
        "Parse RFC 822 compliant addresses",
        "<span class=\"methodname\">mailparse_rfc822_parse_addresses<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $addresses<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mailparse_stream_encode": [
        "Streams data from source file pointer, apply encoding and write to destfp",
        "<span class=\"methodname\">mailparse_stream_encode<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $sourcefp<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $destfp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $encoding<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mailparse_uudecode_all": [
        "Scans the data from fp and extract each embedded uuencoded file",
        "<span class=\"methodname\">mailparse_uudecode_all<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fp<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "max": [
        "Find highest value",
        "<span class=\"methodname\">max<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$values<\/span> ) : <span class=\"type\">mixed<\/span>",
        "<span class=\"methodname\">max<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $value_array<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "mb_check_encoding": [
        "Check if strings are valid for the specified encoding",
        "<span class=\"methodname\">mb_check_encoding<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $value<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mb_chr": [
        "Get a specific character",
        "<span class=\"methodname\">mb_chr<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $codepoint<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_convert_case": [
        "Perform case folding on a string",
        "<span class=\"methodname\">mb_convert_case<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mb_convert_encoding": [
        "Convert character encoding",
        "<span class=\"methodname\">mb_convert_encoding<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $to_encoding<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $from_encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_convert_kana": [
        "Convert \"kana\" one from another (\"zen-kaku\", \"han-kaku\" and more)",
        "<span class=\"methodname\">mb_convert_kana<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<span class=\"initializer\"> = \"KV\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mb_convert_variables": [
        "Convert character code in variable(s)",
        "<span class=\"methodname\">mb_convert_variables<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $to_encoding<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $from_encoding<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> &$var<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> &...$vars<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_decode_mimeheader": [
        "Decode string in MIME header field",
        "<span class=\"methodname\">mb_decode_mimeheader<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mb_decode_numericentity": [
        "Decode HTML numeric string reference to character",
        "<span class=\"methodname\">mb_decode_numericentity<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $map<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mb_detect_encoding": [
        "Detect character encoding",
        "<span class=\"methodname\">mb_detect_encoding<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encodings<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $strict<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_detect_order": [
        "Set\/Get character encoding detection order",
        "<span class=\"methodname\">mb_detect_order<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "mb_encode_mimeheader": [
        "Encode string for MIME header",
        "<span class=\"methodname\">mb_encode_mimeheader<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $charset<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $transfer_encoding<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $newline<span class=\"initializer\"> = \"\\r\\n\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $indent<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mb_encode_numericentity": [
        "Encode character to HTML numeric string reference",
        "<span class=\"methodname\">mb_encode_numericentity<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $map<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $hex<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mb_encoding_aliases": [
        "Get aliases of a known encoding type",
        "<span class=\"methodname\">mb_encoding_aliases<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $encoding<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mb_ereg": [
        "Regular expression match with multibyte support",
        "<span class=\"methodname\">mb_ereg<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$matches<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mb_ereg_match": [
        "Regular expression match for multibyte string",
        "<span class=\"methodname\">mb_ereg_match<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $options<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mb_ereg_replace": [
        "Replace regular expression with multibyte support",
        "<span class=\"methodname\">mb_ereg_replace<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $replacement<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $options<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "mb_ereg_replace_callback": [
        "Perform a regular expression search and replace with multibyte support using a callback",
        "<span class=\"methodname\">mb_ereg_replace_callback<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $options<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "mb_ereg_search": [
        "Multibyte regular expression match for predefined multibyte string",
        "<span class=\"methodname\">mb_ereg_search<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $pattern<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $options<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mb_ereg_search_getpos": [
        "Returns start point for next regular expression match",
        "<span class=\"methodname\">mb_ereg_search_getpos<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "mb_ereg_search_getregs": [
        "Retrieve the result from the last multibyte regular expression match",
        "<span class=\"methodname\">mb_ereg_search_getregs<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_ereg_search_init": [
        "Setup string and regular expression for a multibyte regular expression match",
        "<span class=\"methodname\">mb_ereg_search_init<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $pattern<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $options<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mb_ereg_search_pos": [
        "Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string",
        "<span class=\"methodname\">mb_ereg_search_pos<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $pattern<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $options<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_ereg_search_regs": [
        "Returns the matched part of a multibyte regular expression",
        "<span class=\"methodname\">mb_ereg_search_regs<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $pattern<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $options<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_ereg_search_setpos": [
        "Set start point of next regular expression match",
        "<span class=\"methodname\">mb_ereg_search_setpos<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mb_eregi": [
        "Regular expression match ignoring case with multibyte support",
        "<span class=\"methodname\">mb_eregi<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$matches<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mb_eregi_replace": [
        "Replace regular expression with multibyte support ignoring case",
        "<span class=\"methodname\">mb_eregi_replace<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $replacement<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $options<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "mb_get_info": [
        "Get internal settings of mbstring",
        "<span class=\"methodname\">mb_get_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $type<span class=\"initializer\"> = \"all\"<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_http_input": [
        "Detect HTTP input character encoding",
        "<span class=\"methodname\">mb_http_input<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $type<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_http_output": [
        "Set\/Get HTTP output character encoding",
        "<span class=\"methodname\">mb_http_output<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "mb_internal_encoding": [
        "Set\/Get internal character encoding",
        "<span class=\"methodname\">mb_internal_encoding<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "mb_language": [
        "Set\/Get current language",
        "<span class=\"methodname\">mb_language<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $language<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "mb_list_encodings": [
        "Returns an array of all supported encodings",
        "<span class=\"methodname\">mb_list_encodings<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "mb_ord": [
        "Get code point of character",
        "<span class=\"methodname\">mb_ord<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_output_handler": [
        "Callback function converts character encoding in output buffer",
        "<span class=\"methodname\">mb_output_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $status<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mb_parse_str": [
        "Parse GET\/POST\/COOKIE data and set global variable",
        "<span class=\"methodname\">mb_parse_str<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$result<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mb_preferred_mime_name": [
        "Get MIME charset string",
        "<span class=\"methodname\">mb_preferred_mime_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $encoding<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_regex_encoding": [
        "Set\/Get character encoding for multibyte regex",
        "<span class=\"methodname\">mb_regex_encoding<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "mb_regex_set_options": [
        "Set\/Get the default options for mbregex functions",
        "<span class=\"methodname\">mb_regex_set_options<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $options<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mb_scrub": [
        "Description",
        "<span class=\"methodname\">mb_scrub<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mb_send_mail": [
        "Send encoded mail",
        "<span class=\"methodname\">mb_send_mail<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $to<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $subject<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $additional_headers<span class=\"initializer\"> = []<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $additional_params<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mb_split": [
        "Split multibyte string using regular expression",
        "<span class=\"methodname\">mb_split<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $limit<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_str_split": [
        "Given a multibyte string, return an array of its characters",
        "<span class=\"methodname\">mb_str_split<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<span class=\"initializer\"> = 1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mb_strcut": [
        "Get part of string",
        "<span class=\"methodname\">mb_strcut<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $start<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $length<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mb_strimwidth": [
        "Get truncated string with specified width",
        "<span class=\"methodname\">mb_strimwidth<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $start<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $width<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $trim_marker<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mb_stripos": [
        "Finds position of first occurrence of a string within another, case insensitive",
        "<span class=\"methodname\">mb_stripos<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_stristr": [
        "Finds first occurrence of a string within another, case insensitive",
        "<span class=\"methodname\">mb_stristr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $before_needle<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_strlen": [
        "Get string length",
        "<span class=\"methodname\">mb_strlen<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mb_strpos": [
        "Find position of first occurrence of string in a string",
        "<span class=\"methodname\">mb_strpos<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_strrchr": [
        "Finds the last occurrence of a character in a string within another",
        "<span class=\"methodname\">mb_strrchr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $before_needle<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_strrichr": [
        "Finds the last occurrence of a character in a string within another, case insensitive",
        "<span class=\"methodname\">mb_strrichr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $before_needle<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_strripos": [
        "Finds position of last occurrence of a string within another, case insensitive",
        "<span class=\"methodname\">mb_strripos<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_strrpos": [
        "Find position of last occurrence of a string in a string",
        "<span class=\"methodname\">mb_strrpos<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_strstr": [
        "Finds first occurrence of a string within another",
        "<span class=\"methodname\">mb_strstr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $before_needle<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mb_strtolower": [
        "Make a string lowercase",
        "<span class=\"methodname\">mb_strtolower<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mb_strtoupper": [
        "Make a string uppercase",
        "<span class=\"methodname\">mb_strtoupper<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mb_strwidth": [
        "Return width of string",
        "<span class=\"methodname\">mb_strwidth<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mb_substitute_character": [
        "Set\/Get substitution character",
        "<span class=\"methodname\">mb_substitute_character<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $substitute_character<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "mb_substr": [
        "Get part of string",
        "<span class=\"methodname\">mb_substr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $start<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $length<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mb_substr_count": [
        "Count the number of substring occurrences",
        "<span class=\"methodname\">mb_substr_count<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mcrypt_cbc": [
        "Encrypts\/decrypts data in CBC mode",
        "<span class=\"methodname\">mcrypt_cbc<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $cipher<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $iv<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>",
        "<span class=\"methodname\">mcrypt_cbc<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $cipher<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $iv<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mcrypt_cfb": [
        "Encrypts\/decrypts data in CFB mode",
        "<span class=\"methodname\">mcrypt_cfb<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $cipher<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $iv<\/span> ) : <span class=\"type\">string<\/span>",
        "<span class=\"methodname\">mcrypt_cfb<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $cipher<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $iv<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mcrypt_create_iv": [
        "Creates an initialization vector (IV) from a random source",
        "<span class=\"methodname\">mcrypt_create_iv<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $size<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $source<span class=\"initializer\"> = MCRYPT_DEV_URANDOM<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mcrypt_decrypt": [
        "Decrypts crypttext with given parameters",
        "<span class=\"methodname\">mcrypt_decrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $cipher<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $iv<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mcrypt_ecb": [
        "Deprecated: Encrypts\/decrypts data in ECB mode",
        "<span class=\"methodname\">mcrypt_ecb<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $cipher<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> ) : <span class=\"type\">string<\/span>",
        "<span class=\"methodname\">mcrypt_ecb<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $cipher<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $iv<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mcrypt_enc_get_algorithms_name": [
        "Returns the name of the opened algorithm",
        "<span class=\"methodname\">mcrypt_enc_get_algorithms_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $td<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mcrypt_enc_get_block_size": [
        "Returns the blocksize of the opened algorithm",
        "<span class=\"methodname\">mcrypt_enc_get_block_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $td<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mcrypt_enc_get_iv_size": [
        "Returns the size of the IV of the opened algorithm",
        "<span class=\"methodname\">mcrypt_enc_get_iv_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $td<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mcrypt_enc_get_key_size": [
        "Returns the maximum supported keysize of the opened mode",
        "<span class=\"methodname\">mcrypt_enc_get_key_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $td<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mcrypt_enc_get_modes_name": [
        "Returns the name of the opened mode",
        "<span class=\"methodname\">mcrypt_enc_get_modes_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $td<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mcrypt_enc_get_supported_key_sizes": [
        "Returns an array with the supported keysizes of the opened algorithm",
        "<span class=\"methodname\">mcrypt_enc_get_supported_key_sizes<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $td<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mcrypt_enc_is_block_algorithm": [
        "Checks whether the algorithm of the opened mode is a block algorithm",
        "<span class=\"methodname\">mcrypt_enc_is_block_algorithm<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $td<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mcrypt_enc_is_block_algorithm_mode": [
        "Checks whether the encryption of the opened mode works on blocks",
        "<span class=\"methodname\">mcrypt_enc_is_block_algorithm_mode<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $td<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mcrypt_enc_is_block_mode": [
        "Checks whether the opened mode outputs blocks",
        "<span class=\"methodname\">mcrypt_enc_is_block_mode<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $td<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mcrypt_enc_self_test": [
        "Runs a self test on the opened module",
        "<span class=\"methodname\">mcrypt_enc_self_test<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $td<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mcrypt_encrypt": [
        "Encrypts plaintext with given parameters",
        "<span class=\"methodname\">mcrypt_encrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $cipher<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $iv<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mcrypt_generic": [
        "This function encrypts data",
        "<span class=\"methodname\">mcrypt_generic<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $td<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mcrypt_generic_deinit": [
        "This function deinitializes an encryption module",
        "<span class=\"methodname\">mcrypt_generic_deinit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $td<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mcrypt_generic_end": [
        "This function terminates encryption",
        "<span class=\"methodname\">mcrypt_generic_end<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $td<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mcrypt_generic_init": [
        "This function initializes all buffers needed for encryption",
        "<span class=\"methodname\">mcrypt_generic_init<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $td<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $iv<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mcrypt_get_block_size": [
        "Gets the block size of the specified cipher",
        "<span class=\"methodname\">mcrypt_get_block_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $cipher<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>",
        "<span class=\"methodname\">mcrypt_get_block_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $cipher<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mcrypt_get_cipher_name": [
        "Gets the name of the specified cipher",
        "<span class=\"methodname\">mcrypt_get_cipher_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $cipher<\/span> ) : <span class=\"type\">string<\/span>",
        "<span class=\"methodname\">mcrypt_get_cipher_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $cipher<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mcrypt_get_iv_size": [
        "Returns the size of the IV belonging to a specific cipher\/mode combination",
        "<span class=\"methodname\">mcrypt_get_iv_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $cipher<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mcrypt_get_key_size": [
        "Gets the key size of the specified cipher",
        "<span class=\"methodname\">mcrypt_get_key_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $cipher<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>",
        "<span class=\"methodname\">mcrypt_get_key_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $cipher<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mcrypt_list_algorithms": [
        "Gets an array of all supported ciphers",
        "<span class=\"methodname\">mcrypt_list_algorithms<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $lib_dir<span class=\"initializer\"> = ini_get(\"mcrypt.algorithms_dir\")<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mcrypt_list_modes": [
        "Gets an array of all supported modes",
        "<span class=\"methodname\">mcrypt_list_modes<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $lib_dir<span class=\"initializer\"> = ini_get(\"mcrypt.modes_dir\")<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mcrypt_module_close": [
        "Closes the mcrypt module",
        "<span class=\"methodname\">mcrypt_module_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $td<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mcrypt_module_get_algo_block_size": [
        "Returns the blocksize of the specified algorithm",
        "<span class=\"methodname\">mcrypt_module_get_algo_block_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $algorithm<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $lib_dir<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mcrypt_module_get_algo_key_size": [
        "Returns the maximum supported keysize of the opened mode",
        "<span class=\"methodname\">mcrypt_module_get_algo_key_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $algorithm<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $lib_dir<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mcrypt_module_get_supported_key_sizes": [
        "Returns an array with the supported keysizes of the opened algorithm",
        "<span class=\"methodname\">mcrypt_module_get_supported_key_sizes<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $algorithm<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $lib_dir<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mcrypt_module_is_block_algorithm": [
        "This function checks whether the specified algorithm is a block algorithm",
        "<span class=\"methodname\">mcrypt_module_is_block_algorithm<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $algorithm<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $lib_dir<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mcrypt_module_is_block_algorithm_mode": [
        "Returns if the specified module is a block algorithm or not",
        "<span class=\"methodname\">mcrypt_module_is_block_algorithm_mode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $lib_dir<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mcrypt_module_is_block_mode": [
        "Returns if the specified mode outputs blocks or not",
        "<span class=\"methodname\">mcrypt_module_is_block_mode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $lib_dir<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mcrypt_module_open": [
        "Opens the module of the algorithm and the mode to be used",
        "<span class=\"methodname\">mcrypt_module_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $algorithm<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $algorithm_directory<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode_directory<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "mcrypt_module_self_test": [
        "This function runs a self test on the specified module",
        "<span class=\"methodname\">mcrypt_module_self_test<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $algorithm<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $lib_dir<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mcrypt_ofb": [
        "Encrypts\/decrypts data in OFB mode",
        "<span class=\"methodname\">mcrypt_ofb<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $cipher<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $iv<\/span> ) : <span class=\"type\">string<\/span>",
        "<span class=\"methodname\">mcrypt_ofb<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $cipher<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $iv<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "md5": [
        "Calculate the md5 hash of a string",
        "<span class=\"methodname\">md5<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $binary<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "md5_file": [
        "Calculates the md5 hash of a given file",
        "<span class=\"methodname\">md5_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $binary<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mdecrypt_generic": [
        "Decrypts data",
        "<span class=\"methodname\">mdecrypt_generic<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $td<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "Memcache": [
        "Represents a connection to a set of memcache servers."
    ],
    "memcache_debug": [
        "Turn debug output on\/off",
        "<span class=\"methodname\">memcache_debug<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $on_off<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "Memcached": [
        "Represents a connection to a set of memcached servers.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Memcached::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $persistent_id<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "memory_get_peak_usage": [
        "Returns the peak of memory allocated by PHP",
        "<span class=\"methodname\">memory_get_peak_usage<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $real_usage<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "memory_get_usage": [
        "Returns the amount of memory allocated to PHP",
        "<span class=\"methodname\">memory_get_usage<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $real_usage<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "MessageFormatter": [
        "Constructs a new Message Formatter",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MessageFormatter::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> )"
    ],
    "metaphone": [
        "Calculate the metaphone key of a string",
        "<span class=\"methodname\">metaphone<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max_phonemes<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "method_exists": [
        "Checks if the class method exists",
        "<span class=\"methodname\">method_exists<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">object<\/span><\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $method_name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mhash": [
        "Computes hash",
        "<span class=\"methodname\">mhash<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $algo<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $key<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mhash_count": [
        "Gets the highest available hash ID",
        "<span class=\"methodname\">mhash_count<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "mhash_get_block_size": [
        "Gets the block size of the specified hash",
        "<span class=\"methodname\">mhash_get_block_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $algo<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mhash_get_hash_name": [
        "Gets the name of the specified hash",
        "<span class=\"methodname\">mhash_get_hash_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $algo<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mhash_keygen_s2k": [
        "Generates a key",
        "<span class=\"methodname\">mhash_keygen_s2k<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $algo<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $salt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "microtime": [
        "Return current Unix timestamp with microseconds",
        "<span class=\"methodname\">microtime<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $as_float<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">float<\/span><\/span>"
    ],
    "mime_content_type": [
        "Detect MIME Content-type for a file",
        "<span class=\"methodname\">mime_content_type<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">string<\/span><\/span> $filename<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "min": [
        "Find lowest value",
        "<span class=\"methodname\">min<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$values<\/span> ) : <span class=\"type\">mixed<\/span>",
        "<span class=\"methodname\">min<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $value_array<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "mkdir": [
        "Makes directory",
        "<span class=\"methodname\">mkdir<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pathname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = 0777<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $recursive<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mktime": [
        "Get Unix timestamp for a date",
        "<span class=\"methodname\">mktime<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $hour<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $minute<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $second<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $month<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $day<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $year<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "money_format": [
        "Formats a number as a currency string",
        "<span class=\"methodname\">money_format<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $number<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "Mongo": [
        "A connection between PHP and MongoDB.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Mongo::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $server<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "MongoBinData": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nAlternatives to this class include:",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoBinData::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = 0<\/span><\/span> )"
    ],
    "MongoClient": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nAlternatives to this class include:",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoClient::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $server<span class=\"initializer\"> = \"mongodb:\/\/localhost:27017\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = array(\"connect\" => true)<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $driver_options<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "MongoCode": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nAlternatives to this class include:",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoCode::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $code<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $scope<span class=\"initializer\"> = array()<\/span><\/span> )"
    ],
    "MongoCollection": [
        "Represents a MongoDB collection.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoCollection::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">MongoDB<\/span> $db<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> )"
    ],
    "MongoCommandCursor": [
        "A command cursor is similar to a MongoCursor except that you use it for iterating through the results of a database command instead of a normal query. Command cursors are useful for iterating over large result sets that might exceed the document size limit (currently 16MB) of a single MongoDB::command() response.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoCommandCursor::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">MongoClient<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $ns<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $command<span class=\"initializer\"> = array()<\/span><\/span> )"
    ],
    "MongoConnectionException": [
        "Thrown when the driver fails to connect to the database."
    ],
    "MongoCursor": [
        "A cursor is used to iterate through the results of a database query. For example, to query the database and see all results, you could do:",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoCursor::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">MongoClient<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $ns<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $query<span class=\"initializer\"> = array()<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $fields<span class=\"initializer\"> = array()<\/span><\/span> )"
    ],
    "MongoCursorException": [
        "Caused by accessing a cursor incorrectly or a error receiving a reply. Note that this can be thrown by any database request that receives a reply, not just queries. Writes, commands, and any other operation that sends information to the database and waits for a response can throw a MongoCursorException. The only exception is new MongoClient() (creating a new connection), which will only throw MongoConnectionExceptions."
    ],
    "MongoCursorInterface": [
        "Interface for cursors, which can be used to iterate through results of a database query or command. This interface is implemented by the MongoCursor and MongoCommandCursor classes."
    ],
    "MongoCursorTimeoutException": [
        "Caused by a query timing out. You can set the length of time to wait before this exception is thrown by calling MongoCursor::timeout() on the cursor or setting MongoCursor::$timeout. The static variable is useful for queries such as database commands and MongoCollection::findOne(), both of which implicitly use cursors."
    ],
    "MongoDate": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nAlternatives to this class include:",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoDate::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $sec<span class=\"initializer\"> = time()<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $usec<span class=\"initializer\"> = 0<\/span><\/span> )"
    ],
    "MongoDB": [
        "Instances of this class are used to interact with a database. To get a database:",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoDB::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">MongoClient<\/span> $conn<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> )"
    ],
    "MongoDBRef": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nThere is no equivalent for this class in the new extension."
    ],
    "MongoDeleteBatch": [
        "Constructs a batch of DELETE operations. See MongoWriteBatch.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoDeleteBatch::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">MongoCollection<\/span> $collection<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $write_options<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "MongoDuplicateKeyException": [
        "Thrown when attempting to insert a document into a collection which already contains the same values for the unique keys."
    ],
    "MongoException": [
        "Default Mongo exception."
    ],
    "MongoExecutionTimeoutException": [
        "Thrown when a operation times out server side (i.e. in MongoDB)."
    ],
    "MongoGridFS": [
        "Creates new file collections",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoGridFS::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">MongoDB<\/span> $db<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $prefix<span class=\"initializer\"> = \"fs\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $chunks<span class=\"initializer\"> = \"fs\"<\/span><\/span> )"
    ],
    "MongoGridFSCursor": [
        "Create a new cursor",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoGridFSCursor::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">MongoGridFS<\/span> $gridfs<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $ns<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $fields<\/span> )"
    ],
    "MongoGridFSException": [
        "Thrown when there are errors reading or writing files to or from the database."
    ],
    "MongoGridFSFile": [
        "A database file object.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoGridfsFile::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">MongoGridFS<\/span> $gridfs<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $file<\/span> )"
    ],
    "MongoId": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nAlternatives to this class include:",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoId::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">MongoId<\/span><\/span> $id<span class=\"initializer\"> = null<\/span><\/span> )"
    ],
    "MongoInsertBatch": [
        "Constructs a batch of INSERT operations. See MongoWriteBatch.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoInsertBatch::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">MongoCollection<\/span> $collection<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $write_options<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "MongoInt32": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nThere is no equivalent for this class in the new extension.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoInt32::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> )"
    ],
    "MongoInt64": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nThere is no equivalent for this class in the new extension.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoInt64::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> )"
    ],
    "MongoLog": [
        "Logging can be used to get detailed information about what the driver is doing. Logging is disabled by default, but this class allows you to activate specific levels of logging for various parts of the driver. Some examples:"
    ],
    "MongoMaxKey": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nAlternatives to this class include:"
    ],
    "MongoMinKey": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nAlternatives to this class include:"
    ],
    "MongoProtocolException": [
        "When talking to MongoDB 2.6.0, and later, certain operations (such as writes) may throw MongoProtocolException when the response from the server did not make sense - for example during network failure (we could read the entire response) or data corruption."
    ],
    "MongoRegex": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nAlternatives to this class include:",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoRegex::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $regex<\/span> )"
    ],
    "MongoResultException": [
        "The MongoResultException is thrown by several command helpers (such as MongoCollection::findAndModify()) in the event of failure. The original result document is available through MongoResultException::getDocument()."
    ],
    "MongoTimestamp": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nAlternatives to this class include:",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoTimestamp::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $sec<span class=\"initializer\"> = time()<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $inc<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "MongoUpdateBatch": [
        "Constructs a batch of UPDATE operations. See MongoWriteBatch.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MongoUpdateBatch::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">MongoCollection<\/span> $collection<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $write_options<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "MongoWriteBatch": [
        "MongoWriteBatch is the base class for the MongoInsertBatch, MongoUpdateBatch and MongoDeleteBatch classes.",
        "<span class=\"modifier\">protected<\/span> <span class=\"methodname\">MongoWriteBatch::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">MongoCollection<\/span> $collection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $batch_type<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $write_options<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "MongoWriteConcernException": [
        "MongoWriteConcernException is thrown when a write fails. See Write Concerns for how to set failure thresholds."
    ],
    "move_uploaded_file": [
        "Moves an uploaded file to a new location",
        "<span class=\"methodname\">move_uploaded_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $from<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $to<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mqseries_back": [
        "MQSeries MQBACK",
        "<span class=\"methodname\">mqseries_back<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $hconn<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$compCode<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$reason<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "mqseries_begin": [
        "MQseries MQBEGIN",
        "<span class=\"methodname\">mqseries_begin<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $hconn<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $beginOptions<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$compCode<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$reason<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "mqseries_close": [
        "MQSeries MQCLOSE",
        "<span class=\"methodname\">mqseries_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $hconn<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $hobj<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$compCode<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$reason<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "mqseries_cmit": [
        "MQSeries MQCMIT",
        "<span class=\"methodname\">mqseries_cmit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $hconn<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$compCode<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$reason<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "mqseries_conn": [
        "MQSeries MQCONN",
        "<span class=\"methodname\">mqseries_conn<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $qManagerName<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$hconn<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$compCode<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$reason<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "mqseries_connx": [
        "MQSeries MQCONNX",
        "<span class=\"methodname\">mqseries_connx<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $qManagerName<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$connOptions<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$hconn<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$compCode<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$reason<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "mqseries_disc": [
        "MQSeries MQDISC",
        "<span class=\"methodname\">mqseries_disc<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $hconn<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$compCode<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$reason<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "mqseries_get": [
        "MQSeries MQGET",
        "<span class=\"methodname\">mqseries_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $hConn<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $hObj<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$md<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$gmo<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$bufferLength<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$msg<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$data_length<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$compCode<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$reason<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "mqseries_inq": [
        "MQSeries MQINQ",
        "<span class=\"methodname\">mqseries_inq<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $hconn<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $hobj<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $selectorCount<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $selectors<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $intAttrCount<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$intAttr<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $charAttrLength<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$charAttr<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$compCode<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$reason<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "mqseries_open": [
        "MQSeries MQOPEN",
        "<span class=\"methodname\">mqseries_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $hconn<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$objDesc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$hobj<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$compCode<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$reason<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "mqseries_put": [
        "MQSeries MQPUT",
        "<span class=\"methodname\">mqseries_put<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $hConn<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $hObj<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$md<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$pmo<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$compCode<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$reason<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "mqseries_put1": [
        "MQSeries MQPUT1",
        "<span class=\"methodname\">mqseries_put1<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $hconn<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$objDesc<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$msgDesc<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$pmo<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $buffer<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$compCode<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$reason<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "mqseries_set": [
        "MQSeries MQSET",
        "<span class=\"methodname\">mqseries_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $hConn<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $hObj<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $selectorCount<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $selectors<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $intAttrCount<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $intAttrs<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $charAttrLength<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $charAttrs<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$compCode<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> &$reason<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "mqseries_strerror": [
        "Returns the error message corresponding to a result code (MQRC)",
        "<span class=\"methodname\">mqseries_strerror<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $reason<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "msg_get_queue": [
        "Create or attach to a message queue",
        "<span class=\"methodname\">msg_get_queue<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $permissions<span class=\"initializer\"> = 0666<\/span><\/span> ) : <span class=\"type\"><span class=\"type\"><span class=\"type SysvMessageQueue\">SysvMessageQueue<\/span><\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "msg_queue_exists": [
        "Check whether a message queue exists",
        "<span class=\"methodname\">msg_queue_exists<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $key<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "msg_receive": [
        "Receive a message from a message queue",
        "<span class=\"methodname\">msg_receive<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type SysvMessageQueue\">SysvMessageQueue<\/span><\/span> $queue<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $desired_message_type<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$received_message_type<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max_message_size<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> &$message<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $unserialize<span class=\"initializer\"> = true<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$error_code<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "msg_remove_queue": [
        "Destroy a message queue",
        "<span class=\"methodname\">msg_remove_queue<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type SysvMessageQueue\">SysvMessageQueue<\/span><\/span> $queue<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "msg_send": [
        "Send a message to a message queue",
        "<span class=\"methodname\">msg_send<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type SysvMessageQueue\">SysvMessageQueue<\/span><\/span> $queue<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $message_type<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">float<\/span>|<span class=\"type\">bool<\/span><\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $serialize<span class=\"initializer\"> = true<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $blocking<span class=\"initializer\"> = true<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$error_code<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "msg_set_queue": [
        "Set information in the message queue data structure",
        "<span class=\"methodname\">msg_set_queue<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type SysvMessageQueue\">SysvMessageQueue<\/span><\/span> $queue<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $data<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "msg_stat_queue": [
        "Returns information from the message queue data structure",
        "<span class=\"methodname\">msg_stat_queue<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type SysvMessageQueue\">SysvMessageQueue<\/span><\/span> $queue<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "msgfmt_create": [
        "Constructs a new Message Formatter",
        "<span class=\"methodname\">msgfmt_create<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> ) : <span class=\"type\">MessageFormatter<\/span>"
    ],
    "msgfmt_format": [
        "Format the message",
        "<span class=\"methodname\">msgfmt_format<\/span> ( <span class=\"methodparam\"><span class=\"type\">MessageFormatter<\/span> $fmt<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $args<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "msgfmt_format_message": [
        "Quick format message",
        "<span class=\"methodname\">msgfmt_format_message<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $args<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "msgfmt_get_error_code": [
        "Get the error code from last operation",
        "<span class=\"methodname\">msgfmt_get_error_code<\/span> ( <span class=\"methodparam\"><span class=\"type\">MessageFormatter<\/span> $fmt<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "msgfmt_get_error_message": [
        "Get the error text from the last operation",
        "<span class=\"methodname\">msgfmt_get_error_message<\/span> ( <span class=\"methodparam\"><span class=\"type\">MessageFormatter<\/span> $fmt<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "msgfmt_get_locale": [
        "Get the locale for which the formatter was created",
        "<span class=\"methodname\">msgfmt_get_locale<\/span> ( <span class=\"methodparam\"><span class=\"type\">NumberFormatter<\/span> $formatter<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "msgfmt_get_pattern": [
        "Get the pattern used by the formatter",
        "<span class=\"methodname\">msgfmt_get_pattern<\/span> ( <span class=\"methodparam\"><span class=\"type\">MessageFormatter<\/span> $fmt<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "msgfmt_parse": [
        "Parse input string according to pattern",
        "<span class=\"methodname\">msgfmt_parse<\/span> ( <span class=\"methodparam\"><span class=\"type\">MessageFormatter<\/span> $fmt<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "msgfmt_parse_message": [
        "Quick parse input string",
        "<span class=\"methodname\">msgfmt_parse_message<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "msgfmt_set_pattern": [
        "Set the pattern used by the formatter",
        "<span class=\"methodname\">msgfmt_set_pattern<\/span> ( <span class=\"methodparam\"><span class=\"type\">MessageFormatter<\/span> $fmt<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mt_getrandmax": [
        "Show largest possible random value",
        "<span class=\"methodname\">mt_getrandmax<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "mt_rand": [
        "Generate a random value via the Mersenne Twister Random Number Generator",
        "<span class=\"methodname\">mt_rand<\/span> ( ) : <span class=\"type\">int<\/span>",
        "<span class=\"methodname\">mt_rand<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $min<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mt_srand": [
        "Seeds the Mersenne Twister Random Number Generator",
        "<span class=\"methodname\">mt_srand<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $seed<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = MT_RAND_MT19937<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "MultipleIterator": [
        "An Iterator that sequentially iterates over all attached iterators",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MultipleIterator::__construct<\/span> ( <span class=\"methodparam\"> <span class=\"type\">int<\/span> $flags <span class=\"initializer\"> = MultipleIterator::MIT_NEED_ALL|MultipleIterator::MIT_KEYS_NUMERIC<\/span> <\/span> )"
    ],
    "Mutex": [
        "The static methods contained in the Mutex class provide direct access to Posix Mutex functionality."
    ],
    "mysql_affected_rows": [
        "Get number of affected rows in previous MySQL operation",
        "<span class=\"methodname\">mysql_affected_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysql_client_encoding": [
        "Returns the name of the character set",
        "<span class=\"methodname\">mysql_client_encoding<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysql_close": [
        "Close MySQL connection",
        "<span class=\"methodname\">mysql_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysql_connect": [
        "Open a connection to a MySQL Server",
        "<span class=\"methodname\">mysql_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $server<span class=\"initializer\"> = ini_get(\"mysql.default_host\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<span class=\"initializer\"> = ini_get(\"mysql.default_user\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<span class=\"initializer\"> = ini_get(\"mysql.default_password\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $new_link<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $client_flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mysql_create_db": [
        "Create a MySQL database",
        "<span class=\"methodname\">mysql_create_db<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database_name<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysql_data_seek": [
        "Move internal result pointer",
        "<span class=\"methodname\">mysql_data_seek<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row_number<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysql_db_name": [
        "Retrieves database name from the call to mysql_list_dbs()",
        "<span class=\"methodname\">mysql_db_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $field<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysql_db_query": [
        "Selects a database and executes a query on it",
        "<span class=\"methodname\">mysql_db_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "mysql_drop_db": [
        "Drop (delete) a MySQL database",
        "<span class=\"methodname\">mysql_drop_db<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database_name<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysql_errno": [
        "Returns the numerical value of the error message from previous MySQL operation",
        "<span class=\"methodname\">mysql_errno<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysql_error": [
        "Returns the text of the error message from previous MySQL operation",
        "<span class=\"methodname\">mysql_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysql_escape_string": [
        "Escapes a string for use in a mysql_query",
        "<span class=\"methodname\">mysql_escape_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $unescaped_string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysql_fetch_array": [
        "Fetch a result row as an associative array, a numeric array, or both",
        "<span class=\"methodname\">mysql_fetch_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $result_type<span class=\"initializer\"> = MYSQL_BOTH<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mysql_fetch_assoc": [
        "Fetch a result row as an associative array",
        "<span class=\"methodname\">mysql_fetch_assoc<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mysql_fetch_field": [
        "Get column information from a result and return as an object",
        "<span class=\"methodname\">mysql_fetch_field<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "mysql_fetch_lengths": [
        "Get the length of each output in a result",
        "<span class=\"methodname\">mysql_fetch_lengths<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mysql_fetch_object": [
        "Fetch a result row as an object",
        "<span class=\"methodname\">mysql_fetch_object<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $class_name<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $params<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "mysql_fetch_row": [
        "Get a result row as an enumerated array",
        "<span class=\"methodname\">mysql_fetch_row<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mysql_field_flags": [
        "Get the flags associated with the specified field in a result",
        "<span class=\"methodname\">mysql_field_flags<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mysql_field_len": [
        "Returns the length of the specified field",
        "<span class=\"methodname\">mysql_field_len<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mysql_field_name": [
        "Get the name of the specified field in a result",
        "<span class=\"methodname\">mysql_field_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mysql_field_seek": [
        "Set result pointer to a specified field offset",
        "<span class=\"methodname\">mysql_field_seek<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysql_field_table": [
        "Get name of the table the specified field is in",
        "<span class=\"methodname\">mysql_field_table<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysql_field_type": [
        "Get the type of the specified field in a result",
        "<span class=\"methodname\">mysql_field_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_offset<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysql_free_result": [
        "Free result memory",
        "<span class=\"methodname\">mysql_free_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysql_get_client_info": [
        "Get MySQL client info",
        "<span class=\"methodname\">mysql_get_client_info<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "mysql_get_host_info": [
        "Get MySQL host info",
        "<span class=\"methodname\">mysql_get_host_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mysql_get_proto_info": [
        "Get MySQL protocol info",
        "<span class=\"methodname\">mysql_get_proto_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mysql_get_server_info": [
        "Get MySQL server info",
        "<span class=\"methodname\">mysql_get_server_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mysql_info": [
        "Get information about the most recent query",
        "<span class=\"methodname\">mysql_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysql_insert_id": [
        "Get the ID generated in the last query",
        "<span class=\"methodname\">mysql_insert_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysql_list_dbs": [
        "List databases available on a MySQL server",
        "<span class=\"methodname\">mysql_list_dbs<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "mysql_list_fields": [
        "List MySQL table fields",
        "<span class=\"methodname\">mysql_list_fields<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table_name<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "mysql_list_processes": [
        "List MySQL processes",
        "<span class=\"methodname\">mysql_list_processes<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mysql_list_tables": [
        "List tables in a MySQL database",
        "<span class=\"methodname\">mysql_list_tables<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mysql_num_fields": [
        "Get number of fields in result",
        "<span class=\"methodname\">mysql_num_fields<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mysql_num_rows": [
        "Get number of rows in result",
        "<span class=\"methodname\">mysql_num_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mysql_pconnect": [
        "Open a persistent connection to a MySQL server",
        "<span class=\"methodname\">mysql_pconnect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $server<span class=\"initializer\"> = ini_get(\"mysql.default_host\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<span class=\"initializer\"> = ini_get(\"mysql.default_user\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<span class=\"initializer\"> = ini_get(\"mysql.default_password\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $client_flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "mysql_ping": [
        "Ping a server connection or reconnect if there is no connection",
        "<span class=\"methodname\">mysql_ping<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysql_query": [
        "Send a MySQL query",
        "<span class=\"methodname\">mysql_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "mysql_real_escape_string": [
        "Escapes special characters in a string for use in an SQL statement",
        "<span class=\"methodname\">mysql_real_escape_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $unescaped_string<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysql_result": [
        "Get result data",
        "<span class=\"methodname\">mysql_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $field<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysql_select_db": [
        "Select a MySQL database",
        "<span class=\"methodname\">mysql_select_db<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $database_name<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysql_set_charset": [
        "Sets the client character set",
        "<span class=\"methodname\">mysql_set_charset<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $charset<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysql_stat": [
        "Get current system status",
        "<span class=\"methodname\">mysql_stat<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysql_tablename": [
        "Get table name of field",
        "<span class=\"methodname\">mysql_tablename<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $i<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mysql_thread_id": [
        "Return the current thread ID",
        "<span class=\"methodname\">mysql_thread_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mysql_unbuffered_query": [
        "Send an SQL query to MySQL without fetching and buffering the result rows",
        "<span class=\"methodname\">mysql_unbuffered_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link_identifier<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "mysqli": [
        "Represents a connection between PHP and a MySQL database.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">mysqli::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $host<span class=\"initializer\"> = ini_get(\"mysqli.default_host\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<span class=\"initializer\"> = ini_get(\"mysqli.default_user\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $passwd<span class=\"initializer\"> = ini_get(\"mysqli.default_pw\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dbname<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $port<span class=\"initializer\"> = ini_get(\"mysqli.default_port\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $socket<span class=\"initializer\"> = ini_get(\"mysqli.default_socket\")<\/span><\/span> )"
    ],
    "mysqli_affected_rows": [
        "Gets the number of affected rows in a previous MySQL operation",
        "<span class=\"methodname\">mysqli_affected_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqli_autocommit": [
        "Turns on or off auto-committing database modifications",
        "<span class=\"methodname\">mysqli_autocommit<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $mode<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_begin_transaction": [
        "Starts a transaction",
        "<span class=\"methodname\">mysqli_begin_transaction<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_change_user": [
        "Changes the user of the specified database connection",
        "<span class=\"methodname\">mysqli_change_user<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $user<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $database<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_character_set_name": [
        "Returns the default character set for the database connection",
        "<span class=\"methodname\">mysqli_character_set_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysqli_close": [
        "Closes a previously opened database connection",
        "<span class=\"methodname\">mysqli_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_commit": [
        "Commits the current transaction",
        "<span class=\"methodname\">mysqli_commit<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_connect": [
        "Open a new connection to the MySQL server",
        "<span class=\"methodname\">mysqli_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $host<span class=\"initializer\"> = ini_get(\"mysqli.default_host\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<span class=\"initializer\"> = ini_get(\"mysqli.default_user\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $passwd<span class=\"initializer\"> = ini_get(\"mysqli.default_pw\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dbname<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $port<span class=\"initializer\"> = ini_get(\"mysqli.default_port\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $socket<span class=\"initializer\"> = ini_get(\"mysqli.default_socket\")<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">mysqli<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "mysqli_connect_errno": [
        "Returns the error code from last connect call",
        "<span class=\"methodname\">mysqli_connect_errno<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "mysqli_connect_error": [
        "Returns a string description of the last connect error",
        "<span class=\"methodname\">mysqli_connect_error<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "mysqli_data_seek": [
        "Adjusts the result pointer to an arbitrary row in the result",
        "<span class=\"methodname\">mysqli_data_seek<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_result<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_debug": [
        "Performs debugging operations",
        "<span class=\"methodname\">mysqli_debug<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_driver": [
        "The mysqli_driver class is an instance of the monostate pattern, i.e. there is only one driver which can be accessed though an arbitrary amount of mysqli_driver instances."
    ],
    "mysqli_dump_debug_info": [
        "Dump debugging information into the log",
        "<span class=\"methodname\">mysqli_dump_debug_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_embedded_server_end": [
        "Stop embedded server",
        "<span class=\"methodname\">mysqli_embedded_server_end<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "mysqli_embedded_server_start": [
        "Initialize and start embedded server",
        "<span class=\"methodname\">mysqli_embedded_server_start<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $start<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $arguments<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $groups<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_errno": [
        "Returns the error code for the most recent function call",
        "<span class=\"methodname\">mysqli_errno<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqli_error": [
        "Returns a string description of the last error",
        "<span class=\"methodname\">mysqli_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysqli_error_list": [
        "Returns a list of errors from the last command executed",
        "<span class=\"methodname\">mysqli_error_list<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mysqli_fetch_all": [
        "Fetches all result rows as an associative array, a numeric array, or both",
        "<span class=\"methodname\">mysqli_fetch_all<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_result<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $resulttype<span class=\"initializer\"> = MYSQLI_NUM<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "mysqli_fetch_array": [
        "Fetch a result row as an associative, a numeric array, or both",
        "<span class=\"methodname\">mysqli_fetch_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_result<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $resulttype<span class=\"initializer\"> = MYSQLI_BOTH<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "mysqli_fetch_assoc": [
        "Fetch a result row as an associative array",
        "<span class=\"methodname\">mysqli_fetch_assoc<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_result<\/span> $result<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mysqli_fetch_field": [
        "Returns the next field in the result set",
        "<span class=\"methodname\">mysqli_fetch_field<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_result<\/span> $result<\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "mysqli_fetch_field_direct": [
        "Fetch meta-data for a single field",
        "<span class=\"methodname\">mysqli_fetch_field_direct<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_result<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fieldnr<\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "mysqli_fetch_fields": [
        "Returns an array of objects representing the fields in a result set",
        "<span class=\"methodname\">mysqli_fetch_fields<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_result<\/span> $result<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mysqli_fetch_lengths": [
        "Returns the lengths of the columns of the current row in the result set",
        "<span class=\"methodname\">mysqli_fetch_lengths<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_result<\/span> $result<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mysqli_fetch_object": [
        "Returns the current row of a result set as an object",
        "<span class=\"methodname\">mysqli_fetch_object<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_result<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $class_name<span class=\"initializer\"> = \"stdClass\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $params<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "mysqli_fetch_row": [
        "Get a result row as an enumerated array",
        "<span class=\"methodname\">mysqli_fetch_row<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_result<\/span> $result<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "mysqli_field_count": [
        "Returns the number of columns for the most recent query",
        "<span class=\"methodname\">mysqli_field_count<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqli_field_seek": [
        "Set result pointer to a specified field offset",
        "<span class=\"methodname\">mysqli_field_seek<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_result<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fieldnr<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_field_tell": [
        "Get current field offset of a result pointer",
        "<span class=\"methodname\">mysqli_field_tell<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_result<\/span> $result<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqli_free_result": [
        "Frees the memory associated with a result",
        "<span class=\"methodname\">mysqli_free_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_result<\/span> $result<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "mysqli_get_charset": [
        "Returns a character set object",
        "<span class=\"methodname\">mysqli_get_charset<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "mysqli_get_client_info": [
        "Get MySQL client info",
        "<span class=\"methodname\">mysqli_get_client_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysqli_get_client_stats": [
        "Returns client per-process statistics",
        "<span class=\"methodname\">mysqli_get_client_stats<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "mysqli_get_client_version": [
        "Returns the MySQL client version as an integer",
        "<span class=\"methodname\">mysqli_get_client_version<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqli_get_connection_stats": [
        "Returns statistics about the client connection",
        "<span class=\"methodname\">mysqli_get_connection_stats<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mysqli_get_host_info": [
        "Returns a string representing the type of connection used",
        "<span class=\"methodname\">mysqli_get_host_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysqli_get_links_stats": [
        "Return information about open and cached links",
        "<span class=\"methodname\">mysqli_get_links_stats<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "mysqli_get_proto_info": [
        "Returns the version of the MySQL protocol used",
        "<span class=\"methodname\">mysqli_get_proto_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqli_get_server_info": [
        "Returns the version of the MySQL server",
        "<span class=\"methodname\">mysqli_get_server_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysqli_get_server_version": [
        "Returns the version of the MySQL server as an integer",
        "<span class=\"methodname\">mysqli_get_server_version<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqli_get_warnings": [
        "Get result of SHOW WARNINGS",
        "<span class=\"methodname\">mysqli_get_warnings<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">mysqli_warning<\/span>"
    ],
    "mysqli_info": [
        "Retrieves information about the most recently executed query",
        "<span class=\"methodname\">mysqli_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysqli_init": [
        "Initializes MySQLi and returns an object for use with mysqli_real_connect()",
        "<span class=\"methodname\">mysqli_init<\/span> ( ) : <span class=\"type\">mysqli<\/span>"
    ],
    "mysqli_insert_id": [
        "Returns the auto generated id used in the latest query",
        "<span class=\"methodname\">mysqli_insert_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "mysqli_kill": [
        "Asks the server to kill a MySQL thread",
        "<span class=\"methodname\">mysqli_kill<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $processid<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_more_results": [
        "Check if there are any more query results from a multi query",
        "<span class=\"methodname\">mysqli_more_results<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_multi_query": [
        "Performs a query on the database",
        "<span class=\"methodname\">mysqli_multi_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_next_result": [
        "Prepare next result from multi_query",
        "<span class=\"methodname\">mysqli_next_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_num_fields": [
        "Get the number of fields in a result",
        "<span class=\"methodname\">mysqli_num_fields<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_result<\/span> $result<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqli_num_rows": [
        "Gets the number of rows in a result",
        "<span class=\"methodname\">mysqli_num_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_result<\/span> $result<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqli_options": [
        "Set options",
        "<span class=\"methodname\">mysqli_options<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_ping": [
        "Pings a server connection, or tries to reconnect if the connection has gone down",
        "<span class=\"methodname\">mysqli_ping<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_poll": [
        "Poll connections",
        "<span class=\"methodname\">mysqli_poll<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$read<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$error<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$reject<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $sec<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $usec<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqli_prepare": [
        "Prepare an SQL statement for execution",
        "<span class=\"methodname\">mysqli_prepare<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> ) : <span class=\"type\">mysqli_stmt<\/span>"
    ],
    "mysqli_query": [
        "Performs a query on the database",
        "<span class=\"methodname\">mysqli_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $resultmode<span class=\"initializer\"> = MYSQLI_STORE_RESULT<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "mysqli_real_connect": [
        "Opens a connection to a mysql server",
        "<span class=\"methodname\">mysqli_real_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $host<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $passwd<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dbname<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $port<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $socket<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_real_escape_string": [
        "Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection",
        "<span class=\"methodname\">mysqli_real_escape_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $escapestr<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysqli_real_query": [
        "Execute an SQL query",
        "<span class=\"methodname\">mysqli_real_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_reap_async_query": [
        "Get result from async query",
        "<span class=\"methodname\">mysqli_reap_async_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">mysqli_result<\/span>"
    ],
    "mysqli_refresh": [
        "Refreshes",
        "<span class=\"methodname\">mysqli_refresh<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_release_savepoint": [
        "Removes the named savepoint from the set of savepoints of the current transaction",
        "<span class=\"methodname\">mysqli_release_savepoint<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_report": [
        "Sets mysqli error reporting mode",
        "<span class=\"methodname\">mysqli_report<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_result": [
        "Represents the result set obtained from a query against the database."
    ],
    "mysqli_rollback": [
        "Rolls back current transaction",
        "<span class=\"methodname\">mysqli_rollback<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_savepoint": [
        "Set a named transaction savepoint",
        "<span class=\"methodname\">mysqli_savepoint<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_select_db": [
        "Selects the default database for database queries",
        "<span class=\"methodname\">mysqli_select_db<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dbname<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_set_charset": [
        "Sets the default client character set",
        "<span class=\"methodname\">mysqli_set_charset<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $charset<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_sql_exception": [
        "The mysqli exception handling class."
    ],
    "mysqli_sqlstate": [
        "Returns the SQLSTATE error from previous MySQL operation",
        "<span class=\"methodname\">mysqli_sqlstate<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysqli_ssl_set": [
        "Used for establishing secure connections using SSL",
        "<span class=\"methodname\">mysqli_ssl_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $cert<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $ca<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $capath<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $cipher<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_stat": [
        "Gets the current system status",
        "<span class=\"methodname\">mysqli_stat<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysqli_stmt": [
        "Represents a prepared statement.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">mysqli_stmt::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "mysqli_stmt_affected_rows": [
        "Returns the total number of rows changed, deleted, or\n  inserted by the last executed statement",
        "<span class=\"methodname\">mysqli_stmt_affected_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqli_stmt_attr_get": [
        "Used to get the current value of a statement attribute",
        "<span class=\"methodname\">mysqli_stmt_attr_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $attr<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqli_stmt_attr_set": [
        "Used to modify the behavior of a prepared statement",
        "<span class=\"methodname\">mysqli_stmt_attr_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $attr<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_stmt_bind_param": [
        "Binds variables to a prepared statement as parameters",
        "<span class=\"methodname\">mysqli_stmt_bind_param<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $types<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> &$var<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> &...$vars<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_stmt_bind_result": [
        "Binds variables to a prepared statement for result storage",
        "<span class=\"methodname\">mysqli_stmt_bind_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> &$var<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> &...$vars<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_stmt_close": [
        "Closes a prepared statement",
        "<span class=\"methodname\">mysqli_stmt_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_stmt_data_seek": [
        "Seeks to an arbitrary row in statement result set",
        "<span class=\"methodname\">mysqli_stmt_data_seek<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "mysqli_stmt_errno": [
        "Returns the error code for the most recent statement call",
        "<span class=\"methodname\">mysqli_stmt_errno<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqli_stmt_error": [
        "Returns a string description for last statement error",
        "<span class=\"methodname\">mysqli_stmt_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysqli_stmt_error_list": [
        "Returns a list of errors from the last statement executed",
        "<span class=\"methodname\">mysqli_stmt_error_list<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mysqli_stmt_execute": [
        "Executes a prepared Query",
        "<span class=\"methodname\">mysqli_stmt_execute<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_stmt_fetch": [
        "Fetch results from a prepared statement into the bound variables",
        "<span class=\"methodname\">mysqli_stmt_fetch<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_stmt_field_count": [
        "Returns the number of columns in the given statement",
        "<span class=\"methodname\">mysqli_stmt_field_count<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqli_stmt_free_result": [
        "Frees stored result memory for the given statement handle",
        "<span class=\"methodname\">mysqli_stmt_free_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "mysqli_stmt_get_result": [
        "Gets a result set from a prepared statement",
        "<span class=\"methodname\">mysqli_stmt_get_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> ) : <span class=\"type\">mysqli_result<\/span>"
    ],
    "mysqli_stmt_get_warnings": [
        "Get result of SHOW WARNINGS",
        "<span class=\"methodname\">mysqli_stmt_get_warnings<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "mysqli_stmt_init": [
        "Initializes a statement and returns an object for use with mysqli_stmt_prepare",
        "<span class=\"methodname\">mysqli_stmt_init<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">mysqli_stmt<\/span>"
    ],
    "mysqli_stmt_insert_id": [
        "Get the ID generated from the previous INSERT operation",
        "<span class=\"methodname\">mysqli_stmt_insert_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "mysqli_stmt_more_results": [
        "Check if there are more query results from a multiple query",
        "<span class=\"methodname\">mysqli_stmt_more_results<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type mysql_stmt\">mysql_stmt<\/span><\/span> $stmt<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_stmt_next_result": [
        "Reads the next result from a multiple query",
        "<span class=\"methodname\">mysqli_stmt_next_result<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type mysql_stmt\">mysql_stmt<\/span><\/span> $stmt<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_stmt_num_rows": [
        "Return the number of rows in statements result set",
        "<span class=\"methodname\">mysqli_stmt_num_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqli_stmt_param_count": [
        "Returns the number of parameters for the given statement",
        "<span class=\"methodname\">mysqli_stmt_param_count<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqli_stmt_prepare": [
        "Prepare an SQL statement for execution",
        "<span class=\"methodname\">mysqli_stmt_prepare<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_stmt_reset": [
        "Resets a prepared statement",
        "<span class=\"methodname\">mysqli_stmt_reset<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_stmt_result_metadata": [
        "Returns result set metadata from a prepared statement",
        "<span class=\"methodname\">mysqli_stmt_result_metadata<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> ) : <span class=\"type\">mysqli_result<\/span>"
    ],
    "mysqli_stmt_send_long_data": [
        "Send data in blocks",
        "<span class=\"methodname\">mysqli_stmt_send_long_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $param_nr<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_stmt_sqlstate": [
        "Returns SQLSTATE error from previous statement operation",
        "<span class=\"methodname\">mysqli_stmt_sqlstate<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysqli_stmt_store_result": [
        "Transfers a result set from a prepared statement",
        "<span class=\"methodname\">mysqli_stmt_store_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli_stmt<\/span> $stmt<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_store_result": [
        "Transfers a result set from the last query",
        "<span class=\"methodname\">mysqli_store_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mysqli_result<\/span>"
    ],
    "mysqli_thread_id": [
        "Returns the thread ID for the current connection",
        "<span class=\"methodname\">mysqli_thread_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqli_thread_safe": [
        "Returns whether thread safety is given or not",
        "<span class=\"methodname\">mysqli_thread_safe<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqli_use_result": [
        "Initiate a result set retrieval",
        "<span class=\"methodname\">mysqli_use_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">mysqli_result<\/span>"
    ],
    "mysqli_warning": [
        "Represents a MySQL warning."
    ],
    "mysqli_warning_count": [
        "Returns the number of warnings from the last query for the given link",
        "<span class=\"methodname\">mysqli_warning_count<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> $link<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqlnd_memcache_get_config": [
        "Returns information about the plugin configuration",
        "<span class=\"methodname\">mysqlnd_memcache_get_config<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $connection<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mysqlnd_memcache_set": [
        "Associate a MySQL connection with a Memcache connection",
        "<span class=\"methodname\">mysqlnd_memcache_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $mysql_connection<\/span> , <span class=\"methodparam\"><span class=\"type\">Memcached<\/span> $memcache_connection<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqlnd_ms_dump_servers": [
        "Returns a list of currently configured servers",
        "<span class=\"methodname\">mysqlnd_ms_dump_servers<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $connection<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mysqlnd_ms_fabric_select_global": [
        "Switch to global sharding server for a given table",
        "<span class=\"methodname\">mysqlnd_ms_fabric_select_global<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $table_name<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mysqlnd_ms_fabric_select_shard": [
        "Switch to shard",
        "<span class=\"methodname\">mysqlnd_ms_fabric_select_shard<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $table_name<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $shard_key<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mysqlnd_ms_get_last_gtid": [
        "Returns the latest global transaction ID",
        "<span class=\"methodname\">mysqlnd_ms_get_last_gtid<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $connection<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "mysqlnd_ms_get_last_used_connection": [
        "Returns an array which describes the last used connection",
        "<span class=\"methodname\">mysqlnd_ms_get_last_used_connection<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $connection<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "mysqlnd_ms_get_stats": [
        "Returns query distribution and connection statistics",
        "<span class=\"methodname\">mysqlnd_ms_get_stats<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "mysqlnd_ms_match_wild": [
        "Finds whether a table name matches a wildcard pattern or not",
        "<span class=\"methodname\">mysqlnd_ms_match_wild<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $table_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $wildcard<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqlnd_ms_query_is_select": [
        "Find whether to send the query to the master, the slave or the last used MySQL server",
        "<span class=\"methodname\">mysqlnd_ms_query_is_select<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqlnd_ms_set_qos": [
        "Sets the quality of service needed from the cluster",
        "<span class=\"methodname\">mysqlnd_ms_set_qos<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $service_level<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $service_level_option<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $option_value<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqlnd_ms_set_user_pick_server": [
        "Sets a callback for user-defined read\/write splitting",
        "<span class=\"methodname\">mysqlnd_ms_set_user_pick_server<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqlnd_ms_xa_begin": [
        "Starts a distributed\/XA transaction among MySQL servers",
        "<span class=\"methodname\">mysqlnd_ms_xa_begin<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $gtrid<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqlnd_ms_xa_commit": [
        "Commits a distributed\/XA transaction among MySQL servers",
        "<span class=\"methodname\">mysqlnd_ms_xa_commit<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $gtrid<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqlnd_ms_xa_gc": [
        "Garbage collects unfinished XA transactions after severe errors",
        "<span class=\"methodname\">mysqlnd_ms_xa_gc<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $gtrid<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $ignore_max_retries<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqlnd_ms_xa_rollback": [
        "Rolls back a distributed\/XA transaction among MySQL servers",
        "<span class=\"methodname\">mysqlnd_ms_xa_rollback<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $gtrid<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "mysqlnd_qc_clear_cache": [
        "Flush all cache contents",
        "<span class=\"methodname\">mysqlnd_qc_clear_cache<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqlnd_qc_get_available_handlers": [
        "Returns a list of available storage handler",
        "<span class=\"methodname\">mysqlnd_qc_get_available_handlers<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "mysqlnd_qc_get_cache_info": [
        "Returns information on the current handler, the number of cache entries and cache entries, if available",
        "<span class=\"methodname\">mysqlnd_qc_get_cache_info<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "mysqlnd_qc_get_core_stats": [
        "Statistics collected by the core of the query cache",
        "<span class=\"methodname\">mysqlnd_qc_get_core_stats<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "mysqlnd_qc_get_normalized_query_trace_log": [
        "Returns a normalized query trace log for each query inspected by the query cache",
        "<span class=\"methodname\">mysqlnd_qc_get_normalized_query_trace_log<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "mysqlnd_qc_get_query_trace_log": [
        "Returns a backtrace for each query inspected by the query cache",
        "<span class=\"methodname\">mysqlnd_qc_get_query_trace_log<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "mysqlnd_qc_set_cache_condition": [
        "Set conditions for automatic caching",
        "<span class=\"methodname\">mysqlnd_qc_set_cache_condition<\/span> ( <span class=\"methodparam\"> <span class=\"type\">int<\/span> $condition_type <\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $condition <\/span> , <span class=\"methodparam\"> <span class=\"type\">mixed<\/span> $condition_option <\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqlnd_qc_set_is_select": [
        "Installs a callback which decides whether a statement is cached",
        "<span class=\"methodname\">mysqlnd_qc_set_is_select<\/span> ( <span class=\"methodparam\"> <span class=\"type\">string<\/span> $callback <\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "mysqlnd_qc_set_storage_handler": [
        "Change current storage handler",
        "<span class=\"methodname\">mysqlnd_qc_set_storage_handler<\/span> ( <span class=\"methodparam\"> <span class=\"type\">string<\/span> $handler <\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqlnd_qc_set_user_handlers": [
        "Sets the callback functions for a user-defined procedural storage handler",
        "<span class=\"methodname\">mysqlnd_qc_set_user_handlers<\/span> ( <span class=\"methodparam\"> <span class=\"type\">string<\/span> $get_hash <\/span> , <span class=\"methodparam\"> <span class=\"type\">string<\/span> $find_query_in_cache <\/span> , <span class=\"methodparam\"> <span class=\"type\">string<\/span> $return_to_cache <\/span> , <span class=\"methodparam\"> <span class=\"type\">string<\/span> $add_query_to_cache_if_not_exists <\/span> , <span class=\"methodparam\"> <span class=\"type\">string<\/span> $query_is_select <\/span> , <span class=\"methodparam\"> <span class=\"type\">string<\/span> $update_query_run_time_stats <\/span> , <span class=\"methodparam\"> <span class=\"type\">string<\/span> $get_stats <\/span> , <span class=\"methodparam\"> <span class=\"type\">string<\/span> $clear_cache <\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqlnd_uh_convert_to_mysqlnd": [
        "Converts a MySQL connection handle into a mysqlnd connection handle",
        "<span class=\"methodname\">mysqlnd_uh_convert_to_mysqlnd<\/span> ( <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> &$mysql_connection<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "mysqlnd_uh_set_connection_proxy": [
        "Installs a proxy for mysqlnd connections",
        "<span class=\"methodname\">mysqlnd_uh_set_connection_proxy<\/span> ( <span class=\"methodparam\"><span class=\"type\">MysqlndUhConnection<\/span> &$connection_proxy<\/span> , <span class=\"methodparam\"><span class=\"type\">mysqli<\/span> &$mysqli_connection<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "mysqlnd_uh_set_statement_proxy": [
        "Installs a proxy for mysqlnd statements",
        "<span class=\"methodname\">mysqlnd_uh_set_statement_proxy<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type MysqlndUhStatement\">MysqlndUhStatement<\/span><\/span> &$statement_proxy<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "MysqlndUhConnection": [
        "The __construct purpose",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MysqlndUhConnection::__construct<\/span> ( )"
    ],
    "MysqlndUhPreparedStatement": [
        "The __construct purpose",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">MysqlndUhPreparedStatement::__construct<\/span> ( )"
    ],
    "natcasesort": [
        "Sort an array using a case insensitive \"natural order\" algorithm",
        "<span class=\"methodname\">natcasesort<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "natsort": [
        "Sort an array using a \"natural order\" algorithm",
        "<span class=\"methodname\">natsort<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_addch": [
        "Add character at current position and advance cursor",
        "<span class=\"methodname\">ncurses_addch<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $ch<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_addchnstr": [
        "Add attributed string with specified length at current position",
        "<span class=\"methodname\">ncurses_addchnstr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $s<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $n<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_addchstr": [
        "Add attributed string at current position",
        "<span class=\"methodname\">ncurses_addchstr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $s<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_addnstr": [
        "Add string with specified length at current position",
        "<span class=\"methodname\">ncurses_addnstr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $s<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $n<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_addstr": [
        "Output text at current position",
        "<span class=\"methodname\">ncurses_addstr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_assume_default_colors": [
        "Define default colors for color 0",
        "<span class=\"methodname\">ncurses_assume_default_colors<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $fg<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $bg<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_attroff": [
        "Turn off the given attributes",
        "<span class=\"methodname\">ncurses_attroff<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $attributes<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_attron": [
        "Turn on the given attributes",
        "<span class=\"methodname\">ncurses_attron<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $attributes<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_attrset": [
        "Set given attributes",
        "<span class=\"methodname\">ncurses_attrset<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $attributes<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_baudrate": [
        "Returns baudrate of terminal",
        "<span class=\"methodname\">ncurses_baudrate<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_beep": [
        "Let the terminal beep",
        "<span class=\"methodname\">ncurses_beep<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_bkgd": [
        "Set background property for terminal screen",
        "<span class=\"methodname\">ncurses_bkgd<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $attrchar<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_bkgdset": [
        "Control screen background",
        "<span class=\"methodname\">ncurses_bkgdset<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $attrchar<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "ncurses_border": [
        "Draw a border around the screen using attributed characters",
        "<span class=\"methodname\">ncurses_border<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $left<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $right<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $top<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $bottom<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $tl_corner<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $tr_corner<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $bl_corner<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $br_corner<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_bottom_panel": [
        "Moves a visible panel to the bottom of the stack",
        "<span class=\"methodname\">ncurses_bottom_panel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $panel<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_can_change_color": [
        "Checks if terminal color definitions can be changed",
        "<span class=\"methodname\">ncurses_can_change_color<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_cbreak": [
        "Switch off input buffering",
        "<span class=\"methodname\">ncurses_cbreak<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_clear": [
        "Clear screen",
        "<span class=\"methodname\">ncurses_clear<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_clrtobot": [
        "Clear screen from current position to bottom",
        "<span class=\"methodname\">ncurses_clrtobot<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_clrtoeol": [
        "Clear screen from current position to end of line",
        "<span class=\"methodname\">ncurses_clrtoeol<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_color_content": [
        "Retrieves RGB components of a color",
        "<span class=\"methodname\">ncurses_color_content<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$r<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$g<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$b<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_color_set": [
        "Set active foreground and background colors",
        "<span class=\"methodname\">ncurses_color_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $pair<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_curs_set": [
        "Set cursor state",
        "<span class=\"methodname\">ncurses_curs_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $visibility<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_def_prog_mode": [
        "Saves terminals (program) mode",
        "<span class=\"methodname\">ncurses_def_prog_mode<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_def_shell_mode": [
        "Saves terminals (shell) mode",
        "<span class=\"methodname\">ncurses_def_shell_mode<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_define_key": [
        "Define a keycode",
        "<span class=\"methodname\">ncurses_define_key<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $definition<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $keycode<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_del_panel": [
        "Remove panel from the stack and delete it (but not the associated window)",
        "<span class=\"methodname\">ncurses_del_panel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $panel<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_delay_output": [
        "Delay output on terminal using padding characters",
        "<span class=\"methodname\">ncurses_delay_output<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $milliseconds<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_delch": [
        "Delete character at current position, move rest of line left",
        "<span class=\"methodname\">ncurses_delch<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_deleteln": [
        "Delete line at current position, move rest of screen up",
        "<span class=\"methodname\">ncurses_deleteln<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_delwin": [
        "Delete a ncurses window",
        "<span class=\"methodname\">ncurses_delwin<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_doupdate": [
        "Write all prepared refreshes to terminal",
        "<span class=\"methodname\">ncurses_doupdate<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_echo": [
        "Activate keyboard input echo",
        "<span class=\"methodname\">ncurses_echo<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_echochar": [
        "Single character output including refresh",
        "<span class=\"methodname\">ncurses_echochar<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $character<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_end": [
        "Stop using ncurses, clean up the screen",
        "<span class=\"methodname\">ncurses_end<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_erase": [
        "Erase terminal screen",
        "<span class=\"methodname\">ncurses_erase<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_erasechar": [
        "Returns current erase character",
        "<span class=\"methodname\">ncurses_erasechar<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "ncurses_filter": [
        "Set LINES for iniscr() and newterm() to 1",
        "<span class=\"methodname\">ncurses_filter<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "ncurses_flash": [
        "Flash terminal screen (visual bell)",
        "<span class=\"methodname\">ncurses_flash<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_flushinp": [
        "Flush keyboard input buffer",
        "<span class=\"methodname\">ncurses_flushinp<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_getch": [
        "Read a character from keyboard",
        "<span class=\"methodname\">ncurses_getch<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_getmaxyx": [
        "Returns the size of a window",
        "<span class=\"methodname\">ncurses_getmaxyx<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$x<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "ncurses_getmouse": [
        "Reads mouse event",
        "<span class=\"methodname\">ncurses_getmouse<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$mevent<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_getyx": [
        "Returns the current cursor position for a window",
        "<span class=\"methodname\">ncurses_getyx<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$x<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "ncurses_halfdelay": [
        "Put terminal into halfdelay mode",
        "<span class=\"methodname\">ncurses_halfdelay<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $tenth<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_has_colors": [
        "Checks if terminal has color capabilities",
        "<span class=\"methodname\">ncurses_has_colors<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_has_ic": [
        "Check for insert- and delete-capabilities",
        "<span class=\"methodname\">ncurses_has_ic<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_has_il": [
        "Check for line insert- and delete-capabilities",
        "<span class=\"methodname\">ncurses_has_il<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_has_key": [
        "Check for presence of a function key on terminal keyboard",
        "<span class=\"methodname\">ncurses_has_key<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $keycode<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_hide_panel": [
        "Remove panel from the stack, making it invisible",
        "<span class=\"methodname\">ncurses_hide_panel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $panel<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_hline": [
        "Draw a horizontal line at current position using an attributed character and max. n characters long",
        "<span class=\"methodname\">ncurses_hline<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $charattr<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $n<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_inch": [
        "Get character and attribute at current position",
        "<span class=\"methodname\">ncurses_inch<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "ncurses_init": [
        "Initialize ncurses",
        "<span class=\"methodname\">ncurses_init<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "ncurses_init_color": [
        "Define a terminal color",
        "<span class=\"methodname\">ncurses_init_color<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $color<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $r<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $g<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $b<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_init_pair": [
        "Define a color pair",
        "<span class=\"methodname\">ncurses_init_pair<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $pair<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fg<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $bg<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_insch": [
        "Insert character moving rest of line including character at current position",
        "<span class=\"methodname\">ncurses_insch<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $character<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_insdelln": [
        "Insert lines before current line scrolling down (negative numbers delete and scroll up)",
        "<span class=\"methodname\">ncurses_insdelln<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $count<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_insertln": [
        "Insert a line, move rest of screen down",
        "<span class=\"methodname\">ncurses_insertln<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_insstr": [
        "Insert string at current position, moving rest of line right",
        "<span class=\"methodname\">ncurses_insstr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_instr": [
        "Reads string from terminal screen",
        "<span class=\"methodname\">ncurses_instr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> &$buffer<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_isendwin": [
        "Ncurses is in endwin mode, normal screen output may be performed",
        "<span class=\"methodname\">ncurses_isendwin<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_keyok": [
        "Enable or disable a keycode",
        "<span class=\"methodname\">ncurses_keyok<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $keycode<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $enable<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_keypad": [
        "Turns keypad on or off",
        "<span class=\"methodname\">ncurses_keypad<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $bf<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_killchar": [
        "Returns current line kill character",
        "<span class=\"methodname\">ncurses_killchar<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "ncurses_longname": [
        "Returns terminals description",
        "<span class=\"methodname\">ncurses_longname<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "ncurses_meta": [
        "Enables\/Disable 8-bit meta key information",
        "<span class=\"methodname\">ncurses_meta<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $8bit<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_mouse_trafo": [
        "Transforms coordinates",
        "<span class=\"methodname\">ncurses_mouse_trafo<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> &$y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$x<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $toscreen<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_mouseinterval": [
        "Set timeout for mouse button clicks",
        "<span class=\"methodname\">ncurses_mouseinterval<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $milliseconds<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_mousemask": [
        "Sets mouse options",
        "<span class=\"methodname\">ncurses_mousemask<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $newmask<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$oldmask<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_move": [
        "Move output position",
        "<span class=\"methodname\">ncurses_move<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_move_panel": [
        "Moves a panel so that its upper-left corner is at [startx, starty]",
        "<span class=\"methodname\">ncurses_move_panel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $panel<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $startx<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $starty<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_mvaddch": [
        "Move current position and add character",
        "<span class=\"methodname\">ncurses_mvaddch<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $c<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_mvaddchnstr": [
        "Move position and add attributed string with specified length",
        "<span class=\"methodname\">ncurses_mvaddchnstr<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $s<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $n<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_mvaddchstr": [
        "Move position and add attributed string",
        "<span class=\"methodname\">ncurses_mvaddchstr<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $s<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_mvaddnstr": [
        "Move position and add string with specified length",
        "<span class=\"methodname\">ncurses_mvaddnstr<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $s<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $n<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_mvaddstr": [
        "Move position and add string",
        "<span class=\"methodname\">ncurses_mvaddstr<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $s<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_mvcur": [
        "Move cursor immediately",
        "<span class=\"methodname\">ncurses_mvcur<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $old_y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $old_x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $new_y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $new_x<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_mvdelch": [
        "Move position and delete character, shift rest of line left",
        "<span class=\"methodname\">ncurses_mvdelch<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_mvgetch": [
        "Move position and get character at new position",
        "<span class=\"methodname\">ncurses_mvgetch<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_mvhline": [
        "Set new position and draw a horizontal line using an attributed character and max. n characters long",
        "<span class=\"methodname\">ncurses_mvhline<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $attrchar<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $n<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_mvinch": [
        "Move position and get attributed character at new position",
        "<span class=\"methodname\">ncurses_mvinch<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_mvvline": [
        "Set new position and draw a vertical line using an attributed character and max. n characters long",
        "<span class=\"methodname\">ncurses_mvvline<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $attrchar<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $n<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_mvwaddstr": [
        "Add string at new position in window",
        "<span class=\"methodname\">ncurses_mvwaddstr<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_napms": [
        "Sleep",
        "<span class=\"methodname\">ncurses_napms<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $milliseconds<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_new_panel": [
        "Create a new panel and associate it with window",
        "<span class=\"methodname\">ncurses_new_panel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "ncurses_newpad": [
        "Creates a new pad (window)",
        "<span class=\"methodname\">ncurses_newpad<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $rows<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cols<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "ncurses_newwin": [
        "Create a new window",
        "<span class=\"methodname\">ncurses_newwin<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $rows<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cols<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "ncurses_nl": [
        "Translate newline and carriage return \/ line feed",
        "<span class=\"methodname\">ncurses_nl<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_nocbreak": [
        "Switch terminal to cooked mode",
        "<span class=\"methodname\">ncurses_nocbreak<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_noecho": [
        "Switch off keyboard input echo",
        "<span class=\"methodname\">ncurses_noecho<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_nonl": [
        "Do not translate newline and carriage return \/ line feed",
        "<span class=\"methodname\">ncurses_nonl<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_noqiflush": [
        "Do not flush on signal characters",
        "<span class=\"methodname\">ncurses_noqiflush<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "ncurses_noraw": [
        "Switch terminal out of raw mode",
        "<span class=\"methodname\">ncurses_noraw<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_pair_content": [
        "Retrieves foreground and background colors of a color pair",
        "<span class=\"methodname\">ncurses_pair_content<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $pair<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$f<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$b<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_panel_above": [
        "Returns the panel above panel",
        "<span class=\"methodname\">ncurses_panel_above<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $panel<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "ncurses_panel_below": [
        "Returns the panel below panel",
        "<span class=\"methodname\">ncurses_panel_below<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $panel<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "ncurses_panel_window": [
        "Returns the window associated with panel",
        "<span class=\"methodname\">ncurses_panel_window<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $panel<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "ncurses_pnoutrefresh": [
        "Copies a region from a pad into the virtual screen",
        "<span class=\"methodname\">ncurses_pnoutrefresh<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pad<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pminrow<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pmincol<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $sminrow<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $smincol<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $smaxrow<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $smaxcol<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_prefresh": [
        "Copies a region from a pad into the virtual screen",
        "<span class=\"methodname\">ncurses_prefresh<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pad<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pminrow<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pmincol<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $sminrow<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $smincol<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $smaxrow<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $smaxcol<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_putp": [
        "Apply padding information to the string and output it",
        "<span class=\"methodname\">ncurses_putp<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_qiflush": [
        "Flush on signal characters",
        "<span class=\"methodname\">ncurses_qiflush<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "ncurses_raw": [
        "Switch terminal into raw mode",
        "<span class=\"methodname\">ncurses_raw<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_refresh": [
        "Refresh screen",
        "<span class=\"methodname\">ncurses_refresh<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $ch<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_replace_panel": [
        "Replaces the window associated with panel",
        "<span class=\"methodname\">ncurses_replace_panel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $panel<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_reset_prog_mode": [
        "Resets the prog mode saved by def_prog_mode",
        "<span class=\"methodname\">ncurses_reset_prog_mode<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_reset_shell_mode": [
        "Resets the shell mode saved by def_shell_mode",
        "<span class=\"methodname\">ncurses_reset_shell_mode<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_resetty": [
        "Restores saved terminal state",
        "<span class=\"methodname\">ncurses_resetty<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_savetty": [
        "Saves terminal state",
        "<span class=\"methodname\">ncurses_savetty<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_scr_dump": [
        "Dump screen content to file",
        "<span class=\"methodname\">ncurses_scr_dump<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_scr_init": [
        "Initialize screen from file dump",
        "<span class=\"methodname\">ncurses_scr_init<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_scr_restore": [
        "Restore screen from file dump",
        "<span class=\"methodname\">ncurses_scr_restore<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_scr_set": [
        "Inherit screen from file dump",
        "<span class=\"methodname\">ncurses_scr_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_scrl": [
        "Scroll window content up or down without changing current position",
        "<span class=\"methodname\">ncurses_scrl<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $count<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_show_panel": [
        "Places an invisible panel on top of the stack, making it visible",
        "<span class=\"methodname\">ncurses_show_panel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $panel<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_slk_attr": [
        "Returns current soft label key attribute",
        "<span class=\"methodname\">ncurses_slk_attr<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_slk_attroff": [
        "Turn off the given attributes for soft function-key labels",
        "<span class=\"methodname\">ncurses_slk_attroff<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $intarg<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_slk_attron": [
        "Turn on the given attributes for soft function-key labels",
        "<span class=\"methodname\">ncurses_slk_attron<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $intarg<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_slk_attrset": [
        "Set given attributes for soft function-key labels",
        "<span class=\"methodname\">ncurses_slk_attrset<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $intarg<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_slk_clear": [
        "Clears soft labels from screen",
        "<span class=\"methodname\">ncurses_slk_clear<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_slk_color": [
        "Sets color for soft label keys",
        "<span class=\"methodname\">ncurses_slk_color<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $intarg<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_slk_init": [
        "Initializes soft label key functions",
        "<span class=\"methodname\">ncurses_slk_init<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $format<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_slk_noutrefresh": [
        "Copies soft label keys to virtual screen",
        "<span class=\"methodname\">ncurses_slk_noutrefresh<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_slk_refresh": [
        "Copies soft label keys to screen",
        "<span class=\"methodname\">ncurses_slk_refresh<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_slk_restore": [
        "Restores soft label keys",
        "<span class=\"methodname\">ncurses_slk_restore<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_slk_set": [
        "Sets function key labels",
        "<span class=\"methodname\">ncurses_slk_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $labelnr<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $label<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $format<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_slk_touch": [
        "Forces output when ncurses_slk_noutrefresh is performed",
        "<span class=\"methodname\">ncurses_slk_touch<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_standend": [
        "Stop using 'standout' attribute",
        "<span class=\"methodname\">ncurses_standend<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_standout": [
        "Start using 'standout' attribute",
        "<span class=\"methodname\">ncurses_standout<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_start_color": [
        "Initializes color functionality",
        "<span class=\"methodname\">ncurses_start_color<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_termattrs": [
        "Returns a logical OR of all attribute flags supported by terminal",
        "<span class=\"methodname\">ncurses_termattrs<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_termname": [
        "Returns terminals (short)-name",
        "<span class=\"methodname\">ncurses_termname<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "ncurses_timeout": [
        "Set timeout for special key sequences",
        "<span class=\"methodname\">ncurses_timeout<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $millisec<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "ncurses_top_panel": [
        "Moves a visible panel to the top of the stack",
        "<span class=\"methodname\">ncurses_top_panel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $panel<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_typeahead": [
        "Specify different filedescriptor for typeahead checking",
        "<span class=\"methodname\">ncurses_typeahead<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $fd<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_ungetch": [
        "Put a character back into the input stream",
        "<span class=\"methodname\">ncurses_ungetch<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $keycode<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_ungetmouse": [
        "Pushes mouse event to queue",
        "<span class=\"methodname\">ncurses_ungetmouse<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $mevent<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_update_panels": [
        "Refreshes the virtual screen to reflect the relations between panels in the stack",
        "<span class=\"methodname\">ncurses_update_panels<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "ncurses_use_default_colors": [
        "Assign terminal default colors to color id -1",
        "<span class=\"methodname\">ncurses_use_default_colors<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_use_env": [
        "Control use of environment information about terminal size",
        "<span class=\"methodname\">ncurses_use_env<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $flag<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "ncurses_use_extended_names": [
        "Control use of extended names in terminfo descriptions",
        "<span class=\"methodname\">ncurses_use_extended_names<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $flag<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_vidattr": [
        "Display the string on the terminal in the video attribute mode",
        "<span class=\"methodname\">ncurses_vidattr<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $intarg<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_vline": [
        "Draw a vertical line at current position using an attributed character and max. n characters long",
        "<span class=\"methodname\">ncurses_vline<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $charattr<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $n<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_waddch": [
        "Adds character at current position in a window and advance cursor",
        "<span class=\"methodname\">ncurses_waddch<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $ch<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_waddstr": [
        "Outputs text at current postion in window",
        "<span class=\"methodname\">ncurses_waddstr<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $str<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $n<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_wattroff": [
        "Turns off attributes for a window",
        "<span class=\"methodname\">ncurses_wattroff<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $attrs<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_wattron": [
        "Turns on attributes for a window",
        "<span class=\"methodname\">ncurses_wattron<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $attrs<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_wattrset": [
        "Set the attributes for a window",
        "<span class=\"methodname\">ncurses_wattrset<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $attrs<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_wborder": [
        "Draws a border around the window using attributed characters",
        "<span class=\"methodname\">ncurses_wborder<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $left<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $right<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $top<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $bottom<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $tl_corner<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $tr_corner<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $bl_corner<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $br_corner<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_wclear": [
        "Clears window",
        "<span class=\"methodname\">ncurses_wclear<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_wcolor_set": [
        "Sets windows color pairings",
        "<span class=\"methodname\">ncurses_wcolor_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $color_pair<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_werase": [
        "Erase window contents",
        "<span class=\"methodname\">ncurses_werase<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_wgetch": [
        "Reads a character from keyboard (window)",
        "<span class=\"methodname\">ncurses_wgetch<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_whline": [
        "Draws a horizontal line in a window at current position using an attributed character and max. n characters long",
        "<span class=\"methodname\">ncurses_whline<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $charattr<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $n<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_wmouse_trafo": [
        "Transforms window\/stdscr coordinates",
        "<span class=\"methodname\">ncurses_wmouse_trafo<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$x<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $toscreen<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ncurses_wmove": [
        "Moves windows output position",
        "<span class=\"methodname\">ncurses_wmove<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_wnoutrefresh": [
        "Copies window to virtual screen",
        "<span class=\"methodname\">ncurses_wnoutrefresh<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_wrefresh": [
        "Refresh window on terminal screen",
        "<span class=\"methodname\">ncurses_wrefresh<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_wstandend": [
        "End standout mode for a window",
        "<span class=\"methodname\">ncurses_wstandend<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_wstandout": [
        "Enter standout mode for a window",
        "<span class=\"methodname\">ncurses_wstandout<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ncurses_wvline": [
        "Draws a vertical line in a window at current position using an attributed character and max. n characters long",
        "<span class=\"methodname\">ncurses_wvline<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $window<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $charattr<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $n<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "next": [
        "Advance the internal pointer of an array",
        "<span class=\"methodname\">next<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">object<\/span><\/span> &$array<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "ngettext": [
        "Plural version of gettext",
        "<span class=\"methodname\">ngettext<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $singular<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $plural<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $count<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "nl2br": [
        "Inserts HTML line breaks before all newlines in a string",
        "<span class=\"methodname\">nl2br<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $use_xhtml<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "nl_langinfo": [
        "Query language and locale information",
        "<span class=\"methodname\">nl_langinfo<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $item<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "NoRewindIterator": [
        "This iterator ignores rewind operations. This allows processing an iterator in multiple partial foreach loops.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">NoRewindIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">Iterator<\/span> $iterator<\/span> )"
    ],
    "Normalizer": [
        "The Unicode Consortium has defined a number of normalization forms reflecting the various needs of applications:"
    ],
    "normalizer_get_raw_decomposition": [
        "Gets the Decomposition_Mapping property for the given UTF-8 encoded code point",
        "<span class=\"methodname\">normalizer_get_raw_decomposition<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $input<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "normalizer_is_normalized": [
        "Checks if the provided string is already in the specified normalization\n   form",
        "<span class=\"methodname\">normalizer_is_normalized<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $input<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $form<span class=\"initializer\"> = Normalizer::FORM_C<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "normalizer_normalize": [
        "Normalizes the input provided and returns the normalized string",
        "<span class=\"methodname\">normalizer_normalize<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $input<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $form<span class=\"initializer\"> = Normalizer::FORM_C<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "number_format": [
        "Format a number with grouped thousands",
        "<span class=\"methodname\">number_format<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $decimals<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $decimal_separator<span class=\"initializer\"> = \".\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $thousands_separator<span class=\"initializer\"> = \",\"<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "NumberFormatter": [
        "For currencies you can use currency format type to create a formatter that returns a string with the formatted number and the appropriate currency sign. Of course, the NumberFormatter class is unaware of exchange rates so, the number output is the same regardless of the specified currency. This means that the same number has different monetary values depending on the currency locale. If the number is 9988776.65 the results will be:",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">NumberFormatter::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $style<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "numfmt_create": [
        "Create a number formatter",
        "<span class=\"methodname\">numfmt_create<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $style<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">NumberFormatter<\/span>"
    ],
    "numfmt_format": [
        "Format a number",
        "<span class=\"methodname\">numfmt_format<\/span> ( <span class=\"methodparam\"><span class=\"type\">NumberFormatter<\/span> $fmt<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">float<\/span><\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "numfmt_format_currency": [
        "Format a currency value",
        "<span class=\"methodname\">numfmt_format_currency<\/span> ( <span class=\"methodparam\"><span class=\"type\">NumberFormatter<\/span> $fmt<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $currency<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "numfmt_get_attribute": [
        "Get an attribute",
        "<span class=\"methodname\">numfmt_get_attribute<\/span> ( <span class=\"methodparam\"><span class=\"type\">NumberFormatter<\/span> $fmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $attr<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "numfmt_get_error_code": [
        "Get formatter's last error code",
        "<span class=\"methodname\">numfmt_get_error_code<\/span> ( <span class=\"methodparam\"><span class=\"type\">NumberFormatter<\/span> $fmt<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "numfmt_get_error_message": [
        "Get formatter's last error message",
        "<span class=\"methodname\">numfmt_get_error_message<\/span> ( <span class=\"methodparam\"><span class=\"type\">NumberFormatter<\/span> $fmt<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "numfmt_get_locale": [
        "Get formatter locale",
        "<span class=\"methodname\">numfmt_get_locale<\/span> ( <span class=\"methodparam\"><span class=\"type\">NumberFormatter<\/span> $fmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "numfmt_get_pattern": [
        "Get formatter pattern",
        "<span class=\"methodname\">numfmt_get_pattern<\/span> ( <span class=\"methodparam\"><span class=\"type\">NumberFormatter<\/span> $fmt<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "numfmt_get_symbol": [
        "Get a symbol value",
        "<span class=\"methodname\">numfmt_get_symbol<\/span> ( <span class=\"methodparam\"><span class=\"type\">NumberFormatter<\/span> $fmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $attr<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "numfmt_get_text_attribute": [
        "Get a text attribute",
        "<span class=\"methodname\">numfmt_get_text_attribute<\/span> ( <span class=\"methodparam\"><span class=\"type\">NumberFormatter<\/span> $fmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $attr<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "numfmt_parse": [
        "Parse a number",
        "<span class=\"methodname\">numfmt_parse<\/span> ( <span class=\"methodparam\"><span class=\"type\">NumberFormatter<\/span> $fmt<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$position<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "numfmt_parse_currency": [
        "Parse a currency number",
        "<span class=\"methodname\">numfmt_parse_currency<\/span> ( <span class=\"methodparam\"><span class=\"type\">NumberFormatter<\/span> $fmt<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$currency<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$position<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "numfmt_set_attribute": [
        "Set an attribute",
        "<span class=\"methodname\">numfmt_set_attribute<\/span> ( <span class=\"methodparam\"><span class=\"type\">NumberFormatter<\/span> $fmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $attr<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "numfmt_set_pattern": [
        "Set formatter pattern",
        "<span class=\"methodname\">numfmt_set_pattern<\/span> ( <span class=\"methodparam\"><span class=\"type\">NumberFormatter<\/span> $fmt<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "numfmt_set_symbol": [
        "Set a symbol value",
        "<span class=\"methodname\">numfmt_set_symbol<\/span> ( <span class=\"methodparam\"><span class=\"type\">NumberFormatter<\/span> $fmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $attr<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "numfmt_set_text_attribute": [
        "Set a text attribute",
        "<span class=\"methodname\">numfmt_set_text_attribute<\/span> ( <span class=\"methodparam\"><span class=\"type\">NumberFormatter<\/span> $fmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $attr<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "OAuth": [
        "The OAuth extension provides a simple interface to interact with data providers using the OAuth HTTP specification to protect private resources.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">OAuth::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $consumer_key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $consumer_secret<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $signature_method<span class=\"initializer\"> = OAUTH_SIG_METHOD_HMACSHA1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $auth_type<span class=\"initializer\"> = 0<\/span><\/span> )"
    ],
    "oauth_get_sbs": [
        "Generate a Signature Base String",
        "<span class=\"methodname\">oauth_get_sbs<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $http_method<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $uri<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $request_parameters<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "oauth_urlencode": [
        "Encode a URI to RFC 3986",
        "<span class=\"methodname\">oauth_urlencode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $uri<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "OAuthException": [
        "This exception is thrown when exceptional errors occur while using the OAuth extension and contains useful debugging information."
    ],
    "OAuthProvider": [
        "Manages an OAuth provider class.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">OAuthProvider::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $params_array<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "ob_clean": [
        "Clean (erase) the output buffer",
        "<span class=\"methodname\">ob_clean<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ob_end_clean": [
        "Clean (erase) the output buffer and turn off output buffering",
        "<span class=\"methodname\">ob_end_clean<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ob_end_flush": [
        "Flush (send) the output buffer and turn off output buffering",
        "<span class=\"methodname\">ob_end_flush<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ob_flush": [
        "Flush (send) the output buffer",
        "<span class=\"methodname\">ob_flush<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "ob_get_clean": [
        "Get current buffer contents and delete current output buffer",
        "<span class=\"methodname\">ob_get_clean<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ob_get_contents": [
        "Return the contents of the output buffer",
        "<span class=\"methodname\">ob_get_contents<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ob_get_flush": [
        "Flush the output buffer, return it as a string and turn off output buffering",
        "<span class=\"methodname\">ob_get_flush<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ob_get_length": [
        "Return the length of the output buffer",
        "<span class=\"methodname\">ob_get_length<\/span> ( ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ob_get_level": [
        "Return the nesting level of the output buffering mechanism",
        "<span class=\"methodname\">ob_get_level<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "ob_get_status": [
        "Get status of output buffers",
        "<span class=\"methodname\">ob_get_status<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $full_status<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "ob_gzhandler": [
        "ob_start callback function to gzip output buffer",
        "<span class=\"methodname\">ob_gzhandler<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $buffer<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ob_iconv_handler": [
        "Convert character encoding as output buffer handler",
        "<span class=\"methodname\">ob_iconv_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $contents<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $status<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ob_implicit_flush": [
        "Turn implicit flush on\/off",
        "<span class=\"methodname\">ob_implicit_flush<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $flag<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "ob_list_handlers": [
        "List all output handlers in use",
        "<span class=\"methodname\">ob_list_handlers<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "ob_start": [
        "Turn on output buffering",
        "<span class=\"methodname\">ob_start<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $chunk_size<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = PHP_OUTPUT_HANDLER_STDFLAGS<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ob_tidyhandler": [
        "ob_start callback function to repair the buffer",
        "<span class=\"methodname\">ob_tidyhandler<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $input<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "oci_bind_array_by_name": [
        "Binds a PHP array to an Oracle PL\/SQL array parameter",
        "<span class=\"methodname\">oci_bind_array_by_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$var_array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max_table_length<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max_item_length<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = SQLT_AFC<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_bind_by_name": [
        "Binds a PHP variable to an Oracle placeholder",
        "<span class=\"methodname\">oci_bind_by_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $bv_name<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> &$variable<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $maxlength<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = SQLT_CHR<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_cancel": [
        "Cancels reading from cursor",
        "<span class=\"methodname\">oci_cancel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_client_version": [
        "Returns the Oracle client library version",
        "<span class=\"methodname\">oci_client_version<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "oci_close": [
        "Closes an Oracle connection",
        "<span class=\"methodname\">oci_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_commit": [
        "Commits the outstanding database transaction",
        "<span class=\"methodname\">oci_commit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_connect": [
        "Connect to an Oracle database",
        "<span class=\"methodname\">oci_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $connection_string<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $character_set<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $session_mode<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "oci_define_by_name": [
        "Associates a PHP variable with a column for query fetches",
        "<span class=\"methodname\">oci_define_by_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $column_name<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> &$variable<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = SQLT_CHR<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_error": [
        "Returns the last error found",
        "<span class=\"methodname\">oci_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $resource<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "oci_execute": [
        "Executes a statement",
        "<span class=\"methodname\">oci_execute<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = OCI_COMMIT_ON_SUCCESS<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_fetch": [
        "Fetches the next row from a query into internal buffers",
        "<span class=\"methodname\">oci_fetch<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_fetch_all": [
        "Fetches multiple rows from a query into a two-dimensional array",
        "<span class=\"methodname\">oci_fetch_all<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$output<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $skip<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $maxrows<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = OCI_FETCHSTATEMENT_BY_COLUMN + OCI_ASSOC<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "oci_fetch_array": [
        "Returns the next row from a query as an associative or numeric array",
        "<span class=\"methodname\">oci_fetch_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "oci_fetch_assoc": [
        "Returns the next row from a query as an associative array",
        "<span class=\"methodname\">oci_fetch_assoc<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "oci_fetch_object": [
        "Returns the next row from a query as an object",
        "<span class=\"methodname\">oci_fetch_object<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "oci_fetch_row": [
        "Returns the next row from a query as a numeric array",
        "<span class=\"methodname\">oci_fetch_row<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "oci_field_is_null": [
        "Checks if a field in the currently fetched row is null",
        "<span class=\"methodname\">oci_field_is_null<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $field<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_field_name": [
        "Returns the name of a field from the statement",
        "<span class=\"methodname\">oci_field_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $field<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "oci_field_precision": [
        "Tell the precision of a field",
        "<span class=\"methodname\">oci_field_precision<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $field<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "oci_field_scale": [
        "Tell the scale of the field",
        "<span class=\"methodname\">oci_field_scale<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $field<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "oci_field_size": [
        "Returns field's size",
        "<span class=\"methodname\">oci_field_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $field<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "oci_field_type": [
        "Returns a field's data type name",
        "<span class=\"methodname\">oci_field_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $field<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "oci_field_type_raw": [
        "Tell the raw Oracle data type of the field",
        "<span class=\"methodname\">oci_field_type_raw<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $field<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "oci_free_descriptor": [
        "Frees a descriptor",
        "<span class=\"methodname\">oci_free_descriptor<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $descriptor<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_free_statement": [
        "Frees all resources associated with statement or cursor",
        "<span class=\"methodname\">oci_free_statement<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_get_implicit_resultset": [
        "Returns the next child statement resource from a parent statement resource that has Oracle Database Implicit Result Sets",
        "<span class=\"methodname\">oci_get_implicit_resultset<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> ) : <span class=\"type\"><span class=\"type resource \">resource <\/span><\/span>"
    ],
    "oci_internal_debug": [
        "Enables or disables internal debug output",
        "<span class=\"methodname\">oci_internal_debug<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $onoff<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "oci_lob_copy": [
        "Copies large object",
        "<span class=\"methodname\">oci_lob_copy<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type OCILob\">OCILob<\/span><\/span> $lob_to<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type OCILob\">OCILob<\/span><\/span> $lob_from<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_lob_is_equal": [
        "Compares two LOB\/FILE locators for equality",
        "<span class=\"methodname\">oci_lob_is_equal<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type OCI-Lob\">OCI-Lob<\/span><\/span> $lob1<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type OCI-Lob\">OCI-Lob<\/span><\/span> $lob2<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_new_collection": [
        "Allocates new collection object",
        "<span class=\"methodname\">oci_new_collection<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $tdo<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $schema<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type OCICollection\">OCICollection<\/span><\/span>"
    ],
    "oci_new_connect": [
        "Connect to the Oracle server using a unique connection",
        "<span class=\"methodname\">oci_new_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $connection_string<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $character_set<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $session_mode<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "oci_new_cursor": [
        "Allocates and returns a new cursor (statement handle)",
        "<span class=\"methodname\">oci_new_cursor<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "oci_new_descriptor": [
        "Initializes a new empty LOB or FILE descriptor",
        "<span class=\"methodname\">oci_new_descriptor<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = OCI_DTYPE_LOB<\/span><\/span> ) : <span class=\"type\"><span class=\"type OCI-Lob\">OCI-Lob<\/span><\/span>"
    ],
    "oci_num_fields": [
        "Returns the number of result columns in a statement",
        "<span class=\"methodname\">oci_num_fields<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "oci_num_rows": [
        "Returns number of rows affected during statement execution",
        "<span class=\"methodname\">oci_num_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "oci_parse": [
        "Prepares an Oracle statement for execution",
        "<span class=\"methodname\">oci_parse<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $sql_text<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "oci_password_change": [
        "Changes password of Oracle's user",
        "<span class=\"methodname\">oci_password_change<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $old_password<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_password<\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">oci_password_change<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $dbname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $old_password<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_password<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "oci_pconnect": [
        "Connect to an Oracle database using a persistent connection",
        "<span class=\"methodname\">oci_pconnect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $connection_string<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $character_set<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $session_mode<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "oci_register_taf_callback": [
        "Register a user-defined callback function for Oracle Database TAF",
        "<span class=\"methodname\">oci_register_taf_callback<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $callbackFn<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_result": [
        "Returns field's value from the fetched row",
        "<span class=\"methodname\">oci_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $field<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "oci_rollback": [
        "Rolls back the outstanding database transaction",
        "<span class=\"methodname\">oci_rollback<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_server_version": [
        "Returns the Oracle Database version",
        "<span class=\"methodname\">oci_server_version<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "oci_set_action": [
        "Sets the action name",
        "<span class=\"methodname\">oci_set_action<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $action_name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_set_call_timeout": [
        "Sets a millisecond timeout for database calls",
        "<span class=\"methodname\">oci_set_call_timeout<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $time_out<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_set_client_identifier": [
        "Sets the client identifier",
        "<span class=\"methodname\">oci_set_client_identifier<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $client_identifier<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_set_client_info": [
        "Sets the client information",
        "<span class=\"methodname\">oci_set_client_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $client_info<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_set_db_operation": [
        "Sets the database operation",
        "<span class=\"methodname\">oci_set_db_operation<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dbop<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_set_edition": [
        "Sets the database edition",
        "<span class=\"methodname\">oci_set_edition<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $edition<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_set_module_name": [
        "Sets the module name",
        "<span class=\"methodname\">oci_set_module_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $module_name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_set_prefetch": [
        "Sets number of rows to be prefetched by queries",
        "<span class=\"methodname\">oci_set_prefetch<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $rows<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "oci_statement_type": [
        "Returns the type of a statement",
        "<span class=\"methodname\">oci_statement_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "oci_unregister_taf_callback": [
        "Unregister a user-defined callback function for Oracle Database TAF",
        "<span class=\"methodname\">oci_unregister_taf_callback<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "OCICollection": [
        "OCI8 Collection functionality."
    ],
    "OCILob": [
        "OCI8 LOB functionality for large binary (BLOB) and character (CLOB) objects."
    ],
    "octdec": [
        "Octal to decimal",
        "<span class=\"methodname\">octdec<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $octal_string<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">float<\/span><\/span>"
    ],
    "odbc_autocommit": [
        "Toggle autocommit behaviour",
        "<span class=\"methodname\">odbc_autocommit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $enable<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "odbc_binmode": [
        "Handling of binary column data",
        "<span class=\"methodname\">odbc_binmode<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "odbc_close": [
        "Close an ODBC connection",
        "<span class=\"methodname\">odbc_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "odbc_close_all": [
        "Close all ODBC connections",
        "<span class=\"methodname\">odbc_close_all<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "odbc_columnprivileges": [
        "Lists columns and associated privileges for the given table",
        "<span class=\"methodname\">odbc_columnprivileges<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $catalog<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $schema<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $column<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_columns": [
        "Lists the column names in specified tables",
        "<span class=\"methodname\">odbc_columns<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $catalog<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $schema<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $table<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $column<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_commit": [
        "Commit an ODBC transaction",
        "<span class=\"methodname\">odbc_commit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "odbc_connect": [
        "Connect to a datasource",
        "<span class=\"methodname\">odbc_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $dsn<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $user<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cursor_option<span class=\"initializer\"> = SQL_CUR_USE_DRIVER<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_cursor": [
        "Get cursorname",
        "<span class=\"methodname\">odbc_cursor<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_data_source": [
        "Returns information about available DSNs",
        "<span class=\"methodname\">odbc_data_source<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fetch_type<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_error": [
        "Get the last error code",
        "<span class=\"methodname\">odbc_error<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">null<\/span><\/span> $odbc<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "odbc_errormsg": [
        "Get the last error message",
        "<span class=\"methodname\">odbc_errormsg<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">null<\/span><\/span> $odbc<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "odbc_exec": [
        "Directly execute an SQL statement",
        "<span class=\"methodname\">odbc_exec<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_execute": [
        "Execute a prepared statement",
        "<span class=\"methodname\">odbc_execute<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $params<span class=\"initializer\"> = []<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "odbc_fetch_array": [
        "Fetch a result row as an associative array",
        "<span class=\"methodname\">odbc_fetch_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_fetch_into": [
        "Fetch one result row into array",
        "<span class=\"methodname\">odbc_fetch_into<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_fetch_object": [
        "Fetch a result row as an object",
        "<span class=\"methodname\">odbc_fetch_object<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\"><span class=\"type stdClass\">stdClass<\/span><\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_fetch_row": [
        "Fetch a row",
        "<span class=\"methodname\">odbc_fetch_row<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $row<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "odbc_field_len": [
        "Get the length (precision) of a field",
        "<span class=\"methodname\">odbc_field_len<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_field_name": [
        "Get the columnname",
        "<span class=\"methodname\">odbc_field_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_field_num": [
        "Return column number",
        "<span class=\"methodname\">odbc_field_num<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $field<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_field_scale": [
        "Get the scale of a field",
        "<span class=\"methodname\">odbc_field_scale<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_field_type": [
        "Datatype of a field",
        "<span class=\"methodname\">odbc_field_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_foreignkeys": [
        "Retrieves a list of foreign keys",
        "<span class=\"methodname\">odbc_foreignkeys<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $pk_catalog<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pk_schema<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pk_table<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fk_catalog<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fk_schema<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fk_table<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_free_result": [
        "Free resources associated with a result",
        "<span class=\"methodname\">odbc_free_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "odbc_gettypeinfo": [
        "Retrieves information about data types supported by the data source",
        "<span class=\"methodname\">odbc_gettypeinfo<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $data_type<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_longreadlen": [
        "Handling of LONG columns",
        "<span class=\"methodname\">odbc_longreadlen<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "odbc_next_result": [
        "Checks if multiple results are available",
        "<span class=\"methodname\">odbc_next_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "odbc_num_fields": [
        "Number of columns in a result",
        "<span class=\"methodname\">odbc_num_fields<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "odbc_num_rows": [
        "Number of rows in a result",
        "<span class=\"methodname\">odbc_num_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "odbc_pconnect": [
        "Open a persistent database connection",
        "<span class=\"methodname\">odbc_pconnect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $dsn<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $user<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cursor_option<span class=\"initializer\"> = SQL_CUR_USE_DRIVER<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_prepare": [
        "Prepares a statement for execution",
        "<span class=\"methodname\">odbc_prepare<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_primarykeys": [
        "Gets the primary keys for a table",
        "<span class=\"methodname\">odbc_primarykeys<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $catalog<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $schema<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_procedurecolumns": [
        "Retrieve information about parameters to procedures",
        "<span class=\"methodname\">odbc_procedurecolumns<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $catalog<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $schema<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $procedure<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $column<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_procedures": [
        "Get the list of procedures stored in a specific data source",
        "<span class=\"methodname\">odbc_procedures<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $catalog<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $schema<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $procedure<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_result": [
        "Get result data",
        "<span class=\"methodname\">odbc_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span><\/span> $field<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">bool<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "odbc_result_all": [
        "Print result as HTML table",
        "<span class=\"methodname\">odbc_result_all<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $statement<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_rollback": [
        "Rollback a transaction",
        "<span class=\"methodname\">odbc_rollback<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "odbc_setoption": [
        "Adjust ODBC settings",
        "<span class=\"methodname\">odbc_setoption<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "odbc_specialcolumns": [
        "Retrieves special columns",
        "<span class=\"methodname\">odbc_specialcolumns<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $catalog<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $schema<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $scope<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $nullable<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_statistics": [
        "Retrieve statistics about a table",
        "<span class=\"methodname\">odbc_statistics<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $catalog<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $schema<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $unique<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $accuracy<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_tableprivileges": [
        "Lists tables and the privileges associated with each table",
        "<span class=\"methodname\">odbc_tableprivileges<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $catalog<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $schema<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "odbc_tables": [
        "Get the list of table names stored in a specific data source",
        "<span class=\"methodname\">odbc_tables<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $odbc<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $catalog<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $schema<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $table<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $types<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "opcache_compile_file": [
        "Compiles and caches a PHP script without executing it",
        "<span class=\"methodname\">opcache_compile_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "opcache_get_configuration": [
        "Get configuration information about the cache",
        "<span class=\"methodname\">opcache_get_configuration<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "opcache_get_status": [
        "Get status information about the cache",
        "<span class=\"methodname\">opcache_get_status<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $include_scripts<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "opcache_invalidate": [
        "Invalidates a cached script",
        "<span class=\"methodname\">opcache_invalidate<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $force<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "opcache_is_script_cached": [
        "Tells whether a script is cached in OPCache",
        "<span class=\"methodname\">opcache_is_script_cached<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "opcache_reset": [
        "Resets the contents of the opcode cache",
        "<span class=\"methodname\">opcache_reset<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "openal_buffer_create": [
        "Generate OpenAL buffer",
        "<span class=\"methodname\">openal_buffer_create<\/span> ( ) : <span class=\"type\">resource<\/span>"
    ],
    "openal_buffer_data": [
        "Load a buffer with data",
        "<span class=\"methodname\">openal_buffer_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $buffer<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $freq<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openal_buffer_destroy": [
        "Destroys an OpenAL buffer",
        "<span class=\"methodname\">openal_buffer_destroy<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $buffer<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openal_buffer_get": [
        "Retrieve an OpenAL buffer property",
        "<span class=\"methodname\">openal_buffer_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $buffer<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $property<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openal_buffer_loadwav": [
        "Load a .wav file into a buffer",
        "<span class=\"methodname\">openal_buffer_loadwav<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $buffer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $wavfile<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openal_context_create": [
        "Create an audio processing context",
        "<span class=\"methodname\">openal_context_create<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $device<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "openal_context_current": [
        "Make the specified context current",
        "<span class=\"methodname\">openal_context_current<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openal_context_destroy": [
        "Destroys a context",
        "<span class=\"methodname\">openal_context_destroy<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openal_context_process": [
        "Process the specified context",
        "<span class=\"methodname\">openal_context_process<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openal_context_suspend": [
        "Suspend the specified context",
        "<span class=\"methodname\">openal_context_suspend<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openal_device_close": [
        "Close an OpenAL device",
        "<span class=\"methodname\">openal_device_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $device<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openal_device_open": [
        "Initialize the OpenAL audio layer",
        "<span class=\"methodname\">openal_device_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $device_desc<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "openal_listener_get": [
        "Retrieve a listener property",
        "<span class=\"methodname\">openal_listener_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $property<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "openal_listener_set": [
        "Set a listener property",
        "<span class=\"methodname\">openal_listener_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $property<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $setting<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openal_source_create": [
        "Generate a source resource",
        "<span class=\"methodname\">openal_source_create<\/span> ( ) : <span class=\"type\">resource<\/span>"
    ],
    "openal_source_destroy": [
        "Destroy a source resource",
        "<span class=\"methodname\">openal_source_destroy<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $source<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openal_source_get": [
        "Retrieve an OpenAL source property",
        "<span class=\"methodname\">openal_source_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $source<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $property<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "openal_source_pause": [
        "Pause the source",
        "<span class=\"methodname\">openal_source_pause<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $source<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openal_source_play": [
        "Start playing the source",
        "<span class=\"methodname\">openal_source_play<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $source<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openal_source_rewind": [
        "Rewind the source",
        "<span class=\"methodname\">openal_source_rewind<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $source<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openal_source_set": [
        "Set source property",
        "<span class=\"methodname\">openal_source_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $source<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $property<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $setting<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openal_source_stop": [
        "Stop playing the source",
        "<span class=\"methodname\">openal_source_stop<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $source<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openal_stream": [
        "Begin streaming on a source",
        "<span class=\"methodname\">openal_stream<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $source<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $rate<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "opendir": [
        "Open directory handle",
        "<span class=\"methodname\">opendir<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openlog": [
        "Open connection to system logger",
        "<span class=\"methodname\">openlog<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $prefix<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $facility<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_cipher_iv_length": [
        "Gets the cipher iv length",
        "<span class=\"methodname\">openssl_cipher_iv_length<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $cipher_algo<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_cms_decrypt": [
        "Decrypt a CMS message",
        "<span class=\"methodname\">openssl_cms_decrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $input_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $output_filename<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">string<\/span><\/span> $certificate<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $private_key<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $encoding<span class=\"initializer\"> = OPENSSL_ENCODING_SMIME<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_cms_encrypt": [
        "Encrypt a CMS message",
        "<span class=\"methodname\">openssl_cms_encrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $input_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $output_filename<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $certificate<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $headers<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $encoding<span class=\"initializer\"> = OPENSSL_ENCODING_SMIME<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cipher_algo<span class=\"initializer\"> = OPENSSL_CIPHER_RC2_40<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_cms_read": [
        "Export the CMS file to an array of PEM certificates",
        "<span class=\"methodname\">openssl_cms_read<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $input_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$certificates<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_cms_sign": [
        "Sign a file",
        "<span class=\"methodname\">openssl_cms_sign<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $input_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $output_filename<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">string<\/span><\/span> $certificate<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $private_key<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $headers<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $encoding<span class=\"initializer\"> = OPENSSL_ENCODING_SMIME<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $untrusted_certificates_filename<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_cms_verify": [
        "Verify a CMS signature",
        "<span class=\"methodname\">openssl_cms_verify<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $input_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $certificates<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $ca_info<span class=\"initializer\"> = []<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $untrusted_certificates_filename<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $content<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $pk7<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $sigfile<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $encoding<span class=\"initializer\"> = OPENSSL_ENCODING_SMIME<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_csr_export": [
        "Exports a CSR as a string",
        "<span class=\"methodname\">openssl_csr_export<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificateSigningRequest<\/span>|<span class=\"type\">string<\/span><\/span> $csr<\/span> , <span class=\"methodparam\"><span class=\"type\">OpenSSLAsymmetricKey<\/span> &$output<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $no_text<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_csr_export_to_file": [
        "Exports a CSR to a file",
        "<span class=\"methodname\">openssl_csr_export_to_file<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificateSigningRequest<\/span>|<span class=\"type\">string<\/span><\/span> $csr<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $output_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $no_text<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_csr_get_public_key": [
        "Returns the public key of a CSR",
        "<span class=\"methodname\">openssl_csr_get_public_key<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificateSigningRequest<\/span>|<span class=\"type\">string<\/span><\/span> $csr<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $short_names<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_csr_get_subject": [
        "Returns the subject of a CSR",
        "<span class=\"methodname\">openssl_csr_get_subject<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificateSigningRequest<\/span>|<span class=\"type\">string<\/span><\/span> $csr<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $short_names<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_csr_new": [
        "Generates a CSR",
        "<span class=\"methodname\">openssl_csr_new<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $distinguished_names<\/span> , <span class=\"methodparam\"><span class=\"type\">OpenSSLAsymmetricKey<\/span> &$private_key<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $options<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $extra_attributes<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">OpenSSLCertificateSigningRequest<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_csr_sign": [
        "Sign a CSR with another certificate (or itself) and generate a certificate",
        "<span class=\"methodname\">openssl_csr_sign<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificateSigningRequest<\/span>|<span class=\"type\">string<\/span><\/span> $csr<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $ca_certificate<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $private_key<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $days<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $options<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $serial<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_decrypt": [
        "Decrypts data",
        "<span class=\"methodname\">openssl_decrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $cipher_algo<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $passphrase<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $iv<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $tag<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $aad<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_dh_compute_key": [
        "Computes shared secret for public value of remote DH public key and local DH key",
        "<span class=\"methodname\">openssl_dh_compute_key<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $public_key<\/span> , <span class=\"methodparam\"><span class=\"type\">OpenSSLAsymmetricKey<\/span> $private_key<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_digest": [
        "Computes a digest",
        "<span class=\"methodname\">openssl_digest<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $digest_algo<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $binary<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_encrypt": [
        "Encrypts data",
        "<span class=\"methodname\">openssl_encrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $cipher_algo<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $passphrase<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $iv<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$tag<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $aad<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $tag_length<span class=\"initializer\"> = 16<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_error_string": [
        "Return openSSL error message",
        "<span class=\"methodname\">openssl_error_string<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_free_key": [
        "Free key resource",
        "<span class=\"methodname\">openssl_free_key<\/span> ( <span class=\"methodparam\"><span class=\"type\">OpenSSLAsymmetricKey<\/span> $key<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "openssl_get_cert_locations": [
        "Retrieve the available certificate locations",
        "<span class=\"methodname\">openssl_get_cert_locations<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "openssl_get_cipher_methods": [
        "Gets available cipher methods",
        "<span class=\"methodname\">openssl_get_cipher_methods<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $aliases<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "openssl_get_curve_names": [
        "Gets list of available curve names for ECC",
        "<span class=\"methodname\">openssl_get_curve_names<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_get_md_methods": [
        "Gets available digest methods",
        "<span class=\"methodname\">openssl_get_md_methods<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $aliases<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "openssl_open": [
        "Open sealed data",
        "<span class=\"methodname\">openssl_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$output<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $encrypted_key<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $private_key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $cipher_algo<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $iv<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_pbkdf2": [
        "Generates a PKCS5 v2 PBKDF2 string",
        "<span class=\"methodname\">openssl_pbkdf2<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $salt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $key_length<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $iterations<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $digest_algo<span class=\"initializer\"> = \"sha1\"<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_pkcs12_export": [
        "Exports a PKCS#12 Compatible Certificate Store File to variable",
        "<span class=\"methodname\">openssl_pkcs12_export<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">string<\/span><\/span> $certificate<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$output<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $private_key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $passphrase<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = []<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_pkcs12_export_to_file": [
        "Exports a PKCS#12 Compatible Certificate Store File",
        "<span class=\"methodname\">openssl_pkcs12_export_to_file<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">string<\/span><\/span> $certificate<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $output_filename<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $private_key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $passphrase<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = []<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_pkcs12_read": [
        "Parse a PKCS#12 Certificate Store into an array",
        "<span class=\"methodname\">openssl_pkcs12_read<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pkcs12<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$certificates<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $passphrase<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_pkcs7_decrypt": [
        "Decrypts an S\/MIME encrypted message",
        "<span class=\"methodname\">openssl_pkcs7_decrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $input_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $output_filename<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">string<\/span><\/span> $certificate<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $private_key<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_pkcs7_encrypt": [
        "Encrypt an S\/MIME message",
        "<span class=\"methodname\">openssl_pkcs7_encrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $input_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $output_filename<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $certificate<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $headers<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cipher_algo<span class=\"initializer\"> = OPENSSL_CIPHER_RC2_40<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_pkcs7_read": [
        "Export the PKCS7 file to an array of PEM certificates",
        "<span class=\"methodname\">openssl_pkcs7_read<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $input_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$certificates<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_pkcs7_sign": [
        "Sign an S\/MIME message",
        "<span class=\"methodname\">openssl_pkcs7_sign<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $input_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $output_filename<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">string<\/span><\/span> $certificate<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $private_key<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $headers<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = PKCS7_DETACHED<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $untrusted_certificates_filename<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_pkcs7_verify": [
        "Verifies the signature of an S\/MIME signed message",
        "<span class=\"methodname\">openssl_pkcs7_verify<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $input_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $signers_certificates_filename<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $ca_info<span class=\"initializer\"> = []<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $untrusted_certificates_filename<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $content<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $output_filename<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">bool<\/span>|<span class=\"type\">int<\/span><\/span>"
    ],
    "openssl_pkey_derive": [
        "Computes shared secret for public value of remote and local DH or ECDH key",
        "<span class=\"methodname\">openssl_pkey_derive<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $public_key<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $private_key<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $key_length<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_pkey_export": [
        "Gets an exportable representation of a key into a string",
        "<span class=\"methodname\">openssl_pkey_export<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$output<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $passphrase<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $options<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_pkey_export_to_file": [
        "Gets an exportable representation of a key into a file",
        "<span class=\"methodname\">openssl_pkey_export_to_file<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $output_filename<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $passphrase<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $options<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_pkey_free": [
        "Frees a private key",
        "<span class=\"methodname\">openssl_pkey_free<\/span> ( <span class=\"methodparam\"><span class=\"type\">OpenSSLAsymmetricKey<\/span> $key<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "openssl_pkey_get_details": [
        "Returns an array with the key details",
        "<span class=\"methodname\">openssl_pkey_get_details<\/span> ( <span class=\"methodparam\"><span class=\"type\">OpenSSLAsymmetricKey<\/span> $key<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_pkey_get_private": [
        "Get a private key",
        "<span class=\"methodname\">openssl_pkey_get_private<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $private_key<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $passphrase<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_pkey_get_public": [
        "Extract public key from certificate and prepare it for use",
        "<span class=\"methodname\">openssl_pkey_get_public<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $public_key<\/span> ) : <span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_pkey_new": [
        "Generates a new private key",
        "<span class=\"methodname\">openssl_pkey_new<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $options<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_private_decrypt": [
        "Decrypts data with private key",
        "<span class=\"methodname\">openssl_private_decrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$decrypted_data<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $private_key<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $padding<span class=\"initializer\"> = OPENSSL_PKCS1_PADDING<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_private_encrypt": [
        "Encrypts data with private key",
        "<span class=\"methodname\">openssl_private_encrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$encrypted_data<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $private_key<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $padding<span class=\"initializer\"> = OPENSSL_PKCS1_PADDING<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_public_decrypt": [
        "Decrypts data with public key",
        "<span class=\"methodname\">openssl_public_decrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$decrypted_data<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $public_key<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $padding<span class=\"initializer\"> = OPENSSL_PKCS1_PADDING<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_public_encrypt": [
        "Encrypts data with public key",
        "<span class=\"methodname\">openssl_public_encrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$encrypted_data<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $public_key<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $padding<span class=\"initializer\"> = OPENSSL_PKCS1_PADDING<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_random_pseudo_bytes": [
        "Generate a pseudo-random string of bytes",
        "<span class=\"methodname\">openssl_random_pseudo_bytes<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> &$strong_result<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "openssl_seal": [
        "Seal (encrypt) data",
        "<span class=\"methodname\">openssl_seal<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$sealed_data<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$encrypted_keys<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $public_key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $cipher_algo<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$iv<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_sign": [
        "Generate signature",
        "<span class=\"methodname\">openssl_sign<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$signature<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $private_key<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span><\/span> $algorithm<span class=\"initializer\"> = OPENSSL_ALGO_SHA1<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_spki_export": [
        "Exports a valid PEM formatted public key signed public key and challenge",
        "<span class=\"methodname\">openssl_spki_export<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $spki<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_spki_export_challenge": [
        "Exports the challenge associated with a signed public key and challenge",
        "<span class=\"methodname\">openssl_spki_export_challenge<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $spki<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_spki_new": [
        "Generate a new signed public key and challenge",
        "<span class=\"methodname\">openssl_spki_new<\/span> ( <span class=\"methodparam\"><span class=\"type\">OpenSSLAsymmetricKey<\/span> $private_key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $challenge<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $digest_algo<span class=\"initializer\"> = OPENSSL_ALGO_MD5<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_spki_verify": [
        "Verifies a signed public key and challenge",
        "<span class=\"methodname\">openssl_spki_verify<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $spki<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_verify": [
        "Verify signature",
        "<span class=\"methodname\">openssl_verify<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $signature<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $public_key<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span><\/span> $algorithm<span class=\"initializer\"> = OPENSSL_ALGO_SHA1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_x509_check_private_key": [
        "Checks if a private key corresponds to a certificate",
        "<span class=\"methodname\">openssl_x509_check_private_key<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">string<\/span><\/span> $certificate<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $private_key<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_x509_checkpurpose": [
        "Verifies if a certificate can be used for a particular purpose",
        "<span class=\"methodname\">openssl_x509_checkpurpose<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">string<\/span><\/span> $certificate<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $purpose<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $ca_info<span class=\"initializer\"> = []<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $untrusted_certificates_file<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">bool<\/span>|<span class=\"type\">int<\/span><\/span>"
    ],
    "openssl_x509_export": [
        "Exports a certificate as a string",
        "<span class=\"methodname\">openssl_x509_export<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">string<\/span><\/span> $certificate<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$output<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $no_text<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_x509_export_to_file": [
        "Exports a certificate to file",
        "<span class=\"methodname\">openssl_x509_export_to_file<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">string<\/span><\/span> $certificate<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $output_filename<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $no_text<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "openssl_x509_fingerprint": [
        "Calculates the fingerprint, or digest, of a given X.509 certificate",
        "<span class=\"methodname\">openssl_x509_fingerprint<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">string<\/span><\/span> $certificate<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $digest_algo<span class=\"initializer\"> = \"sha1\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $binary<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_x509_free": [
        "Free certificate resource",
        "<span class=\"methodname\">openssl_x509_free<\/span> ( <span class=\"methodparam\"><span class=\"type\">OpenSSLCertificate<\/span> $certificate<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "openssl_x509_parse": [
        "Parse an X509 certificate and return the information as an array",
        "<span class=\"methodname\">openssl_x509_parse<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">string<\/span><\/span> $certificate<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $short_names<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_x509_read": [
        "Parse an X.509 certificate and return an object for\n  it",
        "<span class=\"methodname\">openssl_x509_read<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">string<\/span><\/span> $certificate<\/span> ) : <span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "openssl_x509_verify": [
        "Verifies digital signature of x509 certificate against a public key",
        "<span class=\"methodname\">openssl_x509_verify<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">string<\/span><\/span> $certificate<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">OpenSSLAsymmetricKey<\/span>|<span class=\"type\">OpenSSLCertificate<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $public_key<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "OpenSSLAsymmetricKey": [
        "A fully opaque class which replaces OpenSSL key resources as of PHP 8.0.0."
    ],
    "OpenSSLCertificate": [
        "A fully opaque class which replaces OpenSSL X.509 resources as of PHP 8.0.0."
    ],
    "OpenSSLCertificateSigningRequest": [
        "A fully opaque class which replaces OpenSSL X.509 CSR resources as of PHP 8.0.0."
    ],
    "ord": [
        "Convert the first byte of a string to a value between 0 and 255",
        "<span class=\"methodname\">ord<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $character<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "OuterIterator": [
        "Classes implementing OuterIterator can be used to iterate over iterators."
    ],
    "OutOfBoundsException": [
        "Exception thrown if a value is not a valid key. This represents errors that cannot be detected at compile time."
    ],
    "OutOfRangeException": [
        "Exception thrown when an illegal index was requested. This represents errors that should be detected at compile time."
    ],
    "output_add_rewrite_var": [
        "Add URL rewriter values",
        "<span class=\"methodname\">output_add_rewrite_var<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "output_reset_rewrite_vars": [
        "Reset URL rewriter values",
        "<span class=\"methodname\">output_reset_rewrite_vars<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "OverflowException": [
        "Exception thrown when adding an element to a full container."
    ],
    "pack": [
        "Pack data into binary string",
        "<span class=\"methodname\">pack<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$values<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ParentIterator": [
        "This extended FilterIterator allows a recursive iteration using RecursiveIteratorIterator that only shows those elements which have children.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ParentIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">RecursiveIterator<\/span> $iterator<\/span> )"
    ],
    "parse_ini_file": [
        "Parse a configuration file",
        "<span class=\"methodname\">parse_ini_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $process_sections<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $scanner_mode<span class=\"initializer\"> = INI_SCANNER_NORMAL<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "parse_ini_string": [
        "Parse a configuration string",
        "<span class=\"methodname\">parse_ini_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $ini_string<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $process_sections<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $scanner_mode<span class=\"initializer\"> = INI_SCANNER_NORMAL<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "parse_str": [
        "Parses the string into variables",
        "<span class=\"methodname\">parse_str<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$result<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "parse_url": [
        "Parse a URL and return its components",
        "<span class=\"methodname\">parse_url<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $url<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $component<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "ParseError": [
        "ParseError is thrown when an error occurs while parsing PHP code, such as when eval() is called."
    ],
    "passthru": [
        "Execute an external program and display raw output",
        "<span class=\"methodname\">passthru<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $command<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$return_var<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "password_algos": [
        "Get available password hashing algorithm IDs",
        "<span class=\"methodname\">password_algos<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "password_get_info": [
        "Returns information about the given hash",
        "<span class=\"methodname\">password_get_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hash<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "password_hash": [
        "Creates a password hash",
        "<span class=\"methodname\">password_hash<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $algo<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "password_needs_rehash": [
        "Checks if the given hash matches the given options",
        "<span class=\"methodname\">password_needs_rehash<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hash<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $algo<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "password_verify": [
        "Verifies that a password matches a hash",
        "<span class=\"methodname\">password_verify<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $hash<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pathinfo": [
        "Returns information about a file path",
        "<span class=\"methodname\">pathinfo<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = PATHINFO_ALL<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span>"
    ],
    "pclose": [
        "Closes process file pointer",
        "<span class=\"methodname\">pclose<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $handle<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pcntl_alarm": [
        "Set an alarm clock for delivery of a signal",
        "<span class=\"methodname\">pcntl_alarm<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $seconds<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pcntl_async_signals": [
        "Enable\/disable asynchronous signal handling or return the old setting",
        "<span class=\"methodname\">pcntl_async_signals<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $on<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pcntl_exec": [
        "Executes specified program in current process space",
        "<span class=\"methodname\">pcntl_exec<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $args<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $envs<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "pcntl_fork": [
        "Forks the currently running process",
        "<span class=\"methodname\">pcntl_fork<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "pcntl_get_last_error": [
        "Retrieve the error number set by the last pcntl function which failed",
        "<span class=\"methodname\">pcntl_get_last_error<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "pcntl_getpriority": [
        "Get the priority of any process",
        "<span class=\"methodname\">pcntl_getpriority<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $pid<span class=\"initializer\"> = getmypid()<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $process_identifier<span class=\"initializer\"> = PRIO_PROCESS<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pcntl_setpriority": [
        "Change the priority of any process",
        "<span class=\"methodname\">pcntl_setpriority<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $priority<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pid<span class=\"initializer\"> = getmypid()<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $process_identifier<span class=\"initializer\"> = PRIO_PROCESS<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pcntl_signal": [
        "Installs a signal handler",
        "<span class=\"methodname\">pcntl_signal<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $signo<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">callable<\/span>|<span class=\"type\">int<\/span><\/span> $handler<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $restart_syscalls<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pcntl_signal_dispatch": [
        "Calls signal handlers for pending signals",
        "<span class=\"methodname\">pcntl_signal_dispatch<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "pcntl_signal_get_handler": [
        "Get the current handler for specified signal",
        "<span class=\"methodname\">pcntl_signal_get_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $signo<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "pcntl_sigprocmask": [
        "Sets and retrieves blocked signals",
        "<span class=\"methodname\">pcntl_sigprocmask<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $how<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $set<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$oldset<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pcntl_sigtimedwait": [
        "Waits for signals, with a timeout",
        "<span class=\"methodname\">pcntl_sigtimedwait<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $set<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$siginfo<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $seconds<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $nanoseconds<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pcntl_sigwaitinfo": [
        "Waits for signals",
        "<span class=\"methodname\">pcntl_sigwaitinfo<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $set<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$siginfo<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pcntl_strerror": [
        "Retrieve the system error message associated with the given errno",
        "<span class=\"methodname\">pcntl_strerror<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $errno<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "pcntl_wait": [
        "Waits on or returns the status of a forked child",
        "<span class=\"methodname\">pcntl_wait<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> &$status<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$rusage<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pcntl_waitpid": [
        "Waits on or returns the status of a forked child",
        "<span class=\"methodname\">pcntl_waitpid<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $pid<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$status<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$rusage<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pcntl_wexitstatus": [
        "Returns the return code of a terminated child",
        "<span class=\"methodname\">pcntl_wexitstatus<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $status<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pcntl_wifexited": [
        "Checks if status code represents a normal exit",
        "<span class=\"methodname\">pcntl_wifexited<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $status<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pcntl_wifsignaled": [
        "Checks whether the status code represents a termination due to a signal",
        "<span class=\"methodname\">pcntl_wifsignaled<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $status<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pcntl_wifstopped": [
        "Checks whether the child process is currently stopped",
        "<span class=\"methodname\">pcntl_wifstopped<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $status<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pcntl_wstopsig": [
        "Returns the signal which caused the child to stop",
        "<span class=\"methodname\">pcntl_wstopsig<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $status<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pcntl_wtermsig": [
        "Returns the signal which caused the child to terminate",
        "<span class=\"methodname\">pcntl_wtermsig<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $status<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "PDO": [
        "Represents a connection between PHP and a database server.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">PDO::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $dsn<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $passwd<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "pdo_drivers": [
        "Return an array of available PDO drivers",
        "<span class=\"methodname\">pdo_drivers<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "PDOException": [
        "Represents an error raised by PDO. You should not throw a PDOException from your own code. See Exceptions for more information about Exceptions in PHP."
    ],
    "PDOStatement": [
        "Represents a prepared statement and, after the statement is executed, an associated result set."
    ],
    "pfsockopen": [
        "Open persistent Internet or Unix domain socket connection",
        "<span class=\"methodname\">pfsockopen<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $port<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$errno<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$errstr<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $timeout<span class=\"initializer\"> = ini_get(\"default_socket_timeout\")<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "pg_affected_rows": [
        "Returns number of affected records (tuples)",
        "<span class=\"methodname\">pg_affected_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_cancel_query": [
        "Cancel an asynchronous query",
        "<span class=\"methodname\">pg_cancel_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_client_encoding": [
        "Gets the client encoding",
        "<span class=\"methodname\">pg_client_encoding<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pg_close": [
        "Closes a PostgreSQL connection",
        "<span class=\"methodname\">pg_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_connect": [
        "Open a PostgreSQL connection",
        "<span class=\"methodname\">pg_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $connection_string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $connect_type<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "pg_connect_poll": [
        "Poll the status of an in-progress asynchronous PostgreSQL connection\n   attempt",
        "<span class=\"methodname\">pg_connect_poll<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_connection_busy": [
        "Get connection is busy or not",
        "<span class=\"methodname\">pg_connection_busy<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_connection_reset": [
        "Reset connection (reconnect)",
        "<span class=\"methodname\">pg_connection_reset<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_connection_status": [
        "Get connection status",
        "<span class=\"methodname\">pg_connection_status<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_consume_input": [
        "Reads input on the connection",
        "<span class=\"methodname\">pg_consume_input<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_convert": [
        "Convert associative array values into forms suitable for SQL statements",
        "<span class=\"methodname\">pg_convert<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table_name<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $assoc_array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "pg_copy_from": [
        "Insert records into a table from an array",
        "<span class=\"methodname\">pg_copy_from<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table_name<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $rows<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $delimiter<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $null_as<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_copy_to": [
        "Copy a table to an array",
        "<span class=\"methodname\">pg_copy_to<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $delimiter<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $null_as<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "pg_dbname": [
        "Get the database name",
        "<span class=\"methodname\">pg_dbname<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pg_delete": [
        "Deletes records",
        "<span class=\"methodname\">pg_delete<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table_name<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $assoc_array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = PGSQL_DML_EXEC<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "pg_end_copy": [
        "Sync with PostgreSQL backend",
        "<span class=\"methodname\">pg_end_copy<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_escape_bytea": [
        "Escape a string for insertion into a bytea field",
        "<span class=\"methodname\">pg_escape_bytea<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pg_escape_identifier": [
        "Escape a identifier for insertion into a text field",
        "<span class=\"methodname\">pg_escape_identifier<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pg_escape_literal": [
        "Escape a literal for insertion into a text field",
        "<span class=\"methodname\">pg_escape_literal<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pg_escape_string": [
        "Escape a string for query",
        "<span class=\"methodname\">pg_escape_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pg_execute": [
        "Sends a request to execute a prepared statement with given parameters, and waits for the result",
        "<span class=\"methodname\">pg_execute<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $stmtname<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $params<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "pg_fetch_all": [
        "Fetches all rows from a result as an array",
        "<span class=\"methodname\">pg_fetch_all<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $result_type<span class=\"initializer\"> = PGSQL_ASSOC<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "pg_fetch_all_columns": [
        "Fetches all rows in a particular result column as an array",
        "<span class=\"methodname\">pg_fetch_all_columns<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $column<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "pg_fetch_array": [
        "Fetch a row as an array",
        "<span class=\"methodname\">pg_fetch_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $result_type<span class=\"initializer\"> = PGSQL_BOTH<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "pg_fetch_assoc": [
        "Fetch a row as an associative array",
        "<span class=\"methodname\">pg_fetch_assoc<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "pg_fetch_object": [
        "Fetch a row as an object",
        "<span class=\"methodname\">pg_fetch_object<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $result_type<span class=\"initializer\"> = PGSQL_ASSOC<\/span><\/span> ) : <span class=\"type\">object<\/span>",
        "<span class=\"methodname\">pg_fetch_object<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $class_name<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $params<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "pg_fetch_result": [
        "Returns values from a result resource",
        "<span class=\"methodname\">pg_fetch_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $field<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span>|<span class=\"type\">null<\/span><\/span>",
        "<span class=\"methodname\">pg_fetch_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $field<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "pg_fetch_row": [
        "Get a row as an enumerated array",
        "<span class=\"methodname\">pg_fetch_row<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "pg_field_is_null": [
        "Test if a field is SQL NULL",
        "<span class=\"methodname\">pg_field_is_null<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $field<\/span> ) : <span class=\"type\">int<\/span>",
        "<span class=\"methodname\">pg_field_is_null<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $field<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_field_name": [
        "Returns the name of a field",
        "<span class=\"methodname\">pg_field_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_number<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pg_field_num": [
        "Returns the field number of the named field",
        "<span class=\"methodname\">pg_field_num<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $field_name<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_field_prtlen": [
        "Returns the printed length",
        "<span class=\"methodname\">pg_field_prtlen<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row_number<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $field_name_or_number<\/span> ) : <span class=\"type\">int<\/span>",
        "<span class=\"methodname\">pg_field_prtlen<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $field_name_or_number<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_field_size": [
        "Returns the internal storage size of the named field",
        "<span class=\"methodname\">pg_field_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_number<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_field_table": [
        "Returns the name or oid of the tables field",
        "<span class=\"methodname\">pg_field_table<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_number<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $oid_only<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "pg_field_type": [
        "Returns the type name for the corresponding field number",
        "<span class=\"methodname\">pg_field_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_number<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pg_field_type_oid": [
        "Returns the type ID (OID) for the corresponding field number",
        "<span class=\"methodname\">pg_field_type_oid<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $field_number<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_flush": [
        "Flush outbound query data on the connection",
        "<span class=\"methodname\">pg_flush<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "pg_free_result": [
        "Free result memory",
        "<span class=\"methodname\">pg_free_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_get_notify": [
        "Gets SQL NOTIFY message",
        "<span class=\"methodname\">pg_get_notify<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $result_type<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "pg_get_pid": [
        "Gets the backend's process ID",
        "<span class=\"methodname\">pg_get_pid<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_get_result": [
        "Get asynchronous query result",
        "<span class=\"methodname\">pg_get_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "pg_host": [
        "Returns the host name associated with the connection",
        "<span class=\"methodname\">pg_host<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pg_insert": [
        "Insert array into table",
        "<span class=\"methodname\">pg_insert<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table_name<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $assoc_array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = PGSQL_DML_EXEC<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "pg_last_error": [
        "Get the last error message string of a connection",
        "<span class=\"methodname\">pg_last_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pg_last_notice": [
        "Returns the last notice message from PostgreSQL server",
        "<span class=\"methodname\">pg_last_notice<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<span class=\"initializer\"> = PGSQL_NOTICE_LAST<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "pg_last_oid": [
        "Returns the last row's OID",
        "<span class=\"methodname\">pg_last_oid<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pg_lo_close": [
        "Close a large object",
        "<span class=\"methodname\">pg_lo_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $large_object<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_lo_create": [
        "Create a large object",
        "<span class=\"methodname\">pg_lo_create<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $object_id<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>",
        "<span class=\"methodname\">pg_lo_create<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $object_id<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_lo_export": [
        "Export a large object to file",
        "<span class=\"methodname\">pg_lo_export<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $oid<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pathname<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_lo_import": [
        "Import a large object from file",
        "<span class=\"methodname\">pg_lo_import<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pathname<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $object_id<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_lo_open": [
        "Open a large object",
        "<span class=\"methodname\">pg_lo_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $oid<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "pg_lo_read": [
        "Read a large object",
        "<span class=\"methodname\">pg_lo_read<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $large_object<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $len<span class=\"initializer\"> = 8192<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pg_lo_read_all": [
        "Reads an entire large object and send straight to browser",
        "<span class=\"methodname\">pg_lo_read_all<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $large_object<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_lo_seek": [
        "Seeks position within a large object",
        "<span class=\"methodname\">pg_lo_seek<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $large_object<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $whence<span class=\"initializer\"> = PGSQL_SEEK_CUR<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_lo_tell": [
        "Returns current seek position a of large object",
        "<span class=\"methodname\">pg_lo_tell<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $large_object<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_lo_truncate": [
        "Truncates a large object",
        "<span class=\"methodname\">pg_lo_truncate<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $large_object<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $size<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_lo_unlink": [
        "Delete a large object",
        "<span class=\"methodname\">pg_lo_unlink<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $oid<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_lo_write": [
        "Write to a large object",
        "<span class=\"methodname\">pg_lo_write<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $large_object<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $len<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_meta_data": [
        "Get meta data for table",
        "<span class=\"methodname\">pg_meta_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table_name<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $extended<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "pg_num_fields": [
        "Returns the number of fields in a result",
        "<span class=\"methodname\">pg_num_fields<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_num_rows": [
        "Returns the number of rows in a result",
        "<span class=\"methodname\">pg_num_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_options": [
        "Get the options associated with the connection",
        "<span class=\"methodname\">pg_options<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pg_parameter_status": [
        "Looks up a current parameter setting of the server",
        "<span class=\"methodname\">pg_parameter_status<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $param_name<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pg_pconnect": [
        "Open a persistent PostgreSQL connection",
        "<span class=\"methodname\">pg_pconnect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $connection_string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $connect_type<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "pg_ping": [
        "Ping database connection",
        "<span class=\"methodname\">pg_ping<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_port": [
        "Return the port number associated with the connection",
        "<span class=\"methodname\">pg_port<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_prepare": [
        "Submits a request to create a prepared statement with the \n  given parameters, and waits for completion",
        "<span class=\"methodname\">pg_prepare<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $stmtname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "pg_put_line": [
        "Send a NULL-terminated string to PostgreSQL backend",
        "<span class=\"methodname\">pg_put_line<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_query": [
        "Execute a query",
        "<span class=\"methodname\">pg_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "pg_query_params": [
        "Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text",
        "<span class=\"methodname\">pg_query_params<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $params<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "pg_result_error": [
        "Get error message associated with result",
        "<span class=\"methodname\">pg_result_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pg_result_error_field": [
        "Returns an individual field of an error report",
        "<span class=\"methodname\">pg_result_error_field<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fieldcode<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pg_result_seek": [
        "Set internal row offset in result resource",
        "<span class=\"methodname\">pg_result_seek<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_result_status": [
        "Get status of query result",
        "<span class=\"methodname\">pg_result_status<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $result<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = PGSQL_STATUS_LONG<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "pg_select": [
        "Select records",
        "<span class=\"methodname\">pg_select<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table_name<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $assoc_array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = PGSQL_DML_EXEC<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $result_type<span class=\"initializer\"> = PGSQL_ASSOC<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "pg_send_execute": [
        "Sends a request to execute a prepared statement with given parameters, without waiting for the result(s)",
        "<span class=\"methodname\">pg_send_execute<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $stmtname<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $params<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_send_prepare": [
        "Sends a request to create a prepared statement with the given parameters, without waiting for completion",
        "<span class=\"methodname\">pg_send_prepare<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $stmtname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_send_query": [
        "Sends asynchronous query",
        "<span class=\"methodname\">pg_send_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_send_query_params": [
        "Submits a command and separate parameters to the server without waiting for the result(s)",
        "<span class=\"methodname\">pg_send_query_params<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $params<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_set_client_encoding": [
        "Set the client encoding",
        "<span class=\"methodname\">pg_set_client_encoding<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $encoding<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_set_error_verbosity": [
        "Determines the verbosity of messages returned by pg_last_error() \n   and pg_result_error()",
        "<span class=\"methodname\">pg_set_error_verbosity<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $verbosity<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_socket": [
        "Get a read only handle to the socket underlying a PostgreSQL connection",
        "<span class=\"methodname\">pg_socket<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "pg_trace": [
        "Enable tracing a PostgreSQL connection",
        "<span class=\"methodname\">pg_trace<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pathname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<span class=\"initializer\"> = \"w\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_transaction_status": [
        "Returns the current in-transaction status of the server",
        "<span class=\"methodname\">pg_transaction_status<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pg_tty": [
        "Return the TTY name associated with the connection",
        "<span class=\"methodname\">pg_tty<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pg_unescape_bytea": [
        "Unescape binary for bytea type",
        "<span class=\"methodname\">pg_unescape_bytea<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pg_untrace": [
        "Disable tracing of a PostgreSQL connection",
        "<span class=\"methodname\">pg_untrace<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pg_update": [
        "Update table",
        "<span class=\"methodname\">pg_update<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $table_name<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $condition<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = PGSQL_DML_EXEC<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "pg_version": [
        "Returns an array with client, protocol and server version (when available)",
        "<span class=\"methodname\">pg_version<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $connection<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "Phar": [
        "The Phar class provides a high-level interface to accessing and creating phar archives.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Phar::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $fname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $alias<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "PharData": [
        "The PharData class provides a high-level interface to accessing and creating non-executable tar and zip archives. Because these archives do not contain a stub and cannot be executed by the phar extension, it is possible to create and manipulate regular zip and tar files using the PharData class even if phar.readonly php.ini setting is 1.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">PharData::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $fname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $alias<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $format<span class=\"initializer\"> = Phar::TAR<\/span><\/span> )"
    ],
    "PharException": [
        "The PharException class provides a phar-specific exception class for try\/catch blocks."
    ],
    "PharFileInfo": [
        "The PharFileInfo class provides a high-level interface to the contents and attributes of a single file within a phar archive.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">PharFileInfo::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $entry<\/span> )"
    ],
    "php_ini_loaded_file": [
        "Retrieve a path to the loaded php.ini file",
        "<span class=\"methodname\">php_ini_loaded_file<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "php_ini_scanned_files": [
        "Return a list of .ini files parsed from the additional ini dir",
        "<span class=\"methodname\">php_ini_scanned_files<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "php_sapi_name": [
        "Returns the type of interface between web server and PHP",
        "<span class=\"methodname\">php_sapi_name<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "php_strip_whitespace": [
        "Return source with stripped comments and whitespace",
        "<span class=\"methodname\">php_strip_whitespace<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "php_uname": [
        "Returns information about the operating system PHP is running on",
        "<span class=\"methodname\">php_uname<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<span class=\"initializer\"> = \"a\"<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "php_user_filter": [
        "Children of this class are passed to stream_filter_register(). Note that the __construct method is not called; instead, php_user_filter::onCreate() should be used for initialization."
    ],
    "phpcredits": [
        "Prints out the credits for PHP",
        "<span class=\"methodname\">phpcredits<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = CREDITS_ALL<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "phpdbg_break_file": [
        "Inserts a breakpoint at a line in a file",
        "<span class=\"methodname\">phpdbg_break_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $file<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $line<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "phpdbg_break_function": [
        "Inserts a breakpoint at entry to a function",
        "<span class=\"methodname\">phpdbg_break_function<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "phpdbg_break_method": [
        "Inserts a breakpoint at entry to a method",
        "<span class=\"methodname\">phpdbg_break_method<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $method<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "phpdbg_break_next": [
        "Inserts a breakpoint at the next opcode",
        "<span class=\"methodname\">phpdbg_break_next<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "phpdbg_clear": [
        "Clears all breakpoints",
        "<span class=\"methodname\">phpdbg_clear<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "phpdbg_color": [
        "Sets the color of certain elements",
        "<span class=\"methodname\">phpdbg_color<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $element<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $color<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "phpdbg_end_oplog": [
        "<not documented>",
        "<span class=\"methodname\">phpdbg_end_oplog<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = []<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "phpdbg_exec": [
        "Attempts to set the execution context",
        "<span class=\"methodname\">phpdbg_exec<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $context<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "phpdbg_get_executable": [
        "<not documented>",
        "<span class=\"methodname\">phpdbg_get_executable<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = []<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "phpdbg_prompt": [
        "Sets the command prompt",
        "<span class=\"methodname\">phpdbg_prompt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "phpdbg_start_oplog": [
        "<not documented>",
        "<span class=\"methodname\">phpdbg_start_oplog<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "phpinfo": [
        "Outputs information about PHP's configuration",
        "<span class=\"methodname\">phpinfo<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = INFO_ALL<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "PhpToken": [
        "This class provides an alternative to token_get_all(). While the function returns tokens either as a single-character string, or an array with a token ID, token text and line number, PhpToken::tokenize() normalizes all tokens into PhpToken objects, which makes code operating on tokens more memory efficient and readable.",
        "<span class=\"modifier\">final<\/span> <span class=\"modifier\">public<\/span> <span class=\"methodname\">PhpToken::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $line<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pos<span class=\"initializer\"> = -1<\/span><\/span> )"
    ],
    "phpversion": [
        "Gets the current PHP version",
        "<span class=\"methodname\">phpversion<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $extension<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "pi": [
        "Get value of pi",
        "<span class=\"methodname\">pi<\/span> ( ) : <span class=\"type\">float<\/span>"
    ],
    "png2wbmp": [
        "Convert PNG image file to WBMP image file",
        "<span class=\"methodname\">png2wbmp<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pngname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $wbmpname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dest_height<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dest_width<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $threshold<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "Pool": [
        "A Pool is a container for, and controller of, an adjustable number of Workers.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Pool::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $size<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $ctor<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">Pool<\/span>"
    ],
    "popen": [
        "Opens process file pointer",
        "<span class=\"methodname\">popen<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $command<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "posix_access": [
        "Determine accessibility of a file",
        "<span class=\"methodname\">posix_access<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "posix_ctermid": [
        "Get path name of controlling terminal",
        "<span class=\"methodname\">posix_ctermid<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "posix_get_last_error": [
        "Retrieve the error number set by the last posix function that failed",
        "<span class=\"methodname\">posix_get_last_error<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "posix_getcwd": [
        "Pathname of current directory",
        "<span class=\"methodname\">posix_getcwd<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "posix_getegid": [
        "Return the effective group ID of the current process",
        "<span class=\"methodname\">posix_getegid<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "posix_geteuid": [
        "Return the effective user ID of the current process",
        "<span class=\"methodname\">posix_geteuid<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "posix_getgid": [
        "Return the real group ID of the current process",
        "<span class=\"methodname\">posix_getgid<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "posix_getgrgid": [
        "Return info about a group by group id",
        "<span class=\"methodname\">posix_getgrgid<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $group_id<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "posix_getgrnam": [
        "Return info about a group by name",
        "<span class=\"methodname\">posix_getgrnam<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "posix_getgroups": [
        "Return the group set of the current process",
        "<span class=\"methodname\">posix_getgroups<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "posix_getlogin": [
        "Return login name",
        "<span class=\"methodname\">posix_getlogin<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "posix_getpgid": [
        "Get process group id for job control",
        "<span class=\"methodname\">posix_getpgid<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $process_id<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "posix_getpgrp": [
        "Return the current process group identifier",
        "<span class=\"methodname\">posix_getpgrp<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "posix_getpid": [
        "Return the current process identifier",
        "<span class=\"methodname\">posix_getpid<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "posix_getppid": [
        "Return the parent process identifier",
        "<span class=\"methodname\">posix_getppid<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "posix_getpwnam": [
        "Return info about a user by username",
        "<span class=\"methodname\">posix_getpwnam<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "posix_getpwuid": [
        "Return info about a user by user id",
        "<span class=\"methodname\">posix_getpwuid<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $user_id<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "posix_getrlimit": [
        "Return info about system resource limits",
        "<span class=\"methodname\">posix_getrlimit<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "posix_getsid": [
        "Get the current sid of the process",
        "<span class=\"methodname\">posix_getsid<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $process_id<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "posix_getuid": [
        "Return the real user ID of the current process",
        "<span class=\"methodname\">posix_getuid<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "posix_initgroups": [
        "Calculate the group access list",
        "<span class=\"methodname\">posix_initgroups<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $group_id<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "posix_isatty": [
        "Determine if a file descriptor is an interactive terminal",
        "<span class=\"methodname\">posix_isatty<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">int<\/span><\/span> $file_descriptor<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "posix_kill": [
        "Send a signal to a process",
        "<span class=\"methodname\">posix_kill<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $process_id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $signal<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "posix_mkfifo": [
        "Create a fifo special file (a named pipe)",
        "<span class=\"methodname\">posix_mkfifo<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $permissions<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "posix_mknod": [
        "Create a special or ordinary file (POSIX.1)",
        "<span class=\"methodname\">posix_mknod<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $major<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $minor<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "posix_setegid": [
        "Set the effective GID of the current process",
        "<span class=\"methodname\">posix_setegid<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $group_id<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "posix_seteuid": [
        "Set the effective UID of the current process",
        "<span class=\"methodname\">posix_seteuid<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $user_id<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "posix_setgid": [
        "Set the GID of the current process",
        "<span class=\"methodname\">posix_setgid<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $group_id<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "posix_setpgid": [
        "Set process group id for job control",
        "<span class=\"methodname\">posix_setpgid<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $process_id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $process_group_id<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "posix_setrlimit": [
        "Set system resource limits",
        "<span class=\"methodname\">posix_setrlimit<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $resource<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $soft_limit<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $hard_limit<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "posix_setsid": [
        "Make the current process a session leader",
        "<span class=\"methodname\">posix_setsid<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "posix_setuid": [
        "Set the UID of the current process",
        "<span class=\"methodname\">posix_setuid<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $user_id<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "posix_strerror": [
        "Retrieve the system error message associated with the given errno",
        "<span class=\"methodname\">posix_strerror<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $error_code<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "posix_times": [
        "Get process times",
        "<span class=\"methodname\">posix_times<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "posix_ttyname": [
        "Determine terminal device name",
        "<span class=\"methodname\">posix_ttyname<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">int<\/span><\/span> $file_descriptor<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "posix_uname": [
        "Get system name",
        "<span class=\"methodname\">posix_uname<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "pow": [
        "Exponential expression",
        "<span class=\"methodname\">pow<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">float<\/span><\/span> $base<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">float<\/span><\/span> $exp<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">float<\/span><\/span>"
    ],
    "preg_filter": [
        "Perform a regular expression search and replace",
        "<span class=\"methodname\">preg_filter<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span> $replacement<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span> $subject<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $limit<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$count<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "preg_grep": [
        "Return array entries that match the pattern",
        "<span class=\"methodname\">preg_grep<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "preg_last_error": [
        "Returns the error code of the last PCRE regex execution",
        "<span class=\"methodname\">preg_last_error<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "preg_last_error_msg": [
        "Returns the error message of the last PCRE regex execution",
        "<span class=\"methodname\">preg_last_error_msg<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "preg_match": [
        "Perform a regular expression match",
        "<span class=\"methodname\">preg_match<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $subject<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$matches<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "preg_match_all": [
        "Perform a global regular expression match",
        "<span class=\"methodname\">preg_match_all<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $subject<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$matches<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "preg_quote": [
        "Quote regular expression characters",
        "<span class=\"methodname\">preg_quote<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $str<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $delimiter<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "preg_replace": [
        "Perform a regular expression search and replace",
        "<span class=\"methodname\">preg_replace<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span> $replacement<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span> $subject<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $limit<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$count<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "preg_replace_callback": [
        "Perform a regular expression search and replace using a callback",
        "<span class=\"methodname\">preg_replace_callback<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span> $subject<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $limit<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$count<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "preg_replace_callback_array": [
        "Perform a regular expression search and replace using callbacks",
        "<span class=\"methodname\">preg_replace_callback_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span> $subject<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $limit<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$count<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "preg_split": [
        "Split string by a regular expression",
        "<span class=\"methodname\">preg_split<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $subject<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $limit<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "prev": [
        "Rewind the internal array pointer",
        "<span class=\"methodname\">prev<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">object<\/span><\/span> &$array<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "print": [
        "Output a string",
        "<span class=\"methodname\">print<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $arg<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "print_r": [
        "Prints human-readable information about a variable",
        "<span class=\"methodname\">print_r<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $return<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "printf": [
        "Output a formatted string",
        "<span class=\"methodname\">printf<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$values<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "proc_close": [
        "Close a process opened by proc_open() and return the exit code of that process",
        "<span class=\"methodname\">proc_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $process<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "proc_get_status": [
        "Get information about a process opened by proc_open()",
        "<span class=\"methodname\">proc_get_status<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $process<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "proc_nice": [
        "Change the priority of the current process",
        "<span class=\"methodname\">proc_nice<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $priority<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "proc_open": [
        "Execute a command and open file pointers for input\/output",
        "<span class=\"methodname\">proc_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $cmd<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $descriptorspec<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$pipes<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $cwd<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $env<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $other_options<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "proc_terminate": [
        "Kills a process opened by proc_open",
        "<span class=\"methodname\">proc_terminate<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $process<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $signal<span class=\"initializer\"> = 15<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "property_exists": [
        "Checks if the object or class has a property",
        "<span class=\"methodname\">property_exists<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $property<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_add_bookmark": [
        "Add bookmark to current page",
        "<span class=\"methodname\">ps_add_bookmark<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $parent<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $open<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ps_add_launchlink": [
        "Adds link which launches file",
        "<span class=\"methodname\">ps_add_launchlink<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $llx<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $lly<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $urx<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $ury<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_add_locallink": [
        "Adds link to a page in the same document",
        "<span class=\"methodname\">ps_add_locallink<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $llx<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $lly<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $urx<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $ury<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $page<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dest<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_add_note": [
        "Adds note to current page",
        "<span class=\"methodname\">ps_add_note<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $llx<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $lly<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $urx<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $ury<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $contents<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $title<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $icon<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $open<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_add_pdflink": [
        "Adds link to a page in a second pdf document",
        "<span class=\"methodname\">ps_add_pdflink<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $llx<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $lly<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $urx<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $ury<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $page<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dest<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_add_weblink": [
        "Adds link to a web location",
        "<span class=\"methodname\">ps_add_weblink<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $llx<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $lly<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $urx<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $ury<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $url<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_arc": [
        "Draws an arc counterclockwise",
        "<span class=\"methodname\">ps_arc<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $radius<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $alpha<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $beta<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_arcn": [
        "Draws an arc clockwise",
        "<span class=\"methodname\">ps_arcn<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $radius<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $alpha<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $beta<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_begin_page": [
        "Start a new page",
        "<span class=\"methodname\">ps_begin_page<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $width<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $height<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_begin_pattern": [
        "Start a new pattern",
        "<span class=\"methodname\">ps_begin_pattern<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $width<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $height<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $xstep<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $ystep<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $painttype<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ps_begin_template": [
        "Start a new template",
        "<span class=\"methodname\">ps_begin_template<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $width<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $height<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ps_circle": [
        "Draws a circle",
        "<span class=\"methodname\">ps_circle<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $radius<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_clip": [
        "Clips drawing to current path",
        "<span class=\"methodname\">ps_clip<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_close": [
        "Closes a PostScript document",
        "<span class=\"methodname\">ps_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_close_image": [
        "Closes image and frees memory",
        "<span class=\"methodname\">ps_close_image<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $imageid<\/span> ) : <span class=\"type\"><span class=\"type\"><span class=\"type void\">void<\/span><\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ps_closepath": [
        "Closes path",
        "<span class=\"methodname\">ps_closepath<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_closepath_stroke": [
        "Closes and strokes path",
        "<span class=\"methodname\">ps_closepath_stroke<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_continue_text": [
        "Continue text in next line",
        "<span class=\"methodname\">ps_continue_text<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_curveto": [
        "Draws a curve",
        "<span class=\"methodname\">ps_curveto<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $x1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $y1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $x2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $y2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $x3<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $y3<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_delete": [
        "Deletes all resources of a PostScript document",
        "<span class=\"methodname\">ps_delete<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_end_page": [
        "End a page",
        "<span class=\"methodname\">ps_end_page<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_end_pattern": [
        "End a pattern",
        "<span class=\"methodname\">ps_end_pattern<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_end_template": [
        "End a template",
        "<span class=\"methodname\">ps_end_template<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_fill": [
        "Fills the current path",
        "<span class=\"methodname\">ps_fill<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_fill_stroke": [
        "Fills and strokes the current path",
        "<span class=\"methodname\">ps_fill_stroke<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_findfont": [
        "Loads a font",
        "<span class=\"methodname\">ps_findfont<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $fontname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $encoding<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $embed<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ps_get_buffer": [
        "Fetches the full buffer containig the generated PS data",
        "<span class=\"methodname\">ps_get_buffer<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ps_get_parameter": [
        "Gets certain parameters",
        "<span class=\"methodname\">ps_get_parameter<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $modifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ps_get_value": [
        "Gets certain values",
        "<span class=\"methodname\">ps_get_value<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $modifier<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "ps_hyphenate": [
        "Hyphenates a word",
        "<span class=\"methodname\">ps_hyphenate<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ps_include_file": [
        "Reads an external file with raw PostScript code",
        "<span class=\"methodname\">ps_include_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $file<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_lineto": [
        "Draws a line",
        "<span class=\"methodname\">ps_lineto<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $y<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_makespotcolor": [
        "Create spot color",
        "<span class=\"methodname\">ps_makespotcolor<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $reserved<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ps_moveto": [
        "Sets current point",
        "<span class=\"methodname\">ps_moveto<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $y<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_new": [
        "Creates a new PostScript document object",
        "<span class=\"methodname\">ps_new<\/span> ( ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ps_open_file": [
        "Opens a file for output",
        "<span class=\"methodname\">ps_open_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_open_image": [
        "Reads an image for later placement",
        "<span class=\"methodname\">ps_open_image<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $source<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $lenght<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $width<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $height<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $components<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $bpc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $params<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ps_open_image_file": [
        "Opens image from file",
        "<span class=\"methodname\">ps_open_image_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $stringparam<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $intparam<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ps_open_memory_image": [
        "Takes an GD image and returns an image for placement in a PS document",
        "<span class=\"methodname\">ps_open_memory_image<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $gd<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ps_place_image": [
        "Places image on the page",
        "<span class=\"methodname\">ps_place_image<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $imageid<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $scale<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_rect": [
        "Draws a rectangle",
        "<span class=\"methodname\">ps_rect<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $y<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $width<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $height<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_restore": [
        "Restore previously save context",
        "<span class=\"methodname\">ps_restore<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_rotate": [
        "Sets rotation factor",
        "<span class=\"methodname\">ps_rotate<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $rot<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_save": [
        "Save current context",
        "<span class=\"methodname\">ps_save<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_scale": [
        "Sets scaling factor",
        "<span class=\"methodname\">ps_scale<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $y<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_set_border_color": [
        "Sets color of border for annotations",
        "<span class=\"methodname\">ps_set_border_color<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $red<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $green<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $blue<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_set_border_dash": [
        "Sets length of dashes for border of annotations",
        "<span class=\"methodname\">ps_set_border_dash<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $black<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $white<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_set_border_style": [
        "Sets border style of annotations",
        "<span class=\"methodname\">ps_set_border_style<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $style<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $width<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_set_info": [
        "Sets information fields of document",
        "<span class=\"methodname\">ps_set_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $p<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $val<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_set_parameter": [
        "Sets certain parameters",
        "<span class=\"methodname\">ps_set_parameter<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_set_text_pos": [
        "Sets position for text output",
        "<span class=\"methodname\">ps_set_text_pos<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $y<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_set_value": [
        "Sets certain values",
        "<span class=\"methodname\">ps_set_value<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_setcolor": [
        "Sets current color",
        "<span class=\"methodname\">ps_setcolor<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $colorspace<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $c1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $c2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $c3<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $c4<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_setdash": [
        "Sets appearance of a dashed line",
        "<span class=\"methodname\">ps_setdash<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $on<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $off<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_setflat": [
        "Sets flatness",
        "<span class=\"methodname\">ps_setflat<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_setfont": [
        "Sets font to use for following output",
        "<span class=\"methodname\">ps_setfont<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fontid<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $size<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_setgray": [
        "Sets gray value",
        "<span class=\"methodname\">ps_setgray<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $gray<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_setlinecap": [
        "Sets appearance of line ends",
        "<span class=\"methodname\">ps_setlinecap<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_setlinejoin": [
        "Sets how contected lines are joined",
        "<span class=\"methodname\">ps_setlinejoin<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_setlinewidth": [
        "Sets width of a line",
        "<span class=\"methodname\">ps_setlinewidth<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $width<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_setmiterlimit": [
        "Sets the miter limit",
        "<span class=\"methodname\">ps_setmiterlimit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_setoverprintmode": [
        "Sets overprint mode",
        "<span class=\"methodname\">ps_setoverprintmode<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_setpolydash": [
        "Sets appearance of a dashed line",
        "<span class=\"methodname\">ps_setpolydash<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $arr<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_shading": [
        "Creates a shading for later use",
        "<span class=\"methodname\">ps_shading<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $x0<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $y0<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $x1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $y1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $c1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $c2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $c3<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $c4<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $optlist<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ps_shading_pattern": [
        "Creates a pattern based on a shading",
        "<span class=\"methodname\">ps_shading_pattern<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $shadingid<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $optlist<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ps_shfill": [
        "Fills an area with a shading",
        "<span class=\"methodname\">ps_shfill<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $shadingid<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_show": [
        "Output text",
        "<span class=\"methodname\">ps_show<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_show2": [
        "Output a text at current position",
        "<span class=\"methodname\">ps_show2<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $len<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_show_boxed": [
        "Output text in a box",
        "<span class=\"methodname\">ps_show_boxed<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $left<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $bottom<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $width<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $height<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $hmode<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $feature<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ps_show_xy": [
        "Output text at given position",
        "<span class=\"methodname\">ps_show_xy<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $y<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_show_xy2": [
        "Output text at position",
        "<span class=\"methodname\">ps_show_xy2<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $len<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $xcoor<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $ycoor<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_string_geometry": [
        "Gets geometry of a string",
        "<span class=\"methodname\">ps_string_geometry<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fontid<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $size<span class=\"initializer\"> = 0.0<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "ps_stringwidth": [
        "Gets width of a string",
        "<span class=\"methodname\">ps_stringwidth<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $text<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fontid<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $size<span class=\"initializer\"> = 0.0<\/span><\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "ps_stroke": [
        "Draws the current path",
        "<span class=\"methodname\">ps_stroke<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_symbol": [
        "Output a glyph",
        "<span class=\"methodname\">ps_symbol<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $ord<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ps_symbol_name": [
        "Gets name of a glyph",
        "<span class=\"methodname\">ps_symbol_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $ord<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fontid<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ps_symbol_width": [
        "Gets width of a glyph",
        "<span class=\"methodname\">ps_symbol_width<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $ord<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fontid<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $size<span class=\"initializer\"> = 0.0<\/span><\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "ps_translate": [
        "Sets translation",
        "<span class=\"methodname\">ps_translate<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $psdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $y<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pspell_add_to_personal": [
        "Add the word to a personal wordlist",
        "<span class=\"methodname\">pspell_add_to_personal<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $dictionary<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $word<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pspell_add_to_session": [
        "Add the word to the wordlist in the current session",
        "<span class=\"methodname\">pspell_add_to_session<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $dictionary<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $word<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pspell_check": [
        "Check a word",
        "<span class=\"methodname\">pspell_check<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $dictionary<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $word<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pspell_clear_session": [
        "Clear the current session",
        "<span class=\"methodname\">pspell_clear_session<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $dictionary<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pspell_config_create": [
        "Create a config used to open a dictionary",
        "<span class=\"methodname\">pspell_config_create<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $language<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $spelling<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $jargon<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $encoding<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "pspell_config_data_dir": [
        "Location of language data files",
        "<span class=\"methodname\">pspell_config_data_dir<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $config<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $directory<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pspell_config_dict_dir": [
        "Location of the main word list",
        "<span class=\"methodname\">pspell_config_dict_dir<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $config<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $directory<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pspell_config_ignore": [
        "Ignore words less than N characters long",
        "<span class=\"methodname\">pspell_config_ignore<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $config<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $min_length<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pspell_config_mode": [
        "Change the mode number of suggestions returned",
        "<span class=\"methodname\">pspell_config_mode<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $config<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pspell_config_personal": [
        "Set a file that contains personal wordlist",
        "<span class=\"methodname\">pspell_config_personal<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $config<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pspell_config_repl": [
        "Set a file that contains replacement pairs",
        "<span class=\"methodname\">pspell_config_repl<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $config<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pspell_config_runtogether": [
        "Consider run-together words as valid compounds",
        "<span class=\"methodname\">pspell_config_runtogether<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $config<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $allow<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pspell_config_save_repl": [
        "Determine whether to save a replacement pairs list\n  along with the wordlist",
        "<span class=\"methodname\">pspell_config_save_repl<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $config<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $save<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pspell_new": [
        "Load a new dictionary",
        "<span class=\"methodname\">pspell_new<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $language<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $spelling<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $jargon<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $encoding<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "pspell_new_config": [
        "Load a new dictionary with settings based on a given config",
        "<span class=\"methodname\">pspell_new_config<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $config<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "pspell_new_personal": [
        "Load a new dictionary with personal wordlist",
        "<span class=\"methodname\">pspell_new_personal<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $language<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $spelling<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $jargon<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $encoding<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "pspell_save_wordlist": [
        "Save the personal wordlist to a file",
        "<span class=\"methodname\">pspell_save_wordlist<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $dictionary<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pspell_store_replacement": [
        "Store a replacement pair for a word",
        "<span class=\"methodname\">pspell_store_replacement<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $dictionary<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $misspelled<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $correct<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "pspell_suggest": [
        "Suggest spellings of a word",
        "<span class=\"methodname\">pspell_suggest<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $dictionary<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $word<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "putenv": [
        "Sets the value of an environment variable",
        "<span class=\"methodname\">putenv<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $assignment<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "px_close": [
        "Closes a paradox database",
        "<span class=\"methodname\">px_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "px_create_fp": [
        "Create a new paradox database",
        "<span class=\"methodname\">px_create_fp<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $file<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $fielddesc<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "px_date2string": [
        "Converts a date into a string",
        "<span class=\"methodname\">px_date2string<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "px_delete": [
        "Deletes resource of paradox database",
        "<span class=\"methodname\">px_delete<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "px_delete_record": [
        "Deletes record from paradox database",
        "<span class=\"methodname\">px_delete_record<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "px_get_field": [
        "Returns the specification of a single field",
        "<span class=\"methodname\">px_get_field<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fieldno<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "px_get_info": [
        "Return lots of information about a paradox file",
        "<span class=\"methodname\">px_get_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "px_get_parameter": [
        "Gets a parameter",
        "<span class=\"methodname\">px_get_parameter<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "px_get_record": [
        "Returns record of paradox database",
        "<span class=\"methodname\">px_get_record<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "px_get_schema": [
        "Returns the database schema",
        "<span class=\"methodname\">px_get_schema<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "px_get_value": [
        "Gets a value",
        "<span class=\"methodname\">px_get_value<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\"><span class=\"type\">float<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "px_insert_record": [
        "Inserts record into paradox database",
        "<span class=\"methodname\">px_insert_record<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $data<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "px_new": [
        "Create a new paradox object",
        "<span class=\"methodname\">px_new<\/span> ( ) : <span class=\"type\">resource<\/span>"
    ],
    "px_numfields": [
        "Returns number of fields in a database",
        "<span class=\"methodname\">px_numfields<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "px_numrecords": [
        "Returns number of records in a database",
        "<span class=\"methodname\">px_numrecords<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "px_open_fp": [
        "Open paradox database",
        "<span class=\"methodname\">px_open_fp<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $file<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "px_put_record": [
        "Stores record into paradox database",
        "<span class=\"methodname\">px_put_record<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $record<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $recpos<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "px_retrieve_record": [
        "Returns record of paradox database",
        "<span class=\"methodname\">px_retrieve_record<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "px_set_blob_file": [
        "Sets the file where blobs are read from",
        "<span class=\"methodname\">px_set_blob_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "px_set_parameter": [
        "Sets a parameter",
        "<span class=\"methodname\">px_set_parameter<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "px_set_tablename": [
        "Sets the name of a table (deprecated)",
        "<span class=\"methodname\">px_set_tablename<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\"><span class=\"type\"><span class=\"type void\">void<\/span><\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "px_set_targetencoding": [
        "Sets the encoding for character fields (deprecated)",
        "<span class=\"methodname\">px_set_targetencoding<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $encoding<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "px_set_value": [
        "Sets a value",
        "<span class=\"methodname\">px_set_value<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "px_timestamp2string": [
        "Converts the timestamp into a string",
        "<span class=\"methodname\">px_timestamp2string<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "px_update_record": [
        "Updates record in paradox database",
        "<span class=\"methodname\">px_update_record<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pxdoc<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "QuickHashIntHash": [
        "This class wraps around a hash containing integer numbers, where the values are also integer numbers. Hashes are also available as implementation of the ArrayAccess interface.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">QuickHashIntHash::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $size<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "QuickHashIntSet": [
        "This class wraps around a set containing integer numbers.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">QuickHashIntSet::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $size<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "QuickHashIntStringHash": [
        "This class wraps around a hash containing integer numbers, where the values are strings. Hashes are also available as implementation of the ArrayAccess interface.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">QuickHashIntStringHash::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $size<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> )"
    ],
    "QuickHashStringIntHash": [
        "This class wraps around a hash containing strings, where the values are integer numbers. Hashes are also available as implementation of the ArrayAccess interface.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">QuickHashStringIntHash::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $size<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> )"
    ],
    "quoted_printable_decode": [
        "Convert a quoted-printable string to an 8 bit string",
        "<span class=\"methodname\">quoted_printable_decode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "quoted_printable_encode": [
        "Convert a 8 bit string to a quoted-printable string",
        "<span class=\"methodname\">quoted_printable_encode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "quotemeta": [
        "Quote meta characters",
        "<span class=\"methodname\">quotemeta<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "rad2deg": [
        "Converts the radian number to the equivalent number in degrees",
        "<span class=\"methodname\">rad2deg<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "radius_acct_open": [
        "Creates a Radius handle for accounting",
        "<span class=\"methodname\">radius_acct_open<\/span> ( ) : <span class=\"type\">resource<\/span>"
    ],
    "radius_add_server": [
        "Adds a server",
        "<span class=\"methodname\">radius_add_server<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $port<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $secret<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max_tries<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "radius_auth_open": [
        "Creates a Radius handle for authentication",
        "<span class=\"methodname\">radius_auth_open<\/span> ( ) : <span class=\"type\">resource<\/span>"
    ],
    "radius_close": [
        "Frees all ressources",
        "<span class=\"methodname\">radius_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "radius_config": [
        "Causes the library to read the given configuration file",
        "<span class=\"methodname\">radius_config<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $file<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "radius_create_request": [
        "Create accounting or authentication request",
        "<span class=\"methodname\">radius_create_request<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "radius_cvt_addr": [
        "Converts raw data to IP-Address",
        "<span class=\"methodname\">radius_cvt_addr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "radius_cvt_int": [
        "Converts raw data to integer",
        "<span class=\"methodname\">radius_cvt_int<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "radius_cvt_string": [
        "Converts raw data to string",
        "<span class=\"methodname\">radius_cvt_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "radius_demangle": [
        "Demangles data",
        "<span class=\"methodname\">radius_demangle<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mangled<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "radius_demangle_mppe_key": [
        "Derives mppe-keys from mangled data",
        "<span class=\"methodname\">radius_demangle_mppe_key<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mangled<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "radius_get_attr": [
        "Extracts an attribute",
        "<span class=\"methodname\">radius_get_attr<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "radius_get_tagged_attr_data": [
        "Extracts the data from a tagged attribute",
        "<span class=\"methodname\">radius_get_tagged_attr_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "radius_get_tagged_attr_tag": [
        "Extracts the tag from a tagged attribute",
        "<span class=\"methodname\">radius_get_tagged_attr_tag<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "radius_get_vendor_attr": [
        "Extracts a vendor specific attribute",
        "<span class=\"methodname\">radius_get_vendor_attr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "radius_put_addr": [
        "Attaches an IP address attribute",
        "<span class=\"methodname\">radius_put_addr<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $addr<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $tag<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "radius_put_attr": [
        "Attaches a binary attribute",
        "<span class=\"methodname\">radius_put_attr<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $tag<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "radius_put_int": [
        "Attaches an integer attribute",
        "<span class=\"methodname\">radius_put_int<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $tag<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "radius_put_string": [
        "Attaches a string attribute",
        "<span class=\"methodname\">radius_put_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $tag<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "radius_put_vendor_addr": [
        "Attaches a vendor specific IP address attribute",
        "<span class=\"methodname\">radius_put_vendor_addr<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $vendor<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $addr<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "radius_put_vendor_attr": [
        "Attaches a vendor specific binary attribute",
        "<span class=\"methodname\">radius_put_vendor_attr<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $vendor<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $tag<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "radius_put_vendor_int": [
        "Attaches a vendor specific integer attribute",
        "<span class=\"methodname\">radius_put_vendor_int<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $vendor<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $tag<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "radius_put_vendor_string": [
        "Attaches a vendor specific string attribute",
        "<span class=\"methodname\">radius_put_vendor_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $vendor<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $tag<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "radius_request_authenticator": [
        "Returns the request authenticator",
        "<span class=\"methodname\">radius_request_authenticator<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "radius_salt_encrypt_attr": [
        "Salt-encrypts a value",
        "<span class=\"methodname\">radius_salt_encrypt_attr<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "radius_send_request": [
        "Sends the request and waits for a reply",
        "<span class=\"methodname\">radius_send_request<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "radius_server_secret": [
        "Returns the shared secret",
        "<span class=\"methodname\">radius_server_secret<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "radius_strerror": [
        "Returns an error message",
        "<span class=\"methodname\">radius_strerror<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $radius_handle<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "rand": [
        "Generate a random integer",
        "<span class=\"methodname\">rand<\/span> ( ) : <span class=\"type\">int<\/span>",
        "<span class=\"methodname\">rand<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $min<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "random_bytes": [
        "Generates cryptographically secure pseudo-random bytes",
        "<span class=\"methodname\">random_bytes<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "random_int": [
        "Generates cryptographically secure pseudo-random integers",
        "<span class=\"methodname\">random_int<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $min<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "range": [
        "Create an array containing a range of elements",
        "<span class=\"methodname\">range<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">float<\/span><\/span> $start<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">float<\/span><\/span> $end<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">float<\/span><\/span> $step<span class=\"initializer\"> = 1<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "RangeException": [
        "Exception thrown to indicate range errors during program execution. Normally this means there was an arithmetic error other than under\/overflow. This is the runtime version of DomainException."
    ],
    "rar_allow_broken_set": [
        "Whether opening broken archives is allowed",
        "<span class=\"methodname\">rar_allow_broken_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">RarArchive<\/span> $rarfile<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $allow_broken<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "rar_broken_is": [
        "Test whether an archive is broken (incomplete)",
        "<span class=\"methodname\">rar_broken_is<\/span> ( <span class=\"methodparam\"><span class=\"type\">RarArchive<\/span> $rarfile<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "rar_close": [
        "Close RAR archive and free all resources",
        "<span class=\"methodname\">rar_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">RarArchive<\/span> $rarfile<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "rar_comment_get": [
        "Get comment text from the RAR archive",
        "<span class=\"methodname\">rar_comment_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">RarArchive<\/span> $rarfile<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "rar_entry_get": [
        "Get entry object from the RAR archive",
        "<span class=\"methodname\">rar_entry_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">RarArchive<\/span> $rarfile<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $entryname<\/span> ) : <span class=\"type\"><span class=\"type\">RarEntry<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "rar_list": [
        "Get full list of entries from the RAR archive",
        "<span class=\"methodname\">rar_list<\/span> ( <span class=\"methodparam\"><span class=\"type\">RarArchive<\/span> $rarfile<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "rar_open": [
        "Open RAR archive",
        "<span class=\"methodname\">rar_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $volume_callback<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">RarArchive<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "rar_solid_is": [
        "Check whether the RAR archive is solid",
        "<span class=\"methodname\">rar_solid_is<\/span> ( <span class=\"methodparam\"><span class=\"type\">RarArchive<\/span> $rarfile<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "rar_wrapper_cache_stats": [
        "Cache hits and misses for the URL wrapper",
        "<span class=\"methodname\">rar_wrapper_cache_stats<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "RarArchive": [
        "This class represents a RAR archive, which may be formed by several volumes (parts) and which contains a number of RAR entries (i.e., files, directories and other special objects such as symbolic links)."
    ],
    "RarEntry": [
        "A RAR entry, representing a directory or a compressed file inside a RAR archive."
    ],
    "RarException": [
        "This class serves two purposes: it is the type of the exceptions thrown by the RAR extension functions and methods and it allows, through static methods to query and define the error behaviour of the extension, i.e., whether exceptions are thrown or only warnings are emitted."
    ],
    "rawurldecode": [
        "Decode URL-encoded strings",
        "<span class=\"methodname\">rawurldecode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "rawurlencode": [
        "URL-encode according to RFC 3986",
        "<span class=\"methodname\">rawurlencode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "readdir": [
        "Read entry from directory handle",
        "<span class=\"methodname\">readdir<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $dir_handle<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "readfile": [
        "Outputs a file",
        "<span class=\"methodname\">readfile<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $use_include_path<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "readgzfile": [
        "Output a gz-file",
        "<span class=\"methodname\">readgzfile<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $use_include_path<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "readline": [
        "Reads a line",
        "<span class=\"methodname\">readline<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $prompt<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "readline_add_history": [
        "Adds a line to the history",
        "<span class=\"methodname\">readline_add_history<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $prompt<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "readline_callback_handler_install": [
        "Initializes the readline callback interface and terminal, prints the prompt and returns immediately",
        "<span class=\"methodname\">readline_callback_handler_install<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $prompt<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "readline_callback_handler_remove": [
        "Removes a previously installed callback handler and restores terminal settings",
        "<span class=\"methodname\">readline_callback_handler_remove<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "readline_callback_read_char": [
        "Reads a character and informs the readline callback interface when a line is received",
        "<span class=\"methodname\">readline_callback_read_char<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "readline_clear_history": [
        "Clears the history",
        "<span class=\"methodname\">readline_clear_history<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "readline_completion_function": [
        "Registers a completion function",
        "<span class=\"methodname\">readline_completion_function<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "readline_info": [
        "Gets\/sets various internal readline variables",
        "<span class=\"methodname\">readline_info<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $var_name<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">bool<\/span>|<span class=\"type\">null<\/span><\/span> $value<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "readline_list_history": [
        "Lists the history",
        "<span class=\"methodname\">readline_list_history<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "readline_on_new_line": [
        "Inform readline that the cursor has moved to a new line",
        "<span class=\"methodname\">readline_on_new_line<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "readline_read_history": [
        "Reads the history",
        "<span class=\"methodname\">readline_read_history<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $filename<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "readline_redisplay": [
        "Redraws the display",
        "<span class=\"methodname\">readline_redisplay<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "readline_write_history": [
        "Writes the history",
        "<span class=\"methodname\">readline_write_history<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $filename<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "readlink": [
        "Returns the target of a symbolic link",
        "<span class=\"methodname\">readlink<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "realpath": [
        "Returns canonicalized absolute pathname",
        "<span class=\"methodname\">realpath<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "realpath_cache_get": [
        "Get realpath cache entries",
        "<span class=\"methodname\">realpath_cache_get<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "realpath_cache_size": [
        "Get realpath cache size",
        "<span class=\"methodname\">realpath_cache_size<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "recode_file": [
        "Recode from file to file according to recode request",
        "<span class=\"methodname\">recode_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $request<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $input<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $output<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "recode_string": [
        "Recode a string according to a recode request",
        "<span class=\"methodname\">recode_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $request<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "RecursiveArrayIterator": [
        "This iterator allows to unset and modify values and keys while iterating over Arrays and Objects in the same way as the ArrayIterator. Additionally it is possible to iterate over the current iterator entry."
    ],
    "RecursiveCachingIterator": [
        "...",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">RecursiveCachingIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">Iterator<\/span> $iterator<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = self::CALL_TOSTRING<\/span><\/span> )"
    ],
    "RecursiveCallbackFilterIterator": [
        "Create a RecursiveCallbackFilterIterator from a RecursiveIterator",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">RecursiveCallbackFilterIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">RecursiveIterator<\/span> $iterator<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $callback<\/span> )"
    ],
    "RecursiveDirectoryIterator": [
        "The RecursiveDirectoryIterator provides an interface for iterating recursively over filesystem directories.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">RecursiveDirectoryIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO<\/span><\/span> )"
    ],
    "RecursiveFilterIterator": [
        "This abstract iterator filters out unwanted values for a RecursiveIterator. This class should be extended to implement custom filters. The RecursiveFilterIterator::accept() must be implemented in the subclass.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">RecursiveFilterIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">RecursiveIterator<\/span> $iterator<\/span> )"
    ],
    "RecursiveIterator": [
        "Classes implementing RecursiveIterator can be used to iterate over iterators recursively."
    ],
    "RecursiveIteratorIterator": [
        "Can be used to iterate through recursive iterators.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">RecursiveIteratorIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">Traversable<\/span> $iterator<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = RecursiveIteratorIterator::LEAVES_ONLY<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> )"
    ],
    "RecursiveRegexIterator": [
        "This recursive iterator can filter another recursive iterator via a regular expression.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">RecursiveRegexIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">RecursiveIterator<\/span> $iterator<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $regex<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = self::MATCH<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $preg_flags<span class=\"initializer\"> = 0<\/span><\/span> )"
    ],
    "RecursiveTreeIterator": [
        "Allows iterating over a RecursiveIterator to generate an ASCII graphic tree.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">RecursiveTreeIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">RecursiveIterator<\/span>|<span class=\"type\">IteratorAggregate<\/span><\/span> $it<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = RecursiveTreeIterator::BYPASS_KEY<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $cit_flags<span class=\"initializer\"> = CachingIterator::CATCH_GET_CHILD<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = RecursiveIteratorIterator::SELF_FIRST<\/span><\/span> )"
    ],
    "Reflection": [
        "The reflection class."
    ],
    "ReflectionClass": [
        "The ReflectionClass class reports information about a class.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ReflectionClass::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">object<\/span>|<span class=\"type\">string<\/span><\/span> $objectOrClass<\/span> )"
    ],
    "ReflectionClassConstant": [
        "The ReflectionClassConstant class reports information about a class constant.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ReflectionClassConstant::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">object<\/span>|<span class=\"type\">string<\/span><\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $constant<\/span> )"
    ],
    "ReflectionException": [
        "The ReflectionException class."
    ],
    "ReflectionExtension": [
        "The ReflectionExtension class reports information about an extension.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ReflectionExtension::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> )"
    ],
    "ReflectionFunction": [
        "The ReflectionFunction class reports information about a function.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ReflectionFunction::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">Closure<\/span>|<span class=\"type\">string<\/span><\/span> $function<\/span> )"
    ],
    "ReflectionFunctionAbstract": [
        "A parent class to ReflectionFunction, read its description for details."
    ],
    "ReflectionGenerator": [
        "The ReflectionGenerator class reports information about a generator.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ReflectionGenerator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">Generator<\/span> $generator<\/span> )"
    ],
    "ReflectionMethod": [
        "The ReflectionMethod class reports information about a method.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ReflectionMethod::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">object<\/span>|<span class=\"type\">string<\/span><\/span> $objectOrMethod<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $method<\/span> )",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ReflectionMethod::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $classMethod<\/span> )"
    ],
    "ReflectionObject": [
        "The ReflectionObject class reports information about an object.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ReflectionObject::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">object<\/span> $object<\/span> )"
    ],
    "ReflectionParameter": [
        "The ReflectionParameter class retrieves information about function's or method's parameters.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ReflectionParameter::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">object<\/span><\/span> $function<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $param<\/span> )"
    ],
    "ReflectionProperty": [
        "The ReflectionProperty class reports information about class properties.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ReflectionProperty::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">object<\/span>|<span class=\"type\">string<\/span><\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $property<\/span> )"
    ],
    "ReflectionReference": [
        "The ReflectionReference class provides information about a reference."
    ],
    "ReflectionType": [
        "The ReflectionType class reports information about a function's return type."
    ],
    "ReflectionZendExtension": [
        "Constructor",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ReflectionZendExtension::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> )"
    ],
    "Reflector": [
        "Reflector is an interface implemented by all exportable Reflection classes."
    ],
    "RegexIterator": [
        "This iterator can be used to filter another iterator based on a regular expression.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">RegexIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">Iterator<\/span> $iterator<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $regex<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = self::MATCH<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $preg_flags<span class=\"initializer\"> = 0<\/span><\/span> )"
    ],
    "register_shutdown_function": [
        "Register a function for execution on shutdown",
        "<span class=\"methodname\">register_shutdown_function<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$args<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "register_tick_function": [
        "Register a function for execution on each tick",
        "<span class=\"methodname\">register_tick_function<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$args<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "rename": [
        "Renames a file or directory",
        "<span class=\"methodname\">rename<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $oldname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $newname<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "reset": [
        "Set the internal pointer of an array to its first element",
        "<span class=\"methodname\">reset<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">object<\/span><\/span> &$array<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "ResourceBundle": [
        "Create a resource bundle",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ResourceBundle::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $bundlename<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $fallback<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "resourcebundle_count": [
        "Get number of elements in the bundle",
        "<span class=\"methodname\">resourcebundle_count<\/span> ( <span class=\"methodparam\"><span class=\"type\">ResourceBundle<\/span> $r<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "resourcebundle_create": [
        "Create a resource bundle",
        "<span class=\"methodname\">resourcebundle_create<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $locale<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $bundlename<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $fallback<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">ResourceBundle<\/span>"
    ],
    "resourcebundle_get": [
        "Get data from the bundle",
        "<span class=\"methodname\">resourcebundle_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">ResourceBundle<\/span> $r<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span><\/span> $index<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $fallback<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "resourcebundle_get_error_code": [
        "Get bundle's last error code",
        "<span class=\"methodname\">resourcebundle_get_error_code<\/span> ( <span class=\"methodparam\"><span class=\"type\">ResourceBundle<\/span> $r<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "resourcebundle_get_error_message": [
        "Get bundle's last error message",
        "<span class=\"methodname\">resourcebundle_get_error_message<\/span> ( <span class=\"methodparam\"><span class=\"type\">ResourceBundle<\/span> $r<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "resourcebundle_locales": [
        "Get supported locales",
        "<span class=\"methodname\">resourcebundle_locales<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $bundlename<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "restore_error_handler": [
        "Restores the previous error handler function",
        "<span class=\"methodname\">restore_error_handler<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "restore_exception_handler": [
        "Restores the previously defined exception handler function",
        "<span class=\"methodname\">restore_exception_handler<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "restore_include_path": [
        "Restores the value of the include_path configuration option",
        "<span class=\"methodname\">restore_include_path<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "rewind": [
        "Rewind the position of a file pointer",
        "<span class=\"methodname\">rewind<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "rewinddir": [
        "Rewind directory handle",
        "<span class=\"methodname\">rewinddir<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $dir_handle<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "rmdir": [
        "Removes directory",
        "<span class=\"methodname\">rmdir<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $dirname<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "round": [
        "Rounds a float",
        "<span class=\"methodname\">round<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $val<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $precision<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = PHP_ROUND_HALF_UP<\/span><\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "rpmaddtag": [
        "Add tag retrieved in query",
        "<span class=\"methodname\">rpmaddtag<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $tag<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "rpmdbinfo": [
        "Get information from installed RPM",
        "<span class=\"methodname\">rpmdbinfo<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $nevr<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $full<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "rpmdbsearch": [
        "Search RPM packages",
        "<span class=\"methodname\">rpmdbsearch<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $rpmtag<span class=\"initializer\"> = RPMTAG_NAME<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $rpmmire<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $full<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "rpminfo": [
        "Get information from a RPM file",
        "<span class=\"methodname\">rpminfo<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $full<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$error<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "rpmvercmp": [
        "RPM version comparison",
        "<span class=\"methodname\">rpmvercmp<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $evr1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $evr2<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "rrd_create": [
        "Creates rrd database file",
        "<span class=\"methodname\">rrd_create<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "rrd_error": [
        "Gets latest error message",
        "<span class=\"methodname\">rrd_error<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "rrd_fetch": [
        "Fetch the data for graph as array",
        "<span class=\"methodname\">rrd_fetch<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "rrd_first": [
        "Gets the timestamp of the first sample from rrd file",
        "<span class=\"methodname\">rrd_first<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $file<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $raaindex<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "rrd_graph": [
        "Creates image from a data",
        "<span class=\"methodname\">rrd_graph<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "rrd_info": [
        "Gets information about rrd file",
        "<span class=\"methodname\">rrd_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "rrd_last": [
        "Gets unix timestamp of the last sample",
        "<span class=\"methodname\">rrd_last<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "rrd_lastupdate": [
        "Gets information about last updated data",
        "<span class=\"methodname\">rrd_lastupdate<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "rrd_restore": [
        "Restores the RRD file from XML dump",
        "<span class=\"methodname\">rrd_restore<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $xml_file<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $rrd_file<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "rrd_tune": [
        "Tunes some RRD database file header options",
        "<span class=\"methodname\">rrd_tune<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "rrd_update": [
        "Updates the RRD database",
        "<span class=\"methodname\">rrd_update<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "rrd_version": [
        "Gets information about underlying rrdtool library",
        "<span class=\"methodname\">rrd_version<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "rrd_xport": [
        "Exports the information about RRD database",
        "<span class=\"methodname\">rrd_xport<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "rrdc_disconnect": [
        "Close any outstanding connection to rrd caching daemon",
        "<span class=\"methodname\">rrdc_disconnect<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "RRDCreator": [
        "Class for creation of RRD database file.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">RRDCreator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $startTime<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $step<span class=\"initializer\"> = 0<\/span><\/span> )"
    ],
    "RRDGraph": [
        "Class for exporting data from RRD database to image file.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">RRDGraph::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> )"
    ],
    "RRDUpdater": [
        "Class for updating RDD database file.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">RRDUpdater::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> )"
    ],
    "rsort": [
        "Sort an array in reverse order",
        "<span class=\"methodname\">rsort<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = SORT_REGULAR<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "rtrim": [
        "Strip whitespace (or other characters) from the end of a string",
        "<span class=\"methodname\">rtrim<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $characters<span class=\"initializer\"> = \" \\n\\r\\t\\v\\0\"<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "runkit7_constant_add": [
        "Similar to define(), but allows defining in class definitions as well",
        "<span class=\"methodname\">runkit7_constant_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $constname<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $newVisibility<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "runkit7_constant_redefine": [
        "Redefine an already defined constant",
        "<span class=\"methodname\">runkit7_constant_redefine<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $constname<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $newVisibility<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "runkit7_constant_remove": [
        "Remove\/Delete an already defined constant",
        "<span class=\"methodname\">runkit7_constant_remove<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $constname<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "runkit7_function_add": [
        "Add a new function, similar to create_function()",
        "<span class=\"methodname\">runkit7_function_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $funcname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $arglist<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $code<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $return_by_reference<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $doc_comment<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $return_type<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $is_strict<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">runkit7_function_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $funcname<\/span> , <span class=\"methodparam\"><span class=\"type\">Closure<\/span> $closure<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $doc_comment<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $return_type<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $is_strict<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "runkit7_function_copy": [
        "Copy a function to a new function name",
        "<span class=\"methodname\">runkit7_function_copy<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $funcname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $targetname<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "runkit7_function_redefine": [
        "Replace a function definition with a new implementation",
        "<span class=\"methodname\">runkit7_function_redefine<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $funcname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $arglist<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $code<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $return_by_reference<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $doc_comment<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $return_type<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $is_strict<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">runkit7_function_redefine<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $funcname<\/span> , <span class=\"methodparam\"><span class=\"type\">Closure<\/span> $closure<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $doc_comment<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $return_type<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $is_strict<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "runkit7_function_remove": [
        "Remove a function definition",
        "<span class=\"methodname\">runkit7_function_remove<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $funcname<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "runkit7_function_rename": [
        "Change a function's name",
        "<span class=\"methodname\">runkit7_function_rename<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $funcname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $newname<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "runkit7_import": [
        "Process a PHP file importing function and class definitions, overwriting where appropriate",
        "<span class=\"methodname\">runkit7_import<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "runkit7_method_add": [
        "Dynamically adds a new method to a given class",
        "<span class=\"methodname\">runkit7_method_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $classname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $methodname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $args<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $code<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = RUNKIT7_ACC_PUBLIC<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $doc_comment<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $return_type<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $is_strict<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">runkit7_method_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $classname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $methodname<\/span> , <span class=\"methodparam\"><span class=\"type\">Closure<\/span> $closure<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = RUNKIT7_ACC_PUBLIC<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $doc_comment<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $return_type<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $is_strict<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "runkit7_method_copy": [
        "Copies a method from class to another",
        "<span class=\"methodname\">runkit7_method_copy<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $dClass<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dMethod<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $sClass<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $sMethod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "runkit7_method_redefine": [
        "Dynamically changes the code of the given method",
        "<span class=\"methodname\">runkit7_method_redefine<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $classname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $methodname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $args<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $code<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = RUNKIT7_ACC_PUBLIC<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $doc_comment<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $return_type<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $is_strict<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">runkit7_method_redefine<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $classname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $methodname<\/span> , <span class=\"methodparam\"><span class=\"type\">Closure<\/span> $closure<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = RUNKIT7_ACC_PUBLIC<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $doc_comment<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $return_type<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $is_strict<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "runkit7_method_remove": [
        "Dynamically removes the given method",
        "<span class=\"methodname\">runkit7_method_remove<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $classname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $methodname<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "runkit7_method_rename": [
        "Dynamically changes the name of the given method",
        "<span class=\"methodname\">runkit7_method_rename<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $classname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $methodname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $newname<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "runkit7_object_id": [
        "Return the integer object handle for given object",
        "<span class=\"methodname\">runkit7_object_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">object<\/span> $obj<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "runkit7_superglobals": [
        "Return numerically indexed array of registered superglobals",
        "<span class=\"methodname\">runkit7_superglobals<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "runkit7_zval_inspect": [
        "Returns information about the passed in value with data types, reference counts, etc",
        "<span class=\"methodname\">runkit7_zval_inspect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "RuntimeException": [
        "Exception thrown if an error which can only be found on runtime occurs."
    ],
    "sapi_windows_cp_conv": [
        "Convert string from one codepage to another",
        "<span class=\"methodname\">sapi_windows_cp_conv<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $in_codepage<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">string<\/span><\/span> $out_codepage<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $subject<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sapi_windows_cp_get": [
        "Get current codepage",
        "<span class=\"methodname\">sapi_windows_cp_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $kind<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "sapi_windows_cp_is_utf8": [
        "Indicates whether the codepage is UTF-8 compatible",
        "<span class=\"methodname\">sapi_windows_cp_is_utf8<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "sapi_windows_cp_set": [
        "Set process codepage",
        "<span class=\"methodname\">sapi_windows_cp_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $cp<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sapi_windows_generate_ctrl_event": [
        "Send a CTRL event to another process",
        "<span class=\"methodname\">sapi_windows_generate_ctrl_event<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $event<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pid<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sapi_windows_set_ctrl_handler": [
        "Set or remove a CTRL event handler",
        "<span class=\"methodname\">sapi_windows_set_ctrl_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callable<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $add<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sapi_windows_vt100_support": [
        "Get or set VT100 support for the specified stream associated to an output buffer of a Windows console.",
        "<span class=\"methodname\">sapi_windows_vt100_support<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $enable<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "scandir": [
        "List files and directories inside the specified path",
        "<span class=\"methodname\">scandir<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $directory<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $sorting_order<span class=\"initializer\"> = SCANDIR_SORT_ASCENDING<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "scoutapm_get_calls": [
        "Returns a list of instrumented calls that have occurred",
        "<span class=\"methodname\">scoutapm_get_calls<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "scoutapm_list_instrumented_functions": [
        "List functions scoutapm will instrument.",
        "<span class=\"methodname\">scoutapm_list_instrumented_functions<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "SeasLog": [
        "Description",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SeasLog::__construct<\/span> ( )"
    ],
    "seaslog_get_author": [
        "Get SeasLog author.",
        "<span class=\"methodname\">seaslog_get_author<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "seaslog_get_version": [
        "Get SeasLog version.",
        "<span class=\"methodname\">seaslog_get_version<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "SeekableIterator": [
        "The Seekable iterator."
    ],
    "sem_acquire": [
        "Acquire a semaphore",
        "<span class=\"methodname\">sem_acquire<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type SysvSemaphore\">SysvSemaphore<\/span><\/span> $semaphore<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $non_blocking<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sem_get": [
        "Get a semaphore id",
        "<span class=\"methodname\">sem_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max_acquire<span class=\"initializer\"> = 1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $permissions<span class=\"initializer\"> = 0666<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $auto_release<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\"><span class=\"type\"><span class=\"type SysvSemaphore\">SysvSemaphore<\/span><\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "sem_release": [
        "Release a semaphore",
        "<span class=\"methodname\">sem_release<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type SysvSemaphore\">SysvSemaphore<\/span><\/span> $semaphore<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sem_remove": [
        "Remove a semaphore",
        "<span class=\"methodname\">sem_remove<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type SysvSemaphore\">SysvSemaphore<\/span><\/span> $semaphore<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "Serializable": [
        "Interface for customized serializing."
    ],
    "serialize": [
        "Generates a storable representation of a value",
        "<span class=\"methodname\">serialize<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "session_abort": [
        "Discard session array changes and finish session",
        "<span class=\"methodname\">session_abort<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "session_cache_expire": [
        "Get and\/or set current cache expire",
        "<span class=\"methodname\">session_cache_expire<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $value<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "session_cache_limiter": [
        "Get and\/or set the current cache limiter",
        "<span class=\"methodname\">session_cache_limiter<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $value<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "session_create_id": [
        "Create new session id",
        "<span class=\"methodname\">session_create_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $prefix<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "session_decode": [
        "Decodes session data from a session encoded string",
        "<span class=\"methodname\">session_decode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "session_destroy": [
        "Destroys all data registered to a session",
        "<span class=\"methodname\">session_destroy<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "session_encode": [
        "Encodes the current session data as a session encoded string",
        "<span class=\"methodname\">session_encode<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "session_gc": [
        "Perform session data garbage collection",
        "<span class=\"methodname\">session_gc<\/span> ( ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "session_get_cookie_params": [
        "Get the session cookie parameters",
        "<span class=\"methodname\">session_get_cookie_params<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "session_id": [
        "Get and\/or set the current session id",
        "<span class=\"methodname\">session_id<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $id<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "session_is_registered": [
        "Find out whether a global variable is registered in a session",
        "<span class=\"methodname\">session_is_registered<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "session_module_name": [
        "Get and\/or set the current session module",
        "<span class=\"methodname\">session_module_name<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $module<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "session_name": [
        "Get and\/or set the current session name",
        "<span class=\"methodname\">session_name<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $name<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "session_regenerate_id": [
        "Update the current session id with a newly generated one",
        "<span class=\"methodname\">session_regenerate_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $delete_old_session<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "session_register_shutdown": [
        "Session shutdown function",
        "<span class=\"methodname\">session_register_shutdown<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "session_reset": [
        "Re-initialize session array with original values",
        "<span class=\"methodname\">session_reset<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "session_save_path": [
        "Get and\/or set the current session save path",
        "<span class=\"methodname\">session_save_path<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $path<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "session_set_cookie_params": [
        "Set the session cookie parameters",
        "<span class=\"methodname\">session_set_cookie_params<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $lifetime_or_options<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $path<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $domain<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">bool<\/span>|<span class=\"type\">null<\/span><\/span> $secure<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">bool<\/span>|<span class=\"type\">null<\/span><\/span> $httponly<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">session_set_cookie_params<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $lifetime_or_options<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "session_set_save_handler": [
        "Sets user-level session storage functions",
        "<span class=\"methodname\">session_set_save_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $read<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $write<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $destroy<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $gc<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $create_sid<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $validate_sid<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $update_timestamp<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">session_set_save_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">object<\/span> $sessionhandler<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $register_shutdown<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "session_start": [
        "Start new or resume existing session",
        "<span class=\"methodname\">session_start<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = []<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "session_status": [
        "Returns the current session status",
        "<span class=\"methodname\">session_status<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "session_unregister": [
        "Unregister a global variable from the current session",
        "<span class=\"methodname\">session_unregister<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "session_unset": [
        "Free all session variables",
        "<span class=\"methodname\">session_unset<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "session_write_close": [
        "Write session data and end session",
        "<span class=\"methodname\">session_write_close<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "SessionHandler": [
        "SessionHandler is a special class that can be used to expose the current internal PHP session save handler by inheritance. There are seven methods which wrap the seven internal session save handler callbacks (open, close, read, write, destroy, gc and create_sid). By default, this class will wrap whatever internal save handler is set as defined by the session.save_handler configuration directive which is usually files by default. Other internal session save handlers are provided by PHP extensions such as SQLite (as sqlite), Memcache (as memcache), and Memcached (as memcached)."
    ],
    "SessionHandlerInterface": [
        "SessionHandlerInterface is an interface which defines the minimal prototype for creating a custom session handler. In order to pass a custom session handler to session_set_save_handler() using its OOP invocation, the class can implement this interface."
    ],
    "SessionIdInterface": [
        "SessionIdInterface is an interface which defines optional methods for creating a custom session handler. In order to pass a custom session handler to session_set_save_handler() using its OOP invocation, the class can implement this interface."
    ],
    "SessionUpdateTimestampHandlerInterface": [
        "SessionUpdateTimestampHandlerInterface is an interface which defines optional methods for creating a custom session handler. In order to pass a custom session handler to session_set_save_handler() using its OOP invocation, the class can implement this interface."
    ],
    "set_error_handler": [
        "Sets a user-defined error handler function",
        "<span class=\"methodname\">set_error_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $error_handler<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $error_types<span class=\"initializer\"> = E_ALL | E_STRICT<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "set_exception_handler": [
        "Sets a user-defined exception handler function",
        "<span class=\"methodname\">set_exception_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $exception_handler<\/span> ) : <span class=\"type\">callable<\/span>"
    ],
    "set_include_path": [
        "Sets the include_path configuration option",
        "<span class=\"methodname\">set_include_path<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $include_path<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "set_time_limit": [
        "Limits the maximum execution time",
        "<span class=\"methodname\">set_time_limit<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $seconds<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "setcookie": [
        "Send a cookie",
        "<span class=\"methodname\">setcookie<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $expires<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $domain<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $secure<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $httponly<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">setcookie<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = []<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "setlocale": [
        "Set locale information",
        "<span class=\"methodname\">setlocale<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $category<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $locales<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> ...$rest<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>",
        "<span class=\"methodname\">setlocale<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $category<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $locale_array<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "setproctitle": [
        "Set the process title",
        "<span class=\"methodname\">setproctitle<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $title<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "setrawcookie": [
        "Send a cookie without urlencoding the cookie value",
        "<span class=\"methodname\">setrawcookie<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $expires<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $domain<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $secure<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $httponly<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">setrawcookie<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = []<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "setthreadtitle": [
        "Set the thread title",
        "<span class=\"methodname\">setthreadtitle<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $title<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "settype": [
        "Set the type of a variable",
        "<span class=\"methodname\">settype<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> &$var<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $type<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sha1": [
        "Calculate the sha1 hash of a string",
        "<span class=\"methodname\">sha1<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $binary<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sha1_file": [
        "Calculate the sha1 hash of a file",
        "<span class=\"methodname\">sha1_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $binary<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "shell_exec": [
        "Execute command via shell and return the complete output as a string",
        "<span class=\"methodname\">shell_exec<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $cmd<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "shm_attach": [
        "Creates or open a shared memory segment",
        "<span class=\"methodname\">shm_attach<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $size<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $permissions<span class=\"initializer\"> = 0666<\/span><\/span> ) : <span class=\"type\"><span class=\"type\"><span class=\"type SysvSharedMemory\">SysvSharedMemory<\/span><\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "shm_detach": [
        "Disconnects from shared memory segment",
        "<span class=\"methodname\">shm_detach<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type SysvSharedMemory\">SysvSharedMemory<\/span><\/span> $shm<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "shm_get_var": [
        "Returns a variable from shared memory",
        "<span class=\"methodname\">shm_get_var<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type SysvSharedMemory\">SysvSharedMemory<\/span><\/span> $shm<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $key<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "shm_has_var": [
        "Check whether a specific entry exists",
        "<span class=\"methodname\">shm_has_var<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type SysvSharedMemory\">SysvSharedMemory<\/span><\/span> $shm<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $key<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "shm_put_var": [
        "Inserts or updates a variable in shared memory",
        "<span class=\"methodname\">shm_put_var<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type SysvSharedMemory\">SysvSharedMemory<\/span><\/span> $shm<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "shm_remove": [
        "Removes shared memory from Unix systems",
        "<span class=\"methodname\">shm_remove<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type SysvSharedMemory\">SysvSharedMemory<\/span><\/span> $shm<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "shm_remove_var": [
        "Removes a variable from shared memory",
        "<span class=\"methodname\">shm_remove_var<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type SysvSharedMemory\">SysvSharedMemory<\/span><\/span> $shm<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $key<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "Shmop": [
        "A fully opaque class which replaces shmop resources as of PHP 8.0.0."
    ],
    "shmop_close": [
        "Close shared memory block",
        "<span class=\"methodname\">shmop_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">Shmop<\/span> $shmop<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "shmop_delete": [
        "Delete shared memory block",
        "<span class=\"methodname\">shmop_delete<\/span> ( <span class=\"methodparam\"><span class=\"type\">Shmop<\/span> $shmop<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "shmop_open": [
        "Create or open shared memory block",
        "<span class=\"methodname\">shmop_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $permissions<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $size<\/span> ) : <span class=\"type\"><span class=\"type\">Shmop<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "shmop_read": [
        "Read data from shared memory block",
        "<span class=\"methodname\">shmop_read<\/span> ( <span class=\"methodparam\"><span class=\"type\">Shmop<\/span> $shmop<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $size<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "shmop_size": [
        "Get size of shared memory block",
        "<span class=\"methodname\">shmop_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">Shmop<\/span> $shmop<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "shmop_write": [
        "Write data into shared memory block",
        "<span class=\"methodname\">shmop_write<\/span> ( <span class=\"methodparam\"><span class=\"type\">Shmop<\/span> $shmop<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "shuffle": [
        "Shuffle an array",
        "<span class=\"methodname\">shuffle<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "similar_text": [
        "Calculate the similarity between two strings",
        "<span class=\"methodname\">similar_text<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> &$percent<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "simplexml_import_dom": [
        "Get a SimpleXMLElement object from a DOM node",
        "<span class=\"methodname\">simplexml_import_dom<\/span> ( <span class=\"methodparam\"><span class=\"type\">DOMNode<\/span> $node<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $class_name<span class=\"initializer\"> = \"SimpleXMLElement\"<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">SimpleXMLElement<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "simplexml_load_file": [
        "Interprets an XML file into an object",
        "<span class=\"methodname\">simplexml_load_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $class_name<span class=\"initializer\"> = \"SimpleXMLElement\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $ns<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $is_prefix<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">SimpleXMLElement<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "simplexml_load_string": [
        "Interprets a string of XML into an object",
        "<span class=\"methodname\">simplexml_load_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $class_name<span class=\"initializer\"> = \"SimpleXMLElement\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $ns<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $is_prefix<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">SimpleXMLElement<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "SimpleXMLElement": [
        "Represents an element in an XML document.",
        "<span class=\"modifier\">final<\/span> <span class=\"modifier\">public<\/span> <span class=\"methodname\">SimpleXMLElement::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $options<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $data_is_url<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $ns<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $is_prefix<span class=\"initializer\"> = false<\/span><\/span> )"
    ],
    "SimpleXMLIterator": [
        "The SimpleXMLIterator provides recursive iteration over all nodes of a SimpleXMLElement object."
    ],
    "sin": [
        "Sine",
        "<span class=\"methodname\">sin<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "sinh": [
        "Hyperbolic sine",
        "<span class=\"methodname\">sinh<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "sleep": [
        "Delay execution",
        "<span class=\"methodname\">sleep<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $seconds<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "SNMP": [
        "Represents SNMP session.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SNMP::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $version<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $community<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = -1<\/span><\/span> )"
    ],
    "snmp2_get": [
        "Fetch an SNMP object",
        "<span class=\"methodname\">snmp2_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $community<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $object_id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\"><span class=\"type stdClass\">stdClass<\/span><\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "snmp2_getnext": [
        "Fetch the SNMP object which follows the given object id",
        "<span class=\"methodname\">snmp2_getnext<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $community<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $object_id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\"><span class=\"type stdClass\">stdClass<\/span><\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "snmp2_real_walk": [
        "Return all objects including their respective object ID within the specified one",
        "<span class=\"methodname\">snmp2_real_walk<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $community<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $object_id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "snmp2_set": [
        "Set the value of an SNMP object",
        "<span class=\"methodname\">snmp2_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $community<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $object_id<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "snmp2_walk": [
        "Fetch all the SNMP objects from an agent",
        "<span class=\"methodname\">snmp2_walk<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $community<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $object_id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "snmp3_get": [
        "Fetch an SNMP object",
        "<span class=\"methodname\">snmp3_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $security_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $security_level<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $auth_protocol<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $auth_passphrase<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $privacy_protocol<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $privacy_passphrase<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $object_id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\"><span class=\"type stdClass\">stdClass<\/span><\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "snmp3_getnext": [
        "Fetch the SNMP object which follows the given object id",
        "<span class=\"methodname\">snmp3_getnext<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $security_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $security_level<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $auth_protocol<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $auth_passphrase<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $privacy_protocol<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $privacy_passphrase<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $object_id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\"><span class=\"type stdClass\">stdClass<\/span><\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "snmp3_real_walk": [
        "Return all objects including their respective object ID within the specified one",
        "<span class=\"methodname\">snmp3_real_walk<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $security_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $security_level<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $auth_protocol<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $auth_passphrase<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $privacy_protocol<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $privacy_passphrase<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $object_id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "snmp3_set": [
        "Set the value of an SNMP object",
        "<span class=\"methodname\">snmp3_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $security_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $security_level<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $auth_protocol<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $auth_passphrase<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $privacy_protocol<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $privacy_passphrase<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $object_id<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "snmp3_walk": [
        "Fetch all the SNMP objects from an agent",
        "<span class=\"methodname\">snmp3_walk<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $security_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $security_level<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $auth_protocol<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $auth_passphrase<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $privacy_protocol<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $privacy_passphrase<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $object_id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "snmp_get_quick_print": [
        "Fetches the current value of the NET-SNMP library's quick_print setting",
        "<span class=\"methodname\">snmp_get_quick_print<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "snmp_get_valueretrieval": [
        "Return the method how the SNMP values will be returned",
        "<span class=\"methodname\">snmp_get_valueretrieval<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "snmp_read_mib": [
        "Reads and parses a MIB file into the active MIB tree",
        "<span class=\"methodname\">snmp_read_mib<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "snmp_set_enum_print": [
        "Return all values that are enums with their enum value instead of the raw integer",
        "<span class=\"methodname\">snmp_set_enum_print<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $enable<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "snmp_set_oid_numeric_print": [
        "Set the OID output format",
        "<span class=\"methodname\">snmp_set_oid_numeric_print<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $format<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "snmp_set_oid_output_format": [
        "Set the OID output format",
        "<span class=\"methodname\">snmp_set_oid_output_format<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $format<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "snmp_set_quick_print": [
        "Set the value of enable within the NET-SNMP library",
        "<span class=\"methodname\">snmp_set_quick_print<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $enable<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "snmp_set_valueretrieval": [
        "Specify the method how the SNMP values will be returned",
        "<span class=\"methodname\">snmp_set_valueretrieval<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $method<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "SNMPException": [
        "Represents an error raised by SNMP. You should not throw a SNMPException from your own code. See Exceptions for more information about Exceptions in PHP."
    ],
    "snmpget": [
        "Fetch an SNMP object",
        "<span class=\"methodname\">snmpget<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $community<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $object_id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\"><span class=\"type stdClass\">stdClass<\/span><\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "snmpgetnext": [
        "Fetch the SNMP object which follows the given object id",
        "<span class=\"methodname\">snmpgetnext<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $community<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $object_id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\"><span class=\"type stdClass\">stdClass<\/span><\/span>|<span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "snmprealwalk": [
        "Return all objects including their respective object ID within the specified one",
        "<span class=\"methodname\">snmprealwalk<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $community<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $object_id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "snmpset": [
        "Set the value of an SNMP object",
        "<span class=\"methodname\">snmpset<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $community<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $object_id<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "snmpwalk": [
        "Fetch all the SNMP objects from an agent",
        "<span class=\"methodname\">snmpwalk<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $community<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $object_id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "snmpwalkoid": [
        "Query for a tree of information about a network entity",
        "<span class=\"methodname\">snmpwalkoid<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $community<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $object_id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $retries<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "SoapClient": [
        "The SoapClient class provides a client for \u00bb\u00a0SOAP 1.1, \u00bb\u00a0SOAP 1.2 servers. It can be used in WSDL or non-WSDL mode.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SoapClient::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $wsdl<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = []<\/span><\/span> )"
    ],
    "SoapFault": [
        "Represents a SOAP fault.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SoapFault::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $code<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $actor<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $details<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $name<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $headerFault<span class=\"initializer\"> = null<\/span><\/span> )"
    ],
    "SoapHeader": [
        "Represents a SOAP header.",
        "<span class=\"methodname\">SoapHeader::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $namespace<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $mustunderstand<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $actor<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "SoapParam": [
        "Represents parameter to a SOAP call.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SoapParam::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> )"
    ],
    "SoapServer": [
        "The SoapServer class provides a server for the \u00bb\u00a0SOAP 1.1 and \u00bb\u00a0SOAP 1.2 protocols. It can be used with or without a WSDL service description.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SoapServer::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $wsdl<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = []<\/span><\/span> )"
    ],
    "SoapVar": [
        "A class representing a variable or object for use with SOAP services.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SoapVar::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $typeName<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $typeNamespace<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $nodeName<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $nodeNamespace<span class=\"initializer\"> = \"\"<\/span><\/span> )"
    ],
    "Socket": [
        "A fully opaque class which replaces Socket resources as of PHP 8.0.0."
    ],
    "socket_accept": [
        "Accepts a connection on a socket",
        "<span class=\"methodname\">socket_accept<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> ) : <span class=\"type\"><span class=\"type\">Socket<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_addrinfo_bind": [
        "Create and bind to a socket from a given addrinfo",
        "<span class=\"methodname\">socket_addrinfo_bind<\/span> ( <span class=\"methodparam\"><span class=\"type\">AddressInfo<\/span> $address<\/span> ) : <span class=\"type\"><span class=\"type\">Socket<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_addrinfo_connect": [
        "Create and connect to a socket from a given addrinfo",
        "<span class=\"methodname\">socket_addrinfo_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">AddressInfo<\/span> $address<\/span> ) : <span class=\"type\"><span class=\"type\">Socket<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_addrinfo_explain": [
        "Get information about addrinfo",
        "<span class=\"methodname\">socket_addrinfo_explain<\/span> ( <span class=\"methodparam\"><span class=\"type\">AddressInfo<\/span> $address<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "socket_addrinfo_lookup": [
        "Get array with contents of getaddrinfo about the given hostname",
        "<span class=\"methodname\">socket_addrinfo_lookup<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $host<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $service<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $hints<span class=\"initializer\"> = []<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_bind": [
        "Binds a name to a socket",
        "<span class=\"methodname\">socket_bind<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $address<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $port<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "socket_clear_error": [
        "Clears the error on the socket or the last error code",
        "<span class=\"methodname\">socket_clear_error<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">Socket<\/span>|<span class=\"type\">null<\/span><\/span> $socket<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "socket_close": [
        "Closes a Socket instance",
        "<span class=\"methodname\">socket_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "socket_cmsg_space": [
        "Calculate message buffer size",
        "<span class=\"methodname\">socket_cmsg_space<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $level<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $num<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "socket_connect": [
        "Initiates a connection on a socket",
        "<span class=\"methodname\">socket_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $address<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $port<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "socket_create": [
        "Create a socket (endpoint for communication)",
        "<span class=\"methodname\">socket_create<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $domain<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $protocol<\/span> ) : <span class=\"type\"><span class=\"type\">Socket<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_create_listen": [
        "Opens a socket on port to accept connections",
        "<span class=\"methodname\">socket_create_listen<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $port<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $backlog<span class=\"initializer\"> = 128<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">Socket<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_create_pair": [
        "Creates a pair of indistinguishable sockets and stores them in an array",
        "<span class=\"methodname\">socket_create_pair<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $domain<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $protocol<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$pair<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "socket_export_stream": [
        "Export a socket into a stream that encapsulates a socket",
        "<span class=\"methodname\">socket_export_stream<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_get_option": [
        "Gets socket options for the socket",
        "<span class=\"methodname\">socket_get_option<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $level<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_getpeername": [
        "Queries the remote side of the given socket which may either result in host\/port or in a Unix filesystem path, dependent on its type",
        "<span class=\"methodname\">socket_getpeername<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$address<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$port<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "socket_getsockname": [
        "Queries the local side of the given socket which may either result in host\/port or in a Unix filesystem path, dependent on its type",
        "<span class=\"methodname\">socket_getsockname<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$address<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$port<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "socket_import_stream": [
        "Import a stream",
        "<span class=\"methodname\">socket_import_stream<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> ) : <span class=\"type\"><span class=\"type\">Socket<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_last_error": [
        "Returns the last error on the socket",
        "<span class=\"methodname\">socket_last_error<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">Socket<\/span>|<span class=\"type\">null<\/span><\/span> $socket<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "socket_listen": [
        "Listens for a connection on a socket",
        "<span class=\"methodname\">socket_listen<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $backlog<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "socket_read": [
        "Reads a maximum of length bytes from a socket",
        "<span class=\"methodname\">socket_read<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = PHP_BINARY_READ<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_recv": [
        "Receives data from a connected socket",
        "<span class=\"methodname\">socket_recv<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> &$data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_recvfrom": [
        "Receives data from a socket whether or not it is connection-oriented",
        "<span class=\"methodname\">socket_recvfrom<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$address<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$port<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_recvmsg": [
        "Read a message",
        "<span class=\"methodname\">socket_recvmsg<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$message<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_select": [
        "Runs the select() system call on the given arrays of sockets with a specified timeout",
        "<span class=\"methodname\">socket_select<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> &$read<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> &$write<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> &$except<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $seconds<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $microseconds<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_send": [
        "Sends data to a connected socket",
        "<span class=\"methodname\">socket_send<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_sendmsg": [
        "Send a message",
        "<span class=\"methodname\">socket_sendmsg<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_sendto": [
        "Sends a message to a socket, whether it is connected or not",
        "<span class=\"methodname\">socket_sendto<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $address<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $port<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_set_block": [
        "Sets blocking mode on a socket",
        "<span class=\"methodname\">socket_set_block<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "socket_set_nonblock": [
        "Sets nonblocking mode for file descriptor fd",
        "<span class=\"methodname\">socket_set_nonblock<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "socket_set_option": [
        "Sets socket options for the socket",
        "<span class=\"methodname\">socket_set_option<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $level<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">int<\/span><\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "socket_shutdown": [
        "Shuts down a socket for receiving, sending, or both",
        "<span class=\"methodname\">socket_shutdown<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = 2<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "socket_strerror": [
        "Return a string describing a socket error",
        "<span class=\"methodname\">socket_strerror<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $error_code<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "socket_write": [
        "Write to a socket",
        "<span class=\"methodname\">socket_write<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $length<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_wsaprotocol_info_export": [
        "Exports the WSAPROTOCOL_INFO Structure",
        "<span class=\"methodname\">socket_wsaprotocol_info_export<\/span> ( <span class=\"methodparam\"><span class=\"type\">Socket<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $process_id<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_wsaprotocol_info_import": [
        "Imports a Socket from another Process",
        "<span class=\"methodname\">socket_wsaprotocol_info_import<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $info_id<\/span> ) : <span class=\"type\"><span class=\"type\">Socket<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "socket_wsaprotocol_info_release": [
        "Releases an exported WSAPROTOCOL_INFO Structure",
        "<span class=\"methodname\">socket_wsaprotocol_info_release<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $info_id<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sodium_add": [
        "Add large numbers",
        "<span class=\"methodname\">sodium_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> &$string1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string2<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "sodium_base642bin": [
        "Description",
        "<span class=\"methodname\">sodium_base642bin<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $ignore<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_bin2base64": [
        "Description",
        "<span class=\"methodname\">sodium_bin2base64<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $id<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_bin2hex": [
        "Encode to hexadecimal",
        "<span class=\"methodname\">sodium_bin2hex<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_compare": [
        "Compare large numbers",
        "<span class=\"methodname\">sodium_compare<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string2<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "sodium_crypto_aead_aes256gcm_decrypt": [
        "Decrypt in combined mode with precalculation",
        "<span class=\"methodname\">sodium_crypto_aead_aes256gcm_decrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $ciphertext<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $additional_data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $nonce<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "sodium_crypto_aead_aes256gcm_encrypt": [
        "Encrypt in combined mode with precalculation",
        "<span class=\"methodname\">sodium_crypto_aead_aes256gcm_encrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $additional_data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $nonce<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_aead_aes256gcm_is_available": [
        "Check if hardware supports AES256-GCM",
        "<span class=\"methodname\">sodium_crypto_aead_aes256gcm_is_available<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "sodium_crypto_aead_aes256gcm_keygen": [
        "Get random bytes for key",
        "<span class=\"methodname\">sodium_crypto_aead_aes256gcm_keygen<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_aead_chacha20poly1305_decrypt": [
        "Verify that the ciphertext includes a valid tag",
        "<span class=\"methodname\">sodium_crypto_aead_chacha20poly1305_decrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $ciphertext<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $additional_data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $nonce<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "sodium_crypto_aead_chacha20poly1305_encrypt": [
        "Encrypt a message",
        "<span class=\"methodname\">sodium_crypto_aead_chacha20poly1305_encrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $additional_data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $nonce<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_aead_chacha20poly1305_ietf_decrypt": [
        "Verify that the ciphertext includes a valid tag",
        "<span class=\"methodname\">sodium_crypto_aead_chacha20poly1305_ietf_decrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $ciphertext<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $additional_data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $nonce<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "sodium_crypto_aead_chacha20poly1305_ietf_encrypt": [
        "Encrypt a message",
        "<span class=\"methodname\">sodium_crypto_aead_chacha20poly1305_ietf_encrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $additional_data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $nonce<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_aead_chacha20poly1305_ietf_keygen": [
        "Get random bytes for key",
        "<span class=\"methodname\">sodium_crypto_aead_chacha20poly1305_ietf_keygen<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_aead_chacha20poly1305_keygen": [
        "Get random bytes for key",
        "<span class=\"methodname\">sodium_crypto_aead_chacha20poly1305_keygen<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_aead_xchacha20poly1305_ietf_decrypt": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_aead_xchacha20poly1305_ietf_decrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $ciphertext<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $additional_data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $nonce<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "sodium_crypto_aead_xchacha20poly1305_ietf_encrypt": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_aead_xchacha20poly1305_ietf_encrypt<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $additional_data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $nonce<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_aead_xchacha20poly1305_ietf_keygen": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_aead_xchacha20poly1305_ietf_keygen<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_auth": [
        "Compute a tag for the message",
        "<span class=\"methodname\">sodium_crypto_auth<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_auth_keygen": [
        "Get random bytes for key",
        "<span class=\"methodname\">sodium_crypto_auth_keygen<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_auth_verify": [
        "Verifies that the tag is valid for the message",
        "<span class=\"methodname\">sodium_crypto_auth_verify<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $mac<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sodium_crypto_box": [
        "Encrypt a message",
        "<span class=\"methodname\">sodium_crypto_box<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $nonce<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key_pair<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_box_keypair": [
        "Randomly generate a secret key and a corresponding public key",
        "<span class=\"methodname\">sodium_crypto_box_keypair<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_box_keypair_from_secretkey_and_publickey": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_box_keypair_from_secretkey_and_publickey<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $secret_key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $public_key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_box_open": [
        "Verify and decrypt a ciphertext",
        "<span class=\"methodname\">sodium_crypto_box_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $ciphertext<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $nonce<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key_pair<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "sodium_crypto_box_publickey": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_box_publickey<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key_pair<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_box_publickey_from_secretkey": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_box_publickey_from_secretkey<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $secret_key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_box_seal": [
        "Encrypt a message",
        "<span class=\"methodname\">sodium_crypto_box_seal<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key_pair<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_box_seal_open": [
        "Decrypt the ciphertext",
        "<span class=\"methodname\">sodium_crypto_box_seal_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $ciphertext<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key_pair<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "sodium_crypto_box_secretkey": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_box_secretkey<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key_pair<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_box_seed_keypair": [
        "Deterministically derive the key pair from a single key",
        "<span class=\"methodname\">sodium_crypto_box_seed_keypair<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $seed<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_generichash": [
        "Get a hash of the message",
        "<span class=\"methodname\">sodium_crypto_generichash<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<span class=\"initializer\"> = SODIUM_CRYPTO_GENERICHASH_BYTES<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_generichash_final": [
        "Complete the hash",
        "<span class=\"methodname\">sodium_crypto_generichash_final<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> &$state<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<span class=\"initializer\"> = SODIUM_CRYPTO_GENERICHASH_BYTES<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_generichash_init": [
        "Initialize a hash",
        "<span class=\"methodname\">sodium_crypto_generichash_init<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<span class=\"initializer\"> = SODIUM_CRYPTO_GENERICHASH_BYTES<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_generichash_keygen": [
        "Get random bytes for key",
        "<span class=\"methodname\">sodium_crypto_generichash_keygen<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_generichash_update": [
        "Add message to a hash",
        "<span class=\"methodname\">sodium_crypto_generichash_update<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> &$state<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sodium_crypto_kdf_derive_from_key": [
        "Derive a subkey",
        "<span class=\"methodname\">sodium_crypto_kdf_derive_from_key<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $subkey_length<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $subkey_id<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $context<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_kdf_keygen": [
        "Get random bytes for key",
        "<span class=\"methodname\">sodium_crypto_kdf_keygen<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_kx_client_session_keys": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_kx_client_session_keys<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $client_key_pair<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $server_key<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "sodium_crypto_kx_keypair": [
        "Creates a new sodium keypair",
        "<span class=\"methodname\">sodium_crypto_kx_keypair<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_kx_publickey": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_kx_publickey<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key_pair<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_kx_secretkey": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_kx_secretkey<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key_pair<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_kx_seed_keypair": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_kx_seed_keypair<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $seed<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_kx_server_session_keys": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_kx_server_session_keys<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $server_key_pair<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $client_key<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "sodium_crypto_pwhash": [
        "Derive a key from a password",
        "<span class=\"methodname\">sodium_crypto_pwhash<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $salt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $opslimit<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $memlimit<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $algo<span class=\"initializer\"> = SODIUM_CRYPTO_PWHASH_ALG_DEFAULT<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_pwhash_scryptsalsa208sha256": [
        "Derives a key from a password",
        "<span class=\"methodname\">sodium_crypto_pwhash_scryptsalsa208sha256<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $salt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $opslimit<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $memlimit<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_pwhash_scryptsalsa208sha256_str": [
        "Get an ASCII encoded hash",
        "<span class=\"methodname\">sodium_crypto_pwhash_scryptsalsa208sha256_str<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $opslimit<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $memlimit<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_pwhash_scryptsalsa208sha256_str_verify": [
        "Verify that the password is a valid password verification string",
        "<span class=\"methodname\">sodium_crypto_pwhash_scryptsalsa208sha256_str_verify<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hash<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sodium_crypto_pwhash_str": [
        "Get an ASCII-encoded hash",
        "<span class=\"methodname\">sodium_crypto_pwhash_str<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $opslimit<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $memlimit<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_pwhash_str_needs_rehash": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_pwhash_str_needs_rehash<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $opslimit<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $memlimit<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sodium_crypto_pwhash_str_verify": [
        "Verifies that a password matches a hash",
        "<span class=\"methodname\">sodium_crypto_pwhash_str_verify<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hash<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sodium_crypto_scalarmult": [
        "Compute a shared secret given a user's secret key and another user's public key",
        "<span class=\"methodname\">sodium_crypto_scalarmult<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $n<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $p<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_secretbox": [
        "Encrypt a message",
        "<span class=\"methodname\">sodium_crypto_secretbox<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $nonce<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_secretbox_keygen": [
        "Get random bytes for key",
        "<span class=\"methodname\">sodium_crypto_secretbox_keygen<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_secretbox_open": [
        "Verify and decrypt a ciphertext",
        "<span class=\"methodname\">sodium_crypto_secretbox_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $ciphertext<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $nonce<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "sodium_crypto_secretstream_xchacha20poly1305_init_pull": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_secretstream_xchacha20poly1305_init_pull<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $header<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_secretstream_xchacha20poly1305_init_push": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_secretstream_xchacha20poly1305_init_push<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "sodium_crypto_secretstream_xchacha20poly1305_keygen": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_secretstream_xchacha20poly1305_keygen<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_secretstream_xchacha20poly1305_pull": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_secretstream_xchacha20poly1305_pull<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> &$state<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $ciphertext<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $additional_data<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "sodium_crypto_secretstream_xchacha20poly1305_push": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_secretstream_xchacha20poly1305_push<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> &$state<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $additional_data<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $tag<span class=\"initializer\"> = SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_MESSAGE<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_secretstream_xchacha20poly1305_rekey": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_secretstream_xchacha20poly1305_rekey<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> &$state<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "sodium_crypto_shorthash": [
        "Compute a fixed-size fingerprint for the message",
        "<span class=\"methodname\">sodium_crypto_shorthash<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_shorthash_keygen": [
        "Get random bytes for key",
        "<span class=\"methodname\">sodium_crypto_shorthash_keygen<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_sign": [
        "Sign a message",
        "<span class=\"methodname\">sodium_crypto_sign<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $secret_key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_sign_detached": [
        "Sign the message",
        "<span class=\"methodname\">sodium_crypto_sign_detached<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $secret_key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_sign_ed25519_pk_to_curve25519": [
        "Convert an Ed25519 public key to a Curve25519 public key",
        "<span class=\"methodname\">sodium_crypto_sign_ed25519_pk_to_curve25519<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $public_key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_sign_ed25519_sk_to_curve25519": [
        "Convert an Ed25519 secret key to a Curve25519 secret key",
        "<span class=\"methodname\">sodium_crypto_sign_ed25519_sk_to_curve25519<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $secret_key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_sign_keypair": [
        "Randomly generate a secret key and a corresponding public key",
        "<span class=\"methodname\">sodium_crypto_sign_keypair<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_sign_keypair_from_secretkey_and_publickey": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_sign_keypair_from_secretkey_and_publickey<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $secret_key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $public_key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_sign_open": [
        "Check that the signed message has a valid signature",
        "<span class=\"methodname\">sodium_crypto_sign_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $ciphertext<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $public_key<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "sodium_crypto_sign_publickey": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_sign_publickey<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key_pair<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_sign_publickey_from_secretkey": [
        "Extract the public key from the secret key",
        "<span class=\"methodname\">sodium_crypto_sign_publickey_from_secretkey<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $secret_key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_sign_secretkey": [
        "Description",
        "<span class=\"methodname\">sodium_crypto_sign_secretkey<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key_pair<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_sign_seed_keypair": [
        "Deterministically derive the key pair from a single key",
        "<span class=\"methodname\">sodium_crypto_sign_seed_keypair<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $seed<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_sign_verify_detached": [
        "Verify signature for the message",
        "<span class=\"methodname\">sodium_crypto_sign_verify_detached<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $signature<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $public_key<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sodium_crypto_stream": [
        "Generate a deterministic sequence of bytes from a seed",
        "<span class=\"methodname\">sodium_crypto_stream<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $nonce<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_stream_keygen": [
        "Get random bytes for key",
        "<span class=\"methodname\">sodium_crypto_stream_keygen<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_crypto_stream_xor": [
        "Encrypt a message",
        "<span class=\"methodname\">sodium_crypto_stream_xor<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $nonce<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_hex2bin": [
        "Decodes a hexadecimally encoded binary string",
        "<span class=\"methodname\">sodium_hex2bin<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $ignore<span class=\"initializer\"> = \"\"<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_increment": [
        "Increment large number",
        "<span class=\"methodname\">sodium_increment<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> &$string<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "sodium_memcmp": [
        "Test for equality in constant-time",
        "<span class=\"methodname\">sodium_memcmp<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string2<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "sodium_memzero": [
        "Overwrite buf with zeros",
        "<span class=\"methodname\">sodium_memzero<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> &$string<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "sodium_pad": [
        "Add padding data",
        "<span class=\"methodname\">sodium_pad<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sodium_unpad": [
        "Remove padding data",
        "<span class=\"methodname\">sodium_unpad<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $block_size<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "SodiumException": [
        "Exceptions thrown by the sodium functions."
    ],
    "solr_get_version": [
        "Returns the current version of the Apache Solr extension",
        "<span class=\"methodname\">solr_get_version<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "SolrClient": [
        "Used to send requests to a Solr server. Currently, cloning and serialization of SolrClient instances is not supported.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SolrClient::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $clientOptions<\/span> )"
    ],
    "SolrClientException": [
        "An exception thrown when there is an error while making a request to the server from the client."
    ],
    "SolrCollapseFunction": [
        "Constructor",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SolrCollapseFunction::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $field<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "SolrDisMaxQuery": [
        "Class Constructor",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SolrDisMaxQuery::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $q<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "SolrDocument": [
        "Represents a Solr document retrieved from a query response.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SolrDocument::__construct<\/span> ( )"
    ],
    "SolrDocumentField": [
        "This represents a field in a Solr document. All its properties are read-only.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SolrDocumentField::__construct<\/span> ( )"
    ],
    "SolrException": [
        "This is the base class for all exception thrown by the Solr extension classes."
    ],
    "SolrGenericResponse": [
        "Represents a response from the solr server.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SolrGenericResponse::__construct<\/span> ( )"
    ],
    "SolrIllegalArgumentException": [
        "This object is thrown when an illegal or invalid argument is passed to a method."
    ],
    "SolrIllegalOperationException": [
        "This object is thrown when an illegal or unsupported operation is performed on an object."
    ],
    "SolrInputDocument": [
        "This class represents a Solr document that is about to be submitted to the Solr index.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SolrInputDocument::__construct<\/span> ( )"
    ],
    "SolrModifiableParams": [
        "Represents a collection of name-value pairs sent to the Solr server during a request.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SolrModifiableParams::__construct<\/span> ( )"
    ],
    "SolrObject": [
        "This is an object whose properties can also by accessed using the array syntax. All its properties are read-only.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SolrObject::__construct<\/span> ( )"
    ],
    "SolrParams": [
        "Represents a collection of name-value pairs sent to the Solr server during a request."
    ],
    "SolrPingResponse": [
        "Represents a response to a ping request to the server",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SolrPingResponse::__construct<\/span> ( )"
    ],
    "SolrQuery": [
        "Represents a collection of name-value pairs sent to the Solr server during a request.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SolrQuery::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $q<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "SolrQueryResponse": [
        "Represents a response to a query request.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SolrQueryResponse::__construct<\/span> ( )"
    ],
    "SolrResponse": [
        "Represents a response from the Solr server."
    ],
    "SolrServerException": [
        "An exception thrown when there is an error produced by the Solr Server itself."
    ],
    "SolrUpdateResponse": [
        "Represents a response to an update request.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SolrUpdateResponse::__construct<\/span> ( )"
    ],
    "SolrUtils": [
        "Contains utility methods for retrieving the current extension version and preparing query phrases."
    ],
    "sort": [
        "Sort an array",
        "<span class=\"methodname\">sort<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = SORT_REGULAR<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "soundex": [
        "Calculate the soundex key of a string",
        "<span class=\"methodname\">soundex<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "SphinxClient": [
        "The SphinxClient class provides object-oriented interface to Sphinx.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SphinxClient::__construct<\/span> ( )"
    ],
    "spl_autoload": [
        "Default implementation for __autoload()",
        "<span class=\"methodname\">spl_autoload<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $file_extensions<span class=\"initializer\"> = spl_autoload_extensions()<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "spl_autoload_call": [
        "Try all registered __autoload() functions to load the requested class",
        "<span class=\"methodname\">spl_autoload_call<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class_name<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "spl_autoload_extensions": [
        "Register and return default file extensions for spl_autoload",
        "<span class=\"methodname\">spl_autoload_extensions<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $file_extensions<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "spl_autoload_functions": [
        "Return all registered __autoload() functions",
        "<span class=\"methodname\">spl_autoload_functions<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "spl_autoload_register": [
        "Register given function as __autoload() implementation",
        "<span class=\"methodname\">spl_autoload_register<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $autoload_function<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $throw<span class=\"initializer\"> = true<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $prepend<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "spl_autoload_unregister": [
        "Unregister given function as __autoload() implementation",
        "<span class=\"methodname\">spl_autoload_unregister<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $autoload_function<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "spl_classes": [
        "Return available SPL classes",
        "<span class=\"methodname\">spl_classes<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "spl_object_hash": [
        "Return hash id for given object",
        "<span class=\"methodname\">spl_object_hash<\/span> ( <span class=\"methodparam\"><span class=\"type\">object<\/span> $obj<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "spl_object_id": [
        "Return the integer object handle for given object",
        "<span class=\"methodname\">spl_object_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">object<\/span> $obj<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "SplDoublyLinkedList": [
        "The SplDoublyLinkedList class provides the main functionalities of a doubly linked list.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SplDoublyLinkedList::__construct<\/span> ( )"
    ],
    "SplFileInfo": [
        "The SplFileInfo class offers a high-level object oriented interface to information for an individual file.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SplFileInfo::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $file_name<\/span> )"
    ],
    "SplFileObject": [
        "The SplFileObject class offers an object oriented interface for a file.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SplFileObject::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $open_mode<span class=\"initializer\"> = \"r\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $use_include_path<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "SplFixedArray": [
        "The SplFixedArray class provides the main functionalities of array. The main difference between a SplFixedArray and a normal PHP array is that the SplFixedArray must be resized manually and allows only integers within the range as indexes. The advantage is that it uses less memory than a standard array.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SplFixedArray::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $size<span class=\"initializer\"> = 0<\/span><\/span> )"
    ],
    "SplHeap": [
        "The SplHeap class provides the main functionalities of a Heap.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SplHeap::__construct<\/span> ( )"
    ],
    "split": [
        "Split string into array by regular expression",
        "<span class=\"methodname\">split<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $limit<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "spliti": [
        "Split string into array by regular expression case insensitive",
        "<span class=\"methodname\">spliti<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $pattern<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $limit<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "SplMaxHeap": [
        "The SplMaxHeap class provides the main functionalities of a heap, keeping the maximum on the top."
    ],
    "SplMinHeap": [
        "The SplMinHeap class provides the main functionalities of a heap, keeping the minimum on the top."
    ],
    "SplObjectStorage": [
        "The SplObjectStorage class provides a map from objects to data or, by ignoring data, an object set. This dual purpose can be useful in many cases involving the need to uniquely identify objects."
    ],
    "SplObserver": [
        "The SplObserver interface is used alongside SplSubject to implement the Observer Design Pattern."
    ],
    "SplPriorityQueue": [
        "The SplPriorityQueue class provides the main functionalities of a prioritized queue, implemented using a max heap.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SplPriorityQueue::__construct<\/span> ( )"
    ],
    "SplQueue": [
        "The SplQueue class provides the main functionalities of a queue implemented using a doubly linked list.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SplQueue::__construct<\/span> ( )"
    ],
    "SplStack": [
        "The SplStack class provides the main functionalities of a stack implemented using a doubly linked list.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SplStack::__construct<\/span> ( )"
    ],
    "SplSubject": [
        "The SplSubject interface is used alongside SplObserver to implement the Observer Design Pattern."
    ],
    "SplTempFileObject": [
        "The SplTempFileObject class offers an object oriented interface for a temporary file.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SplTempFileObject::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $max_memory<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "Spoofchecker": [
        "This class is provided because Unicode contains large number of characters and incorporates the varied writing systems of the world and their incorrect usage can expose programs or systems to possible security attacks using characters similarity.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Spoofchecker::__construct<\/span> ( )"
    ],
    "sprintf": [
        "Return a formatted string",
        "<span class=\"methodname\">sprintf<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$values<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "sql_regcase": [
        "Make regular expression for case insensitive match",
        "<span class=\"methodname\">sql_regcase<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "SQLite3": [
        "A class that interfaces SQLite 3 databases.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SQLite3::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $encryptionKey<span class=\"initializer\"> = \"\"<\/span><\/span> )"
    ],
    "SQLite3Result": [
        "A class that handles result sets for the SQLite 3 extension."
    ],
    "SQLite3Stmt": [
        "A class that handles prepared statements for the SQLite 3 extension."
    ],
    "sqlsrv_begin_transaction": [
        "Begins a database transaction",
        "<span class=\"methodname\">sqlsrv_begin_transaction<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sqlsrv_cancel": [
        "Cancels a statement",
        "<span class=\"methodname\">sqlsrv_cancel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sqlsrv_client_info": [
        "Returns information about the client and specified connection",
        "<span class=\"methodname\">sqlsrv_client_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "sqlsrv_close": [
        "Closes an open connection and releases resourses associated with the connection",
        "<span class=\"methodname\">sqlsrv_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sqlsrv_commit": [
        "Commits a transaction that was begun with sqlsrv_begin_transaction()",
        "<span class=\"methodname\">sqlsrv_commit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sqlsrv_configure": [
        "Changes the driver error handling and logging configurations",
        "<span class=\"methodname\">sqlsrv_configure<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $setting<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sqlsrv_connect": [
        "Opens a connection to a Microsoft SQL Server database",
        "<span class=\"methodname\">sqlsrv_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $serverName<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $connectionInfo<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "sqlsrv_errors": [
        "Returns error and warning information about the last SQLSRV operation performed",
        "<span class=\"methodname\">sqlsrv_errors<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $errorsOrWarnings<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "sqlsrv_execute": [
        "Executes a statement prepared with sqlsrv_prepare()",
        "<span class=\"methodname\">sqlsrv_execute<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sqlsrv_fetch": [
        "Makes the next row in a result set available for reading",
        "<span class=\"methodname\">sqlsrv_fetch<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "sqlsrv_fetch_array": [
        "Returns a row as an array",
        "<span class=\"methodname\">sqlsrv_fetch_array<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fetchType<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "sqlsrv_fetch_object": [
        "Retrieves the next row of data in a result set as an object",
        "<span class=\"methodname\">sqlsrv_fetch_object<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $className<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $ctorParams<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $row<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "sqlsrv_field_metadata": [
        "Retrieves metadata for the fields of a statement prepared by \n  sqlsrv_prepare() or sqlsrv_query()",
        "<span class=\"methodname\">sqlsrv_field_metadata<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "sqlsrv_free_stmt": [
        "Frees all resources for the specified statement",
        "<span class=\"methodname\">sqlsrv_free_stmt<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sqlsrv_get_config": [
        "Returns the value of the specified configuration setting",
        "<span class=\"methodname\">sqlsrv_get_config<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $setting<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "sqlsrv_get_field": [
        "Gets field data from the currently selected row",
        "<span class=\"methodname\">sqlsrv_get_field<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fieldIndex<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $getAsType<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "sqlsrv_has_rows": [
        "Indicates whether the specified statement has rows",
        "<span class=\"methodname\">sqlsrv_has_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sqlsrv_next_result": [
        "Makes the next result of the specified statement active",
        "<span class=\"methodname\">sqlsrv_next_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "sqlsrv_num_fields": [
        "Retrieves the number of fields (columns) on a statement",
        "<span class=\"methodname\">sqlsrv_num_fields<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "sqlsrv_num_rows": [
        "Retrieves the number of rows in a result set",
        "<span class=\"methodname\">sqlsrv_num_rows<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "sqlsrv_prepare": [
        "Prepares a query for execution",
        "<span class=\"methodname\">sqlsrv_prepare<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $sql<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $params<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "sqlsrv_query": [
        "Prepares and executes a query",
        "<span class=\"methodname\">sqlsrv_query<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $sql<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $params<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "sqlsrv_rollback": [
        "Rolls back a transaction that was begun with \n  sqlsrv_begin_transaction()",
        "<span class=\"methodname\">sqlsrv_rollback<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sqlsrv_rows_affected": [
        "Returns the number of rows modified by the last INSERT, UPDATE, or \n  DELETE query executed",
        "<span class=\"methodname\">sqlsrv_rows_affected<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "sqlsrv_send_stream_data": [
        "Sends data from parameter streams to the server",
        "<span class=\"methodname\">sqlsrv_send_stream_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stmt<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "sqlsrv_server_info": [
        "Returns information about the server",
        "<span class=\"methodname\">sqlsrv_server_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $conn<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "sqrt": [
        "Square root",
        "<span class=\"methodname\">sqrt<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "srand": [
        "Seed the random number generator",
        "<span class=\"methodname\">srand<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $seed<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "sscanf": [
        "Parses input from a string according to a format",
        "<span class=\"methodname\">sscanf<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> &...$vars<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "ssdeep_fuzzy_compare": [
        "Calculates the match score between two fuzzy hash signatures",
        "<span class=\"methodname\">ssdeep_fuzzy_compare<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $signature1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $signature2<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ssdeep_fuzzy_hash": [
        "Create a fuzzy hash from a string",
        "<span class=\"methodname\">ssdeep_fuzzy_hash<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $to_hash<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ssdeep_fuzzy_hash_filename": [
        "Create a fuzzy hash from a file",
        "<span class=\"methodname\">ssdeep_fuzzy_hash_filename<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $file_name<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ssh2_auth_agent": [
        "Authenticate over SSH using the ssh agent",
        "<span class=\"methodname\">ssh2_auth_agent<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $session<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ssh2_auth_hostbased_file": [
        "Authenticate using a public hostkey",
        "<span class=\"methodname\">ssh2_auth_hostbased_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $session<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pubkeyfile<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $privkeyfile<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $passphrase<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $local_username<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ssh2_auth_none": [
        "Authenticate as \"none\"",
        "<span class=\"methodname\">ssh2_auth_none<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $session<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "ssh2_auth_password": [
        "Authenticate over SSH using a plain password",
        "<span class=\"methodname\">ssh2_auth_password<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $session<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ssh2_auth_pubkey_file": [
        "Authenticate using a public key",
        "<span class=\"methodname\">ssh2_auth_pubkey_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $session<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pubkeyfile<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $privkeyfile<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $passphrase<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ssh2_connect": [
        "Connect to an SSH server",
        "<span class=\"methodname\">ssh2_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $host<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $port<span class=\"initializer\"> = 22<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $methods<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $callbacks<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "ssh2_disconnect": [
        "Close a connection to a remote SSH server",
        "<span class=\"methodname\">ssh2_disconnect<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $session<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ssh2_exec": [
        "Execute a command on a remote server",
        "<span class=\"methodname\">ssh2_exec<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $session<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $command<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pty<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $env<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $width<span class=\"initializer\"> = 80<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $height<span class=\"initializer\"> = 25<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $width_height_type<span class=\"initializer\"> = SSH2_TERM_UNIT_CHARS<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ssh2_fetch_stream": [
        "Fetch an extended data stream",
        "<span class=\"methodname\">ssh2_fetch_stream<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $channel<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $streamid<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "ssh2_fingerprint": [
        "Retrieve fingerprint of remote server",
        "<span class=\"methodname\">ssh2_fingerprint<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $session<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ssh2_forward_accept": [
        "Accept a connection created by a listener",
        "<span class=\"methodname\">ssh2_forward_accept<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $listener<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ssh2_forward_listen": [
        "Bind a port on the remote server and listen for connections",
        "<span class=\"methodname\">ssh2_forward_listen<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $session<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $port<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $host<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max_connections<span class=\"initializer\"> = 16<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ssh2_methods_negotiated": [
        "Return list of negotiated methods",
        "<span class=\"methodname\">ssh2_methods_negotiated<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $session<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "ssh2_poll": [
        "Poll the channels\/listeners\/streams for events",
        "<span class=\"methodname\">ssh2_poll<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$desc<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timeout<span class=\"initializer\"> = 30<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "ssh2_publickey_add": [
        "Add an authorized publickey",
        "<span class=\"methodname\">ssh2_publickey_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pkey<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $algoname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $blob<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $overwrite<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $attributes<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ssh2_publickey_init": [
        "Initialize Publickey subsystem",
        "<span class=\"methodname\">ssh2_publickey_init<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $session<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ssh2_publickey_list": [
        "List currently authorized publickeys",
        "<span class=\"methodname\">ssh2_publickey_list<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pkey<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "ssh2_publickey_remove": [
        "Remove an authorized publickey",
        "<span class=\"methodname\">ssh2_publickey_remove<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $pkey<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $algoname<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $blob<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ssh2_scp_recv": [
        "Request a file via SCP",
        "<span class=\"methodname\">ssh2_scp_recv<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $session<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $remote_file<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $local_file<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ssh2_scp_send": [
        "Send a file via SCP",
        "<span class=\"methodname\">ssh2_scp_send<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $session<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $local_file<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $remote_file<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $create_mode<span class=\"initializer\"> = 0644<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ssh2_sftp": [
        "Initialize SFTP subsystem",
        "<span class=\"methodname\">ssh2_sftp<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $session<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ssh2_sftp_chmod": [
        "Changes file mode",
        "<span class=\"methodname\">ssh2_sftp_chmod<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $sftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ssh2_sftp_lstat": [
        "Stat a symbolic link",
        "<span class=\"methodname\">ssh2_sftp_lstat<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $sftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "ssh2_sftp_mkdir": [
        "Create a directory",
        "<span class=\"methodname\">ssh2_sftp_mkdir<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $sftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dirname<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<span class=\"initializer\"> = 0777<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $recursive<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ssh2_sftp_readlink": [
        "Return the target of a symbolic link",
        "<span class=\"methodname\">ssh2_sftp_readlink<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $sftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $link<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ssh2_sftp_realpath": [
        "Resolve the realpath of a provided path string",
        "<span class=\"methodname\">ssh2_sftp_realpath<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $sftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "ssh2_sftp_rename": [
        "Rename a remote file",
        "<span class=\"methodname\">ssh2_sftp_rename<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $sftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $from<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $to<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ssh2_sftp_rmdir": [
        "Remove a directory",
        "<span class=\"methodname\">ssh2_sftp_rmdir<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $sftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dirname<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ssh2_sftp_stat": [
        "Stat a file on a remote filesystem",
        "<span class=\"methodname\">ssh2_sftp_stat<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $sftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "ssh2_sftp_symlink": [
        "Create a symlink",
        "<span class=\"methodname\">ssh2_sftp_symlink<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $sftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $target<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $link<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ssh2_sftp_unlink": [
        "Delete a file",
        "<span class=\"methodname\">ssh2_sftp_unlink<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $sftp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ssh2_shell": [
        "Request an interactive shell",
        "<span class=\"methodname\">ssh2_shell<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $session<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $term_type<span class=\"initializer\"> = \"vanilla\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">null<\/span><\/span> $env<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $width<span class=\"initializer\"> = 80<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $height<span class=\"initializer\"> = 25<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $width_height_type<span class=\"initializer\"> = SSH2_TERM_UNIT_CHARS<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ssh2_tunnel": [
        "Open a tunnel through a remote server",
        "<span class=\"methodname\">ssh2_tunnel<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $session<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $host<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $port<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "stat": [
        "Gives information about a file",
        "<span class=\"methodname\">stat<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "stats_absolute_deviation": [
        "Returns the absolute deviation of an array of values",
        "<span class=\"methodname\">stats_absolute_deviation<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $a<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_cdf_beta": [
        "Calculates any one parameter of the beta distribution given values for the others",
        "<span class=\"methodname\">stats_cdf_beta<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $par1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par3<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_cdf_binomial": [
        "Calculates any one parameter of the binomial distribution given values for the others",
        "<span class=\"methodname\">stats_cdf_binomial<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $par1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par3<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_cdf_cauchy": [
        "Calculates any one parameter of the Cauchy distribution given values for the others",
        "<span class=\"methodname\">stats_cdf_cauchy<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $par1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par3<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_cdf_chisquare": [
        "Calculates any one parameter of the chi-square distribution given values for the others",
        "<span class=\"methodname\">stats_cdf_chisquare<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $par1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_cdf_exponential": [
        "Calculates any one parameter of the exponential distribution given values for the others",
        "<span class=\"methodname\">stats_cdf_exponential<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $par1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_cdf_f": [
        "Calculates any one parameter of the F distribution given values for the others",
        "<span class=\"methodname\">stats_cdf_f<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $par1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par3<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_cdf_gamma": [
        "Calculates any one parameter of the gamma distribution given values for the others",
        "<span class=\"methodname\">stats_cdf_gamma<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $par1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par3<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_cdf_laplace": [
        "Calculates any one parameter of the Laplace distribution given values for the others",
        "<span class=\"methodname\">stats_cdf_laplace<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $par1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par3<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_cdf_logistic": [
        "Calculates any one parameter of the logistic distribution given values for the others",
        "<span class=\"methodname\">stats_cdf_logistic<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $par1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par3<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_cdf_negative_binomial": [
        "Calculates any one parameter of the negative binomial distribution given values for the others",
        "<span class=\"methodname\">stats_cdf_negative_binomial<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $par1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par3<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_cdf_noncentral_chisquare": [
        "Calculates any one parameter of the non-central chi-square distribution given values for the others",
        "<span class=\"methodname\">stats_cdf_noncentral_chisquare<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $par1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par3<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_cdf_noncentral_f": [
        "Calculates any one parameter of the non-central F distribution given values for the others",
        "<span class=\"methodname\">stats_cdf_noncentral_f<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $par1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par3<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par4<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_cdf_noncentral_t": [
        "Calculates any one parameter of the non-central t-distribution give values for the others",
        "<span class=\"methodname\">stats_cdf_noncentral_t<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $par1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par3<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_cdf_normal": [
        "Calculates any one parameter of the normal distribution given values for the others",
        "<span class=\"methodname\">stats_cdf_normal<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $par1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par3<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_cdf_poisson": [
        "Calculates any one parameter of the Poisson distribution given values for the others",
        "<span class=\"methodname\">stats_cdf_poisson<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $par1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_cdf_t": [
        "Calculates any one parameter of the t-distribution given values for the others",
        "<span class=\"methodname\">stats_cdf_t<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $par1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_cdf_uniform": [
        "Calculates any one parameter of the uniform distribution given values for the others",
        "<span class=\"methodname\">stats_cdf_uniform<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $par1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par3<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_cdf_weibull": [
        "Calculates any one parameter of the Weibull distribution given values for the others",
        "<span class=\"methodname\">stats_cdf_weibull<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $par1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $par3<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $which<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_covariance": [
        "Computes the covariance of two data sets",
        "<span class=\"methodname\">stats_covariance<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $a<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $b<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_dens_beta": [
        "Probability density function of the beta distribution",
        "<span class=\"methodname\">stats_dens_beta<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $a<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $b<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_dens_cauchy": [
        "Probability density function of the Cauchy distribution",
        "<span class=\"methodname\">stats_dens_cauchy<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $ave<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $stdev<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_dens_chisquare": [
        "Probability density function of the chi-square distribution",
        "<span class=\"methodname\">stats_dens_chisquare<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $dfr<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_dens_exponential": [
        "Probability density function of the exponential distribution",
        "<span class=\"methodname\">stats_dens_exponential<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $scale<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_dens_f": [
        "Probability density function of the F distribution",
        "<span class=\"methodname\">stats_dens_f<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $dfr1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $dfr2<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_dens_gamma": [
        "Probability density function of the gamma distribution",
        "<span class=\"methodname\">stats_dens_gamma<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $shape<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $scale<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_dens_laplace": [
        "Probability density function of the Laplace distribution",
        "<span class=\"methodname\">stats_dens_laplace<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $ave<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $stdev<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_dens_logistic": [
        "Probability density function of the logistic distribution",
        "<span class=\"methodname\">stats_dens_logistic<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $ave<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $stdev<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_dens_normal": [
        "Probability density function of the normal distribution",
        "<span class=\"methodname\">stats_dens_normal<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $ave<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $stdev<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_dens_pmf_binomial": [
        "Probability mass function of the binomial distribution",
        "<span class=\"methodname\">stats_dens_pmf_binomial<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $n<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $pi<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_dens_pmf_hypergeometric": [
        "Probability mass function of the hypergeometric distribution",
        "<span class=\"methodname\">stats_dens_pmf_hypergeometric<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $n1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $n2<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $N1<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $N2<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_dens_pmf_negative_binomial": [
        "Probability mass function of the negative binomial distribution",
        "<span class=\"methodname\">stats_dens_pmf_negative_binomial<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $n<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $pi<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_dens_pmf_poisson": [
        "Probability mass function of the Poisson distribution",
        "<span class=\"methodname\">stats_dens_pmf_poisson<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $lb<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_dens_t": [
        "Probability density function of the t-distribution",
        "<span class=\"methodname\">stats_dens_t<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $dfr<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_dens_uniform": [
        "Probability density function of the uniform distribution",
        "<span class=\"methodname\">stats_dens_uniform<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $a<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $b<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_dens_weibull": [
        "Probability density function of the Weibull distribution",
        "<span class=\"methodname\">stats_dens_weibull<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $a<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $b<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_harmonic_mean": [
        "Returns the harmonic mean of an array of values",
        "<span class=\"methodname\">stats_harmonic_mean<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $a<\/span> ) : <span class=\"type\"><span class=\"type number\">number<\/span><\/span>"
    ],
    "stats_kurtosis": [
        "Computes the kurtosis of the data in the array",
        "<span class=\"methodname\">stats_kurtosis<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $a<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_rand_gen_beta": [
        "Generates a random deviate from the beta distribution",
        "<span class=\"methodname\">stats_rand_gen_beta<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $a<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $b<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_rand_gen_chisquare": [
        "Generates a random deviate from the chi-square distribution",
        "<span class=\"methodname\">stats_rand_gen_chisquare<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $df<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_rand_gen_exponential": [
        "Generates a random deviate from the exponential distribution",
        "<span class=\"methodname\">stats_rand_gen_exponential<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $av<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_rand_gen_f": [
        "Generates a random deviate from the F distribution",
        "<span class=\"methodname\">stats_rand_gen_f<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $dfn<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $dfd<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_rand_gen_funiform": [
        "Generates uniform float between low (exclusive) and high (exclusive)",
        "<span class=\"methodname\">stats_rand_gen_funiform<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $high<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_rand_gen_gamma": [
        "Generates a random deviate from the gamma distribution",
        "<span class=\"methodname\">stats_rand_gen_gamma<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $a<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $r<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_rand_gen_ibinomial": [
        "Generates a random deviate from the binomial distribution",
        "<span class=\"methodname\">stats_rand_gen_ibinomial<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $n<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $pp<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "stats_rand_gen_ibinomial_negative": [
        "Generates a random deviate from the negative binomial distribution",
        "<span class=\"methodname\">stats_rand_gen_ibinomial_negative<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $n<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $p<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "stats_rand_gen_int": [
        "Generates random integer between 1 and 2147483562",
        "<span class=\"methodname\">stats_rand_gen_int<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "stats_rand_gen_ipoisson": [
        "Generates a single random deviate from a Poisson distribution",
        "<span class=\"methodname\">stats_rand_gen_ipoisson<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $mu<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "stats_rand_gen_iuniform": [
        "Generates integer uniformly distributed between LOW (inclusive) and HIGH (inclusive)",
        "<span class=\"methodname\">stats_rand_gen_iuniform<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $high<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "stats_rand_gen_noncentral_chisquare": [
        "Generates a random deviate from the non-central chi-square distribution",
        "<span class=\"methodname\">stats_rand_gen_noncentral_chisquare<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $df<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $xnonc<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_rand_gen_noncentral_f": [
        "Generates a random deviate from the noncentral F distribution",
        "<span class=\"methodname\">stats_rand_gen_noncentral_f<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $dfn<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $dfd<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $xnonc<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_rand_gen_noncentral_t": [
        "Generates a single random deviate from a non-central t-distribution",
        "<span class=\"methodname\">stats_rand_gen_noncentral_t<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $df<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $xnonc<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_rand_gen_normal": [
        "Generates a single random deviate from a normal distribution",
        "<span class=\"methodname\">stats_rand_gen_normal<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $av<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $sd<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_rand_gen_t": [
        "Generates a single random deviate from a t-distribution",
        "<span class=\"methodname\">stats_rand_gen_t<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $df<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_rand_get_seeds": [
        "Get the seed values of the random number generator",
        "<span class=\"methodname\">stats_rand_get_seeds<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "stats_rand_phrase_to_seeds": [
        "Generate two seeds for the RGN random number generator",
        "<span class=\"methodname\">stats_rand_phrase_to_seeds<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $phrase<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "stats_rand_ranf": [
        "Generates a random floating point number between 0 and 1",
        "<span class=\"methodname\">stats_rand_ranf<\/span> ( ) : <span class=\"type\">float<\/span>"
    ],
    "stats_rand_setall": [
        "Set seed values to the random generator",
        "<span class=\"methodname\">stats_rand_setall<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $iseed1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $iseed2<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "stats_skew": [
        "Computes the skewness of the data in the array",
        "<span class=\"methodname\">stats_skew<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $a<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_standard_deviation": [
        "Returns the standard deviation",
        "<span class=\"methodname\">stats_standard_deviation<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $a<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $sample<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_stat_binomial_coef": [
        "Returns a binomial coefficient",
        "<span class=\"methodname\">stats_stat_binomial_coef<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $x<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $n<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_stat_correlation": [
        "Returns the Pearson correlation coefficient of two data sets",
        "<span class=\"methodname\">stats_stat_correlation<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $arr1<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $arr2<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_stat_factorial": [
        "Returns the factorial of an integer",
        "<span class=\"methodname\">stats_stat_factorial<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $n<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_stat_independent_t": [
        "Returns the t-value from the independent two-sample t-test",
        "<span class=\"methodname\">stats_stat_independent_t<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $arr1<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $arr2<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_stat_innerproduct": [
        "Returns the inner product of two vectors",
        "<span class=\"methodname\">stats_stat_innerproduct<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $arr1<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $arr2<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_stat_paired_t": [
        "Returns the t-value of the dependent t-test for paired samples",
        "<span class=\"methodname\">stats_stat_paired_t<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $arr1<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $arr2<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_stat_percentile": [
        "Returns the percentile value",
        "<span class=\"methodname\">stats_stat_percentile<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $arr<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $perc<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_stat_powersum": [
        "Returns the power sum of a vector",
        "<span class=\"methodname\">stats_stat_powersum<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $arr<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $power<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "stats_variance": [
        "Returns the variance",
        "<span class=\"methodname\">stats_variance<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $a<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $sample<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "Stomp": [
        "Represents a connection between PHP and a Stomp compliant Message Broker.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Stomp::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $broker<span class=\"initializer\"> = ini_get(\"stomp.default_broker_uri\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $headers<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "stomp_abort": [
        "Rolls back a transaction in progress",
        "<span class=\"methodname\">stomp_abort<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $transaction_id<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $headers<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stomp_ack": [
        "Acknowledges consumption of a message",
        "<span class=\"methodname\">stomp_ack<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $msg<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $headers<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stomp_begin": [
        "Starts a transaction",
        "<span class=\"methodname\">stomp_begin<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $transaction_id<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $headers<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stomp_close": [
        "Closes stomp connection",
        "<span class=\"methodname\">stomp_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stomp_commit": [
        "Commits a transaction in progress",
        "<span class=\"methodname\">stomp_commit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $transaction_id<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $headers<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stomp_connect": [
        "Opens a connection",
        "<span class=\"methodname\">stomp_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $broker<span class=\"initializer\"> = ini_get(\"stomp.default_broker_uri\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $username<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $password<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $headers<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "stomp_connect_error": [
        "Returns a string description of the last connect error",
        "<span class=\"methodname\">stomp_connect_error<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "stomp_error": [
        "Gets the last stomp error",
        "<span class=\"methodname\">stomp_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "stomp_get_read_timeout": [
        "Gets read timeout",
        "<span class=\"methodname\">stomp_get_read_timeout<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "stomp_get_session_id": [
        "Gets the current stomp session ID",
        "<span class=\"methodname\">stomp_get_session_id<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "stomp_has_frame": [
        "Indicates whether or not there is a frame ready to read",
        "<span class=\"methodname\">stomp_has_frame<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stomp_read_frame": [
        "Reads the next frame",
        "<span class=\"methodname\">stomp_read_frame<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "stomp_send": [
        "Sends a message",
        "<span class=\"methodname\">stomp_send<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $destination<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $msg<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $headers<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stomp_set_read_timeout": [
        "Sets read timeout",
        "<span class=\"methodname\">stomp_set_read_timeout<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $seconds<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $microseconds<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "stomp_subscribe": [
        "Registers to listen to a given destination",
        "<span class=\"methodname\">stomp_subscribe<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $destination<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $headers<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stomp_unsubscribe": [
        "Removes an existing subscription",
        "<span class=\"methodname\">stomp_unsubscribe<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $link<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $destination<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $headers<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stomp_version": [
        "Gets the current stomp extension version",
        "<span class=\"methodname\">stomp_version<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "StompException": [
        "Represents an error raised by the stomp extension. See Exceptions for more information about Exceptions in PHP."
    ],
    "StompFrame": [
        "Represents a message which was sent or received from a Stomp compliant Message Broker.",
        "<span class=\"methodname\">StompFrame::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $command<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $headers<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $body<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "str_contains": [
        "Determine if a string contains a given substring",
        "<span class=\"methodname\">str_contains<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "str_ends_with": [
        "Checks if a string ends with a given substring",
        "<span class=\"methodname\">str_ends_with<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "str_getcsv": [
        "Parse a CSV string into an array",
        "<span class=\"methodname\">str_getcsv<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $separator<span class=\"initializer\"> = \",\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $enclosure<span class=\"initializer\"> = \"\\\"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $escape<span class=\"initializer\"> = '\\\\'<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "str_ireplace": [
        "Case-insensitive version of str_replace()",
        "<span class=\"methodname\">str_ireplace<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $search<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $replace<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span> $subject<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$count<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span>"
    ],
    "str_pad": [
        "Pad a string to a certain length with another string",
        "<span class=\"methodname\">str_pad<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $pad_string<span class=\"initializer\"> = \" \"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pad_type<span class=\"initializer\"> = STR_PAD_RIGHT<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "str_repeat": [
        "Repeat a string",
        "<span class=\"methodname\">str_repeat<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $times<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "str_replace": [
        "Replace all occurrences of the search string with the replacement string",
        "<span class=\"methodname\">str_replace<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $search<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $replace<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span> $subject<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$count<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span>"
    ],
    "str_rot13": [
        "Perform the rot13 transform on a string",
        "<span class=\"methodname\">str_rot13<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "str_shuffle": [
        "Randomly shuffles a string",
        "<span class=\"methodname\">str_shuffle<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "str_split": [
        "Convert a string to an array",
        "<span class=\"methodname\">str_split<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<span class=\"initializer\"> = 1<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "str_starts_with": [
        "Checks if a string starts with a given substring",
        "<span class=\"methodname\">str_starts_with<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "str_word_count": [
        "Return information about words used in a string",
        "<span class=\"methodname\">str_word_count<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $format<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $characters<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">int<\/span><\/span>"
    ],
    "strcasecmp": [
        "Binary safe case-insensitive string comparison",
        "<span class=\"methodname\">strcasecmp<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $str1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $str2<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "strcmp": [
        "Binary safe string comparison",
        "<span class=\"methodname\">strcmp<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $str1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $str2<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "strcoll": [
        "Locale based string comparison",
        "<span class=\"methodname\">strcoll<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string2<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "strcspn": [
        "Find length of initial segment not matching mask",
        "<span class=\"methodname\">strcspn<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $characters<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $length<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "stream_bucket_append": [
        "Append bucket to brigade",
        "<span class=\"methodname\">stream_bucket_append<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $brigade<\/span> , <span class=\"methodparam\"><span class=\"type\">object<\/span> $bucket<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "stream_bucket_make_writeable": [
        "Return a bucket object from the brigade for operating on",
        "<span class=\"methodname\">stream_bucket_make_writeable<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $brigade<\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "stream_bucket_new": [
        "Create a new bucket for use on the current stream",
        "<span class=\"methodname\">stream_bucket_new<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $buffer<\/span> ) : <span class=\"type\">object<\/span>"
    ],
    "stream_bucket_prepend": [
        "Prepend bucket to brigade",
        "<span class=\"methodname\">stream_bucket_prepend<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $brigade<\/span> , <span class=\"methodparam\"><span class=\"type\">object<\/span> $bucket<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "stream_context_create": [
        "Creates a stream context",
        "<span class=\"methodname\">stream_context_create<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $params<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "stream_context_get_default": [
        "Retrieve the default stream context",
        "<span class=\"methodname\">stream_context_get_default<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "stream_context_get_options": [
        "Retrieve options for a stream\/wrapper\/context",
        "<span class=\"methodname\">stream_context_get_options<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream_or_context<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "stream_context_get_params": [
        "Retrieves parameters from a context",
        "<span class=\"methodname\">stream_context_get_params<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream_or_context<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "stream_context_set_default": [
        "Set the default stream context",
        "<span class=\"methodname\">stream_context_set_default<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "stream_context_set_option": [
        "Sets an option for a stream\/wrapper\/context",
        "<span class=\"methodname\">stream_context_set_option<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream_or_context<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $wrapper<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $option<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">stream_context_set_option<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream_or_context<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stream_context_set_params": [
        "Set parameters for a stream\/wrapper\/context",
        "<span class=\"methodname\">stream_context_set_params<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $params<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stream_copy_to_stream": [
        "Copies data from one stream to another",
        "<span class=\"methodname\">stream_copy_to_stream<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $source<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $dest<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $maxlength<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "stream_filter_append": [
        "Attach a filter to a stream",
        "<span class=\"methodname\">stream_filter_append<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filtername<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $read_write<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $params<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "stream_filter_prepend": [
        "Attach a filter to a stream",
        "<span class=\"methodname\">stream_filter_prepend<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $filtername<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $read_write<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $params<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "stream_filter_register": [
        "Register a user defined stream filter",
        "<span class=\"methodname\">stream_filter_register<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filter_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stream_filter_remove": [
        "Remove a filter from a stream",
        "<span class=\"methodname\">stream_filter_remove<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream_filter<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stream_get_contents": [
        "Reads remainder of a stream into a string",
        "<span class=\"methodname\">stream_get_contents<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $maxlength<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "stream_get_filters": [
        "Retrieve list of registered filters",
        "<span class=\"methodname\">stream_get_filters<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "stream_get_line": [
        "Gets line from stream resource up to a given delimiter",
        "<span class=\"methodname\">stream_get_line<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $handle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $ending<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "stream_get_meta_data": [
        "Retrieves header\/meta data from streams\/file pointers",
        "<span class=\"methodname\">stream_get_meta_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "stream_get_transports": [
        "Retrieve list of registered socket transports",
        "<span class=\"methodname\">stream_get_transports<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "stream_get_wrappers": [
        "Retrieve list of registered streams",
        "<span class=\"methodname\">stream_get_wrappers<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "stream_is_local": [
        "Checks if a stream is a local stream",
        "<span class=\"methodname\">stream_is_local<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">string<\/span><\/span> $stream<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stream_isatty": [
        "Check if a stream is a TTY",
        "<span class=\"methodname\">stream_isatty<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stream_notification_callback": [
        "A callback function for the notification context parameter",
        "<span class=\"methodname\"><span class=\"replaceable\">stream_notification_callback<\/span><\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $notification_code<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $severity<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $message_code<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $bytes_transferred<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $bytes_max<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "stream_resolve_include_path": [
        "Resolve filename against the include path",
        "<span class=\"methodname\">stream_resolve_include_path<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "stream_select": [
        "Runs the equivalent of the select() system call on the given\n   arrays of streams with a timeout specified by tv_sec and tv_usec",
        "<span class=\"methodname\">stream_select<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$read<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$write<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$except<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $tv_sec<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $tv_usec<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "stream_set_blocking": [
        "Set blocking\/non-blocking mode on a stream",
        "<span class=\"methodname\">stream_set_blocking<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $enable<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stream_set_chunk_size": [
        "Set the stream chunk size",
        "<span class=\"methodname\">stream_set_chunk_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $size<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "stream_set_read_buffer": [
        "Set read file buffering on the given stream",
        "<span class=\"methodname\">stream_set_read_buffer<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $size<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "stream_set_timeout": [
        "Set timeout period on a stream",
        "<span class=\"methodname\">stream_set_timeout<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $seconds<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $microseconds<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stream_set_write_buffer": [
        "Sets write file buffering on the given stream",
        "<span class=\"methodname\">stream_set_write_buffer<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $buffer<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "stream_socket_accept": [
        "Accept a connection on a socket created by stream_socket_server()",
        "<span class=\"methodname\">stream_socket_accept<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $server_socket<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $timeout<span class=\"initializer\"> = ini_get(\"default_socket_timeout\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$peername<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "stream_socket_client": [
        "Open Internet or Unix domain socket connection",
        "<span class=\"methodname\">stream_socket_client<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $remote_socket<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$errno<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$errstr<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $timeout<span class=\"initializer\"> = ini_get(\"default_socket_timeout\")<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = STREAM_CLIENT_CONNECT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "stream_socket_enable_crypto": [
        "Turns encryption on\/off on an already connected socket",
        "<span class=\"methodname\">stream_socket_enable_crypto<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $enable<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $crypto_type<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $session_stream<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "stream_socket_get_name": [
        "Retrieve the name of the local or remote sockets",
        "<span class=\"methodname\">stream_socket_get_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $handle<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $want_peer<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "stream_socket_pair": [
        "Creates a pair of connected, indistinguishable socket streams",
        "<span class=\"methodname\">stream_socket_pair<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $domain<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $protocol<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "stream_socket_recvfrom": [
        "Receives data from a socket, connected or not",
        "<span class=\"methodname\">stream_socket_recvfrom<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $length<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$address<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "stream_socket_sendto": [
        "Sends a message to a socket, whether it is connected or not",
        "<span class=\"methodname\">stream_socket_sendto<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $socket<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $address<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "stream_socket_server": [
        "Create an Internet or Unix domain server socket",
        "<span class=\"methodname\">stream_socket_server<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $local_socket<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$errno<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$errstr<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "stream_socket_shutdown": [
        "Shutdown a full-duplex connection",
        "<span class=\"methodname\">stream_socket_shutdown<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mode<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stream_supports_lock": [
        "Tells whether the stream supports locking",
        "<span class=\"methodname\">stream_supports_lock<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stream_wrapper_register": [
        "Register a URL wrapper implemented as a PHP class",
        "<span class=\"methodname\">stream_wrapper_register<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $protocol<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stream_wrapper_restore": [
        "Restores a previously unregistered built-in wrapper",
        "<span class=\"methodname\">stream_wrapper_restore<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $protocol<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "stream_wrapper_unregister": [
        "Unregister a URL wrapper",
        "<span class=\"methodname\">stream_wrapper_unregister<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $protocol<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "streamWrapper": [
        "Constructs a new stream wrapper",
        "<span class=\"methodname\">streamWrapper::__construct<\/span> ( )"
    ],
    "strftime": [
        "Format a local time\/date according to locale settings",
        "<span class=\"methodname\">strftime<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $timestamp<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "strip_tags": [
        "Strip HTML and PHP tags from a string",
        "<span class=\"methodname\">strip_tags<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $allowed_tags<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "stripcslashes": [
        "Un-quote string quoted with addcslashes()",
        "<span class=\"methodname\">stripcslashes<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "stripos": [
        "Find the position of the first occurrence of a case-insensitive substring in a string",
        "<span class=\"methodname\">stripos<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "stripslashes": [
        "Un-quotes a quoted string",
        "<span class=\"methodname\">stripslashes<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "stristr": [
        "Case-insensitive strstr()",
        "<span class=\"methodname\">stristr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $before_needle<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "strlen": [
        "Get string length",
        "<span class=\"methodname\">strlen<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "strnatcasecmp": [
        "Case insensitive string comparisons using a \"natural order\" algorithm",
        "<span class=\"methodname\">strnatcasecmp<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string2<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "strnatcmp": [
        "String comparisons using a \"natural order\" algorithm",
        "<span class=\"methodname\">strnatcmp<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string2<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "strncasecmp": [
        "Binary safe case-insensitive string comparison of the first n characters",
        "<span class=\"methodname\">strncasecmp<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $str1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $str2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $len<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "strncmp": [
        "Binary safe string comparison of the first n characters",
        "<span class=\"methodname\">strncmp<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $str1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $str2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $len<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "strpbrk": [
        "Search a string for any of a set of characters",
        "<span class=\"methodname\">strpbrk<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $characters<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "strpos": [
        "Find the position of the first occurrence of a substring in a string",
        "<span class=\"methodname\">strpos<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "strptime": [
        "Parse a time\/date generated with strftime()",
        "<span class=\"methodname\">strptime<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $timestamp<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "strrchr": [
        "Find the last occurrence of a character in a string",
        "<span class=\"methodname\">strrchr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "strrev": [
        "Reverse a string",
        "<span class=\"methodname\">strrev<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "strripos": [
        "Find the position of the last occurrence of a case-insensitive substring in a string",
        "<span class=\"methodname\">strripos<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "strrpos": [
        "Find the position of the last occurrence of a substring in a string",
        "<span class=\"methodname\">strrpos<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "strspn": [
        "Finds the length of the initial segment of a string consisting\n   entirely of characters contained within a given mask",
        "<span class=\"methodname\">strspn<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $characters<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $length<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "strstr": [
        "Find the first occurrence of a string",
        "<span class=\"methodname\">strstr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $before_needle<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "strtok": [
        "Tokenize string",
        "<span class=\"methodname\">strtok<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $token<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>",
        "<span class=\"methodname\">strtok<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $token<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "strtolower": [
        "Make a string lowercase",
        "<span class=\"methodname\">strtolower<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "strtotime": [
        "Parse about any English textual datetime description into a Unix timestamp",
        "<span class=\"methodname\">strtotime<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $datetime<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $baseTimestamp<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "strtoupper": [
        "Make a string uppercase",
        "<span class=\"methodname\">strtoupper<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "strtr": [
        "Translate characters or replace substrings",
        "<span class=\"methodname\">strtr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $from<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $to<\/span> ) : <span class=\"type\">string<\/span>",
        "<span class=\"methodname\">strtr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $replace_pairs<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "strval": [
        "Get string value of a variable",
        "<span class=\"methodname\">strval<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "substr": [
        "Return part of a string",
        "<span class=\"methodname\">substr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $length<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "substr_compare": [
        "Binary safe comparison of two strings from an offset, up to length characters",
        "<span class=\"methodname\">substr_compare<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $length<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $case_insensitive<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "substr_count": [
        "Count the number of substring occurrences",
        "<span class=\"methodname\">substr_count<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $haystack<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $needle<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $length<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "substr_replace": [
        "Replace text within a portion of a string",
        "<span class=\"methodname\">substr_replace<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span><\/span> $replace<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">int<\/span><\/span> $offset<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $length<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">array<\/span><\/span>"
    ],
    "SVM": [
        "Construct a new SVM object",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SVM::__construct<\/span> ( )"
    ],
    "SVMModel": [
        "The SVMModel is the end result of the training process. It can be used to classify previously unseen data.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SVMModel::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "svn_add": [
        "Schedules the addition of an item in a working directory",
        "<span class=\"methodname\">svn_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $recursive<span class=\"initializer\"> = true<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $force<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_auth_get_parameter": [
        "Retrieves authentication parameter",
        "<span class=\"methodname\">svn_auth_get_parameter<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "svn_auth_set_parameter": [
        "Sets an authentication parameter",
        "<span class=\"methodname\">svn_auth_set_parameter<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "svn_blame": [
        "Get the SVN blame for a file",
        "<span class=\"methodname\">svn_blame<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $repository_url<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $revision_no<span class=\"initializer\"> = SVN_REVISION_HEAD<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "svn_cat": [
        "Returns the contents of a file in a repository",
        "<span class=\"methodname\">svn_cat<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $repos_url<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $revision_no<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "svn_checkout": [
        "Checks out a working copy from the repository",
        "<span class=\"methodname\">svn_checkout<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $repos<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $targetpath<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $revision<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_cleanup": [
        "Recursively cleanup a working copy directory, finishing incomplete operations and removing locks",
        "<span class=\"methodname\">svn_cleanup<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $workingdir<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_client_version": [
        "Returns the version of the SVN client libraries",
        "<span class=\"methodname\">svn_client_version<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "svn_commit": [
        "Sends changes from the local working copy to the repository",
        "<span class=\"methodname\">svn_commit<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $log<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $targets<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $recursive<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "svn_delete": [
        "Delete items from a working copy or repository",
        "<span class=\"methodname\">svn_delete<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $force<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_diff": [
        "Recursively diffs two paths",
        "<span class=\"methodname\">svn_diff<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $rev1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path2<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $rev2<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "svn_export": [
        "Export the contents of a SVN directory",
        "<span class=\"methodname\">svn_export<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $frompath<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $topath<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $working_copy<span class=\"initializer\"> = true<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $revision_no<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_fs_abort_txn": [
        "Abort a transaction, returns true if everything is okay, false otherwise",
        "<span class=\"methodname\">svn_fs_abort_txn<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $txn<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_fs_apply_text": [
        "Creates and returns a stream that will be used to replace",
        "<span class=\"methodname\">svn_fs_apply_text<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $root<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "svn_fs_begin_txn2": [
        "Create a new transaction",
        "<span class=\"methodname\">svn_fs_begin_txn2<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $repos<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $rev<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "svn_fs_change_node_prop": [
        "Return true if everything is ok, false otherwise",
        "<span class=\"methodname\">svn_fs_change_node_prop<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $root<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_fs_check_path": [
        "Determines what kind of item lives at path in a given repository fsroot",
        "<span class=\"methodname\">svn_fs_check_path<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fsroot<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "svn_fs_contents_changed": [
        "Return true if content is different, false otherwise",
        "<span class=\"methodname\">svn_fs_contents_changed<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $root1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path1<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $root2<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path2<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_fs_copy": [
        "Copies a file or a directory, returns true if all is ok, false otherwise",
        "<span class=\"methodname\">svn_fs_copy<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $from_root<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $from_path<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $to_root<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $to_path<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_fs_delete": [
        "Deletes a file or a directory, return true if all is ok, false otherwise",
        "<span class=\"methodname\">svn_fs_delete<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $root<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_fs_dir_entries": [
        "Enumerates the directory entries under path; returns a hash of dir names to file type",
        "<span class=\"methodname\">svn_fs_dir_entries<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fsroot<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "svn_fs_file_contents": [
        "Returns a stream to access the contents of a file from a given version of the fs",
        "<span class=\"methodname\">svn_fs_file_contents<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fsroot<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "svn_fs_file_length": [
        "Returns the length of a file from a given version of the fs",
        "<span class=\"methodname\">svn_fs_file_length<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fsroot<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "svn_fs_is_dir": [
        "Return true if the path points to a directory, false otherwise",
        "<span class=\"methodname\">svn_fs_is_dir<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $root<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_fs_is_file": [
        "Return true if the path points to a file, false otherwise",
        "<span class=\"methodname\">svn_fs_is_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $root<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_fs_make_dir": [
        "Creates a new empty directory, returns true if all is ok, false otherwise",
        "<span class=\"methodname\">svn_fs_make_dir<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $root<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_fs_make_file": [
        "Creates a new empty file, returns true if all is ok, false otherwise",
        "<span class=\"methodname\">svn_fs_make_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $root<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_fs_node_created_rev": [
        "Returns the revision in which path under fsroot was created",
        "<span class=\"methodname\">svn_fs_node_created_rev<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fsroot<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "svn_fs_node_prop": [
        "Returns the value of a property for a node",
        "<span class=\"methodname\">svn_fs_node_prop<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fsroot<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $propname<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "svn_fs_props_changed": [
        "Return true if props are different, false otherwise",
        "<span class=\"methodname\">svn_fs_props_changed<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $root1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path1<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $root2<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $path2<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_fs_revision_prop": [
        "Fetches the value of a named property",
        "<span class=\"methodname\">svn_fs_revision_prop<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fs<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $revnum<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $propname<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "svn_fs_revision_root": [
        "Get a handle on a specific version of the repository root",
        "<span class=\"methodname\">svn_fs_revision_root<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fs<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $revnum<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "svn_fs_txn_root": [
        "Creates and returns a transaction root",
        "<span class=\"methodname\">svn_fs_txn_root<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $txn<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "svn_fs_youngest_rev": [
        "Returns the number of the youngest revision in the filesystem",
        "<span class=\"methodname\">svn_fs_youngest_rev<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $fs<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "svn_import": [
        "Imports an unversioned path into a repository",
        "<span class=\"methodname\">svn_import<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $url<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $nonrecursive<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_log": [
        "Returns the commit log messages of a repository URL",
        "<span class=\"methodname\">svn_log<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $repos_url<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $start_revision<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $end_revision<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $limit<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "svn_ls": [
        "Returns list of directory contents in repository URL, optionally at revision number",
        "<span class=\"methodname\">svn_ls<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $repos_url<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $revision_no<span class=\"initializer\"> = SVN_REVISION_HEAD<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $recurse<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $peg<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "svn_mkdir": [
        "Creates a directory in a working copy or repository",
        "<span class=\"methodname\">svn_mkdir<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $log_message<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_repos_create": [
        "Create a new subversion repository at path",
        "<span class=\"methodname\">svn_repos_create<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $config<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $fsconfig<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "svn_repos_fs": [
        "Gets a handle on the filesystem for a repository",
        "<span class=\"methodname\">svn_repos_fs<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $repos<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "svn_repos_fs_begin_txn_for_commit": [
        "Create a new transaction",
        "<span class=\"methodname\">svn_repos_fs_begin_txn_for_commit<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $repos<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $rev<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $author<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $log_msg<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "svn_repos_fs_commit_txn": [
        "Commits a transaction and returns the new revision",
        "<span class=\"methodname\">svn_repos_fs_commit_txn<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $txn<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "svn_repos_hotcopy": [
        "Make a hot-copy of the repos at repospath; copy it to destpath",
        "<span class=\"methodname\">svn_repos_hotcopy<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $repospath<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $destpath<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $cleanlogs<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_repos_open": [
        "Open a shared lock on a repository",
        "<span class=\"methodname\">svn_repos_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "svn_repos_recover": [
        "Run recovery procedures on the repository located at path",
        "<span class=\"methodname\">svn_repos_recover<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_revert": [
        "Revert changes to the working copy",
        "<span class=\"methodname\">svn_revert<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $recursive<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "svn_status": [
        "Returns the status of working copy files and directories",
        "<span class=\"methodname\">svn_status<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "svn_update": [
        "Update working copy",
        "<span class=\"methodname\">svn_update<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $path<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $revno<span class=\"initializer\"> = SVN_REVISION_HEAD<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $recurse<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "swoole_async_dns_lookup": [
        "Async and non-blocking hostname to IP lookup",
        "<span class=\"methodname\">swoole_async_dns_lookup<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $hostname<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "swoole_async_read": [
        "Read file stream asynchronously",
        "<span class=\"methodname\">swoole_async_read<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $chunk_size<span class=\"initializer\"> = 65536<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "swoole_async_readfile": [
        "Read a file asynchronously",
        "<span class=\"methodname\">swoole_async_readfile<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "swoole_async_set": [
        "Update the async I\/O options",
        "<span class=\"methodname\">swoole_async_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $settings<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "swoole_async_write": [
        "Write data to a file stream asynchronously",
        "<span class=\"methodname\">swoole_async_write<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $content<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "swoole_async_writefile": [
        "Write data to a file asynchronously",
        "<span class=\"methodname\">swoole_async_writefile<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $content<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "swoole_client_select": [
        "Get the file description which are ready to read\/write or error",
        "<span class=\"methodname\">swoole_client_select<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$read_array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$write_array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$error_array<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $timeout<span class=\"initializer\"> = 0.5<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "swoole_cpu_num": [
        "Get the number of CPU",
        "<span class=\"methodname\">swoole_cpu_num<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "swoole_errno": [
        "Get the error code of the latest system call",
        "<span class=\"methodname\">swoole_errno<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "swoole_event_add": [
        "Add new callback functions of a socket into the EventLoop",
        "<span class=\"methodname\">swoole_event_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $read_callback<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $write_callback<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $events<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "swoole_event_defer": [
        "Add callback function to the next event loop",
        "<span class=\"methodname\">swoole_event_defer<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "swoole_event_del": [
        "Remove all event callback functions of a socket",
        "<span class=\"methodname\">swoole_event_del<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $fd<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "swoole_event_exit": [
        "Exit the eventloop, only available at the client side",
        "<span class=\"methodname\">swoole_event_exit<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "swoole_event_set": [
        "Update the event callback functions of a socket",
        "<span class=\"methodname\">swoole_event_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $read_callback<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $write_callback<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $events<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "swoole_event_wait": [
        "Start the event loop",
        "<span class=\"methodname\">swoole_event_wait<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "swoole_event_write": [
        "Write data to a socket",
        "<span class=\"methodname\">swoole_event_write<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $fd<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "swoole_get_local_ip": [
        "Get the IPv4 IP addresses of each NIC on the machine",
        "<span class=\"methodname\">swoole_get_local_ip<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "swoole_last_error": [
        "Get the lastest error message",
        "<span class=\"methodname\">swoole_last_error<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "swoole_load_module": [
        "Load a swoole extension",
        "<span class=\"methodname\">swoole_load_module<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "swoole_select": [
        "Select the file descriptions which are ready to read\/write or error in the eventloop",
        "<span class=\"methodname\">swoole_select<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$read_array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$write_array<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$error_array<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $timeout<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "swoole_set_process_name": [
        "Set the process name",
        "<span class=\"methodname\">swoole_set_process_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $process_name<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $size<span class=\"initializer\"> = 128<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "swoole_strerror": [
        "Convert the Errno into error messages",
        "<span class=\"methodname\">swoole_strerror<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $errno<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $error_type<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "swoole_timer_after": [
        "Trigger a one time callback function in the future",
        "<span class=\"methodname\">swoole_timer_after<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $ms<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $param<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "swoole_timer_clear": [
        "Stop and destory a timer.",
        "<span class=\"methodname\">swoole_timer_clear<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $timer_id<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "swoole_timer_exists": [
        "Check if a timer callback function is existed",
        "<span class=\"methodname\">swoole_timer_exists<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $timer_id<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "swoole_timer_tick": [
        "Trigger a timer tick callback function by time interval",
        "<span class=\"methodname\">swoole_timer_tick<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $ms<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $param<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "swoole_version": [
        "Get the version of Swoole",
        "<span class=\"methodname\">swoole_version<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "symlink": [
        "Creates a symbolic link",
        "<span class=\"methodname\">symlink<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $target<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $link<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "SyncEvent": [
        "A cross-platform, native implementation of named and unnamed event objects. Both automatic and manual event objects are supported.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SyncEvent::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $manual<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $prefire<span class=\"initializer\"> = false<\/span><\/span> )"
    ],
    "SyncMutex": [
        "A cross-platform, native implementation of named and unnamed countable mutex objects.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SyncMutex::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "SyncReaderWriter": [
        "A cross-platform, native implementation of named and unnamed reader-writer objects.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SyncReaderWriter::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $autounlock<span class=\"initializer\"> = true<\/span><\/span> )"
    ],
    "SyncSemaphore": [
        "A cross-platform, native implementation of named and unnamed semaphore objects.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SyncSemaphore::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $initialval<span class=\"initializer\"> = 1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $autounlock<span class=\"initializer\"> = true<\/span><\/span> )"
    ],
    "SyncSharedMemory": [
        "A cross-platform, native, consistent implementation of named shared memory objects.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">SyncSharedMemory::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $size<\/span> )"
    ],
    "sys_get_temp_dir": [
        "Returns directory path used for temporary files",
        "<span class=\"methodname\">sys_get_temp_dir<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "sys_getloadavg": [
        "Gets system load average",
        "<span class=\"methodname\">sys_getloadavg<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "syslog": [
        "Generate a system log message",
        "<span class=\"methodname\">syslog<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $priority<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $message<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "system": [
        "Execute an external program and display the output",
        "<span class=\"methodname\">system<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $command<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$result_code<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "taint": [
        "Taint a string",
        "<span class=\"methodname\">taint<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> &$string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> ...$strings<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "tan": [
        "Tangent",
        "<span class=\"methodname\">tan<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "tanh": [
        "Hyperbolic tangent",
        "<span class=\"methodname\">tanh<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $num<\/span> ) : <span class=\"type\">float<\/span>"
    ],
    "tcpwrap_check": [
        "Performs a tcpwrap check",
        "<span class=\"methodname\">tcpwrap_check<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $daemon<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $address<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $user<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $nodns<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "tempnam": [
        "Create file with unique file name",
        "<span class=\"methodname\">tempnam<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $directory<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $prefix<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "textdomain": [
        "Sets the default domain",
        "<span class=\"methodname\">textdomain<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $domain<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "Thread": [
        "When the start method of a Thread is invoked, the run method code will be executed in separate Thread, in parallel."
    ],
    "Threaded": [
        "Threaded objects form the basis of pthreads ability to execute user code in parallel; they expose synchronization methods and various useful interfaces."
    ],
    "Throwable": [
        "Throwable is the base interface for any object that can be thrown via a throw statement, including Error and Exception."
    ],
    "tidy": [
        "An HTML node in an HTML file, as detected by tidy.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">tidy::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $filename<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $config<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $useIncludePath<span class=\"initializer\"> = false<\/span><\/span> )"
    ],
    "tidy_access_count": [
        "Returns the Number of Tidy accessibility warnings encountered for specified document",
        "<span class=\"methodname\">tidy_access_count<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "tidy_clean_repair": [
        "Execute configured cleanup and repair operations on parsed markup",
        "<span class=\"methodname\">tidy_clean_repair<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "tidy_config_count": [
        "Returns the Number of Tidy configuration errors encountered for specified document",
        "<span class=\"methodname\">tidy_config_count<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "tidy_diagnose": [
        "Run configured diagnostics on parsed and repaired markup",
        "<span class=\"methodname\">tidy_diagnose<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "tidy_error_count": [
        "Returns the Number of Tidy errors encountered for specified document",
        "<span class=\"methodname\">tidy_error_count<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "tidy_get_body": [
        "Returns a tidyNode object starting from the <body> tag of the tidy parse tree",
        "<span class=\"methodname\">tidy_get_body<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> ) : <span class=\"type\"><span class=\"type\">tidyNode<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "tidy_get_config": [
        "Get current Tidy configuration",
        "<span class=\"methodname\">tidy_get_config<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "tidy_get_error_buffer": [
        "Return warnings and errors which occurred parsing the specified document",
        "<span class=\"methodname\">tidy_get_error_buffer<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "tidy_get_head": [
        "Returns a tidyNode object starting from the <head> tag of the tidy parse tree",
        "<span class=\"methodname\">tidy_get_head<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> ) : <span class=\"type\"><span class=\"type\">tidyNode<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "tidy_get_html": [
        "Returns a tidyNode object starting from the <html> tag of the tidy parse tree",
        "<span class=\"methodname\">tidy_get_html<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> ) : <span class=\"type\"><span class=\"type\">tidyNode<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "tidy_get_html_ver": [
        "Get the Detected HTML version for the specified document",
        "<span class=\"methodname\">tidy_get_html_ver<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "tidy_get_opt_doc": [
        "Returns the documentation for the given option name",
        "<span class=\"methodname\">tidy_get_opt_doc<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $option<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "tidy_get_output": [
        "Return a string representing the parsed tidy markup",
        "<span class=\"methodname\">tidy_get_output<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "tidy_get_release": [
        "Get release date (version) for Tidy library",
        "<span class=\"methodname\">tidy_get_release<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "tidy_get_root": [
        "Returns a tidyNode object representing the root of the tidy parse tree",
        "<span class=\"methodname\">tidy_get_root<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> ) : <span class=\"type\"><span class=\"type\">tidyNode<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "tidy_get_status": [
        "Get status of specified document",
        "<span class=\"methodname\">tidy_get_status<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "tidy_getopt": [
        "Returns the value of the specified configuration option for the tidy document",
        "<span class=\"methodname\">tidy_getopt<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $option<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "tidy_is_xhtml": [
        "Indicates if the document is a XHTML document",
        "<span class=\"methodname\">tidy_is_xhtml<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "tidy_is_xml": [
        "Indicates if the document is a generic (non HTML\/XHTML) XML document",
        "<span class=\"methodname\">tidy_is_xml<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "tidy_parse_file": [
        "Parse markup in file or URI",
        "<span class=\"methodname\">tidy_parse_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $config<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $useIncludePath<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">tidy<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "tidy_parse_string": [
        "Parse a document stored in a string",
        "<span class=\"methodname\">tidy_parse_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $config<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">tidy<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "tidy_repair_file": [
        "Repair a file and return it as a string",
        "<span class=\"methodname\">tidy_repair_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $config<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $useIncludePath<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "tidy_repair_string": [
        "Repair a string using an optionally provided configuration file",
        "<span class=\"methodname\">tidy_repair_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $config<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "tidy_warning_count": [
        "Returns the Number of Tidy warnings encountered for specified document",
        "<span class=\"methodname\">tidy_warning_count<\/span> ( <span class=\"methodparam\"><span class=\"type\">tidy<\/span> $tidy<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "tidyNode": [
        "An HTML node in an HTML file, as detected by tidy.",
        "<span class=\"modifier\">private<\/span> <span class=\"methodname\">tidyNode::__construct<\/span> ( )"
    ],
    "time": [
        "Return current Unix timestamp",
        "<span class=\"methodname\">time<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "time_nanosleep": [
        "Delay for a number of seconds and nanoseconds",
        "<span class=\"methodname\">time_nanosleep<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $seconds<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $nanoseconds<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\">bool<\/span><\/span>"
    ],
    "time_sleep_until": [
        "Make the script sleep until the specified time",
        "<span class=\"methodname\">time_sleep_until<\/span> ( <span class=\"methodparam\"><span class=\"type\">float<\/span> $timestamp<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "timezone_abbreviations_list": [
        "Returns associative array containing dst, offset and the timezone name",
        "<span class=\"methodname\">timezone_abbreviations_list<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "timezone_identifiers_list": [
        "Returns a numerically indexed array containing all defined timezone identifiers",
        "<span class=\"methodname\">timezone_identifiers_list<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $timezoneGroup<span class=\"initializer\"> = DateTimeZone::ALL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $countryCode<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "timezone_location_get": [
        "Returns location information for a timezone",
        "<span class=\"methodname\">timezone_location_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTimeZone<\/span> $object<\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "timezone_name_from_abbr": [
        "Returns the timezone name from abbreviation",
        "<span class=\"methodname\">timezone_name_from_abbr<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $abbr<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $utcOffset<span class=\"initializer\"> = -1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $isDST<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "timezone_name_get": [
        "Returns the name of the timezone",
        "<span class=\"methodname\">timezone_name_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTimeZone<\/span> $object<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "timezone_offset_get": [
        "Returns the timezone offset from GMT",
        "<span class=\"methodname\">timezone_offset_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTimeZone<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">DateTimeInterface<\/span> $datetime<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "timezone_open": [
        "Creates new DateTimeZone object",
        "<span class=\"methodname\">timezone_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $timezone<\/span> ) : <span class=\"type\"><span class=\"type\">DateTimeZone<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "timezone_transitions_get": [
        "Returns all transitions for the timezone",
        "<span class=\"methodname\">timezone_transitions_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">DateTimeZone<\/span> $object<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timestampBegin<span class=\"initializer\"> = PHP_INT_MIN<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timestampEnd<span class=\"initializer\"> = PHP_INT_MAX<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "timezone_version_get": [
        "Gets the version of the timezonedb",
        "<span class=\"methodname\">timezone_version_get<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "tmpfile": [
        "Creates a temporary file",
        "<span class=\"methodname\">tmpfile<\/span> ( ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "token_get_all": [
        "Split given source into PHP tokens",
        "<span class=\"methodname\">token_get_all<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $code<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "token_name": [
        "Get the symbolic name of a given PHP token",
        "<span class=\"methodname\">token_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $id<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "TokyoTyrant": [
        "The main Tokyo Tyrant class",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">TokyoTyrant::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $host<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $port<span class=\"initializer\"> = TokyoTyrant::RDBDEF_PORT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "tokyotyrantexception": [
        "TokyoTyrantException"
    ],
    "TokyoTyrantIterator": [
        "Provides an iterator for TokyoTyrant and TokyoTyrantTable objects. The iterator iterates over all keys and values in the database. TokyoTyrantIterator was added in version 0.2.0.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">TokyoTyrantIterator::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $object<\/span> )"
    ],
    "TokyoTyrantQuery": [
        "This class is used to query the table databases",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">TokyoTyrantQuery::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">TokyoTyrantTable<\/span> $table<\/span> )"
    ],
    "TokyoTyrantTable": [
        "Provides an API to the table databases. A table database can be create using the following command: ttserver -port 1979 \/tmp\/tt_table.tct. In Tokyo Tyrant the table API is a schemaless database which can store arbitrary amount of key-value pairs under a single primary key."
    ],
    "touch": [
        "Sets access and modification time of file",
        "<span class=\"methodname\">touch<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $time<span class=\"initializer\"> = time()<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $atime<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "trader_acos": [
        "Vector Trigonometric ACos",
        "<span class=\"methodname\">trader_acos<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_ad": [
        "Chaikin A\/D Line",
        "<span class=\"methodname\">trader_ad<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $volume<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_add": [
        "Vector Arithmetic Add",
        "<span class=\"methodname\">trader_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real0<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $real1<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_adosc": [
        "Chaikin A\/D Oscillator",
        "<span class=\"methodname\">trader_adosc<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $volume<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fastPeriod<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $slowPeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_adx": [
        "Average Directional Movement Index",
        "<span class=\"methodname\">trader_adx<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_adxr": [
        "Average Directional Movement Index Rating",
        "<span class=\"methodname\">trader_adxr<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_apo": [
        "Absolute Price Oscillator",
        "<span class=\"methodname\">trader_apo<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fastPeriod<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $slowPeriod<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mAType<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_aroon": [
        "Aroon",
        "<span class=\"methodname\">trader_aroon<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_aroonosc": [
        "Aroon Oscillator",
        "<span class=\"methodname\">trader_aroonosc<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_asin": [
        "Vector Trigonometric ASin",
        "<span class=\"methodname\">trader_asin<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_atan": [
        "Vector Trigonometric ATan",
        "<span class=\"methodname\">trader_atan<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_atr": [
        "Average True Range",
        "<span class=\"methodname\">trader_atr<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_avgprice": [
        "Average Price",
        "<span class=\"methodname\">trader_avgprice<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_bbands": [
        "Bollinger Bands",
        "<span class=\"methodname\">trader_bbands<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $nbDevUp<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $nbDevDn<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mAType<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_beta": [
        "Beta",
        "<span class=\"methodname\">trader_beta<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real0<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $real1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_bop": [
        "Balance Of Power",
        "<span class=\"methodname\">trader_bop<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cci": [
        "Commodity Channel Index",
        "<span class=\"methodname\">trader_cci<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdl2crows": [
        "Two Crows",
        "<span class=\"methodname\">trader_cdl2crows<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdl3blackcrows": [
        "Three Black Crows",
        "<span class=\"methodname\">trader_cdl3blackcrows<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdl3inside": [
        "Three Inside Up\/Down",
        "<span class=\"methodname\">trader_cdl3inside<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdl3linestrike": [
        "Three-Line Strike",
        "<span class=\"methodname\">trader_cdl3linestrike<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdl3outside": [
        "Three Outside Up\/Down",
        "<span class=\"methodname\">trader_cdl3outside<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdl3starsinsouth": [
        "Three Stars In The South",
        "<span class=\"methodname\">trader_cdl3starsinsouth<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdl3whitesoldiers": [
        "Three Advancing White Soldiers",
        "<span class=\"methodname\">trader_cdl3whitesoldiers<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlabandonedbaby": [
        "Abandoned Baby",
        "<span class=\"methodname\">trader_cdlabandonedbaby<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $penetration<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdladvanceblock": [
        "Advance Block",
        "<span class=\"methodname\">trader_cdladvanceblock<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlbelthold": [
        "Belt-hold",
        "<span class=\"methodname\">trader_cdlbelthold<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlbreakaway": [
        "Breakaway",
        "<span class=\"methodname\">trader_cdlbreakaway<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlclosingmarubozu": [
        "Closing Marubozu",
        "<span class=\"methodname\">trader_cdlclosingmarubozu<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlconcealbabyswall": [
        "Concealing Baby Swallow",
        "<span class=\"methodname\">trader_cdlconcealbabyswall<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlcounterattack": [
        "Counterattack",
        "<span class=\"methodname\">trader_cdlcounterattack<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdldarkcloudcover": [
        "Dark Cloud Cover",
        "<span class=\"methodname\">trader_cdldarkcloudcover<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $penetration<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdldoji": [
        "Doji",
        "<span class=\"methodname\">trader_cdldoji<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdldojistar": [
        "Doji Star",
        "<span class=\"methodname\">trader_cdldojistar<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdldragonflydoji": [
        "Dragonfly Doji",
        "<span class=\"methodname\">trader_cdldragonflydoji<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlengulfing": [
        "Engulfing Pattern",
        "<span class=\"methodname\">trader_cdlengulfing<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdleveningdojistar": [
        "Evening Doji Star",
        "<span class=\"methodname\">trader_cdleveningdojistar<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $penetration<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdleveningstar": [
        "Evening Star",
        "<span class=\"methodname\">trader_cdleveningstar<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $penetration<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlgapsidesidewhite": [
        "Up\/Down-gap side-by-side white lines",
        "<span class=\"methodname\">trader_cdlgapsidesidewhite<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlgravestonedoji": [
        "Gravestone Doji",
        "<span class=\"methodname\">trader_cdlgravestonedoji<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlhammer": [
        "Hammer",
        "<span class=\"methodname\">trader_cdlhammer<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlhangingman": [
        "Hanging Man",
        "<span class=\"methodname\">trader_cdlhangingman<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlharami": [
        "Harami Pattern",
        "<span class=\"methodname\">trader_cdlharami<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlharamicross": [
        "Harami Cross Pattern",
        "<span class=\"methodname\">trader_cdlharamicross<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlhighwave": [
        "High-Wave Candle",
        "<span class=\"methodname\">trader_cdlhighwave<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlhikkake": [
        "Hikkake Pattern",
        "<span class=\"methodname\">trader_cdlhikkake<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlhikkakemod": [
        "Modified Hikkake Pattern",
        "<span class=\"methodname\">trader_cdlhikkakemod<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlhomingpigeon": [
        "Homing Pigeon",
        "<span class=\"methodname\">trader_cdlhomingpigeon<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlidentical3crows": [
        "Identical Three Crows",
        "<span class=\"methodname\">trader_cdlidentical3crows<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlinneck": [
        "In-Neck Pattern",
        "<span class=\"methodname\">trader_cdlinneck<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlinvertedhammer": [
        "Inverted Hammer",
        "<span class=\"methodname\">trader_cdlinvertedhammer<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlkicking": [
        "Kicking",
        "<span class=\"methodname\">trader_cdlkicking<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlkickingbylength": [
        "Kicking - bull\/bear determined by the longer marubozu",
        "<span class=\"methodname\">trader_cdlkickingbylength<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlladderbottom": [
        "Ladder Bottom",
        "<span class=\"methodname\">trader_cdlladderbottom<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdllongleggeddoji": [
        "Long Legged Doji",
        "<span class=\"methodname\">trader_cdllongleggeddoji<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdllongline": [
        "Long Line Candle",
        "<span class=\"methodname\">trader_cdllongline<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlmarubozu": [
        "Marubozu",
        "<span class=\"methodname\">trader_cdlmarubozu<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlmatchinglow": [
        "Matching Low",
        "<span class=\"methodname\">trader_cdlmatchinglow<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlmathold": [
        "Mat Hold",
        "<span class=\"methodname\">trader_cdlmathold<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $penetration<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlmorningdojistar": [
        "Morning Doji Star",
        "<span class=\"methodname\">trader_cdlmorningdojistar<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $penetration<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlmorningstar": [
        "Morning Star",
        "<span class=\"methodname\">trader_cdlmorningstar<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $penetration<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlonneck": [
        "On-Neck Pattern",
        "<span class=\"methodname\">trader_cdlonneck<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlpiercing": [
        "Piercing Pattern",
        "<span class=\"methodname\">trader_cdlpiercing<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlrickshawman": [
        "Rickshaw Man",
        "<span class=\"methodname\">trader_cdlrickshawman<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlrisefall3methods": [
        "Rising\/Falling Three Methods",
        "<span class=\"methodname\">trader_cdlrisefall3methods<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlseparatinglines": [
        "Separating Lines",
        "<span class=\"methodname\">trader_cdlseparatinglines<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlshootingstar": [
        "Shooting Star",
        "<span class=\"methodname\">trader_cdlshootingstar<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlshortline": [
        "Short Line Candle",
        "<span class=\"methodname\">trader_cdlshortline<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlspinningtop": [
        "Spinning Top",
        "<span class=\"methodname\">trader_cdlspinningtop<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlstalledpattern": [
        "Stalled Pattern",
        "<span class=\"methodname\">trader_cdlstalledpattern<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlsticksandwich": [
        "Stick Sandwich",
        "<span class=\"methodname\">trader_cdlsticksandwich<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdltakuri": [
        "Takuri (Dragonfly Doji with very long lower shadow)",
        "<span class=\"methodname\">trader_cdltakuri<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdltasukigap": [
        "Tasuki Gap",
        "<span class=\"methodname\">trader_cdltasukigap<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlthrusting": [
        "Thrusting Pattern",
        "<span class=\"methodname\">trader_cdlthrusting<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdltristar": [
        "Tristar Pattern",
        "<span class=\"methodname\">trader_cdltristar<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlunique3river": [
        "Unique 3 River",
        "<span class=\"methodname\">trader_cdlunique3river<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlupsidegap2crows": [
        "Upside Gap Two Crows",
        "<span class=\"methodname\">trader_cdlupsidegap2crows<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cdlxsidegap3methods": [
        "Upside\/Downside Gap Three Methods",
        "<span class=\"methodname\">trader_cdlxsidegap3methods<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $open<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_ceil": [
        "Vector Ceil",
        "<span class=\"methodname\">trader_ceil<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cmo": [
        "Chande Momentum Oscillator",
        "<span class=\"methodname\">trader_cmo<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_correl": [
        "Pearson's Correlation Coefficient (r)",
        "<span class=\"methodname\">trader_correl<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real0<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $real1<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cos": [
        "Vector Trigonometric Cos",
        "<span class=\"methodname\">trader_cos<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_cosh": [
        "Vector Trigonometric Cosh",
        "<span class=\"methodname\">trader_cosh<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_dema": [
        "Double Exponential Moving Average",
        "<span class=\"methodname\">trader_dema<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_div": [
        "Vector Arithmetic Div",
        "<span class=\"methodname\">trader_div<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real0<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $real1<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_dx": [
        "Directional Movement Index",
        "<span class=\"methodname\">trader_dx<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_ema": [
        "Exponential Moving Average",
        "<span class=\"methodname\">trader_ema<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_errno": [
        "Get error code",
        "<span class=\"methodname\">trader_errno<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "trader_exp": [
        "Vector Arithmetic Exp",
        "<span class=\"methodname\">trader_exp<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_floor": [
        "Vector Floor",
        "<span class=\"methodname\">trader_floor<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_get_compat": [
        "Get compatibility mode",
        "<span class=\"methodname\">trader_get_compat<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "trader_get_unstable_period": [
        "Get unstable period",
        "<span class=\"methodname\">trader_get_unstable_period<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $functionId<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "trader_ht_dcperiod": [
        "Hilbert Transform - Dominant Cycle Period",
        "<span class=\"methodname\">trader_ht_dcperiod<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_ht_dcphase": [
        "Hilbert Transform - Dominant Cycle Phase",
        "<span class=\"methodname\">trader_ht_dcphase<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_ht_phasor": [
        "Hilbert Transform - Phasor Components",
        "<span class=\"methodname\">trader_ht_phasor<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_ht_sine": [
        "Hilbert Transform - SineWave",
        "<span class=\"methodname\">trader_ht_sine<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_ht_trendline": [
        "Hilbert Transform - Instantaneous Trendline",
        "<span class=\"methodname\">trader_ht_trendline<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_ht_trendmode": [
        "Hilbert Transform - Trend vs Cycle Mode",
        "<span class=\"methodname\">trader_ht_trendmode<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_kama": [
        "Kaufman Adaptive Moving Average",
        "<span class=\"methodname\">trader_kama<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_linearreg": [
        "Linear Regression",
        "<span class=\"methodname\">trader_linearreg<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_linearreg_angle": [
        "Linear Regression Angle",
        "<span class=\"methodname\">trader_linearreg_angle<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_linearreg_intercept": [
        "Linear Regression Intercept",
        "<span class=\"methodname\">trader_linearreg_intercept<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_linearreg_slope": [
        "Linear Regression Slope",
        "<span class=\"methodname\">trader_linearreg_slope<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_ln": [
        "Vector Log Natural",
        "<span class=\"methodname\">trader_ln<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_log10": [
        "Vector Log10",
        "<span class=\"methodname\">trader_log10<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_ma": [
        "Moving average",
        "<span class=\"methodname\">trader_ma<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mAType<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_macd": [
        "Moving Average Convergence\/Divergence",
        "<span class=\"methodname\">trader_macd<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fastPeriod<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $slowPeriod<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $signalPeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_macdext": [
        "MACD with controllable MA type",
        "<span class=\"methodname\">trader_macdext<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fastPeriod<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fastMAType<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $slowPeriod<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $slowMAType<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $signalPeriod<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $signalMAType<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_macdfix": [
        "Moving Average Convergence\/Divergence Fix 12\/26",
        "<span class=\"methodname\">trader_macdfix<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $signalPeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_mama": [
        "MESA Adaptive Moving Average",
        "<span class=\"methodname\">trader_mama<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $fastLimit<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $slowLimit<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_mavp": [
        "Moving average with variable period",
        "<span class=\"methodname\">trader_mavp<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $periods<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $minPeriod<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $maxPeriod<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mAType<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_max": [
        "Highest value over a specified period",
        "<span class=\"methodname\">trader_max<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_maxindex": [
        "Index of highest value over a specified period",
        "<span class=\"methodname\">trader_maxindex<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_medprice": [
        "Median Price",
        "<span class=\"methodname\">trader_medprice<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_mfi": [
        "Money Flow Index",
        "<span class=\"methodname\">trader_mfi<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $volume<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_midpoint": [
        "MidPoint over period",
        "<span class=\"methodname\">trader_midpoint<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_midprice": [
        "Midpoint Price over period",
        "<span class=\"methodname\">trader_midprice<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_min": [
        "Lowest value over a specified period",
        "<span class=\"methodname\">trader_min<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_minindex": [
        "Index of lowest value over a specified period",
        "<span class=\"methodname\">trader_minindex<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_minmax": [
        "Lowest and highest values over a specified period",
        "<span class=\"methodname\">trader_minmax<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_minmaxindex": [
        "Indexes of lowest and highest values over a specified period",
        "<span class=\"methodname\">trader_minmaxindex<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_minus_di": [
        "Minus Directional Indicator",
        "<span class=\"methodname\">trader_minus_di<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_minus_dm": [
        "Minus Directional Movement",
        "<span class=\"methodname\">trader_minus_dm<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_mom": [
        "Momentum",
        "<span class=\"methodname\">trader_mom<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_mult": [
        "Vector Arithmetic Mult",
        "<span class=\"methodname\">trader_mult<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real0<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $real1<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_natr": [
        "Normalized Average True Range",
        "<span class=\"methodname\">trader_natr<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_obv": [
        "On Balance Volume",
        "<span class=\"methodname\">trader_obv<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $volume<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_plus_di": [
        "Plus Directional Indicator",
        "<span class=\"methodname\">trader_plus_di<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_plus_dm": [
        "Plus Directional Movement",
        "<span class=\"methodname\">trader_plus_dm<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_ppo": [
        "Percentage Price Oscillator",
        "<span class=\"methodname\">trader_ppo<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fastPeriod<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $slowPeriod<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $mAType<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_roc": [
        "Rate of change : ((price\/prevPrice)-1)*100",
        "<span class=\"methodname\">trader_roc<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_rocp": [
        "Rate of change Percentage: (price-prevPrice)\/prevPrice",
        "<span class=\"methodname\">trader_rocp<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_rocr": [
        "Rate of change ratio: (price\/prevPrice)",
        "<span class=\"methodname\">trader_rocr<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_rocr100": [
        "Rate of change ratio 100 scale: (price\/prevPrice)*100",
        "<span class=\"methodname\">trader_rocr100<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_rsi": [
        "Relative Strength Index",
        "<span class=\"methodname\">trader_rsi<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_sar": [
        "Parabolic SAR",
        "<span class=\"methodname\">trader_sar<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $acceleration<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $maximum<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_sarext": [
        "Parabolic SAR - Extended",
        "<span class=\"methodname\">trader_sarext<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $startValue<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $offsetOnReverse<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $accelerationInitLong<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $accelerationLong<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $accelerationMaxLong<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $accelerationInitShort<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $accelerationShort<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $accelerationMaxShort<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_set_compat": [
        "Set compatibility mode",
        "<span class=\"methodname\">trader_set_compat<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $compatId<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "trader_set_unstable_period": [
        "Set unstable period",
        "<span class=\"methodname\">trader_set_unstable_period<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $functionId<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "trader_sin": [
        "Vector Trigonometric Sin",
        "<span class=\"methodname\">trader_sin<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_sinh": [
        "Vector Trigonometric Sinh",
        "<span class=\"methodname\">trader_sinh<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_sma": [
        "Simple Moving Average",
        "<span class=\"methodname\">trader_sma<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_sqrt": [
        "Vector Square Root",
        "<span class=\"methodname\">trader_sqrt<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_stddev": [
        "Standard Deviation",
        "<span class=\"methodname\">trader_stddev<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $nbDev<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_stoch": [
        "Stochastic",
        "<span class=\"methodname\">trader_stoch<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fastK_Period<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $slowK_Period<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $slowK_MAType<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $slowD_Period<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $slowD_MAType<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_stochf": [
        "Stochastic Fast",
        "<span class=\"methodname\">trader_stochf<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fastK_Period<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fastD_Period<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fastD_MAType<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_stochrsi": [
        "Stochastic Relative Strength Index",
        "<span class=\"methodname\">trader_stochrsi<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fastK_Period<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fastD_Period<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $fastD_MAType<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_sub": [
        "Vector Arithmetic Subtraction",
        "<span class=\"methodname\">trader_sub<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real0<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $real1<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_sum": [
        "Summation",
        "<span class=\"methodname\">trader_sum<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_t3": [
        "Triple Exponential Moving Average (T3)",
        "<span class=\"methodname\">trader_t3<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $vFactor<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_tan": [
        "Vector Trigonometric Tan",
        "<span class=\"methodname\">trader_tan<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_tanh": [
        "Vector Trigonometric Tanh",
        "<span class=\"methodname\">trader_tanh<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_tema": [
        "Triple Exponential Moving Average",
        "<span class=\"methodname\">trader_tema<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_trange": [
        "True Range",
        "<span class=\"methodname\">trader_trange<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_trima": [
        "Triangular Moving Average",
        "<span class=\"methodname\">trader_trima<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_trix": [
        "1-day Rate-Of-Change (ROC) of a Triple Smooth EMA",
        "<span class=\"methodname\">trader_trix<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_tsf": [
        "Time Series Forecast",
        "<span class=\"methodname\">trader_tsf<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_typprice": [
        "Typical Price",
        "<span class=\"methodname\">trader_typprice<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_ultosc": [
        "Ultimate Oscillator",
        "<span class=\"methodname\">trader_ultosc<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod1<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod2<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod3<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_var": [
        "Variance",
        "<span class=\"methodname\">trader_var<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">float<\/span> $nbDev<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_wclprice": [
        "Weighted Close Price",
        "<span class=\"methodname\">trader_wclprice<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_willr": [
        "Williams' %R",
        "<span class=\"methodname\">trader_willr<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $high<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $low<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $close<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trader_wma": [
        "Weighted Moving Average",
        "<span class=\"methodname\">trader_wma<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $real<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $timePeriod<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "trait_exists": [
        "Checks if the trait exists",
        "<span class=\"methodname\">trait_exists<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $traitname<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $autoload<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "Transliterator": [
        "Private constructor to deny instantiation",
        "<span class=\"modifier\">private<\/span> <span class=\"methodname\">Transliterator::__construct<\/span> ( )"
    ],
    "transliterator_create": [
        "Create a transliterator",
        "<span class=\"methodname\">transliterator_create<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $direction<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">Transliterator<\/span>"
    ],
    "transliterator_create_from_rules": [
        "Create transliterator from rules",
        "<span class=\"methodname\">transliterator_create_from_rules<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $direction<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">Transliterator<\/span>"
    ],
    "transliterator_create_inverse": [
        "Create an inverse transliterator",
        "<span class=\"methodname\">transliterator_create_inverse<\/span> ( ) : <span class=\"type\">Transliterator<\/span>"
    ],
    "transliterator_get_error_code": [
        "Get last error code",
        "<span class=\"methodname\">transliterator_get_error_code<\/span> ( <span class=\"methodparam\"><span class=\"type\">Transliterator<\/span> $trans<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "transliterator_get_error_message": [
        "Get last error message",
        "<span class=\"methodname\">transliterator_get_error_message<\/span> ( <span class=\"methodparam\"><span class=\"type\">Transliterator<\/span> $trans<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "transliterator_list_ids": [
        "Get transliterator IDs",
        "<span class=\"methodname\">transliterator_list_ids<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "transliterator_transliterate": [
        "Transliterate a string",
        "<span class=\"methodname\">transliterator_transliterate<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $transliterator<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $subject<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $start<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $end<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "Traversable": [
        "Interface to detect if a class is traversable using foreach."
    ],
    "trigger_error": [
        "Generates a user-level error\/warning\/notice message",
        "<span class=\"methodname\">trigger_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $error_msg<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $error_type<span class=\"initializer\"> = E_USER_NOTICE<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "trim": [
        "Strip whitespace (or other characters) from the beginning and end of a string",
        "<span class=\"methodname\">trim<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $characters<span class=\"initializer\"> = \" \\n\\r\\t\\v\\0\"<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "TypeError": [
        "There are three scenarios where a TypeError may be thrown. The first is where the argument type being passed to a function does not match its corresponding declared parameter type. The second is where a value being returned from a function does not match the declared function return type. The third is where an invalid number of arguments are passed to a built-in PHP function (strict mode only)."
    ],
    "uasort": [
        "Sort an array with a user-defined comparison function and maintain index association",
        "<span class=\"methodname\">uasort<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "ucfirst": [
        "Make a string's first character uppercase",
        "<span class=\"methodname\">ucfirst<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "UConverter": [
        "Create UConverter object",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">UConverter::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $destination_encoding<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $source_encoding<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "ucwords": [
        "Uppercase the first character of each word in a string",
        "<span class=\"methodname\">ucwords<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $separators<span class=\"initializer\"> = \" \\t\\r\\n\\f\\v\"<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "uksort": [
        "Sort an array by keys using a user-defined comparison function",
        "<span class=\"methodname\">uksort<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "umask": [
        "Changes the current umask",
        "<span class=\"methodname\">umask<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $mask<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "UnderflowException": [
        "Exception thrown when performing an invalid operation on an empty container, such as removing an element."
    ],
    "UnexpectedValueException": [
        "Exception thrown if a value does not match with a set of values. Typically this happens when a function calls another function and expects the return value to be of a certain type or value not including arithmetic or buffer related errors."
    ],
    "UnhandledMatchError": [
        "An UnhandledMatchError is thrown when the subject passed to a match expression is not handled by any arm of the match expression."
    ],
    "uniqid": [
        "Generate a unique ID",
        "<span class=\"methodname\">uniqid<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $prefix<span class=\"initializer\"> = \"\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $more_entropy<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "unixtojd": [
        "Convert Unix timestamp to Julian Day",
        "<span class=\"methodname\">unixtojd<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span> $timestamp<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "unlink": [
        "Deletes a file",
        "<span class=\"methodname\">unlink<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $context<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "unpack": [
        "Unpack data from binary string",
        "<span class=\"methodname\">unpack<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $offset<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "unregister_tick_function": [
        "De-register a function for execution on each tick",
        "<span class=\"methodname\">unregister_tick_function<\/span> ( <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "unserialize": [
        "Creates a PHP value from a stored representation",
        "<span class=\"methodname\">unserialize<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = []<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "unset": [
        "Unset a given variable",
        "<span class=\"methodname\">unset<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $var<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$vars<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "untaint": [
        "Untaint strings",
        "<span class=\"methodname\">untaint<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> &$string<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> ...$strings<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "uopz_add_function": [
        "Adds non-existent function or method",
        "<span class=\"methodname\">uopz_add_function<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> , <span class=\"methodparam\"><span class=\"type\">Closure<\/span> $handler<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$flags<span class=\"initializer\"> = ZEND_ACC_PUBLIC<\/span><\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">uopz_add_function<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> , <span class=\"methodparam\"><span class=\"type\">Closure<\/span> $handler<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$flags<span class=\"initializer\"> = ZEND_ACC_PUBLIC<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$all<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "uopz_allow_exit": [
        "Allows control over disabled exit opcode",
        "<span class=\"methodname\">uopz_allow_exit<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $allow<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "uopz_backup": [
        "Backup a function",
        "<span class=\"methodname\">uopz_backup<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>",
        "<span class=\"methodname\">uopz_backup<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "uopz_compose": [
        "Compose a class",
        "<span class=\"methodname\">uopz_compose<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $classes<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $methods<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $properties<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "uopz_copy": [
        "Copy a function",
        "<span class=\"methodname\">uopz_copy<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\">Closure<\/span>",
        "<span class=\"methodname\">uopz_copy<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\">Closure<\/span>"
    ],
    "uopz_del_function": [
        "Deletes previously added function or method",
        "<span class=\"methodname\">uopz_del_function<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">uopz_del_function<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$all<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "uopz_delete": [
        "Delete a function",
        "<span class=\"methodname\">uopz_delete<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>",
        "<span class=\"methodname\">uopz_delete<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "uopz_extend": [
        "Extend a class at runtime",
        "<span class=\"methodname\">uopz_extend<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $parent<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "uopz_flags": [
        "Get or set flags on function or class",
        "<span class=\"methodname\">uopz_flags<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = PHP_INT_MAX<\/span><\/span> ) : <span class=\"type\">int<\/span>",
        "<span class=\"methodname\">uopz_flags<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = PHP_INT_MAX<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "uopz_function": [
        "Creates a function at runtime",
        "<span class=\"methodname\">uopz_function<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> , <span class=\"methodparam\"><span class=\"type\">Closure<\/span> $handler<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $modifiers<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>",
        "<span class=\"methodname\">uopz_function<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> , <span class=\"methodparam\"><span class=\"type\">Closure<\/span> $handler<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $modifiers<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "uopz_get_exit_status": [
        "Retrieve the last set exit status",
        "<span class=\"methodname\">uopz_get_exit_status<\/span> ( ) : <span class=\"type\">mixed<\/span>"
    ],
    "uopz_get_hook": [
        "Gets previously set hook on function or method",
        "<span class=\"methodname\">uopz_get_hook<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\">Closure<\/span>",
        "<span class=\"methodname\">uopz_get_hook<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\">Closure<\/span>"
    ],
    "uopz_get_mock": [
        "Get the current mock for a class",
        "<span class=\"methodname\">uopz_get_mock<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "uopz_get_property": [
        "Gets value of class or instance property",
        "<span class=\"methodname\">uopz_get_property<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $property<\/span> ) : <span class=\"type\">mixed<\/span>",
        "<span class=\"methodname\">uopz_get_property<\/span> ( <span class=\"methodparam\"><span class=\"type\">object<\/span> $instance<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $property<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "uopz_get_return": [
        "Gets a previous set return value for a function",
        "<span class=\"methodname\">uopz_get_return<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\">mixed<\/span>",
        "<span class=\"methodname\">uopz_get_return<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "uopz_get_static": [
        "Gets the static variables from function or method scope",
        "<span class=\"methodname\">uopz_get_static<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\">array<\/span>",
        "<span class=\"methodname\">uopz_get_static<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "uopz_implement": [
        "Implements an interface at runtime",
        "<span class=\"methodname\">uopz_implement<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $interface<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "uopz_overload": [
        "Overload a VM opcode",
        "<span class=\"methodname\">uopz_overload<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $opcode<\/span> , <span class=\"methodparam\"><span class=\"type\">Callable<\/span> $callable<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "uopz_redefine": [
        "Redefine a constant",
        "<span class=\"methodname\">uopz_redefine<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $constant<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">uopz_redefine<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $constant<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "uopz_rename": [
        "Rename a function at runtime",
        "<span class=\"methodname\">uopz_rename<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $rename<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>",
        "<span class=\"methodname\">uopz_rename<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $rename<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "uopz_restore": [
        "Restore a previously backed up function",
        "<span class=\"methodname\">uopz_restore<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>",
        "<span class=\"methodname\">uopz_restore<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "uopz_set_hook": [
        "Sets hook to execute when entering a function or method",
        "<span class=\"methodname\">uopz_set_hook<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> , <span class=\"methodparam\"><span class=\"type\">Closure<\/span> $hook<\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">uopz_set_hook<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> , <span class=\"methodparam\"><span class=\"type\">Closure<\/span> $hook<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "uopz_set_mock": [
        "Use mock instead of class for new objects",
        "<span class=\"methodname\">uopz_set_mock<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $mock<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "uopz_set_property": [
        "Sets value of existing class or instance property",
        "<span class=\"methodname\">uopz_set_property<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $property<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>",
        "<span class=\"methodname\">uopz_set_property<\/span> ( <span class=\"methodparam\"><span class=\"type\">object<\/span> $instance<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $property<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "uopz_set_return": [
        "Provide a return value for an existing function",
        "<span class=\"methodname\">uopz_set_return<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $execute<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">uopz_set_return<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $execute<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "uopz_set_static": [
        "Sets the static variables in function or method scope",
        "<span class=\"methodname\">uopz_set_static<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $static<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>",
        "<span class=\"methodname\">uopz_set_static<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $static<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "uopz_undefine": [
        "Undefine a constant",
        "<span class=\"methodname\">uopz_undefine<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $constant<\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">uopz_undefine<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $constant<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "uopz_unset_hook": [
        "Removes previously set hook on function or method",
        "<span class=\"methodname\">uopz_unset_hook<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">uopz_unset_hook<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "uopz_unset_mock": [
        "Unset previously set mock",
        "<span class=\"methodname\">uopz_unset_mock<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "uopz_unset_return": [
        "Unsets a previously set return value for a function",
        "<span class=\"methodname\">uopz_unset_return<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">uopz_unset_return<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $class<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "urldecode": [
        "Decodes URL-encoded string",
        "<span class=\"methodname\">urldecode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "urlencode": [
        "URL-encodes string",
        "<span class=\"methodname\">urlencode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "use_soap_error_handler": [
        "Set whether to use the SOAP error handler",
        "<span class=\"methodname\">use_soap_error_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $enable<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "usleep": [
        "Delay execution in microseconds",
        "<span class=\"methodname\">usleep<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $microseconds<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "usort": [
        "Sort an array by values using a user-defined comparison function",
        "<span class=\"methodname\">usort<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$array<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $callback<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "utf8_decode": [
        "Converts a string with ISO-8859-1 characters encoded with UTF-8\n   to single-byte ISO-8859-1",
        "<span class=\"methodname\">utf8_decode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "utf8_encode": [
        "Encodes an ISO-8859-1 string to UTF-8",
        "<span class=\"methodname\">utf8_encode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "V8Js": [
        "This is the core class for V8Js extension. Each instance created from this class has own context in which all JavaScript is compiled and executed.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">V8Js::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $object_name<span class=\"initializer\"> = \"PHP\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $variables<span class=\"initializer\"> = array()<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $extensions<span class=\"initializer\"> = array()<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $report_uncaught_exceptions<span class=\"initializer\"> = true<\/span><\/span> )"
    ],
    "ValueError": [
        "A ValueError is thrown when the type of an argument is correct but the value of it is incorrect. For example, passing a negative integer when the function expects a positive one, or passing an empty string\/array when the function expects it to not be empty."
    ],
    "var_dump": [
        "Dumps information about a variable",
        "<span class=\"methodname\">var_dump<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$values<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "var_export": [
        "Outputs or returns a parsable string representation of a variable",
        "<span class=\"methodname\">var_export<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $return<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "variant": [
        "The VARIANT is COM's equivalent of the PHP zval; it is a structure that can contain a value with a range of different possible types. The variant class provided by the COM extension allows you to have more control over the way that PHP passes values to and from COM.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">variant::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<span class=\"initializer\"> = VT_EMPTY<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $codepage<span class=\"initializer\"> = CP_ACP<\/span><\/span> )"
    ],
    "variant_abs": [
        "Returns the absolute value of a variant",
        "<span class=\"methodname\">variant_abs<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_add": [
        "\"Adds\" two variant values together and returns the result",
        "<span class=\"methodname\">variant_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $left<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $right<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_and": [
        "Performs a bitwise AND operation between two variants",
        "<span class=\"methodname\">variant_and<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $left<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $right<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_cast": [
        "Convert a variant into a new variant object of another type",
        "<span class=\"methodname\">variant_cast<\/span> ( <span class=\"methodparam\"><span class=\"type\">variant<\/span> $variant<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_cat": [
        "Concatenates two variant values together and returns the result",
        "<span class=\"methodname\">variant_cat<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $left<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $right<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_cmp": [
        "Compares two variants",
        "<span class=\"methodname\">variant_cmp<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $left<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $right<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $locale_id<span class=\"initializer\"> = LOCALE_SYSTEM_DEFAULT<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "variant_date_from_timestamp": [
        "Returns a variant date representation of a Unix timestamp",
        "<span class=\"methodname\">variant_date_from_timestamp<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $timestamp<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_date_to_timestamp": [
        "Converts a variant date\/time value to Unix timestamp",
        "<span class=\"methodname\">variant_date_to_timestamp<\/span> ( <span class=\"methodparam\"><span class=\"type\">variant<\/span> $variant<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "variant_div": [
        "Returns the result from dividing two variants",
        "<span class=\"methodname\">variant_div<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $left<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $right<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_eqv": [
        "Performs a bitwise equivalence on two variants",
        "<span class=\"methodname\">variant_eqv<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $left<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $right<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_fix": [
        "Returns the integer portion of a variant",
        "<span class=\"methodname\">variant_fix<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_get_type": [
        "Returns the type of a variant object",
        "<span class=\"methodname\">variant_get_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">variant<\/span> $variant<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "variant_idiv": [
        "Converts variants to integers and then returns the result from dividing them",
        "<span class=\"methodname\">variant_idiv<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $left<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $right<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_imp": [
        "Performs a bitwise implication on two variants",
        "<span class=\"methodname\">variant_imp<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $left<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $right<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_int": [
        "Returns the integer portion of a variant",
        "<span class=\"methodname\">variant_int<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_mod": [
        "Divides two variants and returns only the remainder",
        "<span class=\"methodname\">variant_mod<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $left<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $right<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_mul": [
        "Multiplies the values of the two variants",
        "<span class=\"methodname\">variant_mul<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $left<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $right<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_neg": [
        "Performs logical negation on a variant",
        "<span class=\"methodname\">variant_neg<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_not": [
        "Performs bitwise not negation on a variant",
        "<span class=\"methodname\">variant_not<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_or": [
        "Performs a logical disjunction on two variants",
        "<span class=\"methodname\">variant_or<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $left<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $right<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_pow": [
        "Returns the result of performing the power function with two variants",
        "<span class=\"methodname\">variant_pow<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $left<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $right<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_round": [
        "Rounds a variant to the specified number of decimal places",
        "<span class=\"methodname\">variant_round<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $decimals<\/span> ) : <span class=\"type\"><span class=\"type\">variant<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "variant_set": [
        "Assigns a new value for a variant object",
        "<span class=\"methodname\">variant_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">variant<\/span> $variant<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "variant_set_type": [
        "Convert a variant into another type \"in-place\"",
        "<span class=\"methodname\">variant_set_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">variant<\/span> $variant<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "variant_sub": [
        "Subtracts the value of the right variant from the left variant value",
        "<span class=\"methodname\">variant_sub<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $left<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $right<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "variant_xor": [
        "Performs a logical exclusion on two variants",
        "<span class=\"methodname\">variant_xor<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $left<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $right<\/span> ) : <span class=\"type\">variant<\/span>"
    ],
    "VarnishAdmin": [
        "VarnishAdmin constructor",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">VarnishAdmin::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $args<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "VarnishLog": [
        "Varnishlog constructor",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">VarnishLog::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $args<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "VarnishStat": [
        "VarnishStat constructor",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">VarnishStat::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $args<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "version_compare": [
        "Compares two \"PHP-standardized\" version number strings",
        "<span class=\"methodname\">version_compare<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $version1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $version2<\/span> ) : <span class=\"type\">int<\/span>",
        "<span class=\"methodname\">version_compare<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $version1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $version2<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $operator<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "vfprintf": [
        "Write a formatted string to a stream",
        "<span class=\"methodname\">vfprintf<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $stream<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $values<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "virtual": [
        "Perform an Apache sub-request",
        "<span class=\"methodname\">virtual<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $uri<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "Volatile": [
        "The Volatile class is new to pthreads v3. Its introduction is a consequence of the new immutability semantics of Threaded members of Threaded classes. The Volatile class enables for mutability of its Threaded members, and is also used to store PHP arrays in Threaded contexts."
    ],
    "vprintf": [
        "Output a formatted string",
        "<span class=\"methodname\">vprintf<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $values<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "vsprintf": [
        "Return a formatted string",
        "<span class=\"methodname\">vsprintf<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $format<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $values<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "wddx_add_vars": [
        "Add variables to a WDDX packet with the specified ID",
        "<span class=\"methodname\">wddx_add_vars<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $packet_id<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $var_name<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$var_names<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "wddx_deserialize": [
        "Unserializes a WDDX packet",
        "<span class=\"methodname\">wddx_deserialize<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $packet<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "wddx_packet_end": [
        "Ends a WDDX packet with the specified ID",
        "<span class=\"methodname\">wddx_packet_end<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $packet_id<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "wddx_packet_start": [
        "Starts a new WDDX packet with structure inside it",
        "<span class=\"methodname\">wddx_packet_start<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $comment<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">resource<\/span>"
    ],
    "wddx_serialize_value": [
        "Serialize a single value into a WDDX packet",
        "<span class=\"methodname\">wddx_serialize_value<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $var<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $comment<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "wddx_serialize_vars": [
        "Serialize variables into a WDDX packet",
        "<span class=\"methodname\">wddx_serialize_vars<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $var_name<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> ...$var_names<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "WeakMap": [
        "Constructs a new map",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">WeakMap::__construct<\/span> ( )"
    ],
    "WeakRef": [
        "The WeakRef class provides a gateway to objects without preventing the garbage collector from freeing those objects. It also provides a way to turn a weak reference into a strong one.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Weakref::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">object<\/span> $object<\/span> )"
    ],
    "WeakReference": [
        "Weak references allow the programmer to retain a reference to an object which does not prevent the object from being destroyed. They are useful for implementing cache like structures.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">WeakReference::__construct<\/span> ( )"
    ],
    "win32_continue_service": [
        "Resumes a paused service",
        "<span class=\"methodname\">win32_continue_service<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $servicename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $machine<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "win32_create_service": [
        "Creates a new service entry in the SCM database",
        "<span class=\"methodname\">win32_create_service<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $details<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $machine<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "win32_delete_service": [
        "Deletes a service entry from the SCM database",
        "<span class=\"methodname\">win32_delete_service<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $servicename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $machine<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "win32_get_last_control_message": [
        "Returns the last control message that was sent to this service",
        "<span class=\"methodname\">win32_get_last_control_message<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "win32_pause_service": [
        "Pauses a service",
        "<span class=\"methodname\">win32_pause_service<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $servicename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $machine<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "win32_query_service_status": [
        "Queries the status of a service",
        "<span class=\"methodname\">win32_query_service_status<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $servicename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $machine<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "win32_send_custom_control": [
        "Send a custom control to the service",
        "<span class=\"methodname\">win32_send_custom_control<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $servicename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $control<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $machine<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "win32_set_service_exit_code": [
        "Define or return the exit code for the current running service",
        "<span class=\"methodname\">win32_set_service_exit_code<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $exitCode<span class=\"initializer\"> = 1<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "win32_set_service_exit_mode": [
        "Define or return the exit mode for the current running service",
        "<span class=\"methodname\">win32_set_service_exit_mode<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $gracefulMode<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "win32_set_service_status": [
        "Update the service status",
        "<span class=\"methodname\">win32_set_service_status<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $status<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $checkpoint<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "win32_start_service": [
        "Starts a service",
        "<span class=\"methodname\">win32_start_service<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $servicename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $machine<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "win32_start_service_ctrl_dispatcher": [
        "Registers the script with the SCM, so that it can act as the service with the given name",
        "<span class=\"methodname\">win32_start_service_ctrl_dispatcher<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $gracefulMode<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "win32_stop_service": [
        "Stops a service",
        "<span class=\"methodname\">win32_stop_service<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $servicename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $machine<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "Win32ServiceException": [
        "The exception replaces the old mechanism where the error value needed to be compared to constants to detect which error was emitted. The Exception code is equal to the value of the error value and the exception message is based on the corresponding constant name."
    ],
    "wincache_fcache_fileinfo": [
        "Retrieves information about files cached in the file cache",
        "<span class=\"methodname\">wincache_fcache_fileinfo<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $summaryonly<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "wincache_fcache_meminfo": [
        "Retrieves information about file cache memory usage",
        "<span class=\"methodname\">wincache_fcache_meminfo<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "wincache_lock": [
        "Acquires an exclusive lock on a given key",
        "<span class=\"methodname\">wincache_lock<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $isglobal<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "wincache_ocache_fileinfo": [
        "Retrieves information about files cached in the opcode cache",
        "<span class=\"methodname\">wincache_ocache_fileinfo<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $summaryonly<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "wincache_ocache_meminfo": [
        "Retrieves information about opcode cache memory usage",
        "<span class=\"methodname\">wincache_ocache_meminfo<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "wincache_refresh_if_changed": [
        "Refreshes the cache entries for the cached files",
        "<span class=\"methodname\">wincache_refresh_if_changed<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $files<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "wincache_rplist_fileinfo": [
        "Retrieves information about resolve file path cache",
        "<span class=\"methodname\">wincache_rplist_fileinfo<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $summaryonly<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "wincache_rplist_meminfo": [
        "Retrieves information about memory usage by the resolve file path cache",
        "<span class=\"methodname\">wincache_rplist_meminfo<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "wincache_scache_info": [
        "Retrieves information about files cached in the session cache",
        "<span class=\"methodname\">wincache_scache_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $summaryonly<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "wincache_scache_meminfo": [
        "Retrieves information about session cache memory usage",
        "<span class=\"methodname\">wincache_scache_meminfo<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "wincache_ucache_add": [
        "Adds a variable in user cache only if variable does not already exist in the cache",
        "<span class=\"methodname\">wincache_ucache_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $ttl<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">wincache_ucache_add<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $values<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $unused<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $ttl<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "wincache_ucache_cas": [
        "Compares the variable with old value and assigns new value to it",
        "<span class=\"methodname\">wincache_ucache_cas<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $old_value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $new_value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "wincache_ucache_clear": [
        "Deletes entire content of the user cache",
        "<span class=\"methodname\">wincache_ucache_clear<\/span> ( ) : <span class=\"type\">bool<\/span>"
    ],
    "wincache_ucache_dec": [
        "Decrements the value associated with the key",
        "<span class=\"methodname\">wincache_ucache_dec<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $dec_by<span class=\"initializer\"> = 1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> &$success<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "wincache_ucache_delete": [
        "Deletes variables from the user cache",
        "<span class=\"methodname\">wincache_ucache_delete<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $key<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "wincache_ucache_exists": [
        "Checks if a variable exists in the user cache",
        "<span class=\"methodname\">wincache_ucache_exists<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "wincache_ucache_get": [
        "Gets a variable stored in the user cache",
        "<span class=\"methodname\">wincache_ucache_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> &$success<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "wincache_ucache_inc": [
        "Increments the value associated with the key",
        "<span class=\"methodname\">wincache_ucache_inc<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $inc_by<span class=\"initializer\"> = 1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> &$success<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "wincache_ucache_info": [
        "Retrieves information about data stored in the user cache",
        "<span class=\"methodname\">wincache_ucache_info<\/span> ( <span class=\"methodparam\"><span class=\"type\">bool<\/span> $summaryonly<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<span class=\"initializer\"> = NULL<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "wincache_ucache_meminfo": [
        "Retrieves information about user cache memory usage",
        "<span class=\"methodname\">wincache_ucache_meminfo<\/span> ( ) : <span class=\"type\"><span class=\"type\">array<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "wincache_ucache_set": [
        "Adds a variable in user cache and overwrites a variable if it already exists in the cache",
        "<span class=\"methodname\">wincache_ucache_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $key<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $ttl<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>",
        "<span class=\"methodname\">wincache_ucache_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $values<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $unused<span class=\"initializer\"> = NULL<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $ttl<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "wincache_unlock": [
        "Releases an exclusive lock on a given key",
        "<span class=\"methodname\">wincache_unlock<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $key<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "wordwrap": [
        "Wraps a string to a given number of characters",
        "<span class=\"methodname\">wordwrap<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $string<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $width<span class=\"initializer\"> = 75<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $break<span class=\"initializer\"> = \"\\n\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $cut_long_words<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "Worker": [
        "Worker Threads have a persistent context, as such should be used over Threads in most cases."
    ],
    "xattr_get": [
        "Get an extended attribute",
        "<span class=\"methodname\">xattr_get<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "xattr_list": [
        "Get a list of extended attributes",
        "<span class=\"methodname\">xattr_list<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "xattr_remove": [
        "Remove an extended attribute",
        "<span class=\"methodname\">xattr_remove<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xattr_set": [
        "Set an extended attribute",
        "<span class=\"methodname\">xattr_set<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xattr_supported": [
        "Check if filesystem supports extended attributes",
        "<span class=\"methodname\">xattr_supported<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xdiff_file_bdiff": [
        "Make binary diff of two files",
        "<span class=\"methodname\">xdiff_file_bdiff<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $old_file<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_file<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dest<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xdiff_file_bdiff_size": [
        "Read a size of file created by applying a binary diff",
        "<span class=\"methodname\">xdiff_file_bdiff_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $file<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "xdiff_file_bpatch": [
        "Patch a file with a binary diff",
        "<span class=\"methodname\">xdiff_file_bpatch<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $file<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $patch<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dest<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xdiff_file_diff": [
        "Make unified diff of two files",
        "<span class=\"methodname\">xdiff_file_diff<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $old_file<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_file<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dest<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $context<span class=\"initializer\"> = 3<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $minimal<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xdiff_file_diff_binary": [
        "Alias of xdiff_file_bdiff",
        "<span class=\"methodname\">xdiff_file_diff_binary<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $old_file<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_file<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dest<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xdiff_file_merge3": [
        "Merge 3 files into one",
        "<span class=\"methodname\">xdiff_file_merge3<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $old_file<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_file1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_file2<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dest<\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "xdiff_file_patch": [
        "Patch a file with an unified diff",
        "<span class=\"methodname\">xdiff_file_patch<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $file<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $patch<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dest<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = DIFF_PATCH_NORMAL<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "xdiff_file_patch_binary": [
        "Alias of xdiff_file_bpatch",
        "<span class=\"methodname\">xdiff_file_patch_binary<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $file<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $patch<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dest<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xdiff_file_rabdiff": [
        "Make binary diff of two files using the Rabin's polynomial fingerprinting algorithm",
        "<span class=\"methodname\">xdiff_file_rabdiff<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $old_file<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_file<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $dest<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xdiff_string_bdiff": [
        "Make binary diff of two strings",
        "<span class=\"methodname\">xdiff_string_bdiff<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $old_data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_data<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "xdiff_string_bdiff_size": [
        "Read a size of file created by applying a binary diff",
        "<span class=\"methodname\">xdiff_string_bdiff_size<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $patch<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "xdiff_string_bpatch": [
        "Patch a string with a binary diff",
        "<span class=\"methodname\">xdiff_string_bpatch<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $str<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $patch<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "xdiff_string_diff": [
        "Make unified diff of two strings",
        "<span class=\"methodname\">xdiff_string_diff<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $old_data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $context<span class=\"initializer\"> = 3<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $minimal<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "xdiff_string_merge3": [
        "Merge 3 strings into one",
        "<span class=\"methodname\">xdiff_string_merge3<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $old_data<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_data1<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $new_data2<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$error<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "xdiff_string_patch": [
        "Patch a string with an unified diff",
        "<span class=\"methodname\">xdiff_string_patch<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $str<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $patch<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$error<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "xdiff_string_patch_binary": [
        "Alias of xdiff_string_bpatch",
        "<span class=\"methodname\">xdiff_string_patch_binary<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $str<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $patch<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "xhprof_disable": [
        "Stops xhprof profiler",
        "<span class=\"methodname\">xhprof_disable<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "xhprof_enable": [
        "Start xhprof profiler",
        "<span class=\"methodname\">xhprof_enable<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $flags<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "xhprof_sample_disable": [
        "Stops xhprof sample profiler",
        "<span class=\"methodname\">xhprof_sample_disable<\/span> ( ) : <span class=\"type\">array<\/span>"
    ],
    "xhprof_sample_enable": [
        "Start XHProf profiling in sampling mode",
        "<span class=\"methodname\">xhprof_sample_enable<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "xml_error_string": [
        "Get XML parser error string",
        "<span class=\"methodname\">xml_error_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $error_code<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span>"
    ],
    "xml_get_current_byte_index": [
        "Get current byte index for an XML parser",
        "<span class=\"methodname\">xml_get_current_byte_index<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "xml_get_current_column_number": [
        "Get current column number for an XML parser",
        "<span class=\"methodname\">xml_get_current_column_number<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "xml_get_current_line_number": [
        "Get current line number for an XML parser",
        "<span class=\"methodname\">xml_get_current_line_number<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "xml_get_error_code": [
        "Get XML parser error code",
        "<span class=\"methodname\">xml_get_error_code<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "xml_parse": [
        "Start parsing an XML document",
        "<span class=\"methodname\">xml_parse<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $is_final<span class=\"initializer\"> = false<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "xml_parse_into_struct": [
        "Parse XML data into an array structure",
        "<span class=\"methodname\">xml_parse_into_struct<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$values<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$index<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "xml_parser_create": [
        "Create an XML parser",
        "<span class=\"methodname\">xml_parser_create<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">XMLParser<\/span>"
    ],
    "xml_parser_create_ns": [
        "Create an XML parser with namespace support",
        "<span class=\"methodname\">xml_parser_create_ns<\/span> ( <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $separator<span class=\"initializer\"> = \":\"<\/span><\/span> ) : <span class=\"type\">XMLParser<\/span>"
    ],
    "xml_parser_free": [
        "Free an XML parser",
        "<span class=\"methodname\">xml_parser_free<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xml_parser_get_option": [
        "Get options from an XML parser",
        "<span class=\"methodname\">xml_parser_get_option<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span><\/span>"
    ],
    "xml_parser_set_option": [
        "Set options in an XML parser",
        "<span class=\"methodname\">xml_parser_set_option<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $option<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span><\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xml_set_character_data_handler": [
        "Set up character data handler",
        "<span class=\"methodname\">xml_set_character_data_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $handler<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xml_set_default_handler": [
        "Set up default handler",
        "<span class=\"methodname\">xml_set_default_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $handler<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xml_set_element_handler": [
        "Set up start and end element handlers",
        "<span class=\"methodname\">xml_set_element_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $start_handler<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $end_handler<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xml_set_end_namespace_decl_handler": [
        "Set up end namespace declaration handler",
        "<span class=\"methodname\">xml_set_end_namespace_decl_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $handler<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xml_set_external_entity_ref_handler": [
        "Set up external entity reference handler",
        "<span class=\"methodname\">xml_set_external_entity_ref_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $handler<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xml_set_notation_decl_handler": [
        "Set up notation declaration handler",
        "<span class=\"methodname\">xml_set_notation_decl_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $handler<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xml_set_object": [
        "Use XML Parser within an object",
        "<span class=\"methodname\">xml_set_object<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> , <span class=\"methodparam\"><span class=\"type\">object<\/span> $object<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xml_set_processing_instruction_handler": [
        "Set up processing instruction (PI) handler",
        "<span class=\"methodname\">xml_set_processing_instruction_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $handler<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xml_set_start_namespace_decl_handler": [
        "Set up start namespace declaration handler",
        "<span class=\"methodname\">xml_set_start_namespace_decl_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $handler<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xml_set_unparsed_entity_decl_handler": [
        "Set up unparsed entity declaration handler",
        "<span class=\"methodname\">xml_set_unparsed_entity_decl_handler<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLParser<\/span> $parser<\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $handler<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "XmlParser": [
        "A fully opaque class which replaces xml resources as of PHP 8.0.0."
    ],
    "XMLReader": [
        "The XMLReader extension is an XML Pull parser. The reader acts as a cursor going forward on the document stream and stopping at each node on the way."
    ],
    "xmlrpc_decode": [
        "Decodes XML into native PHP types",
        "<span class=\"methodname\">xmlrpc_decode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $xml<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $encoding<span class=\"initializer\"> = \"iso-8859-1\"<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "xmlrpc_decode_request": [
        "Decodes XML into native PHP types",
        "<span class=\"methodname\">xmlrpc_decode_request<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $xml<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> &$method<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $encoding<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "xmlrpc_encode": [
        "Generates XML for a PHP value",
        "<span class=\"methodname\">xmlrpc_encode<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "xmlrpc_encode_request": [
        "Generates XML for a method request",
        "<span class=\"methodname\">xmlrpc_encode_request<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $method<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $params<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $output_options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "xmlrpc_get_type": [
        "Gets xmlrpc type for a PHP value",
        "<span class=\"methodname\">xmlrpc_get_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $value<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "xmlrpc_is_fault": [
        "Determines if an array value represents an XMLRPC fault",
        "<span class=\"methodname\">xmlrpc_is_fault<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $arg<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlrpc_parse_method_descriptions": [
        "Decodes XML into a list of method descriptions",
        "<span class=\"methodname\">xmlrpc_parse_method_descriptions<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $xml<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "xmlrpc_server_add_introspection_data": [
        "Adds introspection documentation",
        "<span class=\"methodname\">xmlrpc_server_add_introspection_data<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $server<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $desc<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "xmlrpc_server_call_method": [
        "Parses XML requests and call methods",
        "<span class=\"methodname\">xmlrpc_server_call_method<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $server<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $xml<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $user_data<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $output_options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "xmlrpc_server_create": [
        "Creates an xmlrpc server",
        "<span class=\"methodname\">xmlrpc_server_create<\/span> ( ) : <span class=\"type\">resource<\/span>"
    ],
    "xmlrpc_server_destroy": [
        "Destroys server resources",
        "<span class=\"methodname\">xmlrpc_server_destroy<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $server<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlrpc_server_register_introspection_callback": [
        "Register a PHP function to generate documentation",
        "<span class=\"methodname\">xmlrpc_server_register_introspection_callback<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $server<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlrpc_server_register_method": [
        "Register a PHP function to resource method matching method_name",
        "<span class=\"methodname\">xmlrpc_server_register_method<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $server<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $method_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $function<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlrpc_set_type": [
        "Sets xmlrpc type, base64 or datetime, for a PHP string value",
        "<span class=\"methodname\">xmlrpc_set_type<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> &$value<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $type<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_end_attribute": [
        "End attribute",
        "<span class=\"methodname\">xmlwriter_end_attribute<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_end_cdata": [
        "End current CDATA",
        "<span class=\"methodname\">xmlwriter_end_cdata<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_end_comment": [
        "Create end comment",
        "<span class=\"methodname\">xmlwriter_end_comment<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_end_document": [
        "End current document",
        "<span class=\"methodname\">xmlwriter_end_document<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_end_dtd": [
        "End current DTD",
        "<span class=\"methodname\">xmlwriter_end_dtd<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_end_dtd_attlist": [
        "End current DTD AttList",
        "<span class=\"methodname\">xmlwriter_end_dtd_attlist<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_end_dtd_element": [
        "End current DTD element",
        "<span class=\"methodname\">xmlwriter_end_dtd_element<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_end_dtd_entity": [
        "End current DTD Entity",
        "<span class=\"methodname\">xmlwriter_end_dtd_entity<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_end_element": [
        "End current element",
        "<span class=\"methodname\">xmlwriter_end_element<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_end_pi": [
        "End current PI",
        "<span class=\"methodname\">xmlwriter_end_pi<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_flush": [
        "Flush current buffer",
        "<span class=\"methodname\">xmlwriter_flush<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $empty<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">int<\/span><\/span>"
    ],
    "xmlwriter_full_end_element": [
        "End current element",
        "<span class=\"methodname\">xmlwriter_full_end_element<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_open_memory": [
        "Create new xmlwriter using memory for string output",
        "<span class=\"methodname\">xmlwriter_open_memory<\/span> ( ) : <span class=\"type\"><span class=\"type\">XMLWriter<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "xmlwriter_open_uri": [
        "Create new xmlwriter using source uri for output",
        "<span class=\"methodname\">xmlwriter_open_uri<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $uri<\/span> ) : <span class=\"type\"><span class=\"type\">XMLWriter<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "xmlwriter_output_memory": [
        "Returns current buffer",
        "<span class=\"methodname\">xmlwriter_output_memory<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $flush<span class=\"initializer\"> = true<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "xmlwriter_set_indent": [
        "Toggle indentation on\/off",
        "<span class=\"methodname\">xmlwriter_set_indent<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $enable<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_set_indent_string": [
        "Set string used for indenting",
        "<span class=\"methodname\">xmlwriter_set_indent_string<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $indentation<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_start_attribute": [
        "Create start attribute",
        "<span class=\"methodname\">xmlwriter_start_attribute<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_start_attribute_ns": [
        "Create start namespaced attribute",
        "<span class=\"methodname\">xmlwriter_start_attribute_ns<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $prefix<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $namespace<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_start_cdata": [
        "Create start CDATA tag",
        "<span class=\"methodname\">xmlwriter_start_cdata<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_start_comment": [
        "Create start comment",
        "<span class=\"methodname\">xmlwriter_start_comment<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_start_document": [
        "Create document tag",
        "<span class=\"methodname\">xmlwriter_start_document<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $version<span class=\"initializer\"> = \"1.0\"<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $encoding<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $standalone<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_start_dtd": [
        "Create start DTD tag",
        "<span class=\"methodname\">xmlwriter_start_dtd<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $qualifiedName<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $publicId<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $systemId<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_start_dtd_attlist": [
        "Create start DTD AttList",
        "<span class=\"methodname\">xmlwriter_start_dtd_attlist<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_start_dtd_element": [
        "Create start DTD element",
        "<span class=\"methodname\">xmlwriter_start_dtd_element<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $qualifiedName<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_start_dtd_entity": [
        "Create start DTD Entity",
        "<span class=\"methodname\">xmlwriter_start_dtd_entity<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $isParam<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_start_element": [
        "Create start element tag",
        "<span class=\"methodname\">xmlwriter_start_element<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_start_element_ns": [
        "Create start namespaced element tag",
        "<span class=\"methodname\">xmlwriter_start_element_ns<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $prefix<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $namespace<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_start_pi": [
        "Create start PI tag",
        "<span class=\"methodname\">xmlwriter_start_pi<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $target<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_text": [
        "Write text",
        "<span class=\"methodname\">xmlwriter_text<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $content<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_write_attribute": [
        "Write full attribute",
        "<span class=\"methodname\">xmlwriter_write_attribute<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_write_attribute_ns": [
        "Write full namespaced attribute",
        "<span class=\"methodname\">xmlwriter_write_attribute_ns<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $prefix<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $namespace<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_write_cdata": [
        "Write full CDATA tag",
        "<span class=\"methodname\">xmlwriter_write_cdata<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $content<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_write_comment": [
        "Write full comment tag",
        "<span class=\"methodname\">xmlwriter_write_comment<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $content<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_write_dtd": [
        "Write full DTD tag",
        "<span class=\"methodname\">xmlwriter_write_dtd<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $publicId<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $systemId<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $content<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_write_dtd_attlist": [
        "Write full DTD AttList tag",
        "<span class=\"methodname\">xmlwriter_write_dtd_attlist<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $content<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_write_dtd_element": [
        "Write full DTD element tag",
        "<span class=\"methodname\">xmlwriter_write_dtd_element<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $content<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_write_dtd_entity": [
        "Write full DTD Entity tag",
        "<span class=\"methodname\">xmlwriter_write_dtd_entity<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $content<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $isParam<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $publicId<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $systemId<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $notationData<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_write_element": [
        "Write full element tag",
        "<span class=\"methodname\">xmlwriter_write_element<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $content<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_write_element_ns": [
        "Write full namespaced element tag",
        "<span class=\"methodname\">xmlwriter_write_element_ns<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $prefix<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $namespace<\/span> , <span class=\"methodparam\"><span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\">null<\/span><\/span> $content<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_write_pi": [
        "Writes a PI",
        "<span class=\"methodname\">xmlwriter_write_pi<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $target<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $content<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "xmlwriter_write_raw": [
        "Write a raw XML text",
        "<span class=\"methodname\">xmlwriter_write_raw<\/span> ( <span class=\"methodparam\"><span class=\"type\">XMLWriter<\/span> $writer<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $content<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "XSLTProcessor": [
        "Creates a new XSLTProcessor object",
        "<span class=\"methodname\">XSLTProcessor::__construct<\/span> ( )"
    ],
    "Yac": [
        "Constructor",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Yac::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $prefix<span class=\"initializer\"> = \"\"<\/span><\/span> )"
    ],
    "Yaconf": [
        "Yaconf is a configurations container, it parses INIT files, stores the result in PHP when PHP is started, the result lives with the whole PHP lifecycle."
    ],
    "Yaf_Action_Abstract": [
        "A action can be defined in a separate file in Yaf(see Yaf_Controller_Abstract). that is a action method can also be a Yaf_Action_Abstract class."
    ],
    "Yaf_Application": [
        "Yaf_Application constructor",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Yaf_Application::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $config<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $envrion<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "Yaf_Bootstrap_Abstract": [
        "Bootstrap is a mechanism used to do some initial config before a Application run."
    ],
    "Yaf_Config_Ini": [
        "Yaf_Config_Ini enables developers to store configuration data in a familiar INI format and read them in the application by using nested object property syntax. The INI format is specialized to provide both the ability to have a hierarchy of configuration data keys and inheritance between configuration data sections. Configuration data hierarchies are supported by separating the keys with the dot or period character (\".\"). A section may extend or inherit from another section by following the section name with a colon character (\":\") and the name of the section from which data are to be inherited.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Yaf_Config_Ini::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $config_file<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $section<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "Yaf_Config_Simple": [
        "The __construct purpose",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Yaf_Config_Simple::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> $configs<\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $readonly<span class=\"initializer\"> = false<\/span><\/span> )"
    ],
    "Yaf_Controller_Abstract": [
        "Yaf_Controller_Abstract is the heart of Yaf's system. MVC stands for Model-View-Controller and is a design pattern targeted at separating application logic from display logic.",
        "<span class=\"modifier\">final<\/span> <span class=\"modifier\">private<\/span> <span class=\"methodname\">Yaf_Controller_Abstract::__construct<\/span> ( )"
    ],
    "Yaf_Dispatcher": [
        "Yaf_Dispatcher purpose is to initialize the request environment, route the incoming request, and then dispatch any discovered actions; it aggregates any responses and returns them when the process is complete.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Yaf_Dispatcher::__construct<\/span> ( )"
    ],
    "Yaf_Exception": [
        "The __construct purpose",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Yaf_Exception::__construct<\/span> ( )"
    ],
    "Yaf_Loader": [
        "Yaf_Loader introduces a comprehensive autoloading solution for Yaf.",
        "<span class=\"modifier\">private<\/span> <span class=\"methodname\">Yaf_Loader::__construct<\/span> ( )"
    ],
    "Yaf_Plugin_Abstract": [
        "Plugins allow for easy extensibility and customization of the framework."
    ],
    "Yaf_Registry": [
        "All methods of Yaf_Registry declared as static, making it unversally accessible. This provides the ability to get or set any custom data from anyway in your code as necessary.",
        "<span class=\"modifier\">private<\/span> <span class=\"methodname\">Yaf_Registry::__construct<\/span> ( )"
    ],
    "Yaf_Request_Http": [
        "Any request from client is initialized as a Yaf_Request_Http. you can get the request information like, uri query and post parameters via methods of this class.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Yaf_Request_Http::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $request_uri<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $base_uri<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "Yaf_Request_Simple": [
        "Yaf_Request_Simple is particularlly used for test puporse. ie. simulate some espacial request under CLI mode.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Yaf_Request_Simple::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $method<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $module<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $controller<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $action<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $params<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "Yaf_Response_Abstract": [
        "The __construct purpose",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Yaf_Response_Abstract::__construct<\/span> ( )"
    ],
    "Yaf_Route_Interface": [
        "Yaf_Route_Interface used for developer defined their custom route."
    ],
    "Yaf_Route_Map": [
        "Yaf_Route_Map is a built-in route, it simply convert a URI endpoint (that part of the URI which comes after the base URI: see Yaf_Request_Abstract::setBaseUri()) to a controller name or action name(depends on the parameter passed to Yaf_Route_Map::__construct()) in following rule: A => controller A. A\/B\/C => controller A_B_C. A\/B\/C\/D\/E => controller A_B_C_D_E.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Yaf_Route_Map::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $controller_prefer<span class=\"initializer\"> = false<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $delimiter<span class=\"initializer\"> = \"\"<\/span><\/span> )"
    ],
    "Yaf_Route_Regex": [
        "Yaf_Route_Regex is the most flexible route among the Yaf built-in routes.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Yaf_Route_Regex::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $match<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $route<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $map<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $verify<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $reverse<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "Yaf_Route_Rewrite": [
        "For usage, please see the example section of Yaf_Route_Rewrite::__construct()",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Yaf_Route_Rewrite::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $match<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $route<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $verify<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "Yaf_Route_Simple": [
        "Yaf_Route_Simple will match the query string, and find the route info.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Yaf_Route_Simple::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $module_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $controller_name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $action_name<\/span> )"
    ],
    "Yaf_Route_Static": [
        "Defaultly, Yaf_Router only have a Yaf_Route_Static as its default route."
    ],
    "Yaf_Route_Supervar": [
        "The __construct purpose",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Yaf_Route_Supervar::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $supervar_name<\/span> )"
    ],
    "Yaf_Router": [
        "Yaf_Router is the standard framework router. Routing is the process of taking a URI endpoint (that part of the URI which comes after the base URI: see Yaf_Request_Abstract::setBaseUri()) and decomposing it into parameters to determine which module, controller, and action of that controller should receive the request. This values of the module, controller, action and other parameters are packaged into a Yaf_Request_Abstract object which is then processed by Yaf_Dispatcher. Routing occurs only once: when the request is initially received and before the first controller is dispatched. Yaf_Router is designed to allow for mod_rewrite-like functionality using pure PHP structures. It is very loosely based on Ruby on Rails routing and does not require any prior knowledge of webserver URL rewriting. It is designed to work with a single Apache mod_rewrite rule (one of):",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Yaf_Router::__construct<\/span> ( )"
    ],
    "Yaf_Session": [
        "Constructor of Yaf_Session",
        "<span class=\"modifier\">private<\/span> <span class=\"methodname\">Yaf_Session::__construct<\/span> ( )"
    ],
    "Yaf_View_Interface": [
        "Yaf provides a ability for developers to use custom view engine instead of built-in engine which is Yaf_View_Simple. There is a example to explain how to do this, please see Yaf_Dispatcher::setView()."
    ],
    "Yaf_View_Simple": [
        "Yaf_View_Simple is the built-in template engine in Yaf, it is a simple but fast template engine, and only support PHP script template.",
        "<span class=\"modifier\">final<\/span> <span class=\"modifier\">public<\/span> <span class=\"methodname\">Yaf_View_Simple::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $template_dir<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "yaml_emit": [
        "Returns the YAML representation of a value",
        "<span class=\"methodname\">yaml_emit<\/span> ( <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $encoding<span class=\"initializer\"> = YAML_ANY_ENCODING<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $linebreak<span class=\"initializer\"> = YAML_ANY_BREAK<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $callbacks<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "yaml_emit_file": [
        "Send the YAML representation of a value to a file",
        "<span class=\"methodname\">yaml_emit_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $encoding<span class=\"initializer\"> = YAML_ANY_ENCODING<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $linebreak<span class=\"initializer\"> = YAML_ANY_BREAK<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $callbacks<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "yaml_parse": [
        "Parse a YAML stream",
        "<span class=\"methodname\">yaml_parse<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $input<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pos<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$ndocs<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $callbacks<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "yaml_parse_file": [
        "Parse a YAML stream from a file",
        "<span class=\"methodname\">yaml_parse_file<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pos<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$ndocs<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $callbacks<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "yaml_parse_url": [
        "Parse a Yaml stream from a URL",
        "<span class=\"methodname\">yaml_parse_url<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $url<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pos<span class=\"initializer\"> = 0<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> &$ndocs<span class=\"initializer\"> = ?<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $callbacks<span class=\"initializer\"> = null<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "Yar_Client": [
        "Create a client",
        "<span class=\"modifier\">final<\/span> <span class=\"modifier\">public<\/span> <span class=\"methodname\">Yar_Client::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $url<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "Yar_Server": [
        "Register a server",
        "<span class=\"modifier\">final<\/span> <span class=\"modifier\">public<\/span> <span class=\"methodname\">Yar_Server::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">Object<\/span> $obj<\/span> )"
    ],
    "Yar_Server_Exception": [
        "If service threw exceptions, A Yar_Server_Exception will be threw in client side."
    ],
    "yaz_addinfo": [
        "Returns additional error information",
        "<span class=\"methodname\">yaz_addinfo<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "yaz_ccl_conf": [
        "Configure CCL parser",
        "<span class=\"methodname\">yaz_ccl_conf<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $config<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "yaz_ccl_parse": [
        "Invoke CCL Parser",
        "<span class=\"methodname\">yaz_ccl_parse<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$result<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "yaz_close": [
        "Close YAZ connection",
        "<span class=\"methodname\">yaz_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "yaz_connect": [
        "Prepares for a connection to a Z39.50 server",
        "<span class=\"methodname\">yaz_connect<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $zurl<\/span> , <span class=\"methodparam\"><span class=\"type\">mixed<\/span> $options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "yaz_database": [
        "Specifies the databases within a session",
        "<span class=\"methodname\">yaz_database<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $databases<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "yaz_element": [
        "Specifies Element-Set Name for retrieval",
        "<span class=\"methodname\">yaz_element<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $elementset<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "yaz_errno": [
        "Returns error number",
        "<span class=\"methodname\">yaz_errno<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "yaz_error": [
        "Returns error description",
        "<span class=\"methodname\">yaz_error<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "yaz_es": [
        "Prepares for an Extended Service Request",
        "<span class=\"methodname\">yaz_es<\/span> ( <span class=\"methodparam\"> <span class=\"type\">resource<\/span> $id <\/span> , <span class=\"methodparam\"> <span class=\"type\">string<\/span> $type <\/span> , <span class=\"methodparam\"> <span class=\"type\">array<\/span> $args <\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "yaz_es_result": [
        "Inspects Extended Services Result",
        "<span class=\"methodname\">yaz_es_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "yaz_get_option": [
        "Returns value of option for connection",
        "<span class=\"methodname\">yaz_get_option<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "yaz_hits": [
        "Returns number of hits for last search",
        "<span class=\"methodname\">yaz_hits<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$searchresult<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">int<\/span>"
    ],
    "yaz_itemorder": [
        "Prepares for Z39.50 Item Order with an ILL-Request package",
        "<span class=\"methodname\">yaz_itemorder<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $args<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "yaz_present": [
        "Prepares for retrieval (Z39.50 present)",
        "<span class=\"methodname\">yaz_present<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "yaz_range": [
        "Specifies a range of records to retrieve",
        "<span class=\"methodname\">yaz_range<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $start<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $number<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "yaz_record": [
        "Returns a record",
        "<span class=\"methodname\">yaz_record<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $pos<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $type<\/span> ) : <span class=\"type\">string<\/span>"
    ],
    "yaz_scan": [
        "Prepares for a scan",
        "<span class=\"methodname\">yaz_scan<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $startterm<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $flags<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "yaz_scan_result": [
        "Returns Scan Response result",
        "<span class=\"methodname\">yaz_scan_result<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> &$result<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">array<\/span>"
    ],
    "yaz_schema": [
        "Specifies schema for retrieval",
        "<span class=\"methodname\">yaz_schema<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $schema<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "yaz_search": [
        "Prepares for a search",
        "<span class=\"methodname\">yaz_search<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $query<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "yaz_set_option": [
        "Sets one or more options for connection",
        "<span class=\"methodname\">yaz_set_option<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $name<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $value<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>",
        "<span class=\"methodname\">yaz_set_option<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">array<\/span> $options<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "yaz_sort": [
        "Sets sorting criteria",
        "<span class=\"methodname\">yaz_sort<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $criteria<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "yaz_syntax": [
        "Specifies the preferred record syntax for retrieval",
        "<span class=\"methodname\">yaz_syntax<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $id<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $syntax<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "yaz_wait": [
        "Wait for Z39.50 requests to complete",
        "<span class=\"methodname\">yaz_wait<\/span> ( <span class=\"methodparam\"><span class=\"type\">array<\/span> &$options<span class=\"initializer\"> = ?<\/span><\/span> ) : <span class=\"type\">mixed<\/span>"
    ],
    "zend_thread_id": [
        "Returns a unique identifier for the current thread",
        "<span class=\"methodname\">zend_thread_id<\/span> ( ) : <span class=\"type\">int<\/span>"
    ],
    "zend_version": [
        "Gets the version of the current Zend engine",
        "<span class=\"methodname\">zend_version<\/span> ( ) : <span class=\"type\">string<\/span>"
    ],
    "zip_close": [
        "Close a ZIP file archive",
        "<span class=\"methodname\">zip_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $zip<\/span> ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "zip_entry_close": [
        "Close a directory entry",
        "<span class=\"methodname\">zip_entry_close<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $zip_entry<\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "zip_entry_compressedsize": [
        "Retrieve the compressed size of a directory entry",
        "<span class=\"methodname\">zip_entry_compressedsize<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $zip_entry<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "zip_entry_compressionmethod": [
        "Retrieve the compression method of a directory entry",
        "<span class=\"methodname\">zip_entry_compressionmethod<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $zip_entry<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "zip_entry_filesize": [
        "Retrieve the actual file size of a directory entry",
        "<span class=\"methodname\">zip_entry_filesize<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $zip_entry<\/span> ) : <span class=\"type\"><span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "zip_entry_name": [
        "Retrieve the name of a directory entry",
        "<span class=\"methodname\">zip_entry_name<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $zip_entry<\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "zip_entry_open": [
        "Open a directory entry for reading",
        "<span class=\"methodname\">zip_entry_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $zip_dp<\/span> , <span class=\"methodparam\"><span class=\"type\">resource<\/span> $zip_entry<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $mode<span class=\"initializer\"> = \"rb\"<\/span><\/span> ) : <span class=\"type\">bool<\/span>"
    ],
    "zip_entry_read": [
        "Read from an open directory entry",
        "<span class=\"methodname\">zip_entry_read<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $zip_entry<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $len<span class=\"initializer\"> = 1024<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "zip_open": [
        "Open a ZIP file archive",
        "<span class=\"methodname\">zip_open<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $filename<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\">int<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "zip_read": [
        "Read next entry in a ZIP file archive",
        "<span class=\"methodname\">zip_read<\/span> ( <span class=\"methodparam\"><span class=\"type\">resource<\/span> $zip<\/span> ) : <span class=\"type\"><span class=\"type\">resource<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ZipArchive": [
        "A file archive, compressed with Zip."
    ],
    "zlib_decode": [
        "Uncompress any raw\/gzip\/zlib encoded data",
        "<span class=\"methodname\">zlib_decode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $max_length<span class=\"initializer\"> = 0<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "zlib_encode": [
        "Compress data with the specified encoding",
        "<span class=\"methodname\">zlib_encode<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $data<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $encoding<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $level<span class=\"initializer\"> = -1<\/span><\/span> ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "zlib_get_coding_type": [
        "Returns the coding type used for output compression",
        "<span class=\"methodname\">zlib_get_coding_type<\/span> ( ) : <span class=\"type\"><span class=\"type\">string<\/span>|<span class=\"type\"><span class=\"type false\">false<\/span><\/span><\/span>"
    ],
    "ZMQ": [
        "ZMQ constructor",
        "<span class=\"modifier\">private<\/span> <span class=\"methodname\">ZMQ::__construct<\/span> ( )"
    ],
    "ZMQContext": [
        "Construct a new ZMQContext object",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ZMQContext::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">int<\/span> $io_threads<span class=\"initializer\"> = 1<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">bool<\/span> $is_persistent<span class=\"initializer\"> = true<\/span><\/span> )"
    ],
    "ZMQDevice": [
        "Construct a new device",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ZMQDevice::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">ZMQSocket<\/span> $frontend<\/span> , <span class=\"methodparam\"><span class=\"type\">ZMQSocket<\/span> $backend<\/span> , <span class=\"methodparam\"><span class=\"type\">ZMQSocket<\/span> $listener<span class=\"initializer\"> = ?<\/span><\/span> )"
    ],
    "ZMQSocket": [
        "Construct a new ZMQSocket",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">ZMQSocket::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">ZMQContext<\/span> $context<\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $type<\/span> , <span class=\"methodparam\"><span class=\"type\">string<\/span> $persistent_id<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $on_new_socket<span class=\"initializer\"> = null<\/span><\/span> )"
    ],
    "Zookeeper": [
        "Represents ZooKeeper session.",
        "<span class=\"modifier\">public<\/span> <span class=\"methodname\">Zookeeper::__construct<\/span> ( <span class=\"methodparam\"><span class=\"type\">string<\/span> $host<span class=\"initializer\"> = ''<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">callable<\/span> $watcher_cb<span class=\"initializer\"> = null<\/span><\/span> , <span class=\"methodparam\"><span class=\"type\">int<\/span> $recv_timeout<span class=\"initializer\"> = 10000<\/span><\/span> )"
    ],
    "zookeeper_dispatch": [
        "Calls callbacks for pending operations",
        "<span class=\"methodname\">zookeeper_dispatch<\/span> ( ) : <span class=\"type\"><span class=\"type void\">void<\/span><\/span>"
    ],
    "ZookeeperAuthenticationException": [
        "The ZooKeeper authentication exception handling class."
    ],
    "ZookeeperConfig": [
        "The ZooKeeper Config handling class."
    ],
    "ZookeeperConnectionException": [
        "The ZooKeeper connection exception handling class."
    ],
    "ZookeeperException": [
        "The ZooKeeper exception handling class."
    ],
    "ZookeeperMarshallingException": [
        "The ZooKeeper exception (while marshalling or unmarshalling data) handling class."
    ],
    "ZookeeperNoNodeException": [
        "The ZooKeeper exception (when node does not exist) handling class."
    ],
    "ZookeeperOperationTimeoutException": [
        "The ZooKeeper operation timeout exception handling class."
    ],
    "ZookeeperSessionException": [
        "The ZooKeeper session exception handling class."
    ]
}