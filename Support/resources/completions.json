{
    "__autoload": [
        "Attempt to load undefined class",
        "__autoload ( string $class ) : void"
    ],
    "__halt_compiler": [
        "Halts the compiler execution",
        "__halt_compiler ( ) : void"
    ],
    "abs": [
        "Absolute value",
        "abs ( mixed $number ) : int|float"
    ],
    "acos": [
        "Arc cosine",
        "acos ( float $num ) : float"
    ],
    "acosh": [
        "Inverse hyperbolic cosine",
        "acosh ( float $num ) : float"
    ],
    "addcslashes": [
        "Quote string with slashes in a C style",
        "addcslashes ( string $string , string $characters ) : string"
    ],
    "AddressInfo": [
        "A fully opaque class which replaces AddressInfo resources as of PHP 8.0.0."
    ],
    "addslashes": [
        "Quote string with slashes",
        "addslashes ( string $string ) : string"
    ],
    "apache_child_terminate": [
        "Terminate apache process after this request",
        "apache_child_terminate ( ) : void"
    ],
    "apache_get_modules": [
        "Get a list of loaded Apache modules",
        "apache_get_modules ( ) : array"
    ],
    "apache_get_version": [
        "Fetch Apache version",
        "apache_get_version ( ) : string|false"
    ],
    "apache_getenv": [
        "Get an Apache subprocess_env variable",
        "apache_getenv ( string $variable , bool $walk_to_top = false ) : string|false"
    ],
    "apache_lookup_uri": [
        "Perform a partial request for the specified URI and return all info about it",
        "apache_lookup_uri ( string $filename ) : object|false"
    ],
    "apache_note": [
        "Get and set apache request notes",
        "apache_note ( string $note_name , string|null $note_value = null ) : string|false"
    ],
    "apache_request_headers": [
        "Fetch all HTTP request headers",
        "apache_request_headers ( ) : array"
    ],
    "apache_response_headers": [
        "Fetch all HTTP response headers",
        "apache_response_headers ( ) : array|false"
    ],
    "apache_setenv": [
        "Set an Apache subprocess_env variable",
        "apache_setenv ( string $variable , string $value , bool $walk_to_top = false ) : bool"
    ],
    "apcu_add": [
        "Cache a new variable in the data store",
        "apcu_add ( string $key , mixed $var , int $ttl = 0 ) : bool",
        "apcu_add ( array $values , mixed $unused = NULL , int $ttl = 0 ) : array"
    ],
    "apcu_cache_info": [
        "Retrieves cached information from APCu's data store",
        "apcu_cache_info ( bool $limited = false ) : array|false"
    ],
    "apcu_cas": [
        "Updates an old value with a new value",
        "apcu_cas ( string $key , int $old , int $new ) : bool"
    ],
    "apcu_clear_cache": [
        "Clears the APCu cache",
        "apcu_clear_cache ( ) : bool"
    ],
    "apcu_dec": [
        "Decrease a stored number",
        "apcu_dec ( string $key , int $step = 1 , bool &$success = ? , int $ttl = 0 ) : int|false"
    ],
    "apcu_delete": [
        "Removes a stored variable from the cache",
        "apcu_delete ( mixed $key ) : mixed"
    ],
    "apcu_enabled": [
        "Whether APCu is usable in the current environment",
        "apcu_enabled ( ) : bool"
    ],
    "apcu_entry": [
        "Atomically fetch or generate a cache entry",
        "apcu_entry ( string $key , callable $generator , int $ttl = 0 ) : mixed"
    ],
    "apcu_exists": [
        "Checks if entry exists",
        "apcu_exists ( mixed $keys ) : mixed"
    ],
    "apcu_fetch": [
        "Fetch a stored variable from the cache",
        "apcu_fetch ( mixed $key , bool &$success = ? ) : mixed"
    ],
    "apcu_inc": [
        "Increase a stored number",
        "apcu_inc ( string $key , int $step = 1 , bool &$success = ? , int $ttl = 0 ) : int|false"
    ],
    "apcu_key_info": [
        "Get detailed information about the cache key",
        "apcu_key_info ( string $key ) : array"
    ],
    "apcu_sma_info": [
        "Retrieves APCu Shared Memory Allocation information",
        "apcu_sma_info ( bool $limited = false ) : array"
    ],
    "apcu_store": [
        "Cache a variable in the data store",
        "apcu_store ( string $key , mixed $var , int $ttl = 0 ) : bool",
        "apcu_store ( array $values , mixed $unused = NULL , int $ttl = 0 ) : array"
    ],
    "APCUIterator": [
        "The APCUIterator class makes it easier to iterate over large APCu caches. This is helpful as it allows iterating over large caches in steps, while grabbing a defined number of entries per lock instance, so it frees the cache locks for other activities rather than hold up the entire cache to grab 100 (the default) entries. Also, using regular expression matching is more efficient as it's been moved to the C level.",
        "new APCUIterator ( mixed $search = null , int $format = APC_ITER_ALL , int $chunk_size = 100 , int $list = APC_LIST_ACTIVE )"
    ],
    "AppendIterator": [
        "An Iterator that iterates over several iterators one after the other.",
        "new AppendIterator ( )"
    ],
    "ArgumentCountError": [
        "ArgumentCountError is thrown when too few arguments are passed to a user-defined function or method."
    ],
    "ArithmeticError": [
        "ArithmeticError is thrown when an error occurs while performing mathematical operations. These errors include attempting to perform a bitshift by a negative amount, and any call to intdiv() that would result in a value outside the possible bounds of an int."
    ],
    "array": [
        "Create an array",
        "array ( mixed ...$values ) : array"
    ],
    "array_change_key_case": [
        "Changes the case of all keys in an array",
        "array_change_key_case ( array $array , int $case = CASE_LOWER ) : array"
    ],
    "array_chunk": [
        "Split an array into chunks",
        "array_chunk ( array $array , int $length , bool $preserve_keys = false ) : array"
    ],
    "array_column": [
        "Return the values from a single column in the input array",
        "array_column ( array $array , int|string|null $column_key , int|string|null $index_key = null ) : array"
    ],
    "array_combine": [
        "Creates an array by using one array for keys and another for its values",
        "array_combine ( array $keys , array $values ) : array"
    ],
    "array_count_values": [
        "Counts all the values of an array",
        "array_count_values ( array $array ) : array"
    ],
    "array_diff": [
        "Computes the difference of arrays",
        "array_diff ( array $array , array ...$arrays ) : array"
    ],
    "array_diff_assoc": [
        "Computes the difference of arrays with additional index check",
        "array_diff_assoc ( array $array , array ...$arrays ) : array"
    ],
    "array_diff_key": [
        "Computes the difference of arrays using keys for comparison",
        "array_diff_key ( array $array , array ...$arrays ) : array"
    ],
    "array_diff_uassoc": [
        "Computes the difference of arrays with additional index check which is performed by a user supplied callback function",
        "array_diff_uassoc ( array $array , array ...$arrays , callable $key_compare_func ) : array"
    ],
    "array_diff_ukey": [
        "Computes the difference of arrays using a callback function on the keys for comparison",
        "array_diff_ukey ( array $array , array ...$arrays , callable $key_compare_func ) : array"
    ],
    "array_fill": [
        "Fill an array with values",
        "array_fill ( int $start_index , int $count , mixed $value ) : array"
    ],
    "array_fill_keys": [
        "Fill an array with values, specifying keys",
        "array_fill_keys ( array $keys , mixed $value ) : array"
    ],
    "array_filter": [
        "Filters elements of an array using a callback function",
        "array_filter ( array $array , callable|null $callback = null , int $mode = 0 ) : array"
    ],
    "array_flip": [
        "Exchanges all keys with their associated values in an array",
        "array_flip ( array $array ) : array"
    ],
    "array_intersect": [
        "Computes the intersection of arrays",
        "array_intersect ( array $array , array ...$arrays ) : array"
    ],
    "array_intersect_assoc": [
        "Computes the intersection of arrays with additional index check",
        "array_intersect_assoc ( array $array , array ...$arrays ) : array"
    ],
    "array_intersect_key": [
        "Computes the intersection of arrays using keys for comparison",
        "array_intersect_key ( array $array , array ...$arrays ) : array"
    ],
    "array_intersect_uassoc": [
        "Computes the intersection of arrays with additional index check, compares indexes by a callback function",
        "array_intersect_uassoc ( array $array , array ...$arrays , callable $key_compare_func ) : array"
    ],
    "array_intersect_ukey": [
        "Computes the intersection of arrays using a callback function on the keys for comparison",
        "array_intersect_ukey ( array $array , array ...$arrays , callable $key_compare_func ) : array"
    ],
    "array_key_exists": [
        "Checks if the given key or index exists in the array",
        "array_key_exists ( string|int $key , array $array ) : bool"
    ],
    "array_key_first": [
        "Gets the first key of an array",
        "array_key_first ( array $array ) : int|string|null"
    ],
    "array_key_last": [
        "Gets the last key of an array",
        "array_key_last ( array $array ) : int|string|null"
    ],
    "array_keys": [
        "Return all the keys or a subset of the keys of an array",
        "array_keys ( array $array ) : array",
        "array_keys ( array $array , mixed $search_value , bool $strict = false ) : array"
    ],
    "array_map": [
        "Applies the callback to the elements of the given arrays",
        "array_map ( callable|null $callback , array $array , array ...$arrays ) : array"
    ],
    "array_merge": [
        "Merge one or more arrays",
        "array_merge ( array ...$arrays ) : array"
    ],
    "array_merge_recursive": [
        "Merge one or more arrays recursively",
        "array_merge_recursive ( array ...$arrays ) : array"
    ],
    "array_multisort": [
        "Sort multiple or multi-dimensional arrays",
        "array_multisort ( array &$array1 , mixed $array1_sort_order = SORT_ASC , mixed $array1_sort_flags = SORT_REGULAR , mixed ...$rest ) : bool"
    ],
    "array_pad": [
        "Pad array to the specified length with a value",
        "array_pad ( array $array , int $length , mixed $value ) : array"
    ],
    "array_pop": [
        "Pop the element off the end of array",
        "array_pop ( array &$array ) : mixed"
    ],
    "array_product": [
        "Calculate the product of values in an array",
        "array_product ( array $array ) : int|float"
    ],
    "array_push": [
        "Push one or more elements onto the end of array",
        "array_push ( array &$array , mixed ...$values ) : int"
    ],
    "array_rand": [
        "Pick one or more random keys out of an array",
        "array_rand ( array $array , int $num = 1 ) : int|string|array"
    ],
    "array_reduce": [
        "Iteratively reduce the array to a single value using a callback function",
        "array_reduce ( array $array , callable $callback , mixed $initial = null ) : mixed"
    ],
    "array_replace": [
        "Replaces elements from passed arrays into the first array",
        "array_replace ( array $array , array ...$replacements ) : array"
    ],
    "array_replace_recursive": [
        "Replaces elements from passed arrays into the first array recursively",
        "array_replace_recursive ( array $array , array ...$replacements ) : array"
    ],
    "array_reverse": [
        "Return an array with elements in reverse order",
        "array_reverse ( array $array , bool $preserve_keys = false ) : array"
    ],
    "array_search": [
        "Searches the array for a given value and returns the first corresponding key if successful",
        "array_search ( mixed $needle , array $haystack , bool $strict = false ) : int|string|false"
    ],
    "array_shift": [
        "Shift an element off the beginning of array",
        "array_shift ( array &$array ) : mixed"
    ],
    "array_slice": [
        "Extract a slice of the array",
        "array_slice ( array $array , int $offset , int|null $length = null , bool $preserve_keys = false ) : array"
    ],
    "array_splice": [
        "Remove a portion of the array and replace it with something else",
        "array_splice ( array &$array , int $offset , int|null $length = null , mixed $replacement = [] ) : array"
    ],
    "array_sum": [
        "Calculate the sum of values in an array",
        "array_sum ( array $array ) : int|float"
    ],
    "array_udiff": [
        "Computes the difference of arrays by using a callback function for data comparison",
        "array_udiff ( array $array , array ...$arrays , callable $value_compare_func ) : array"
    ],
    "array_udiff_assoc": [
        "Computes the difference of arrays with additional index check, compares data by a callback function",
        "array_udiff_assoc ( array $array , array ...$arrays , callable $value_compare_func ) : array"
    ],
    "array_udiff_uassoc": [
        "Computes the difference of arrays with additional index check, compares data and indexes by a callback function",
        "array_udiff_uassoc ( array $array , array ...$arrays , callable $value_compare_func , callable $key_compare_func ) : array"
    ],
    "array_uintersect": [
        "Computes the intersection of arrays, compares data by a callback function",
        "array_uintersect ( array $array , array ...$arrays , callable $value_compare_func ) : array"
    ],
    "array_uintersect_assoc": [
        "Computes the intersection of arrays with additional index check, compares data by a callback function",
        "array_uintersect_assoc ( array $array , array ...$arrays , callable $value_compare_func ) : array"
    ],
    "array_uintersect_uassoc": [
        "Computes the intersection of arrays with additional index check, compares data and indexes by separate callback functions",
        "array_uintersect_uassoc ( array $array1 , array ...$arrays , callable $value_compare_func , callable $key_compare_func ) : array"
    ],
    "array_unique": [
        "Removes duplicate values from an array",
        "array_unique ( array $array , int $flags = SORT_STRING ) : array"
    ],
    "array_unshift": [
        "Prepend one or more elements to the beginning of an array",
        "array_unshift ( array &$array , mixed ...$values ) : int"
    ],
    "array_values": [
        "Return all the values of an array",
        "array_values ( array $array ) : array"
    ],
    "array_walk": [
        "Apply a user supplied function to every member of an array",
        "array_walk ( array|object &$array , callable $callback , mixed $userdata = null ) : bool"
    ],
    "array_walk_recursive": [
        "Apply a user function recursively to every member of an array",
        "array_walk_recursive ( array|object &$array , callable $callback , mixed $userdata = null ) : bool"
    ],
    "ArrayAccess": [
        "Interface to provide accessing objects as arrays."
    ],
    "ArrayIterator": [
        "This iterator allows to unset and modify values and keys while iterating over Arrays and Objects.",
        "new ArrayIterator ( mixed $array = array() , int $flags = 0 )"
    ],
    "ArrayObject": [
        "This class allows objects to work as arrays.",
        "new ArrayObject ( mixed $input = array() , int $flags = 0 , string $iterator_class = \"ArrayIterator\" )"
    ],
    "arsort": [
        "Sort an array in reverse order and maintain index association",
        "arsort ( array &$array , int $flags = SORT_REGULAR ) : bool"
    ],
    "asin": [
        "Arc sine",
        "asin ( float $num ) : float"
    ],
    "asinh": [
        "Inverse hyperbolic sine",
        "asinh ( float $num ) : float"
    ],
    "asort": [
        "Sort an array and maintain index association",
        "asort ( array &$array , int $flags = SORT_REGULAR ) : bool"
    ],
    "assert": [
        "Checks if assertion is false",
        "assert ( mixed $assertion , string $description = ? ) : bool",
        "assert ( mixed $assertion , Throwable $exception = ? ) : bool"
    ],
    "assert_options": [
        "Set\/get the various assert flags",
        "assert_options ( int $what , mixed $value = ? ) : mixed"
    ],
    "AssertionError": [
        "AssertionError is thrown when an assertion made via assert() fails."
    ],
    "atan": [
        "Arc tangent",
        "atan ( float $num ) : float"
    ],
    "atan2": [
        "Arc tangent of two variables",
        "atan2 ( float $y , float $x ) : float"
    ],
    "atanh": [
        "Inverse hyperbolic tangent",
        "atanh ( float $num ) : float"
    ],
    "BadFunctionCallException": [
        "Exception thrown if a callback refers to an undefined function or if some arguments are missing."
    ],
    "BadMethodCallException": [
        "Exception thrown if a callback refers to an undefined method or if some arguments are missing."
    ],
    "base64_decode": [
        "Decodes data encoded with MIME base64",
        "base64_decode ( string $string , bool $strict = false ) : string|false"
    ],
    "base64_encode": [
        "Encodes data with MIME base64",
        "base64_encode ( string $string ) : string"
    ],
    "base_convert": [
        "Convert a number between arbitrary bases",
        "base_convert ( string $num , int $from_base , int $to_base ) : string"
    ],
    "basename": [
        "Returns trailing name component of path",
        "basename ( string $path , string $suffix = \"\" ) : string"
    ],
    "bcadd": [
        "Add two arbitrary precision numbers",
        "bcadd ( string $num1 , string $num2 , int|null $scale = null ) : string"
    ],
    "bccomp": [
        "Compare two arbitrary precision numbers",
        "bccomp ( string $num1 , string $num2 , int|null $scale = null ) : int"
    ],
    "bcdiv": [
        "Divide two arbitrary precision numbers",
        "bcdiv ( string $num1 , string $num2 , int|null $scale = null ) : string"
    ],
    "bcmod": [
        "Get modulus of an arbitrary precision number",
        "bcmod ( string $num1 , string $num2 , int|null $scale = null ) : string"
    ],
    "bcmul": [
        "Multiply two arbitrary precision numbers",
        "bcmul ( string $num1 , string $num2 , int|null $scale = null ) : string"
    ],
    "bcpow": [
        "Raise an arbitrary precision number to another",
        "bcpow ( string $num , string $exponent , int|null $scale = null ) : string"
    ],
    "bcpowmod": [
        "Raise an arbitrary precision number to another, reduced by a specified modulus",
        "bcpowmod ( string $num , string $exponent , string $modulus , int|null $scale = null ) : string"
    ],
    "bcscale": [
        "Set or get default scale parameter for all bc math functions",
        "bcscale ( int $scale ) : int",
        "bcscale ( null $scale = null ) : int"
    ],
    "bcsqrt": [
        "Get the square root of an arbitrary precision number",
        "bcsqrt ( string $num , int|null $scale = null ) : string"
    ],
    "bcsub": [
        "Subtract one arbitrary precision number from another",
        "bcsub ( string $num1 , string $num2 , int|null $scale = null ) : string"
    ],
    "bin2hex": [
        "Convert binary data into hexadecimal representation",
        "bin2hex ( string $string ) : string"
    ],
    "bind_textdomain_codeset": [
        "Specify or get the character encoding in which the messages from the DOMAIN message catalog will be returned",
        "bind_textdomain_codeset ( string $domain , string|null $codeset ) : string|false"
    ],
    "bindec": [
        "Binary to decimal",
        "bindec ( string $binary_string ) : int|float"
    ],
    "bindtextdomain": [
        "Sets or gets the path for a domain",
        "bindtextdomain ( string $domain , string|null $directory ) : string|false"
    ],
    "boolval": [
        "Get the boolean value of a variable",
        "boolval ( mixed $value ) : bool"
    ],
    "bson_decode": [
        "Deserializes a BSON object into a PHP array",
        "bson_decode ( string $bson ) : array"
    ],
    "bson_encode": [
        "Serializes a PHP variable into a BSON string",
        "bson_encode ( mixed $anything ) : string"
    ],
    "bzclose": [
        "Close a bzip2 file",
        "bzclose ( resource $bz ) : bool"
    ],
    "bzcompress": [
        "Compress a string into bzip2 encoded data",
        "bzcompress ( string $data , int $block_size = 4 , int $work_factor = 0 ) : string|int"
    ],
    "bzdecompress": [
        "Decompresses bzip2 encoded data",
        "bzdecompress ( string $data , bool $use_less_memory = false ) : string|int|false"
    ],
    "bzerrno": [
        "Returns a bzip2 error number",
        "bzerrno ( resource $bz ) : int"
    ],
    "bzerror": [
        "Returns the bzip2 error number and error string in an array",
        "bzerror ( resource $bz ) : array"
    ],
    "bzerrstr": [
        "Returns a bzip2 error string",
        "bzerrstr ( resource $bz ) : string"
    ],
    "bzflush": [
        "Do nothing",
        "bzflush ( resource $bz ) : bool"
    ],
    "bzopen": [
        "Opens a bzip2 compressed file",
        "bzopen ( string|resource $file , string $mode ) : resource|false"
    ],
    "bzread": [
        "Binary safe bzip2 file read",
        "bzread ( resource $bz , int $length = 1024 ) : string|false"
    ],
    "bzwrite": [
        "Binary safe bzip2 file write",
        "bzwrite ( resource $bz , string $data , int|null $length = null ) : int|false"
    ],
    "CachingIterator": [
        "This object supports cached iteration over another iterator.",
        "new CachingIterator ( Iterator $iterator , int $flags = self::CALL_TOSTRING )"
    ],
    "cal_days_in_month": [
        "Return the number of days in a month for a given year and calendar",
        "cal_days_in_month ( int $calendar , int $month , int $year ) : int"
    ],
    "cal_from_jd": [
        "Converts from Julian Day Count to a supported calendar",
        "cal_from_jd ( int $julian_day , int $calendar ) : array"
    ],
    "cal_info": [
        "Returns information about a particular calendar",
        "cal_info ( int $calendar = -1 ) : array"
    ],
    "cal_to_jd": [
        "Converts from a supported calendar to Julian Day Count",
        "cal_to_jd ( int $calendar , int $month , int $day , int $year ) : int"
    ],
    "call_user_func": [
        "Call the callback given by the first parameter",
        "call_user_func ( callable $callback , mixed ...$args ) : mixed"
    ],
    "call_user_func_array": [
        "Call a callback with an array of parameters",
        "call_user_func_array ( callable $callback , array $args ) : mixed"
    ],
    "CallbackFilterIterator": [
        "Create a filtered iterator from another iterator",
        "new CallbackFilterIterator ( Iterator $iterator , callable $callback )"
    ],
    "ceil": [
        "Round fractions up",
        "ceil ( float $value ) : float"
    ],
    "chdir": [
        "Change directory",
        "chdir ( string $directory ) : bool"
    ],
    "checkdate": [
        "Validate a Gregorian date",
        "checkdate ( int $month , int $day , int $year ) : bool"
    ],
    "checkdnsrr": [
        "Check DNS records corresponding to a given Internet host name or IP address",
        "checkdnsrr ( string $hostname , string $type = \"MX\" ) : bool"
    ],
    "chgrp": [
        "Changes file group",
        "chgrp ( string $filename , string|int $group ) : bool"
    ],
    "chmod": [
        "Changes file mode",
        "chmod ( string $filename , int $permissions ) : bool"
    ],
    "chown": [
        "Changes file owner",
        "chown ( string $filename , string|int $user ) : bool"
    ],
    "chr": [
        "Generate a single-byte string from a number",
        "chr ( int $codepoint ) : string"
    ],
    "chroot": [
        "Change the root directory",
        "chroot ( string $directory ) : bool"
    ],
    "chunk_split": [
        "Split a string into smaller chunks",
        "chunk_split ( string $string , int $length = 76 , string $separator = \"\\r\\n\" ) : string"
    ],
    "class_alias": [
        "Creates an alias for a class",
        "class_alias ( string $original , string $alias , bool $autoload = true ) : bool"
    ],
    "class_exists": [
        "Checks if the class has been defined",
        "class_exists ( string $class_name , bool $autoload = true ) : bool"
    ],
    "class_implements": [
        "Return the interfaces which are implemented by the given class or interface",
        "class_implements ( mixed $class , bool $autoload = true ) : array"
    ],
    "class_parents": [
        "Return the parent classes of the given class",
        "class_parents ( mixed $class , bool $autoload = true ) : array"
    ],
    "class_uses": [
        "Return the traits used by the given class",
        "class_uses ( mixed $class , bool $autoload = true ) : array"
    ],
    "classkit_import": [
        "Import new class method definitions from a file",
        "classkit_import ( string $filename ) : array"
    ],
    "classkit_method_add": [
        "Dynamically adds a new method to a given class",
        "classkit_method_add ( string $classname , string $methodname , string $args , string $code , int $flags = CLASSKIT_ACC_PUBLIC ) : bool"
    ],
    "classkit_method_copy": [
        "Copies a method from class to another",
        "classkit_method_copy ( string $dClass , string $dMethod , string $sClass , string $sMethod = ? ) : bool"
    ],
    "classkit_method_redefine": [
        "Dynamically changes the code of the given method",
        "classkit_method_redefine ( string $classname , string $methodname , string $args , string $code , int $flags = CLASSKIT_ACC_PUBLIC ) : bool"
    ],
    "classkit_method_remove": [
        "Dynamically removes the given method",
        "classkit_method_remove ( string $classname , string $methodname ) : bool"
    ],
    "classkit_method_rename": [
        "Dynamically changes the name of the given method",
        "classkit_method_rename ( string $classname , string $methodname , string $newname ) : bool"
    ],
    "clearstatcache": [
        "Clears file status cache",
        "clearstatcache ( bool $clear_realpath_cache = false , string $filename = \"\" ) : void"
    ],
    "cli_get_process_title": [
        "Returns the current process title",
        "cli_get_process_title ( ) : string|null"
    ],
    "cli_set_process_title": [
        "Sets the process title",
        "cli_set_process_title ( string $title ) : bool"
    ],
    "closedir": [
        "Close directory handle",
        "closedir ( resource $dir_handle = ? ) : void"
    ],
    "closelog": [
        "Close connection to system logger",
        "closelog ( ) : bool"
    ],
    "Closure": [
        "Class used to represent anonymous functions."
    ],
    "Collator": [
        "Provides string comparison capability with support for appropriate locale-sensitive sort orderings.",
        "new Collator ( string $locale )"
    ],
    "collator_asort": [
        "Sort array maintaining index association",
        "collator_asort ( Collator $object , array &$array , int $flags = Collator::SORT_REGULAR ) : bool"
    ],
    "collator_compare": [
        "Compare two Unicode strings",
        "collator_compare ( Collator $object , string $string1 , string $string2 ) : int|false"
    ],
    "collator_create": [
        "Create a collator",
        "collator_create ( string $locale ) : Collator|null"
    ],
    "collator_get_attribute": [
        "Get collation attribute value",
        "collator_get_attribute ( Collator $object , int $attribute ) : int|false"
    ],
    "collator_get_error_code": [
        "Get collator's last error code",
        "collator_get_error_code ( Collator $object ) : int|false"
    ],
    "collator_get_error_message": [
        "Get text for collator's last error code",
        "collator_get_error_message ( Collator $object ) : string|false"
    ],
    "collator_get_locale": [
        "Get the locale name of the collator",
        "collator_get_locale ( Collator $object , int $type ) : string|false"
    ],
    "collator_get_sort_key": [
        "Get sorting key for a string",
        "collator_get_sort_key ( Collator $object , string $string ) : string|false"
    ],
    "collator_get_strength": [
        "Get current collation strength",
        "collator_get_strength ( Collator $object ) : int"
    ],
    "collator_set_attribute": [
        "Set collation attribute",
        "collator_set_attribute ( Collator $object , int $attribute , int $value ) : bool"
    ],
    "collator_set_strength": [
        "Set collation strength",
        "collator_set_strength ( Collator $object , int $strength ) : bool"
    ],
    "collator_sort": [
        "Sort array using specified collator",
        "collator_sort ( Collator $object , array &$array , int $flags = Collator::SORT_REGULAR ) : bool"
    ],
    "collator_sort_with_sort_keys": [
        "Sort array using specified collator and sort keys",
        "collator_sort_with_sort_keys ( Collator $object , array &$array ) : bool"
    ],
    "Collectable": [
        "Represents a garbage-collectable object."
    ],
    "com": [
        "The com class allows you to instantiate an OLE compatible COM object and call its methods and access its properties.",
        "new com ( string $module_name , array|string|null $server_name = null , int $codepage = CP_ACP , string $typelib = \"\" )"
    ],
    "com_create_guid": [
        "Generate a globally unique identifier (GUID)",
        "com_create_guid ( ) : string|false"
    ],
    "com_event_sink": [
        "Connect events from a COM object to a PHP object",
        "com_event_sink ( variant $variant , object $sink_object , array|string|null $sink_interface = null ) : bool"
    ],
    "com_get_active_object": [
        "Returns a handle to an already running instance of a COM object",
        "com_get_active_object ( string $prog_id , int|null $codepage = null ) : variant"
    ],
    "com_load_typelib": [
        "Loads a Typelib",
        "com_load_typelib ( string $typelib , bool $case_insensitive = true ) : bool"
    ],
    "com_message_pump": [
        "Process COM messages, sleeping for up to timeoutms milliseconds",
        "com_message_pump ( int $timeout_milliseconds = 0 ) : bool"
    ],
    "com_print_typeinfo": [
        "Print out a PHP class definition for a dispatchable interface",
        "com_print_typeinfo ( variant|string $variant , string|null $dispatch_interface = null , bool $display_sink = false ) : bool"
    ],
    "compact": [
        "Create array containing variables and their values",
        "compact ( array|string $var_name , array|string ...$var_names ) : array"
    ],
    "COMPersistHelper": [
        "COMPersistHelper improves the interoperability of COM and PHP with regard to the php.ini directive open_basedir, and stream resources.",
        "new COMPersistHelper ( variant|null $variant = null )"
    ],
    "CompileError": [
        "CompileError is thrown for some compilation errors, which formerly issued a fatal error."
    ],
    "Cond": [
        "The static methods contained in the Cond class provide direct access to Posix Condition Variables."
    ],
    "connection_aborted": [
        "Check whether client disconnected",
        "connection_aborted ( ) : int"
    ],
    "connection_status": [
        "Returns connection status bitfield",
        "connection_status ( ) : int"
    ],
    "constant": [
        "Returns the value of a constant",
        "constant ( string $name ) : mixed"
    ],
    "convert_cyr_string": [
        "Convert from one Cyrillic character set to another",
        "convert_cyr_string ( string $str , string $from , string $to ) : string"
    ],
    "convert_uudecode": [
        "Decode a uuencoded string",
        "convert_uudecode ( string $string ) : string|false"
    ],
    "convert_uuencode": [
        "Uuencode a string",
        "convert_uuencode ( string $string ) : string"
    ],
    "copy": [
        "Copies file",
        "copy ( string $source , string $dest , resource $context = ? ) : bool"
    ],
    "cos": [
        "Cosine",
        "cos ( float $num ) : float"
    ],
    "cosh": [
        "Hyperbolic cosine",
        "cosh ( float $num ) : float"
    ],
    "count": [
        "Count all elements in an array, or something in an object",
        "count ( Countable|array $value , int $mode = COUNT_NORMAL ) : int"
    ],
    "count_chars": [
        "Return information about characters used in a string",
        "count_chars ( string $string , int $mode = 0 ) : array|string"
    ],
    "Countable": [
        "Classes implementing Countable can be used with the count() function."
    ],
    "crc32": [
        "Calculates the crc32 polynomial of a string",
        "crc32 ( string $string ) : int"
    ],
    "create_function": [
        "Create an anonymous (lambda-style) function",
        "create_function ( string $args , string $code ) : string"
    ],
    "crypt": [
        "One-way string hashing",
        "crypt ( string $string , string $salt ) : string"
    ],
    "ctype_alnum": [
        "Check for alphanumeric character(s)",
        "ctype_alnum ( mixed $text ) : bool"
    ],
    "ctype_alpha": [
        "Check for alphabetic character(s)",
        "ctype_alpha ( mixed $text ) : bool"
    ],
    "ctype_cntrl": [
        "Check for control character(s)",
        "ctype_cntrl ( mixed $text ) : bool"
    ],
    "ctype_digit": [
        "Check for numeric character(s)",
        "ctype_digit ( mixed $text ) : bool"
    ],
    "ctype_graph": [
        "Check for any printable character(s) except space",
        "ctype_graph ( mixed $text ) : bool"
    ],
    "ctype_lower": [
        "Check for lowercase character(s)",
        "ctype_lower ( mixed $text ) : bool"
    ],
    "ctype_print": [
        "Check for printable character(s)",
        "ctype_print ( mixed $text ) : bool"
    ],
    "ctype_punct": [
        "Check for any printable character which is not whitespace or an\n   alphanumeric character",
        "ctype_punct ( mixed $text ) : bool"
    ],
    "ctype_space": [
        "Check for whitespace character(s)",
        "ctype_space ( mixed $text ) : bool"
    ],
    "ctype_upper": [
        "Check for uppercase character(s)",
        "ctype_upper ( mixed $text ) : bool"
    ],
    "ctype_xdigit": [
        "Check for character(s) representing a hexadecimal digit",
        "ctype_xdigit ( mixed $text ) : bool"
    ],
    "cubrid_affected_rows": [
        "Return the number of rows affected by the last SQL statement",
        "cubrid_affected_rows ( resource $conn_identifier = ? ) : int",
        "cubrid_affected_rows ( resource $req_identifier = ? ) : int"
    ],
    "cubrid_bind": [
        "Bind variables to a prepared statement as parameters",
        "cubrid_bind ( resource $req_identifier , int $bind_index , mixed $bind_value , string $bind_value_type = ? ) : bool"
    ],
    "cubrid_client_encoding": [
        "Return the current CUBRID connection charset",
        "cubrid_client_encoding ( resource $conn_identifier = ? ) : string"
    ],
    "cubrid_close": [
        "Close CUBRID connection",
        "cubrid_close ( resource $conn_identifier = ? ) : bool"
    ],
    "cubrid_close_prepare": [
        "Close the request handle",
        "cubrid_close_prepare ( resource $req_identifier ) : bool"
    ],
    "cubrid_close_request": [
        "Close the request handle",
        "cubrid_close_request ( resource $req_identifier ) : bool"
    ],
    "cubrid_col_get": [
        "Get contents of collection type column using OID",
        "cubrid_col_get ( resource $conn_identifier , string $oid , string $attr_name ) : array"
    ],
    "cubrid_col_size": [
        "Get the number of elements in collection type column using OID",
        "cubrid_col_size ( resource $conn_identifier , string $oid , string $attr_name ) : int"
    ],
    "cubrid_column_names": [
        "Get the column names in result",
        "cubrid_column_names ( resource $req_identifier ) : array"
    ],
    "cubrid_column_types": [
        "Get column types in result",
        "cubrid_column_types ( resource $req_identifier ) : array"
    ],
    "cubrid_commit": [
        "Commit a transaction",
        "cubrid_commit ( resource $conn_identifier ) : bool"
    ],
    "cubrid_connect": [
        "Open a connection to a CUBRID Server",
        "cubrid_connect ( string $host , int $port , string $dbname , string $userid = ? , string $passwd = ? , bool $new_link = false ) : resource"
    ],
    "cubrid_connect_with_url": [
        "Establish the environment for connecting to CUBRID server",
        "cubrid_connect_with_url ( string $conn_url , string $userid = ? , string $passwd = ? , bool $new_link = false ) : resource"
    ],
    "cubrid_current_oid": [
        "Get OID of the current cursor location",
        "cubrid_current_oid ( resource $req_identifier ) : string"
    ],
    "cubrid_data_seek": [
        "Move the internal row pointer of the CUBRID result",
        "cubrid_data_seek ( resource $result , int $row_number ) : bool"
    ],
    "cubrid_db_name": [
        "Get db name from results of cubrid_list_dbs",
        "cubrid_db_name ( array $result , int $index ) : string"
    ],
    "cubrid_disconnect": [
        "Close a database connection",
        "cubrid_disconnect ( resource $conn_identifier = ? ) : bool"
    ],
    "cubrid_drop": [
        "Delete an instance using OID",
        "cubrid_drop ( resource $conn_identifier , string $oid ) : bool"
    ],
    "cubrid_errno": [
        "Return the numerical value of the error message from previous CUBRID operation",
        "cubrid_errno ( resource $conn_identifier = ? ) : int"
    ],
    "cubrid_error": [
        "Get the error message",
        "cubrid_error ( resource $connection = ? ) : string"
    ],
    "cubrid_error_code": [
        "Get error code for the most recent function call",
        "cubrid_error_code ( ) : int"
    ],
    "cubrid_error_code_facility": [
        "Get the facility code of error",
        "cubrid_error_code_facility ( ) : int"
    ],
    "cubrid_error_msg": [
        "Get last error message for the most recent function call",
        "cubrid_error_msg ( ) : string"
    ],
    "cubrid_execute": [
        "Execute a prepared SQL statement",
        "cubrid_execute ( resource $conn_identifier , string $sql , int $option = 0 ) : resource",
        "cubrid_execute ( resource $request_identifier , int $option = 0 ) : bool"
    ],
    "cubrid_fetch": [
        "Fetch the next row from a result set",
        "cubrid_fetch ( resource $result , int $type = CUBRID_BOTH ) : mixed"
    ],
    "cubrid_fetch_array": [
        "Fetch a result row as an associative array, a numeric array, or both",
        "cubrid_fetch_array ( resource $result , int $type = CUBRID_BOTH ) : array"
    ],
    "cubrid_fetch_assoc": [
        "Return the associative array that corresponds to the fetched row",
        "cubrid_fetch_assoc ( resource $result , int $type = ? ) : array"
    ],
    "cubrid_fetch_field": [
        "Get column information from a result and return as an object",
        "cubrid_fetch_field ( resource $result , int $field_offset = 0 ) : object"
    ],
    "cubrid_fetch_lengths": [
        "Return an array with the lengths of the values of each field from the current row",
        "cubrid_fetch_lengths ( resource $result ) : array"
    ],
    "cubrid_fetch_object": [
        "Fetch the next row and return it as an object",
        "cubrid_fetch_object ( resource $result , string $class_name = ? , array $params = ? , int $type = ? ) : object"
    ],
    "cubrid_fetch_row": [
        "Return a numerical array with the values of the current row",
        "cubrid_fetch_row ( resource $result , int $type = ? ) : array"
    ],
    "cubrid_field_flags": [
        "Return a string with the flags of the given field offset",
        "cubrid_field_flags ( resource $result , int $field_offset ) : string"
    ],
    "cubrid_field_len": [
        "Get the maximum length of the specified field",
        "cubrid_field_len ( resource $result , int $field_offset ) : int"
    ],
    "cubrid_field_name": [
        "Return the name of the specified field index",
        "cubrid_field_name ( resource $result , int $field_offset ) : string"
    ],
    "cubrid_field_seek": [
        "Move the result set cursor to the specified field offset",
        "cubrid_field_seek ( resource $result , int $field_offset = 0 ) : bool"
    ],
    "cubrid_field_table": [
        "Return the name of the table of the specified field",
        "cubrid_field_table ( resource $result , int $field_offset ) : string"
    ],
    "cubrid_field_type": [
        "Return the type of the column corresponding to the given field offset",
        "cubrid_field_type ( resource $result , int $field_offset ) : string"
    ],
    "cubrid_free_result": [
        "Free the memory occupied by the result data",
        "cubrid_free_result ( resource $req_identifier ) : bool"
    ],
    "cubrid_get": [
        "Get a column using OID",
        "cubrid_get ( resource $conn_identifier , string $oid , mixed $attr = ? ) : mixed"
    ],
    "cubrid_get_autocommit": [
        "Get auto-commit mode of the connection",
        "cubrid_get_autocommit ( resource $conn_identifier ) : bool"
    ],
    "cubrid_get_charset": [
        "Return the current CUBRID connection charset",
        "cubrid_get_charset ( resource $conn_identifier ) : string"
    ],
    "cubrid_get_class_name": [
        "Get the class name using OID",
        "cubrid_get_class_name ( resource $conn_identifier , string $oid ) : string"
    ],
    "cubrid_get_client_info": [
        "Return the client library version",
        "cubrid_get_client_info ( ) : string"
    ],
    "cubrid_get_db_parameter": [
        "Returns the CUBRID database parameters",
        "cubrid_get_db_parameter ( resource $conn_identifier ) : array"
    ],
    "cubrid_get_query_timeout": [
        "Get the query timeout value of the request",
        "cubrid_get_query_timeout ( resource $req_identifier ) : int"
    ],
    "cubrid_get_server_info": [
        "Return the CUBRID server version",
        "cubrid_get_server_info ( resource $conn_identifier ) : string"
    ],
    "cubrid_insert_id": [
        "Return the ID generated for the last updated AUTO_INCREMENT column",
        "cubrid_insert_id ( resource $conn_identifier = ? ) : string"
    ],
    "cubrid_is_instance": [
        "Check whether the instance pointed by OID exists",
        "cubrid_is_instance ( resource $conn_identifier , string $oid ) : int"
    ],
    "cubrid_list_dbs": [
        "Return an array with the list of all existing CUBRID databases",
        "cubrid_list_dbs ( resource $conn_identifier = ? ) : array"
    ],
    "cubrid_load_from_glo": [
        "Read data from a GLO instance and save it in a file",
        "cubrid_load_from_glo ( resource $conn_identifier , string $oid , string $file_name ) : int"
    ],
    "cubrid_lob2_bind": [
        "Bind a lob object or a string as a lob object to a prepared statement as parameters",
        "cubrid_lob2_bind ( resource $req_identifier , int $bind_index , mixed $bind_value , string $bind_value_type = ? ) : bool"
    ],
    "cubrid_lob2_close": [
        "Close LOB object",
        "cubrid_lob2_close ( resource $lob_identifier ) : bool"
    ],
    "cubrid_lob2_export": [
        "Export the lob object to a file",
        "cubrid_lob2_export ( resource $lob_identifier , string $file_name ) : bool"
    ],
    "cubrid_lob2_import": [
        "Import BLOB\/CLOB data from a file",
        "cubrid_lob2_import ( resource $lob_identifier , string $file_name ) : bool"
    ],
    "cubrid_lob2_new": [
        "Create a lob object",
        "cubrid_lob2_new ( resource $conn_identifier = ? , string $type = \"BLOB\" ) : resource"
    ],
    "cubrid_lob2_read": [
        "Read from BLOB\/CLOB data",
        "cubrid_lob2_read ( resource $lob_identifier , int $len ) : string"
    ],
    "cubrid_lob2_seek": [
        "Move the cursor of a lob object",
        "cubrid_lob2_seek ( resource $lob_identifier , int $offset , int $origin = CUBRID_CURSOR_CURRENT ) : bool"
    ],
    "cubrid_lob2_seek64": [
        "Move the cursor of a lob object",
        "cubrid_lob2_seek64 ( resource $lob_identifier , string $offset , int $origin = CUBRID_CURSOR_CURRENT ) : bool"
    ],
    "cubrid_lob2_size": [
        "Get a lob object's size",
        "cubrid_lob2_size ( resource $lob_identifier ) : int"
    ],
    "cubrid_lob2_size64": [
        "Get a lob object's size",
        "cubrid_lob2_size64 ( resource $lob_identifier ) : string"
    ],
    "cubrid_lob2_tell": [
        "Tell the cursor position of the LOB object",
        "cubrid_lob2_tell ( resource $lob_identifier ) : int"
    ],
    "cubrid_lob2_tell64": [
        "Tell the cursor position of the LOB object",
        "cubrid_lob2_tell64 ( resource $lob_identifier ) : string"
    ],
    "cubrid_lob2_write": [
        "Write to a lob object",
        "cubrid_lob2_write ( resource $lob_identifier , string $buf ) : bool"
    ],
    "cubrid_lob_close": [
        "Close BLOB\/CLOB data",
        "cubrid_lob_close ( array $lob_identifier_array ) : bool"
    ],
    "cubrid_lob_export": [
        "Export BLOB\/CLOB data to file",
        "cubrid_lob_export ( resource $conn_identifier , resource $lob_identifier , string $path_name ) : bool"
    ],
    "cubrid_lob_get": [
        "Get BLOB\/CLOB data",
        "cubrid_lob_get ( resource $conn_identifier , string $sql ) : array"
    ],
    "cubrid_lob_send": [
        "Read BLOB\/CLOB data and send straight to browser",
        "cubrid_lob_send ( resource $conn_identifier , resource $lob_identifier ) : bool"
    ],
    "cubrid_lob_size": [
        "Get BLOB\/CLOB data size",
        "cubrid_lob_size ( resource $lob_identifier ) : string"
    ],
    "cubrid_lock_read": [
        "Set a read lock on the given OID",
        "cubrid_lock_read ( resource $conn_identifier , string $oid ) : bool"
    ],
    "cubrid_lock_write": [
        "Set a write lock on the given OID",
        "cubrid_lock_write ( resource $conn_identifier , string $oid ) : bool"
    ],
    "cubrid_move_cursor": [
        "Move the cursor in the result",
        "cubrid_move_cursor ( resource $req_identifier , int $offset , int $origin = CUBRID_CURSOR_CURRENT ) : bool"
    ],
    "cubrid_new_glo": [
        "Create a glo instance",
        "cubrid_new_glo ( resource $conn_identifier , string $class_name , string $file_name ) : string"
    ],
    "cubrid_next_result": [
        "Get result of next query when executing multiple SQL statements",
        "cubrid_next_result ( resource $result ) : bool"
    ],
    "cubrid_num_cols": [
        "Return the number of columns in the result set",
        "cubrid_num_cols ( resource $result ) : int"
    ],
    "cubrid_num_fields": [
        "Return the number of columns in the result set",
        "cubrid_num_fields ( resource $result ) : int"
    ],
    "cubrid_num_rows": [
        "Get the number of rows in the result set",
        "cubrid_num_rows ( resource $result ) : int"
    ],
    "cubrid_pconnect": [
        "Open a persistent connection to a CUBRID server",
        "cubrid_pconnect ( string $host , int $port , string $dbname , string $userid = ? , string $passwd = ? ) : resource"
    ],
    "cubrid_pconnect_with_url": [
        "Open a persistent connection to CUBRID server",
        "cubrid_pconnect_with_url ( string $conn_url , string $userid = ? , string $passwd = ? ) : resource"
    ],
    "cubrid_ping": [
        "Ping a server connection or reconnect if there is no connection",
        "cubrid_ping ( resource $conn_identifier = ? ) : bool"
    ],
    "cubrid_prepare": [
        "Prepare a SQL statement for execution",
        "cubrid_prepare ( resource $conn_identifier , string $prepare_stmt , int $option = 0 ) : resource"
    ],
    "cubrid_put": [
        "Update a column using OID",
        "cubrid_put ( resource $conn_identifier , string $oid , string $attr = ? , mixed $value ) : bool"
    ],
    "cubrid_query": [
        "Send a CUBRID query",
        "cubrid_query ( string $query , resource $conn_identifier = ? ) : resource"
    ],
    "cubrid_real_escape_string": [
        "Escape special characters in a string for use in an SQL statement",
        "cubrid_real_escape_string ( string $unescaped_string , resource $conn_identifier = ? ) : string"
    ],
    "cubrid_result": [
        "Return the value of a specific field in a specific row",
        "cubrid_result ( resource $result , int $row , mixed $field = 0 ) : string"
    ],
    "cubrid_rollback": [
        "Roll back a transaction",
        "cubrid_rollback ( resource $conn_identifier ) : bool"
    ],
    "cubrid_save_to_glo": [
        "Save requested file in a GLO instance",
        "cubrid_save_to_glo ( resource $conn_identifier , string $oid , string $file_name ) : int"
    ],
    "cubrid_schema": [
        "Get the requested schema information",
        "cubrid_schema ( resource $conn_identifier , int $schema_type , string $class_name = ? , string $attr_name = ? ) : array"
    ],
    "cubrid_send_glo": [
        "Read data from glo and send it to std output",
        "cubrid_send_glo ( resource $conn_identifier , string $oid ) : int"
    ],
    "cubrid_seq_drop": [
        "Delete an element from sequence type column using OID",
        "cubrid_seq_drop ( resource $conn_identifier , string $oid , string $attr_name , int $index ) : bool"
    ],
    "cubrid_seq_insert": [
        "Insert an element to a sequence type column using OID",
        "cubrid_seq_insert ( resource $conn_identifier , string $oid , string $attr_name , int $index , string $seq_element ) : bool"
    ],
    "cubrid_seq_put": [
        "Update the element value of sequence type column using OID",
        "cubrid_seq_put ( resource $conn_identifier , string $oid , string $attr_name , int $index , string $seq_element ) : bool"
    ],
    "cubrid_set_add": [
        "Insert a single element to set type column using OID",
        "cubrid_set_add ( resource $conn_identifier , string $oid , string $attr_name , string $set_element ) : bool"
    ],
    "cubrid_set_autocommit": [
        "Set autocommit mode of the connection",
        "cubrid_set_autocommit ( resource $conn_identifier , bool $mode ) : bool"
    ],
    "cubrid_set_db_parameter": [
        "Sets the CUBRID database parameters",
        "cubrid_set_db_parameter ( resource $conn_identifier , int $param_type , int $param_value ) : bool"
    ],
    "cubrid_set_drop": [
        "Delete an element from set type column using OID",
        "cubrid_set_drop ( resource $conn_identifier , string $oid , string $attr_name , string $set_element ) : bool"
    ],
    "cubrid_set_query_timeout": [
        "Set the timeout time of query execution",
        "cubrid_set_query_timeout ( resource $req_identifier , int $timeout ) : bool"
    ],
    "cubrid_unbuffered_query": [
        "Perform a query without fetching the results into memory",
        "cubrid_unbuffered_query ( string $query , resource $conn_identifier = ? ) : resource"
    ],
    "cubrid_version": [
        "Get the CUBRID PHP module's version",
        "cubrid_version ( ) : string"
    ],
    "curl_close": [
        "Close a cURL session",
        "curl_close ( CurlHandle $handle ) : void"
    ],
    "curl_copy_handle": [
        "Copy a cURL handle along with all of its preferences",
        "curl_copy_handle ( CurlHandle $handle ) : CurlHandle|false"
    ],
    "curl_errno": [
        "Return the last error number",
        "curl_errno ( CurlHandle $handle ) : int"
    ],
    "curl_error": [
        "Return a string containing the last error for the current session",
        "curl_error ( CurlHandle $handle ) : string"
    ],
    "curl_escape": [
        "URL encodes the given string",
        "curl_escape ( CurlHandle $handle , string $string ) : string|false"
    ],
    "curl_exec": [
        "Perform a cURL session",
        "curl_exec ( CurlHandle $handle ) : string|bool"
    ],
    "curl_file_create": [
        "Create a CURLFile object",
        "curl_file_create ( string $filename , string|null $mime_type = null , string|null $posted_filename = null ) : CURLFile"
    ],
    "curl_getinfo": [
        "Get information regarding a specific transfer",
        "curl_getinfo ( CurlHandle $handle , int|null $option = null ) : mixed"
    ],
    "curl_init": [
        "Initialize a cURL session",
        "curl_init ( string|null $url = null ) : CurlHandle|false"
    ],
    "curl_multi_add_handle": [
        "Add a normal cURL handle to a cURL multi handle",
        "curl_multi_add_handle ( CurlMultiHandle $multi_handle , CurlHandle $handle ) : int"
    ],
    "curl_multi_close": [
        "Close a set of cURL handles",
        "curl_multi_close ( CurlMultiHandle $multi_handle ) : void"
    ],
    "curl_multi_errno": [
        "Return the last multi curl error number",
        "curl_multi_errno ( CurlMultiHandle $multi_handle ) : int"
    ],
    "curl_multi_exec": [
        "Run the sub-connections of the current cURL handle",
        "curl_multi_exec ( CurlMultiHandle $multi_handle , int &$still_running ) : int"
    ],
    "curl_multi_getcontent": [
        "Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set",
        "curl_multi_getcontent ( CurlHandle $handle ) : string|null"
    ],
    "curl_multi_info_read": [
        "Get information about the current transfers",
        "curl_multi_info_read ( CurlMultiHandle $multi_handle , int &$queued_messages = null ) : array|false"
    ],
    "curl_multi_init": [
        "Returns a new cURL multi handle",
        "curl_multi_init ( ) : CurlMultiHandle"
    ],
    "curl_multi_remove_handle": [
        "Remove a multi handle from a set of cURL handles",
        "curl_multi_remove_handle ( CurlMultiHandle $multi_handle , CurlHandle $handle ) : int"
    ],
    "curl_multi_select": [
        "Wait for activity on any curl_multi connection",
        "curl_multi_select ( CurlMultiHandle $multi_handle , float $timeout = 1.0 ) : int"
    ],
    "curl_multi_setopt": [
        "Set an option for the cURL multi handle",
        "curl_multi_setopt ( CurlMultiHandle $multi_handle , int $option , mixed $value ) : bool"
    ],
    "curl_multi_strerror": [
        "Return string describing error code",
        "curl_multi_strerror ( int $error_code ) : string|null"
    ],
    "curl_pause": [
        "Pause and unpause a connection",
        "curl_pause ( CurlHandle $handle , int $flags ) : int"
    ],
    "curl_reset": [
        "Reset all options of a libcurl session handle",
        "curl_reset ( CurlHandle $handle ) : void"
    ],
    "curl_setopt": [
        "Set an option for a cURL transfer",
        "curl_setopt ( CurlHandle $handle , int $option , mixed $value ) : bool"
    ],
    "curl_setopt_array": [
        "Set multiple options for a cURL transfer",
        "curl_setopt_array ( CurlHandle $handle , array $options ) : bool"
    ],
    "curl_share_close": [
        "Close a cURL share handle",
        "curl_share_close ( CurlShareHandle $share_handle ) : void"
    ],
    "curl_share_errno": [
        "Return the last share curl error number",
        "curl_share_errno ( CurlShareHandle $share_handle ) : int"
    ],
    "curl_share_init": [
        "Initialize a cURL share handle",
        "curl_share_init ( ) : CurlShareHandle"
    ],
    "curl_share_setopt": [
        "Set an option for a cURL share handle",
        "curl_share_setopt ( CurlShareHandle $share_handle , int $option , mixed $value ) : bool"
    ],
    "curl_share_strerror": [
        "Return string describing the given error code",
        "curl_share_strerror ( int $error_code ) : string|null"
    ],
    "curl_strerror": [
        "Return string describing the given error code",
        "curl_strerror ( int $error_code ) : string|null"
    ],
    "curl_unescape": [
        "Decodes the given URL encoded string",
        "curl_unescape ( CurlHandle $handle , string $string ) : string|false"
    ],
    "curl_version": [
        "Gets cURL version information",
        "curl_version ( ) : array|false"
    ],
    "CURLFile": [
        "CURLFile should be used to upload a file with CURLOPT_POSTFIELDS.",
        "new CURLFile ( string $filename , string|null $mime_type = null , string|null $posted_filename = null )"
    ],
    "CurlHandle": [
        "A fully opaque class which replaces curl resources as of PHP 8.0.0."
    ],
    "CurlMultiHandle": [
        "A fully opaque class which replaces curl_multi resources as of PHP 8.0.0."
    ],
    "CurlShareHandle": [
        "A fully opaque class which replaces curl_share resources as of PHP 8.0.0."
    ],
    "current": [
        "Return the current element in an array",
        "current ( array|object $array ) : mixed"
    ],
    "date": [
        "Format a local time\/date",
        "date ( string $format , int|null $timestamp = null ) : string"
    ],
    "date_add": [
        "Adds an amount of days, months, years, hours, minutes and seconds to a\n   DateTime object",
        "date_add ( DateTime $object , DateInterval $interval ) : DateTime"
    ],
    "date_create": [
        "Returns new DateTime object",
        "date_create ( string $datetime = \"now\" , DateTimeZone|null $timezone = null ) : DateTime|false"
    ],
    "date_create_from_format": [
        "Parses a time string according to a specified format",
        "date_create_from_format ( string $format , string $datetime , DateTimeZone|null $timezone = null ) : DateTime|false"
    ],
    "date_create_immutable": [
        "Returns new DateTimeImmutable object",
        "date_create_immutable ( string $datetime = \"now\" , DateTimeZone|null $timezone = null ) : DateTimeImmutable|false"
    ],
    "date_create_immutable_from_format": [
        "Parses a time string according to a specified format",
        "date_create_immutable_from_format ( string $format , string $datetime , DateTimeZone|null $timezone = null ) : DateTimeImmutable|false"
    ],
    "date_date_set": [
        "Sets the date",
        "date_date_set ( DateTime $object , int $year , int $month , int $day ) : DateTime"
    ],
    "date_default_timezone_get": [
        "Gets the default timezone used by all date\/time functions in a script",
        "date_default_timezone_get ( ) : string"
    ],
    "date_default_timezone_set": [
        "Sets the default timezone used by all date\/time functions in a script",
        "date_default_timezone_set ( string $timezoneId ) : bool"
    ],
    "date_diff": [
        "Returns the difference between two DateTime objects",
        "date_diff ( DateTimeInterface $baseObject , DateTimeInterface $targetObject , bool $absolute = false ) : DateInterval"
    ],
    "date_format": [
        "Returns date formatted according to given format",
        "date_format ( DateTimeInterface $object , string $format ) : string"
    ],
    "date_get_last_errors": [
        "Returns the warnings and errors",
        "date_get_last_errors ( ) : array|false"
    ],
    "date_isodate_set": [
        "Sets the ISO date",
        "date_isodate_set ( DateTime $object , int $year , int $week , int $dayOfWeek = 1 ) : DateTime"
    ],
    "date_modify": [
        "Alters the timestamp",
        "date_modify ( DateTime $object , string $modifier ) : DateTime|false"
    ],
    "date_offset_get": [
        "Returns the timezone offset",
        "date_offset_get ( DateTimeInterface $object ) : int"
    ],
    "date_parse": [
        "Returns associative array with detailed info about given date\/time",
        "date_parse ( string $datetime ) : array"
    ],
    "date_parse_from_format": [
        "Get info about given date formatted according to the specified format",
        "date_parse_from_format ( string $format , string $datetime ) : array"
    ],
    "date_sub": [
        "Subtracts an amount of days, months, years, hours, minutes and seconds from\n   a DateTime object",
        "date_sub ( DateTime $object , DateInterval $interval ) : DateTime"
    ],
    "date_sun_info": [
        "Returns an array with information about sunset\/sunrise and twilight begin\/end",
        "date_sun_info ( int $timestamp , float $latitude , float $longitude ) : array"
    ],
    "date_sunrise": [
        "Returns time of sunrise for a given day and location",
        "date_sunrise ( int $timestamp , int $returnFormat = SUNFUNCS_RET_STRING , float|null $latitude = null , float|null $longitude = null , float|null $zenith = null , float|null $utcOffset = null ) : string|int|float|false"
    ],
    "date_sunset": [
        "Returns time of sunset for a given day and location",
        "date_sunset ( int $timestamp , int $returnFormat = SUNFUNCS_RET_STRING , float|null $latitude = null , float|null $longitude = null , float|null $zenith = null , float|null $utcOffset = null ) : string|int|float|false"
    ],
    "date_time_set": [
        "Sets the time",
        "date_time_set ( DateTime $object , int $hour , int $minute , int $second = 0 , int $microsecond = 0 ) : DateTime"
    ],
    "date_timestamp_get": [
        "Gets the Unix timestamp",
        "date_timestamp_get ( DateTimeInterface $object ) : int"
    ],
    "date_timestamp_set": [
        "Sets the date and time based on an Unix timestamp",
        "date_timestamp_set ( DateTime $object , int $timestamp ) : DateTime"
    ],
    "date_timezone_get": [
        "Return time zone relative to given DateTime",
        "date_timezone_get ( DateTimeInterface $object ) : DateTimeZone|false"
    ],
    "date_timezone_set": [
        "Sets the time zone for the DateTime object",
        "date_timezone_set ( DateTime $object , DateTimeZone $timezone ) : DateTime"
    ],
    "datefmt_create": [
        "Create a date formatter",
        "datefmt_create ( string|null $locale , int $dateType , int $timeType , IntlTimeZone|DateTimeZone|string|null $timezone = null , IntlCalendar|int|null $calendar = null , string $pattern = \"\" ) : IntlDateFormatter|null"
    ],
    "datefmt_format": [
        "Format the date\/time value as a string",
        "datefmt_format ( IntlDateFormatter $formatter , IntlCalendar|DateTimeInterface|array|string|int|float $datetime ) : string|false"
    ],
    "datefmt_format_object": [
        "Formats an object",
        "datefmt_format_object ( IntlCalendar|DateTimeInterface $datetime , array|int|string|null $format = null , string|null $locale = null ) : string|false"
    ],
    "datefmt_get_calendar": [
        "Get the calendar type used for the IntlDateFormatter",
        "datefmt_get_calendar ( IntlDateFormatter $formatter ) : int|false"
    ],
    "datefmt_get_calendar_object": [
        "Get copy of formatter\u02bcs calendar object",
        "datefmt_get_calendar_object ( IntlDateFormatter $formatter ) : IntlCalendar|false|null"
    ],
    "datefmt_get_datetype": [
        "Get the datetype used for the IntlDateFormatter",
        "datefmt_get_datetype ( IntlDateFormatter $formatter ) : int|false"
    ],
    "datefmt_get_error_code": [
        "Get the error code from last operation",
        "datefmt_get_error_code ( IntlDateFormatter $formatter ) : int"
    ],
    "datefmt_get_error_message": [
        "Get the error text from the last operation",
        "datefmt_get_error_message ( IntlDateFormatter $formatter ) : string"
    ],
    "datefmt_get_locale": [
        "Get the locale used by formatter",
        "datefmt_get_locale ( IntlDateFormatter $formatter , int $type = ULOC_ACTUAL_LOCALE ) : string|false"
    ],
    "datefmt_get_pattern": [
        "Get the pattern used for the IntlDateFormatter",
        "datefmt_get_pattern ( IntlDateFormatter $formatter ) : string|false"
    ],
    "datefmt_get_timetype": [
        "Get the timetype used for the IntlDateFormatter",
        "datefmt_get_timetype ( IntlDateFormatter $formatter ) : int|false"
    ],
    "datefmt_get_timezone": [
        "Get formatter\u02bcs timezone",
        "datefmt_get_timezone ( IntlDateFormatter $formatter ) : IntlTimeZone|false"
    ],
    "datefmt_get_timezone_id": [
        "Get the timezone-id used for the IntlDateFormatter",
        "datefmt_get_timezone_id ( IntlDateFormatter $formatter ) : string|false"
    ],
    "datefmt_is_lenient": [
        "Get the lenient used for the IntlDateFormatter",
        "datefmt_is_lenient ( IntlDateFormatter $formatter ) : bool"
    ],
    "datefmt_localtime": [
        "Parse string to a field-based time value",
        "datefmt_localtime ( IntlDateFormatter $formatter , string $string , int &$offset = null ) : array|false"
    ],
    "datefmt_parse": [
        "Parse string to a timestamp value",
        "datefmt_parse ( IntlDateFormatter $formatter , string $string , int &$offset = null ) : int|float|false"
    ],
    "datefmt_set_calendar": [
        "Sets the calendar type used by the formatter",
        "datefmt_set_calendar ( IntlDateFormatter $formatter , IntlCalendar|int|null $calendar ) : bool"
    ],
    "datefmt_set_lenient": [
        "Set the leniency of the parser",
        "datefmt_set_lenient ( IntlDateFormatter $formatter , bool $lenient ) : void"
    ],
    "datefmt_set_pattern": [
        "Set the pattern used for the IntlDateFormatter",
        "datefmt_set_pattern ( IntlDateFormatter $formatter , string $pattern ) : bool"
    ],
    "datefmt_set_timezone": [
        "Sets formatter\u02bcs timezone",
        "datefmt_set_timezone ( IntlDateFormatter $formatter , IntlTimeZone|DateTimeZone|string|null $timezone ) : bool|null"
    ],
    "DateInterval": [
        "Represents a date interval.",
        "new DateInterval ( string $duration )"
    ],
    "DatePeriod": [
        "Represents a date period.",
        "new DatePeriod ( DateTimeInterface $start , DateInterval $interval , int $recurrences , int $options = 0 )",
        "new DatePeriod ( DateTimeInterface $start , DateInterval $interval , DateTimeInterface $end , int $options = 0 )",
        "new DatePeriod ( string $isostr , int $options = 0 )"
    ],
    "DateTime": [
        "This class behaves the same as DateTimeImmutable except objects are modified itself when modification methods such as DateTime::modify() are called.",
        "new DateTime ( string $datetime = \"now\" , DateTimeZone|null $timezone = null )"
    ],
    "DateTimeImmutable": [
        "Representation of date and time.",
        "new DateTimeImmutable ( string $datetime = \"now\" , DateTimeZone|null $timezone = null )"
    ],
    "DateTimeInterface": [
        "DateTimeInterface is meant so that both DateTime and DateTimeImmutable can be type hinted for. It is not possible to implement this interface with userland classes."
    ],
    "DateTimeZone": [
        "Representation of time zone.",
        "new DateTimeZone ( string $timezone )"
    ],
    "db2_autocommit": [
        "Returns or sets the AUTOCOMMIT state for a database connection",
        "db2_autocommit ( resource $connection , bool $value = ? ) : mixed"
    ],
    "db2_bind_param": [
        "Binds a PHP variable to an SQL statement parameter",
        "db2_bind_param ( resource $stmt , int $parameter_number , string $variable_name , int $parameter_type = ? , int $data_type = 0 , int $precision = -1 , int $scale = 0 ) : bool"
    ],
    "db2_client_info": [
        "Returns an object with properties that describe the DB2 database client",
        "db2_client_info ( resource $connection ) : object"
    ],
    "db2_close": [
        "Closes a database connection",
        "db2_close ( resource $connection ) : bool"
    ],
    "db2_column_privileges": [
        "Returns a result set listing the columns and associated privileges for a table",
        "db2_column_privileges ( resource $connection , string $qualifier = ? , string $schema = ? , string $table-name = ? , string $column-name = ? ) : resource"
    ],
    "db2_columns": [
        "Returns a result set listing the columns and associated metadata for a table",
        "db2_columns ( resource $connection , string $qualifier = ? , string $schema = ? , string $table-name = ? , string $column-name = ? ) : resource"
    ],
    "db2_commit": [
        "Commits a transaction",
        "db2_commit ( resource $connection ) : bool"
    ],
    "db2_conn_error": [
        "Returns a string containing the SQLSTATE returned by the last connection attempt",
        "db2_conn_error ( resource $connection = ? ) : string"
    ],
    "db2_conn_errormsg": [
        "Returns the last connection error message and SQLCODE value",
        "db2_conn_errormsg ( resource $connection = ? ) : string"
    ],
    "db2_connect": [
        "Returns a connection to a database",
        "db2_connect ( string $database , string $username , string $password , array $options = ? ) : resource"
    ],
    "db2_cursor_type": [
        "Returns the cursor type used by a statement resource",
        "db2_cursor_type ( resource $stmt ) : int"
    ],
    "db2_escape_string": [
        "Used to escape certain characters",
        "db2_escape_string ( string $string_literal ) : string"
    ],
    "db2_exec": [
        "Executes an SQL statement directly",
        "db2_exec ( resource $connection , string $statement , array $options = ? ) : resource"
    ],
    "db2_execute": [
        "Executes a prepared SQL statement",
        "db2_execute ( resource $stmt , array $parameters = ? ) : bool"
    ],
    "db2_fetch_array": [
        "Returns an array, indexed by column position, representing a row in a result set",
        "db2_fetch_array ( resource $stmt , int $row_number = -1 ) : array"
    ],
    "db2_fetch_assoc": [
        "Returns an array, indexed by column name, representing a row in a result set",
        "db2_fetch_assoc ( resource $stmt , int $row_number = -1 ) : array"
    ],
    "db2_fetch_both": [
        "Returns an array, indexed by both column name and position, representing a row in a result set",
        "db2_fetch_both ( resource $stmt , int $row_number = -1 ) : array"
    ],
    "db2_fetch_object": [
        "Returns an object with properties representing columns in the fetched row",
        "db2_fetch_object ( resource $stmt , int $row_number = -1 ) : object"
    ],
    "db2_fetch_row": [
        "Sets the result set pointer to the next row or requested row",
        "db2_fetch_row ( resource $stmt , int $row_number = ? ) : bool"
    ],
    "db2_field_display_size": [
        "Returns the maximum number of bytes required to display a column",
        "db2_field_display_size ( resource $stmt , mixed $column ) : int"
    ],
    "db2_field_name": [
        "Returns the name of the column in the result set",
        "db2_field_name ( resource $stmt , mixed $column ) : string"
    ],
    "db2_field_num": [
        "Returns the position of the named column in a result set",
        "db2_field_num ( resource $stmt , mixed $column ) : int"
    ],
    "db2_field_precision": [
        "Returns the precision of the indicated column in a result set",
        "db2_field_precision ( resource $stmt , mixed $column ) : int"
    ],
    "db2_field_scale": [
        "Returns the scale of the indicated column in a result set",
        "db2_field_scale ( resource $stmt , mixed $column ) : int"
    ],
    "db2_field_type": [
        "Returns the data type of the indicated column in a result set",
        "db2_field_type ( resource $stmt , mixed $column ) : string"
    ],
    "db2_field_width": [
        "Returns the width of the current value of the indicated column in a result set",
        "db2_field_width ( resource $stmt , mixed $column ) : int"
    ],
    "db2_foreign_keys": [
        "Returns a result set listing the foreign keys for a table",
        "db2_foreign_keys ( resource $connection , string $qualifier , string $schema , string $table-name ) : resource"
    ],
    "db2_free_result": [
        "Frees resources associated with a result set",
        "db2_free_result ( resource $stmt ) : bool"
    ],
    "db2_free_stmt": [
        "Frees resources associated with the indicated statement resource",
        "db2_free_stmt ( resource $stmt ) : bool"
    ],
    "db2_get_option": [
        "Retrieves an option value for a statement resource or a connection resource",
        "db2_get_option ( resource $resource , string $option ) : string|false"
    ],
    "db2_last_insert_id": [
        "Returns the auto generated ID of the last insert query that successfully \n  executed on this connection",
        "db2_last_insert_id ( resource $resource ) : string"
    ],
    "db2_lob_read": [
        "Gets a user defined size of LOB files with each invocation",
        "db2_lob_read ( resource $stmt , int $colnum , int $length ) : string"
    ],
    "db2_next_result": [
        "Requests the next result set from a stored procedure",
        "db2_next_result ( resource $stmt ) : resource"
    ],
    "db2_num_fields": [
        "Returns the number of fields contained in a result set",
        "db2_num_fields ( resource $stmt ) : int"
    ],
    "db2_num_rows": [
        "Returns the number of rows affected by an SQL statement",
        "db2_num_rows ( resource $stmt ) : int"
    ],
    "db2_pclose": [
        "Closes a persistent database connection",
        "db2_pclose ( resource $resource ) : bool"
    ],
    "db2_pconnect": [
        "Returns a persistent connection to a database",
        "db2_pconnect ( string $database , string $username , string $password , array $options = ? ) : resource"
    ],
    "db2_prepare": [
        "Prepares an SQL statement to be executed",
        "db2_prepare ( resource $connection , string $statement , array $options = ? ) : resource"
    ],
    "db2_primary_keys": [
        "Returns a result set listing primary keys for a table",
        "db2_primary_keys ( resource $connection , string $qualifier , string $schema , string $table-name ) : resource"
    ],
    "db2_procedure_columns": [
        "Returns a result set listing stored procedure parameters",
        "db2_procedure_columns ( resource $connection , string $qualifier , string $schema , string $procedure , string $parameter ) : resource"
    ],
    "db2_procedures": [
        "Returns a result set listing the stored procedures registered in a database",
        "db2_procedures ( resource $connection , string $qualifier , string $schema , string $procedure ) : resource"
    ],
    "db2_result": [
        "Returns a single column from a row in the result set",
        "db2_result ( resource $stmt , mixed $column ) : mixed"
    ],
    "db2_rollback": [
        "Rolls back a transaction",
        "db2_rollback ( resource $connection ) : bool"
    ],
    "db2_server_info": [
        "Returns an object with properties that describe the DB2 database server",
        "db2_server_info ( resource $connection ) : object"
    ],
    "db2_set_option": [
        "Set options for connection or statement resources",
        "db2_set_option ( resource $resource , array $options , int $type ) : bool"
    ],
    "db2_special_columns": [
        "Returns a result set listing the unique row identifier columns for a table",
        "db2_special_columns ( resource $connection , string $qualifier , string $schema , string $table_name , int $scope ) : resource"
    ],
    "db2_statistics": [
        "Returns a result set listing the index and statistics for a table",
        "db2_statistics ( resource $connection , string $qualifier , string $schema , string $table-name , bool $unique ) : resource"
    ],
    "db2_stmt_error": [
        "Returns a string containing the SQLSTATE returned by an SQL statement",
        "db2_stmt_error ( resource $stmt = ? ) : string"
    ],
    "db2_stmt_errormsg": [
        "Returns a string containing the last SQL statement error message",
        "db2_stmt_errormsg ( resource $stmt = ? ) : string"
    ],
    "db2_table_privileges": [
        "Returns a result set listing the tables and associated privileges in a database",
        "db2_table_privileges ( resource $connection , string $qualifier = ? , string $schema = ? , string $table_name = ? ) : resource"
    ],
    "db2_tables": [
        "Returns a result set listing the tables and associated metadata in a database",
        "db2_tables ( resource $connection , string $qualifier = ? , string $schema = ? , string $table-name = ? , string $table-type = ? ) : resource"
    ],
    "dba_close": [
        "Close a DBA database",
        "dba_close ( resource $dba ) : void"
    ],
    "dba_delete": [
        "Delete DBA entry specified by key",
        "dba_delete ( string|array $key , resource $dba ) : bool"
    ],
    "dba_exists": [
        "Check whether key exists",
        "dba_exists ( string|array $key , resource $dba ) : bool"
    ],
    "dba_fetch": [
        "Fetch data specified by key",
        "dba_fetch ( string $key , resource $handle ) : string",
        "dba_fetch ( string $key , int $skip , resource $handle ) : string"
    ],
    "dba_firstkey": [
        "Fetch first key",
        "dba_firstkey ( resource $dba ) : string|false"
    ],
    "dba_handlers": [
        "List all the handlers available",
        "dba_handlers ( bool $full_info = false ) : array"
    ],
    "dba_insert": [
        "Insert entry",
        "dba_insert ( string|array $key , string $value , resource $dba ) : bool"
    ],
    "dba_key_split": [
        "Splits a key in string representation into array representation",
        "dba_key_split ( string|false|null $key ) : array|false"
    ],
    "dba_list": [
        "List all open database files",
        "dba_list ( ) : array"
    ],
    "dba_nextkey": [
        "Fetch next key",
        "dba_nextkey ( resource $dba ) : string|false"
    ],
    "dba_open": [
        "Open database",
        "dba_open ( string $path , string $mode , string $handler = ? , string ...$args ) : resource|false"
    ],
    "dba_optimize": [
        "Optimize database",
        "dba_optimize ( resource $dba ) : bool"
    ],
    "dba_popen": [
        "Open database persistently",
        "dba_popen ( string $path , string $mode , string $handler = ? , mixed ...$args ) : resource|false"
    ],
    "dba_replace": [
        "Replace or insert entry",
        "dba_replace ( string|array $key , string $value , resource $dba ) : bool"
    ],
    "dba_sync": [
        "Synchronize database",
        "dba_sync ( resource $dba ) : bool"
    ],
    "dbase_add_record": [
        "Adds a record to a database",
        "dbase_add_record ( resource $database , array $data ) : bool"
    ],
    "dbase_close": [
        "Closes a database",
        "dbase_close ( resource $database ) : bool"
    ],
    "dbase_create": [
        "Creates a database",
        "dbase_create ( string $path , array $fields , int $type = DBASE_TYPE_DBASE ) : resource"
    ],
    "dbase_delete_record": [
        "Deletes a record from a database",
        "dbase_delete_record ( resource $database , int $number ) : bool"
    ],
    "dbase_get_header_info": [
        "Gets the header info of a database",
        "dbase_get_header_info ( resource $database ) : array"
    ],
    "dbase_get_record": [
        "Gets a record from a database as an indexed array",
        "dbase_get_record ( resource $database , int $number ) : array"
    ],
    "dbase_get_record_with_names": [
        "Gets a record from a database as an associative array",
        "dbase_get_record_with_names ( resource $database , int $number ) : array"
    ],
    "dbase_numfields": [
        "Gets the number of fields of a database",
        "dbase_numfields ( resource $database ) : int"
    ],
    "dbase_numrecords": [
        "Gets the number of records in a database",
        "dbase_numrecords ( resource $database ) : int"
    ],
    "dbase_open": [
        "Opens a database",
        "dbase_open ( string $path , int $mode ) : resource|false"
    ],
    "dbase_pack": [
        "Packs a database",
        "dbase_pack ( resource $database ) : bool"
    ],
    "dbase_replace_record": [
        "Replaces a record in a database",
        "dbase_replace_record ( resource $database , array $data , int $number ) : bool"
    ],
    "dbplus_add": [
        "Add a tuple to a relation",
        "dbplus_add ( resource $relation , array $tuple ) : int"
    ],
    "dbplus_aql": [
        "Perform AQL query",
        "dbplus_aql ( string $query , string $server = ? , string $dbpath = ? ) : resource"
    ],
    "dbplus_chdir": [
        "Get\/Set database virtual current directory",
        "dbplus_chdir ( string $newdir = ? ) : string"
    ],
    "dbplus_close": [
        "Close a relation",
        "dbplus_close ( resource $relation ) : mixed"
    ],
    "dbplus_curr": [
        "Get current tuple from relation",
        "dbplus_curr ( resource $relation , array &$tuple ) : int"
    ],
    "dbplus_errcode": [
        "Get error string for given errorcode or last error",
        "dbplus_errcode ( int $errno = ? ) : string"
    ],
    "dbplus_errno": [
        "Get error code for last operation",
        "dbplus_errno ( ) : int"
    ],
    "dbplus_find": [
        "Set a constraint on a relation",
        "dbplus_find ( resource $relation , array $constraints , mixed $tuple ) : int"
    ],
    "dbplus_first": [
        "Get first tuple from relation",
        "dbplus_first ( resource $relation , array &$tuple ) : int"
    ],
    "dbplus_flush": [
        "Flush all changes made on a relation",
        "dbplus_flush ( resource $relation ) : int"
    ],
    "dbplus_freealllocks": [
        "Free all locks held by this client",
        "dbplus_freealllocks ( ) : int"
    ],
    "dbplus_freelock": [
        "Release write lock on tuple",
        "dbplus_freelock ( resource $relation , string $tuple ) : int"
    ],
    "dbplus_freerlocks": [
        "Free all tuple locks on given relation",
        "dbplus_freerlocks ( resource $relation ) : int"
    ],
    "dbplus_getlock": [
        "Get a write lock on a tuple",
        "dbplus_getlock ( resource $relation , string $tuple ) : int"
    ],
    "dbplus_getunique": [
        "Get an id number unique to a relation",
        "dbplus_getunique ( resource $relation , int $uniqueid ) : int"
    ],
    "dbplus_info": [
        "Get information about a relation",
        "dbplus_info ( resource $relation , string $key , array &$result ) : int"
    ],
    "dbplus_last": [
        "Get last tuple from relation",
        "dbplus_last ( resource $relation , array &$tuple ) : int"
    ],
    "dbplus_lockrel": [
        "Request write lock on relation",
        "dbplus_lockrel ( resource $relation ) : int"
    ],
    "dbplus_next": [
        "Get next tuple from relation",
        "dbplus_next ( resource $relation , array &$tuple ) : int"
    ],
    "dbplus_open": [
        "Open relation file",
        "dbplus_open ( string $name ) : resource"
    ],
    "dbplus_prev": [
        "Get previous tuple from relation",
        "dbplus_prev ( resource $relation , array &$tuple ) : int"
    ],
    "dbplus_rchperm": [
        "Change relation permissions",
        "dbplus_rchperm ( resource $relation , int $mask , string $user , string $group ) : int"
    ],
    "dbplus_rcreate": [
        "Creates a new DB++ relation",
        "dbplus_rcreate ( string $name , mixed $domlist , bool $overwrite = ? ) : resource"
    ],
    "dbplus_rcrtexact": [
        "Creates an exact but empty copy of a relation including indices",
        "dbplus_rcrtexact ( string $name , resource $relation , bool $overwrite = ? ) : mixed"
    ],
    "dbplus_rcrtlike": [
        "Creates an empty copy of a relation with default indices",
        "dbplus_rcrtlike ( string $name , resource $relation , int $overwrite = ? ) : mixed"
    ],
    "dbplus_resolve": [
        "Resolve host information for relation",
        "dbplus_resolve ( string $relation_name ) : array"
    ],
    "dbplus_restorepos": [
        "Restore position",
        "dbplus_restorepos ( resource $relation , array $tuple ) : int"
    ],
    "dbplus_rkeys": [
        "Specify new primary key for a relation",
        "dbplus_rkeys ( resource $relation , mixed $domlist ) : mixed"
    ],
    "dbplus_ropen": [
        "Open relation file local",
        "dbplus_ropen ( string $name ) : resource"
    ],
    "dbplus_rquery": [
        "Perform local (raw) AQL query",
        "dbplus_rquery ( string $query , string $dbpath = ? ) : resource"
    ],
    "dbplus_rrename": [
        "Rename a relation",
        "dbplus_rrename ( resource $relation , string $name ) : int"
    ],
    "dbplus_rsecindex": [
        "Create a new secondary index for a relation",
        "dbplus_rsecindex ( resource $relation , mixed $domlist , int $type ) : mixed"
    ],
    "dbplus_runlink": [
        "Remove relation from filesystem",
        "dbplus_runlink ( resource $relation ) : int"
    ],
    "dbplus_rzap": [
        "Remove all tuples from relation",
        "dbplus_rzap ( resource $relation ) : int"
    ],
    "dbplus_savepos": [
        "Save position",
        "dbplus_savepos ( resource $relation ) : int"
    ],
    "dbplus_setindex": [
        "Set index",
        "dbplus_setindex ( resource $relation , string $idx_name ) : int"
    ],
    "dbplus_setindexbynumber": [
        "Set index by number",
        "dbplus_setindexbynumber ( resource $relation , int $idx_number ) : int"
    ],
    "dbplus_sql": [
        "Perform SQL query",
        "dbplus_sql ( string $query , string $server = ? , string $dbpath = ? ) : resource"
    ],
    "dbplus_tcl": [
        "Execute TCL code on server side",
        "dbplus_tcl ( int $sid , string $script ) : string"
    ],
    "dbplus_tremove": [
        "Remove tuple and return new current tuple",
        "dbplus_tremove ( resource $relation , array $tuple , array &$current = ? ) : int"
    ],
    "dbplus_undo": [
        "Undo",
        "dbplus_undo ( resource $relation ) : int"
    ],
    "dbplus_undoprepare": [
        "Prepare undo",
        "dbplus_undoprepare ( resource $relation ) : int"
    ],
    "dbplus_unlockrel": [
        "Give up write lock on relation",
        "dbplus_unlockrel ( resource $relation ) : int"
    ],
    "dbplus_unselect": [
        "Remove a constraint from relation",
        "dbplus_unselect ( resource $relation ) : int"
    ],
    "dbplus_update": [
        "Update specified tuple in relation",
        "dbplus_update ( resource $relation , array $old , array $new ) : int"
    ],
    "dbplus_xlockrel": [
        "Request exclusive lock on relation",
        "dbplus_xlockrel ( resource $relation ) : int"
    ],
    "dbplus_xunlockrel": [
        "Free exclusive lock on relation",
        "dbplus_xunlockrel ( resource $relation ) : int"
    ],
    "dcgettext": [
        "Overrides the domain for a single lookup",
        "dcgettext ( string $domain , string $message , int $category ) : string"
    ],
    "dcngettext": [
        "Plural version of dcgettext",
        "dcngettext ( string $domain , string $singular , string $plural , int $count , int $category ) : string"
    ],
    "debug_backtrace": [
        "Generates a backtrace",
        "debug_backtrace ( int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT , int $limit = 0 ) : array"
    ],
    "debug_print_backtrace": [
        "Prints a backtrace",
        "debug_print_backtrace ( int $options = 0 , int $limit = 0 ) : void"
    ],
    "debug_zval_dump": [
        "Dumps a string representation of an internal zval structure to output",
        "debug_zval_dump ( mixed $value , mixed ...$values ) : void"
    ],
    "decbin": [
        "Decimal to binary",
        "decbin ( int $num ) : string"
    ],
    "dechex": [
        "Decimal to hexadecimal",
        "dechex ( int $num ) : string"
    ],
    "decoct": [
        "Decimal to octal",
        "decoct ( int $num ) : string"
    ],
    "define": [
        "Defines a named constant",
        "define ( string $name , mixed $value , bool $case_insensitive = false ) : bool"
    ],
    "defined": [
        "Checks whether a given named constant exists",
        "defined ( string $name ) : bool"
    ],
    "deflate_add": [
        "Incrementally deflate data",
        "deflate_add ( DeflateContext $context , string $data , int $flush_mode = ZLIB_SYNC_FLUSH ) : string|false"
    ],
    "deflate_init": [
        "Initialize an incremental deflate context",
        "deflate_init ( int $encoding , array $options = [] ) : DeflateContext|false"
    ],
    "DeflateContext": [
        "A fully opaque class which replaces zlib.deflate resources as of PHP 8.0.0."
    ],
    "deg2rad": [
        "Converts the number in degrees to the radian equivalent",
        "deg2rad ( float $num ) : float"
    ],
    "dgettext": [
        "Override the current domain",
        "dgettext ( string $domain , string $message ) : string"
    ],
    "dio_close": [
        "Closes the file descriptor given by fd",
        "dio_close ( resource $fd ) : void"
    ],
    "dio_fcntl": [
        "Performs a c library fcntl on fd",
        "dio_fcntl ( resource $fd , int $cmd , mixed $args = ? ) : mixed"
    ],
    "dio_open": [
        "Opens a file (creating it if necessary) at a lower level than the\n   C library input\/ouput stream functions allow",
        "dio_open ( string $filename , int $flags , int $mode = 0 ) : resource"
    ],
    "dio_read": [
        "Reads bytes from a file descriptor",
        "dio_read ( resource $fd , int $len = 1024 ) : string"
    ],
    "dio_seek": [
        "Seeks to pos on fd from whence",
        "dio_seek ( resource $fd , int $pos , int $whence = SEEK_SET ) : int"
    ],
    "dio_stat": [
        "Gets stat information about the file descriptor fd",
        "dio_stat ( resource $fd ) : array"
    ],
    "dio_tcsetattr": [
        "Sets terminal attributes and baud rate for a serial port",
        "dio_tcsetattr ( resource $fd , array $options ) : bool"
    ],
    "dio_truncate": [
        "Truncates file descriptor fd to offset bytes",
        "dio_truncate ( resource $fd , int $offset ) : bool"
    ],
    "dio_write": [
        "Writes data to fd with optional truncation at length",
        "dio_write ( resource $fd , string $data , int $len = 0 ) : int"
    ],
    "dir": [
        "Return an instance of the Directory class",
        "dir ( string $directory , resource $context = ? ) : Directory"
    ],
    "Directory": [
        "Instances of Directory are created by calling the dir() function, not by the new operator."
    ],
    "DirectoryIterator": [
        "The DirectoryIterator class provides a simple interface for viewing the contents of filesystem directories.",
        "new DirectoryIterator ( string $path )"
    ],
    "dirname": [
        "Returns a parent directory's path",
        "dirname ( string $path , int $levels = 1 ) : string"
    ],
    "disk_free_space": [
        "Returns available space on filesystem or disk partition",
        "disk_free_space ( string $directory ) : float|false"
    ],
    "disk_total_space": [
        "Returns the total size of a filesystem or disk partition",
        "disk_total_space ( string $directory ) : float|false"
    ],
    "DivisionByZeroError": [
        "DivisionByZeroError is thrown when an attempt is made to divide a number by zero."
    ],
    "dl": [
        "Loads a PHP extension at runtime",
        "dl ( string $extension_filename ) : bool"
    ],
    "dngettext": [
        "Plural version of dgettext",
        "dngettext ( string $domain , string $singular , string $plural , int $count ) : string"
    ],
    "dns_get_record": [
        "Fetch DNS Resource Records associated with a hostname",
        "dns_get_record ( string $hostname , int $type = DNS_ANY , array &$authoritative_name_servers = null , array &$additional_records = null , bool $raw = false ) : array|false"
    ],
    "dom_import_simplexml": [
        "Gets a DOMElement object from a\n   SimpleXMLElement object",
        "dom_import_simplexml ( object $node ) : DOMElement|null"
    ],
    "DomainException": [
        "Exception thrown if a value does not adhere to a defined valid data domain."
    ],
    "DOMAttr": [
        "DOMAttr represents an attribute in the DOMElement object.",
        "new DOMAttr ( string $name , string $value = \"\" )"
    ],
    "DOMCdataSection": [
        "The DOMCdataSection inherits from DOMText for textural representation of CData constructs.",
        "new DOMCdataSection ( string $data )"
    ],
    "DOMCharacterData": [
        "Represents nodes with character data. No nodes directly correspond to this class, but other nodes do inherit from it."
    ],
    "DOMComment": [
        "Represents comment nodes, characters delimited by <!-- and -->.",
        "new DOMComment ( string $data = \"\" )"
    ],
    "DOMDocument": [
        "Represents an entire HTML or XML document; serves as the root of the document tree.",
        "new DOMDocument ( string $version = \"1.0\" , string $encoding = \"\" )"
    ],
    "DOMDocumentType": [
        "Each DOMDocument has a doctype attribute whose value is either null or a DOMDocumentType object."
    ],
    "DOMElement": [
        "Creates a new DOMElement object",
        "new DOMElement ( string $qualifiedName , string|null $value = null , string $namespace = \"\" )"
    ],
    "DOMEntity": [
        "This interface represents a known entity, either parsed or unparsed, in an XML document."
    ],
    "DOMEntityReference": [
        "Creates a new DOMEntityReference object",
        "new DOMEntityReference ( string $name )"
    ],
    "DOMException": [
        "DOM operations raise exceptions under particular circumstances, i.e., when an operation is impossible to perform for logical reasons."
    ],
    "DOMImplementation": [
        "The DOMImplementation class provides a number of methods for performing operations that are independent of any particular instance of the document object model.",
        "DOMImplementation::__construct ( )"
    ],
    "DOMProcessingInstruction": [
        "Creates a new DOMProcessingInstruction object",
        "new DOMProcessingInstruction ( string $name , string $value = \"\" )"
    ],
    "DOMText": [
        "The DOMText class inherits from DOMCharacterData and represents the textual content of a DOMElement or DOMAttr.",
        "new DOMText ( string $data = \"\" )"
    ],
    "DOMXPath": [
        "Supports XPath 1.0",
        "new DOMXPath ( DOMDocument $document , bool $registerNodeNS = true )"
    ],
    "dotnet": [
        "The dotnet class allows you to instantiate a class from a .Net assembly and call its methods and access its properties, if the class and the methods and properties are \u00bb\u00a0visible to COM.",
        "new dotnet ( string $assembly_name , string $datatype_name , int $codepage = CP_ACP )"
    ],
    "each": [
        "Return the current key and value pair from an array and advance the array cursor",
        "each ( array|object &$array ) : array"
    ],
    "easter_date": [
        "Get Unix timestamp for midnight on Easter of a given year",
        "easter_date ( int|null $year = null , int $mode = CAL_EASTER_DEFAULT ) : int"
    ],
    "easter_days": [
        "Get number of days after March 21 on which Easter falls for a given year",
        "easter_days ( int|null $year = null , int $mode = CAL_EASTER_DEFAULT ) : int"
    ],
    "echo": [
        "Output one or more strings",
        "echo ( string $arg , string ...$args ) : void"
    ],
    "eio_busy": [
        "Artificially increase load. Could be useful in tests,\n  benchmarking",
        "eio_busy ( int $delay , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_cancel": [
        "Cancels a request",
        "eio_cancel ( resource $req ) : void"
    ],
    "eio_chmod": [
        "Change file\/directory permissions",
        "eio_chmod ( string $path , int $mode , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_chown": [
        "Change file\/directory permissions",
        "eio_chown ( string $path , int $uid , int $gid = -1 , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_close": [
        "Close file",
        "eio_close ( mixed $fd , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_custom": [
        "Execute custom request like any other eio_* call",
        "eio_custom ( callable $execute , int $pri , callable $callback , mixed $data = NULL ) : resource"
    ],
    "eio_dup2": [
        "Duplicate a file descriptor",
        "eio_dup2 ( mixed $fd , mixed $fd2 , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_event_loop": [
        "Polls libeio until all requests proceeded",
        "eio_event_loop ( ) : bool"
    ],
    "eio_fallocate": [
        "Allows the caller to directly manipulate the allocated disk\n  space for a file",
        "eio_fallocate ( mixed $fd , int $mode , int $offset , int $length , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_fchmod": [
        "Change file permissions",
        "eio_fchmod ( mixed $fd , int $mode , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_fchown": [
        "Change file ownership",
        "eio_fchown ( mixed $fd , int $uid , int $gid = -1 , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_fdatasync": [
        "Synchronize a file's in-core state with storage device",
        "eio_fdatasync ( mixed $fd , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_fstat": [
        "Get file status",
        "eio_fstat ( mixed $fd , int $pri , callable $callback , mixed $data = ? ) : resource"
    ],
    "eio_fstatvfs": [
        "Get file system statistics",
        "eio_fstatvfs ( mixed $fd , int $pri , callable $callback , mixed $data = ? ) : resource"
    ],
    "eio_fsync": [
        "Synchronize a file's in-core state with storage device",
        "eio_fsync ( mixed $fd , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_ftruncate": [
        "Truncate a file",
        "eio_ftruncate ( mixed $fd , int $offset = 0 , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_futime": [
        "Change file last access and modification times",
        "eio_futime ( mixed $fd , float $atime , float $mtime , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_get_event_stream": [
        "Get stream representing a variable used in internal communications with libeio",
        "eio_get_event_stream ( ) : mixed"
    ],
    "eio_get_last_error": [
        "Returns string describing the last error associated with a request resource",
        "eio_get_last_error ( resource $req ) : string"
    ],
    "eio_grp": [
        "Creates a request group",
        "eio_grp ( callable $callback , string $data = NULL ) : resource"
    ],
    "eio_grp_add": [
        "Adds a request to the request group",
        "eio_grp_add ( resource $grp , resource $req ) : void"
    ],
    "eio_grp_cancel": [
        "Cancels a request group",
        "eio_grp_cancel ( resource $grp ) : void"
    ],
    "eio_grp_limit": [
        "Set group limit",
        "eio_grp_limit ( resource $grp , int $limit ) : void"
    ],
    "eio_init": [
        "(Re-)initialize Eio",
        "eio_init ( ) : void"
    ],
    "eio_link": [
        "Create a hardlink for file",
        "eio_link ( string $path , string $new_path , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_lstat": [
        "Get file status",
        "eio_lstat ( string $path , int $pri , callable $callback , mixed $data = NULL ) : resource"
    ],
    "eio_mkdir": [
        "Create directory",
        "eio_mkdir ( string $path , int $mode , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_mknod": [
        "Create a special or ordinary file",
        "eio_mknod ( string $path , int $mode , int $dev , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_nop": [
        "Does nothing, except go through the whole request cycle",
        "eio_nop ( int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_npending": [
        "Returns number of finished, but unhandled requests",
        "eio_npending ( ) : int"
    ],
    "eio_nready": [
        "Returns number of not-yet handled requests",
        "eio_nready ( ) : int"
    ],
    "eio_nreqs": [
        "Returns number of requests to be processed",
        "eio_nreqs ( ) : int"
    ],
    "eio_nthreads": [
        "Returns number of threads currently in use",
        "eio_nthreads ( ) : int"
    ],
    "eio_open": [
        "Opens a file",
        "eio_open ( string $path , int $flags , int $mode , int $pri , callable $callback , mixed $data = NULL ) : resource"
    ],
    "eio_poll": [
        "Can be to be called whenever there are pending requests that need finishing",
        "eio_poll ( ) : int"
    ],
    "eio_read": [
        "Read from a file descriptor at given offset",
        "eio_read ( mixed $fd , int $length , int $offset , int $pri , callable $callback , mixed $data = NULL ) : resource"
    ],
    "eio_readahead": [
        "Perform file readahead into page cache",
        "eio_readahead ( mixed $fd , int $offset , int $length , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_readdir": [
        "Reads through a whole directory",
        "eio_readdir ( string $path , int $flags , int $pri , callable $callback , string $data = NULL ) : resource"
    ],
    "eio_readlink": [
        "Read value of a symbolic link",
        "eio_readlink ( string $path , int $pri , callable $callback , string $data = NULL ) : resource"
    ],
    "eio_realpath": [
        "Get the canonicalized absolute pathname",
        "eio_realpath ( string $path , int $pri , callable $callback , string $data = NULL ) : resource"
    ],
    "eio_rename": [
        "Change the name or location of a file",
        "eio_rename ( string $path , string $new_path , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_rmdir": [
        "Remove a directory",
        "eio_rmdir ( string $path , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_seek": [
        "Repositions the offset of the open file associated with the fd argument to the argument offset according to the directive whence",
        "eio_seek ( mixed $fd , int $offset , int $whence , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_sendfile": [
        "Transfer data between file descriptors",
        "eio_sendfile ( mixed $out_fd , mixed $in_fd , int $offset , int $length , int $pri = ? , callable $callback = ? , string $data = ? ) : resource"
    ],
    "eio_set_max_idle": [
        "Set maximum number of idle threads",
        "eio_set_max_idle ( int $nthreads ) : void"
    ],
    "eio_set_max_parallel": [
        "Set maximum parallel threads",
        "eio_set_max_parallel ( int $nthreads ) : void"
    ],
    "eio_set_max_poll_reqs": [
        "Set maximum number of requests processed in a poll",
        "eio_set_max_poll_reqs ( int $nreqs ) : void"
    ],
    "eio_set_max_poll_time": [
        "Set maximum poll time",
        "eio_set_max_poll_time ( float $nseconds ) : void"
    ],
    "eio_set_min_parallel": [
        "Set minimum parallel thread number",
        "eio_set_min_parallel ( string $nthreads ) : void"
    ],
    "eio_stat": [
        "Get file status",
        "eio_stat ( string $path , int $pri , callable $callback , mixed $data = NULL ) : resource"
    ],
    "eio_statvfs": [
        "Get file system statistics",
        "eio_statvfs ( string $path , int $pri , callable $callback , mixed $data = ? ) : resource"
    ],
    "eio_symlink": [
        "Create a symbolic link",
        "eio_symlink ( string $path , string $new_path , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_sync": [
        "Commit buffer cache to disk",
        "eio_sync ( int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_sync_file_range": [
        "Sync a file segment with disk",
        "eio_sync_file_range ( mixed $fd , int $offset , int $nbytes , int $flags , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_syncfs": [
        "Calls Linux' syncfs syscall, if available",
        "eio_syncfs ( mixed $fd , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_truncate": [
        "Truncate a file",
        "eio_truncate ( string $path , int $offset = 0 , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_unlink": [
        "Delete a name and possibly the file it refers to",
        "eio_unlink ( string $path , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_utime": [
        "Change file last access and modification times",
        "eio_utime ( string $path , float $atime , float $mtime , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "eio_write": [
        "Write to file",
        "eio_write ( mixed $fd , string $str , int $length = 0 , int $offset = 0 , int $pri = EIO_PRI_DEFAULT , callable $callback = NULL , mixed $data = NULL ) : resource"
    ],
    "empty": [
        "Determine whether a variable is empty",
        "empty ( mixed $var ) : bool"
    ],
    "EmptyIterator": [
        "The EmptyIterator class for an empty iterator."
    ],
    "enchant_broker_describe": [
        "Enumerates the Enchant providers",
        "enchant_broker_describe ( EnchantBroker $broker ) : array"
    ],
    "enchant_broker_dict_exists": [
        "Whether a dictionary exists or not. Using non-empty tag",
        "enchant_broker_dict_exists ( EnchantBroker $broker , string $tag ) : bool"
    ],
    "enchant_broker_free": [
        "Free the broker resource and its dictionaries",
        "enchant_broker_free ( EnchantBroker $broker ) : bool"
    ],
    "enchant_broker_free_dict": [
        "Free a dictionary resource",
        "enchant_broker_free_dict ( EnchantDictionary $dictionary ) : bool"
    ],
    "enchant_broker_get_dict_path": [
        "Get the directory path for a given backend",
        "enchant_broker_get_dict_path ( EnchantBroker $broker , int $type ) : string|false"
    ],
    "enchant_broker_get_error": [
        "Returns the last error of the broker",
        "enchant_broker_get_error ( EnchantBroker $broker ) : string|false"
    ],
    "enchant_broker_init": [
        "Create a new broker object capable of requesting",
        "enchant_broker_init ( ) : EnchantBroker|false"
    ],
    "enchant_broker_list_dicts": [
        "Returns a list of available dictionaries",
        "enchant_broker_list_dicts ( EnchantBroker $broker ) : array"
    ],
    "enchant_broker_request_dict": [
        "Create a new dictionary using a tag",
        "enchant_broker_request_dict ( EnchantBroker $broker , string $tag ) : EnchantDictionary|false"
    ],
    "enchant_broker_request_pwl_dict": [
        "Creates a dictionary using a PWL file",
        "enchant_broker_request_pwl_dict ( EnchantBroker $broker , string $filename ) : EnchantDictionary|false"
    ],
    "enchant_broker_set_dict_path": [
        "Set the directory path for a given backend",
        "enchant_broker_set_dict_path ( EnchantBroker $broker , int $type , string $path ) : bool"
    ],
    "enchant_broker_set_ordering": [
        "Declares a preference of dictionaries to use for the language",
        "enchant_broker_set_ordering ( EnchantBroker $broker , string $tag , string $ordering ) : bool"
    ],
    "enchant_dict_add": [
        "Add a word to personal word list",
        "enchant_dict_add ( EnchantDictionary $dictionary , string $word ) : void"
    ],
    "enchant_dict_add_to_session": [
        "Add 'word' to this spell-checking session",
        "enchant_dict_add_to_session ( EnchantDictionary $dictionary , string $word ) : void"
    ],
    "enchant_dict_check": [
        "Check whether a word is correctly spelled or not",
        "enchant_dict_check ( EnchantDictionary $dictionary , string $word ) : bool"
    ],
    "enchant_dict_describe": [
        "Describes an individual dictionary",
        "enchant_dict_describe ( EnchantDictionary $dictionary ) : array"
    ],
    "enchant_dict_get_error": [
        "Returns the last error of the current spelling-session",
        "enchant_dict_get_error ( EnchantDictionary $dictionary ) : string|false"
    ],
    "enchant_dict_is_added": [
        "Whether or not 'word' exists in this spelling-session",
        "enchant_dict_is_added ( EnchantDictionary $dictionary , string $word ) : bool"
    ],
    "enchant_dict_quick_check": [
        "Check the word is correctly spelled and provide suggestions",
        "enchant_dict_quick_check ( EnchantDictionary $dictionary , string $word , array &$suggestions = null ) : bool"
    ],
    "enchant_dict_store_replacement": [
        "Add a correction for a word",
        "enchant_dict_store_replacement ( EnchantDictionary $dictionary , string $misspelled , string $correct ) : void"
    ],
    "enchant_dict_suggest": [
        "Will return a list of values if any of those pre-conditions are not met",
        "enchant_dict_suggest ( EnchantDictionary $dictionary , string $word ) : array"
    ],
    "EnchantBroker": [
        "A fully opaque class which replaces enchant_broker resources as of PHP 8.0.0."
    ],
    "EnchantDictionary": [
        "A fully opaque class which replaces enchant_dict resources as of PHP 8.0.0."
    ],
    "end": [
        "Set the internal pointer of an array to its last element",
        "end ( array|object &$array ) : mixed"
    ],
    "ereg": [
        "Regular expression match",
        "ereg ( string $pattern , string $string , array &$regs = ? ) : int"
    ],
    "ereg_replace": [
        "Replace regular expression",
        "ereg_replace ( string $pattern , string $replacement , string $string ) : string"
    ],
    "eregi": [
        "Case insensitive regular expression match",
        "eregi ( string $pattern , string $string , array &$regs = ? ) : int"
    ],
    "eregi_replace": [
        "Replace regular expression case insensitive",
        "eregi_replace ( string $pattern , string $replacement , string $string ) : string"
    ],
    "Error": [
        "Error is the base class for all internal PHP errors.",
        "new Error ( string $message = \"\" , int $code = 0 , Throwable $previous = null )"
    ],
    "error_clear_last": [
        "Clear the most recent error",
        "error_clear_last ( ) : void"
    ],
    "error_get_last": [
        "Get the last occurred error",
        "error_get_last ( ) : array|null"
    ],
    "error_log": [
        "Send an error message to the defined error handling routines",
        "error_log ( string $message , int $message_type = 0 , string $destination = ? , string $extra_headers = ? ) : bool"
    ],
    "error_reporting": [
        "Sets which PHP errors are reported",
        "error_reporting ( int $level = ? ) : int"
    ],
    "ErrorException": [
        "An Error Exception.",
        "new ErrorException ( string $message = \"\" , int $code = 0 , int $severity = E_ERROR , string $filename = __FILE__ , int $lineno = __LINE__ , Exception $previous = null )"
    ],
    "escapeshellarg": [
        "Escape a string to be used as a shell argument",
        "escapeshellarg ( string $arg ) : string"
    ],
    "escapeshellcmd": [
        "Escape shell metacharacters",
        "escapeshellcmd ( string $command ) : string"
    ],
    "Ev": [
        "Ev is a static class providing access to the default loop and to some common operations."
    ],
    "eval": [
        "Evaluate a string as PHP code",
        "eval ( string $code ) : mixed"
    ],
    "EvCheck": [
        "EvPrepare and EvCheck watchers are usually used in pairs. EvPrepare watchers get invoked before the process blocks, EvCheck afterwards.",
        "new EvCheck (  callable $callback  ,  mixed $data  = ? ,  int $priority  = ? )"
    ],
    "EvChild": [
        "EvChild watchers trigger when the process receives a SIGCHLD in response to some child status changes (most typically when a child dies or exits). It is permissible to install an EvChild watcher after the child has been forked(which implies it might have already exited), as long as the event loop isn't entered(or is continued from a watcher), i.e. forking and then immediately registering a watcher for the child is fine, but forking and registering a watcher a few event loop iterations later or in the next callback invocation is not.",
        "new EvChild (  int $pid  ,  bool $trace  ,  callable $callback  ,  mixed $data  = null  ,  int $priority  = 0  )"
    ],
    "EvEmbed": [
        "Used to embed one event loop into another.",
        "new EvEmbed (  object $other  ,  callable $callback  = ? ,  mixed $data  = ? ,  int $priority  = ? )"
    ],
    "Event": [
        "Event class represents and event firing on a file descriptor being ready to read from or write to; a file descriptor becoming ready to read from or write to(edge-triggered I\/O only); a timeout expiring; a signal occuring; a user-triggered event.",
        "new Event (  EventBase $base  ,  mixed $fd  ,  int $what  ,  callable $cb  ,  mixed $arg  = NULL  )"
    ],
    "EventBase": [
        "EventBase class represents libevent's event base structure. It holds a set of events and can poll to determine which events are active.",
        "new EventBase (  EventConfig $cfg  = ? )"
    ],
    "EventBuffer": [
        "EventBuffer represents Libevent's \"evbuffer\", an utility functionality for buffered I\/O.",
        "new EventBuffer ( )"
    ],
    "EventBufferEvent": [
        "Represents Libevent's buffer event.",
        "new EventBufferEvent (  EventBase $base  ,  mixed $socket  = null  ,  int $options  = 0  ,  callable $readcb  = null  ,  callable $writecb  = null  ,  callable $eventcb  = null  )"
    ],
    "EventConfig": [
        "Represents configuration structure which could be used in construction of the EventBase .",
        "new EventConfig ( )"
    ],
    "EventDnsBase": [
        "Represents Libevent's DNS base structure. Used to resolve DNS asyncronously, parse configuration files like resolv.conf etc.",
        "new EventDnsBase (  EventBase $base  ,  bool $initialize  )"
    ],
    "EventHttp": [
        "Represents HTTP server.",
        "new EventHttp (  EventBase $base  ,  EventSslContext $ctx  = null  )"
    ],
    "EventHttpConnection": [
        "Represents an HTTP connection.",
        "new EventHttpConnection (  EventBase $base  ,  EventDnsBase $dns_base  ,  string $address  ,  int $port  ,  EventSslContext $ctx  = null  )"
    ],
    "EventHttpRequest": [
        "Represents an HTTP request.",
        "new EventHttpRequest (  callable $callback  ,  mixed $data  = null  )"
    ],
    "EventListener": [
        "Represents a connection listener.",
        "new EventListener (  EventBase $base  ,  callable $cb  ,  mixed $data  ,  int $flags  ,  int $backlog  ,  mixed $target  )"
    ],
    "EventSslContext": [
        "Represents SSL_CTX structure. Provides methods and properties to configure the SSL context.",
        "new EventSslContext (  string $method  ,  string $options  )"
    ],
    "EventUtil": [
        "EventUtil is a singleton with supplimentary methods and constants."
    ],
    "EvFork": [
        "Fork watchers are called when a fork() was detected (usually because whoever signalled libev about it by calling EvLoop::fork() ). The invocation is done before the event loop blocks next and before EvCheck watchers are being called, and only in the child after the fork. Note, that if whoever calling EvLoop::fork() calls it in the wrong process, the fork handlers will be invoked, too.",
        "new EvFork (  callable $callback  ,  mixed $data  = null  ,  int $priority  = 0  )"
    ],
    "EvIdle": [
        "EvIdle watchers trigger events when no other events of the same or higher priority are pending ( EvPrepare , EvCheck and other EvIdle watchers do not count as receiving events ).",
        "new EvIdle (  callable $callback  ,  mixed $data  = ? ,  int $priority  = ? )"
    ],
    "EvIo": [
        "EvIo watchers check whether a file descriptor(or socket, or a stream castable to numeric file descriptor) is readable or writable in each iteration of the event loop, or, more precisely, when reading would not block the process and writing would at least be able to write some data. This behaviour is called level-triggering because events are kept receiving as long as the condition persists. To stop receiving events just stop the watcher.",
        "new EvIo (  mixed $fd  ,  int $events  ,  callable $callback  ,  mixed $data  = ? ,  int $priority  = ? )"
    ],
    "EvLoop": [
        "Represents an event loop that is always distinct from the default loop . Unlike the default loop , it cannot handle EvChild watchers.",
        "new EvLoop (  int $flags  = ? ,  mixed $data  = NULL  ,  float $io_interval  = 0.0  ,  float $timeout_interval  = 0.0  )"
    ],
    "EvPeriodic": [
        "Periodic watchers are also timers of a kind, but they are very versatile.",
        "new EvPeriodic (  float $offset  ,  string $interval  ,  callable $reschedule_cb  ,  callable $callback  ,  mixed $data  = null  ,  int $priority  = 0  )"
    ],
    "EvPrepare": [
        "EvPrepare and EvCheck watchers are usually used in pairs. EvPrepare watchers get invoked before the process blocks, EvCheck afterwards.",
        "new EvPrepare (  string $callback  ,  string $data  = ? ,  string $priority  = ? )"
    ],
    "EvSignal": [
        "EvSignal watchers will trigger an event when the process receives a specific signal one or more times. Even though signals are very asynchronous, libev will try its best to deliver signals synchronously, i.e. as part of the normal event processing, like any other event.",
        "new EvSignal (  int $signum  ,  callable $callback  ,  mixed $data  = null  ,  int $priority  = 0  )"
    ],
    "EvStat": [
        "EvStat monitors a file system path for attribute changes. It calls stat() on that path in regular intervals(or when the OS signals it changed) and sees if it changed compared to the last time, invoking the callback if it did.",
        "new EvStat (  string $path  ,  float $interval  ,  callable $callback  ,  mixed $data  = null  ,  int $priority  = 0  )"
    ],
    "EvTimer": [
        "EvTimer watchers are simple relative timers that generate an event after a given time, and optionally repeating in regular intervals after that.",
        "new EvTimer (  float $after  ,  float $repeat  ,  callable $callback  ,  mixed $data  = null  ,  int $priority  = 0  )"
    ],
    "EvWatcher": [
        "EvWatcher is a base class for all watchers( EvCheck , EvChild etc.). Since EvWatcher 's constructor is abstract , one can't(and don't need to) create EvWatcher objects directly."
    ],
    "Exception": [
        "Exception is the base class for all user exceptions.",
        "new Exception ( string $message = \"\" , int $code = 0 , Throwable $previous = null )"
    ],
    "exec": [
        "Execute an external program",
        "exec ( string $command , array &$output = null , int &$result_code = null ) : string|false"
    ],
    "exif_imagetype": [
        "Determine the type of an image",
        "exif_imagetype ( string $filename ) : int|false"
    ],
    "exif_read_data": [
        "Reads the EXIF headers from an image file",
        "exif_read_data ( resource|string $file , string|null $required_sections = null , bool $as_arrays = false , bool $read_thumbnail = false ) : array|false"
    ],
    "exif_tagname": [
        "Get the header name for an index",
        "exif_tagname ( int $index ) : string|false"
    ],
    "exif_thumbnail": [
        "Retrieve the embedded thumbnail of an image",
        "exif_thumbnail ( resource|string $file , int &$width = null , int &$height = null , int &$image_type = null ) : string|false"
    ],
    "exit": [
        "Output a message and terminate the current script",
        "exit ( string $status = ? ) : void",
        "exit ( int $status ) : void"
    ],
    "exp": [
        "Calculates the exponent of e",
        "exp ( float $num ) : float"
    ],
    "expect_expectl": [
        "Waits until the output from a process matches one\n  of the patterns, a specified time period has passed, or an EOF is seen",
        "expect_expectl ( resource $expect , array $cases , array &$match = ? ) : int"
    ],
    "expect_popen": [
        "Execute command via Bourne shell, and open the PTY stream to\n  the process",
        "expect_popen ( string $command ) : resource"
    ],
    "explode": [
        "Split a string by a string",
        "explode ( string $separator , string $string , int $limit = PHP_INT_MAX ) : array"
    ],
    "expm1": [
        "Returns exp(number) - 1, computed in a way that is accurate even\n   when the value of number is close to zero",
        "expm1 ( float $num ) : float"
    ],
    "extension_loaded": [
        "Find out whether an extension is loaded",
        "extension_loaded ( string $name ) : bool"
    ],
    "extract": [
        "Import variables into the current symbol table from an array",
        "extract ( array &$array , int $flags = EXTR_OVERWRITE , string $prefix = \"\" ) : int"
    ],
    "ezmlm_hash": [
        "Calculate the hash value needed by EZMLM",
        "ezmlm_hash ( string $addr ) : int"
    ],
    "fann_cascadetrain_on_data": [
        "Trains on an entire dataset, for a period of time using the Cascade2 training algorithm",
        "fann_cascadetrain_on_data ( resource $ann , resource $data , int $max_neurons , int $neurons_between_reports , float $desired_error ) : bool"
    ],
    "fann_cascadetrain_on_file": [
        "Trains on an entire dataset read from file, for a period of time using the Cascade2 training algorithm",
        "fann_cascadetrain_on_file ( resource $ann , string $filename , int $max_neurons , int $neurons_between_reports , float $desired_error ) : bool"
    ],
    "fann_clear_scaling_params": [
        "Clears scaling parameters",
        "fann_clear_scaling_params ( resource $ann ) : bool"
    ],
    "fann_copy": [
        "Creates a copy of a fann structure",
        "fann_copy ( resource $ann ) : resource"
    ],
    "fann_create_from_file": [
        "Constructs a backpropagation neural network from a configuration file",
        "fann_create_from_file ( string $configuration_file ) : resource"
    ],
    "fann_create_shortcut": [
        "Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections",
        "fann_create_shortcut ( int $num_layers , int $num_neurons1 , int $num_neurons2 , int ...$num_neuronsN ) : resource"
    ],
    "fann_create_shortcut_array": [
        "Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections",
        "fann_create_shortcut_array ( int $num_layers , array $layers ) : resource"
    ],
    "fann_create_sparse": [
        "Creates a standard backpropagation neural network, which is not fully connected",
        "fann_create_sparse ( float $connection_rate , int $num_layers , int $num_neurons1 , int $num_neurons2 , int ...$num_neuronsN ) : resource"
    ],
    "fann_create_sparse_array": [
        "Creates a standard backpropagation neural network, which is not fully connected using an array of layer sizes",
        "fann_create_sparse_array ( float $connection_rate , int $num_layers , array $layers ) : resource"
    ],
    "fann_create_standard": [
        "Creates a standard fully connected backpropagation neural network",
        "fann_create_standard ( int $num_layers , int $num_neurons1 , int $num_neurons2 , int ...$num_neuronsN ) : resource"
    ],
    "fann_create_standard_array": [
        "Creates a standard fully connected backpropagation neural network using an array of layer sizes",
        "fann_create_standard_array ( int $num_layers , array $layers ) : resource"
    ],
    "fann_create_train": [
        "Creates an empty training data struct",
        "fann_create_train ( int $num_data , int $num_input , int $num_output ) : resource"
    ],
    "fann_create_train_from_callback": [
        "Creates the training data struct from a user supplied function",
        "fann_create_train_from_callback ( int $num_data , int $num_input , int $num_output , callable $user_function ) : resource"
    ],
    "fann_descale_input": [
        "Scale data in input vector after get it from ann based on previously calculated parameters",
        "fann_descale_input ( resource $ann , array $input_vector ) : bool"
    ],
    "fann_descale_output": [
        "Scale data in output vector after get it from ann based on previously calculated parameters",
        "fann_descale_output ( resource $ann , array $output_vector ) : bool"
    ],
    "fann_descale_train": [
        "Descale input and output data based on previously calculated parameters",
        "fann_descale_train ( resource $ann , resource $train_data ) : bool"
    ],
    "fann_destroy": [
        "Destroys the entire network and properly freeing all the associated memory",
        "fann_destroy ( resource $ann ) : bool"
    ],
    "fann_destroy_train": [
        "Destructs the training data",
        "fann_destroy_train ( resource $train_data ) : bool"
    ],
    "fann_duplicate_train_data": [
        "Returns an exact copy of a fann train data",
        "fann_duplicate_train_data ( resource $data ) : resource"
    ],
    "fann_get_activation_function": [
        "Returns the activation function",
        "fann_get_activation_function ( resource $ann , int $layer , int $neuron ) : int"
    ],
    "fann_get_activation_steepness": [
        "Returns the activation steepness for supplied neuron and layer number",
        "fann_get_activation_steepness ( resource $ann , int $layer , int $neuron ) : float"
    ],
    "fann_get_bias_array": [
        "Get the number of bias in each layer in the network",
        "fann_get_bias_array ( resource $ann ) : array"
    ],
    "fann_get_bit_fail": [
        "The number of fail bits",
        "fann_get_bit_fail ( resource $ann ) : int"
    ],
    "fann_get_bit_fail_limit": [
        "Returns the bit fail limit used during training",
        "fann_get_bit_fail_limit ( resource $ann ) : float"
    ],
    "fann_get_cascade_activation_functions": [
        "Returns the cascade activation functions",
        "fann_get_cascade_activation_functions ( resource $ann ) : array"
    ],
    "fann_get_cascade_activation_functions_count": [
        "Returns the number of cascade activation functions",
        "fann_get_cascade_activation_functions_count ( resource $ann ) : int"
    ],
    "fann_get_cascade_activation_steepnesses": [
        "Returns the cascade activation steepnesses",
        "fann_get_cascade_activation_steepnesses ( resource $ann ) : array"
    ],
    "fann_get_cascade_activation_steepnesses_count": [
        "The number of activation steepnesses",
        "fann_get_cascade_activation_steepnesses_count ( resource $ann ) : int"
    ],
    "fann_get_cascade_candidate_change_fraction": [
        "Returns the cascade candidate change fraction",
        "fann_get_cascade_candidate_change_fraction ( resource $ann ) : float"
    ],
    "fann_get_cascade_candidate_limit": [
        "Return the candidate limit",
        "fann_get_cascade_candidate_limit ( resource $ann ) : float"
    ],
    "fann_get_cascade_candidate_stagnation_epochs": [
        "Returns the number of cascade candidate stagnation epochs",
        "fann_get_cascade_candidate_stagnation_epochs ( resource $ann ) : int"
    ],
    "fann_get_cascade_max_cand_epochs": [
        "Returns the maximum candidate epochs",
        "fann_get_cascade_max_cand_epochs ( resource $ann ) : int"
    ],
    "fann_get_cascade_max_out_epochs": [
        "Returns the maximum out epochs",
        "fann_get_cascade_max_out_epochs ( resource $ann ) : int"
    ],
    "fann_get_cascade_min_cand_epochs": [
        "Returns the minimum candidate epochs",
        "fann_get_cascade_min_cand_epochs ( resource $ann ) : int"
    ],
    "fann_get_cascade_min_out_epochs": [
        "Returns the minimum out epochs",
        "fann_get_cascade_min_out_epochs ( resource $ann ) : int"
    ],
    "fann_get_cascade_num_candidate_groups": [
        "Returns the number of candidate groups",
        "fann_get_cascade_num_candidate_groups ( resource $ann ) : int"
    ],
    "fann_get_cascade_num_candidates": [
        "Returns the number of candidates used during training",
        "fann_get_cascade_num_candidates ( resource $ann ) : int"
    ],
    "fann_get_cascade_output_change_fraction": [
        "Returns the cascade output change fraction",
        "fann_get_cascade_output_change_fraction ( resource $ann ) : float"
    ],
    "fann_get_cascade_output_stagnation_epochs": [
        "Returns the number of cascade output stagnation epochs",
        "fann_get_cascade_output_stagnation_epochs ( resource $ann ) : int"
    ],
    "fann_get_cascade_weight_multiplier": [
        "Returns the weight multiplier",
        "fann_get_cascade_weight_multiplier ( resource $ann ) : float"
    ],
    "fann_get_connection_array": [
        "Get connections in the network",
        "fann_get_connection_array ( resource $ann ) : array"
    ],
    "fann_get_connection_rate": [
        "Get the connection rate used when the network was created",
        "fann_get_connection_rate ( resource $ann ) : float"
    ],
    "fann_get_errno": [
        "Returns the last error number",
        "fann_get_errno ( resource $errdat ) : int"
    ],
    "fann_get_errstr": [
        "Returns the last errstr",
        "fann_get_errstr ( resource $errdat ) : string"
    ],
    "fann_get_layer_array": [
        "Get the number of neurons in each layer in the network",
        "fann_get_layer_array ( resource $ann ) : array"
    ],
    "fann_get_learning_momentum": [
        "Returns the learning momentum",
        "fann_get_learning_momentum ( resource $ann ) : float"
    ],
    "fann_get_learning_rate": [
        "Returns the learning rate",
        "fann_get_learning_rate ( resource $ann ) : float"
    ],
    "fann_get_MSE": [
        "Reads the mean square error from the network",
        "fann_get_MSE ( resource $ann ) : float"
    ],
    "fann_get_network_type": [
        "Get the type of neural network it was created as",
        "fann_get_network_type ( resource $ann ) : int"
    ],
    "fann_get_num_input": [
        "Get the number of input neurons",
        "fann_get_num_input ( resource $ann ) : int"
    ],
    "fann_get_num_layers": [
        "Get the number of layers in the neural network",
        "fann_get_num_layers ( resource $ann ) : int"
    ],
    "fann_get_num_output": [
        "Get the number of output neurons",
        "fann_get_num_output ( resource $ann ) : int"
    ],
    "fann_get_quickprop_decay": [
        "Returns the decay which is a factor that weights should decrease in each iteration during quickprop training",
        "fann_get_quickprop_decay ( resource $ann ) : float"
    ],
    "fann_get_quickprop_mu": [
        "Returns the mu factor",
        "fann_get_quickprop_mu ( resource $ann ) : float"
    ],
    "fann_get_rprop_decrease_factor": [
        "Returns the increase factor used during RPROP training",
        "fann_get_rprop_decrease_factor ( resource $ann ) : float"
    ],
    "fann_get_rprop_delta_max": [
        "Returns the maximum step-size",
        "fann_get_rprop_delta_max ( resource $ann ) : float"
    ],
    "fann_get_rprop_delta_min": [
        "Returns the minimum step-size",
        "fann_get_rprop_delta_min ( resource $ann ) : float"
    ],
    "fann_get_rprop_delta_zero": [
        "Returns the initial step-size",
        "fann_get_rprop_delta_zero ( resource $ann ) : int"
    ],
    "fann_get_rprop_increase_factor": [
        "Returns the increase factor used during RPROP training",
        "fann_get_rprop_increase_factor ( resource $ann ) : float"
    ],
    "fann_get_sarprop_step_error_shift": [
        "Returns the sarprop step error shift",
        "fann_get_sarprop_step_error_shift ( resource $ann ) : float"
    ],
    "fann_get_sarprop_step_error_threshold_factor": [
        "Returns the sarprop step error threshold factor",
        "fann_get_sarprop_step_error_threshold_factor ( resource $ann ) : float"
    ],
    "fann_get_sarprop_temperature": [
        "Returns the sarprop temperature",
        "fann_get_sarprop_temperature ( resource $ann ) : float"
    ],
    "fann_get_sarprop_weight_decay_shift": [
        "Returns the sarprop weight decay shift",
        "fann_get_sarprop_weight_decay_shift ( resource $ann ) : float"
    ],
    "fann_get_total_connections": [
        "Get the total number of connections in the entire network",
        "fann_get_total_connections ( resource $ann ) : int"
    ],
    "fann_get_total_neurons": [
        "Get the total number of neurons in the entire network",
        "fann_get_total_neurons ( resource $ann ) : int"
    ],
    "fann_get_train_error_function": [
        "Returns the error function used during training",
        "fann_get_train_error_function ( resource $ann ) : int"
    ],
    "fann_get_train_stop_function": [
        "Returns the stop function used during training",
        "fann_get_train_stop_function ( resource $ann ) : int"
    ],
    "fann_get_training_algorithm": [
        "Returns the training algorithm",
        "fann_get_training_algorithm ( resource $ann ) : int"
    ],
    "fann_init_weights": [
        "Initialize the weights using Widrow + Nguyen\u2019s algorithm",
        "fann_init_weights ( resource $ann , resource $train_data ) : bool"
    ],
    "fann_length_train_data": [
        "Returns the number of training patterns in the train data",
        "fann_length_train_data ( resource $data ) : int"
    ],
    "fann_merge_train_data": [
        "Merges the train data",
        "fann_merge_train_data ( resource $data1 , resource $data2 ) : resource"
    ],
    "fann_num_input_train_data": [
        "Returns the number of inputs in each of the training patterns in the train data",
        "fann_num_input_train_data ( resource $data ) : int"
    ],
    "fann_num_output_train_data": [
        "Returns the number of outputs in each of the training patterns in the train data",
        "fann_num_output_train_data ( resource $data ) : int"
    ],
    "fann_print_error": [
        "Prints the error string",
        "fann_print_error ( resource $errdat ) : void"
    ],
    "fann_randomize_weights": [
        "Give each connection a random weight between min_weight and max_weight",
        "fann_randomize_weights ( resource $ann , float $min_weight , float $max_weight ) : bool"
    ],
    "fann_read_train_from_file": [
        "Reads a file that stores training data",
        "fann_read_train_from_file ( string $filename ) : resource"
    ],
    "fann_reset_errno": [
        "Resets the last error number",
        "fann_reset_errno ( resource $errdat ) : void"
    ],
    "fann_reset_errstr": [
        "Resets the last error string",
        "fann_reset_errstr ( resource $errdat ) : void"
    ],
    "fann_reset_MSE": [
        "Resets the mean square error from the network",
        "fann_reset_MSE ( string $ann ) : bool"
    ],
    "fann_run": [
        "Will run input through the neural network",
        "fann_run ( resource $ann , array $input ) : array"
    ],
    "fann_save": [
        "Saves the entire network to a configuration file",
        "fann_save ( resource $ann , string $configuration_file ) : bool"
    ],
    "fann_save_train": [
        "Save the training structure to a file",
        "fann_save_train ( resource $data , string $file_name ) : bool"
    ],
    "fann_scale_input": [
        "Scale data in input vector before feed it to ann based on previously calculated parameters",
        "fann_scale_input ( resource $ann , array $input_vector ) : bool"
    ],
    "fann_scale_input_train_data": [
        "Scales the inputs in the training data to the specified range",
        "fann_scale_input_train_data ( resource $train_data , float $new_min , float $new_max ) : bool"
    ],
    "fann_scale_output": [
        "Scale data in output vector before feed it to ann based on previously calculated parameters",
        "fann_scale_output ( resource $ann , array $output_vector ) : bool"
    ],
    "fann_scale_output_train_data": [
        "Scales the outputs in the training data to the specified range",
        "fann_scale_output_train_data ( resource $train_data , float $new_min , float $new_max ) : bool"
    ],
    "fann_scale_train": [
        "Scale input and output data based on previously calculated parameters",
        "fann_scale_train ( resource $ann , resource $train_data ) : bool"
    ],
    "fann_scale_train_data": [
        "Scales the inputs and outputs in the training data to the specified range",
        "fann_scale_train_data ( resource $train_data , float $new_min , float $new_max ) : bool"
    ],
    "fann_set_activation_function": [
        "Sets the activation function for supplied neuron and layer",
        "fann_set_activation_function ( resource $ann , int $activation_function , int $layer , int $neuron ) : bool"
    ],
    "fann_set_activation_function_hidden": [
        "Sets the activation function for all of the hidden layers",
        "fann_set_activation_function_hidden ( resource $ann , int $activation_function ) : bool"
    ],
    "fann_set_activation_function_layer": [
        "Sets the activation function for all the neurons in the supplied layer",
        "fann_set_activation_function_layer ( resource $ann , int $activation_function , int $layer ) : bool"
    ],
    "fann_set_activation_function_output": [
        "Sets the activation function for the output layer",
        "fann_set_activation_function_output ( resource $ann , int $activation_function ) : bool"
    ],
    "fann_set_activation_steepness": [
        "Sets the activation steepness for supplied neuron and layer number",
        "fann_set_activation_steepness ( resource $ann , float $activation_steepness , int $layer , int $neuron ) : bool"
    ],
    "fann_set_activation_steepness_hidden": [
        "Sets the steepness of the activation steepness for all neurons in the all hidden layers",
        "fann_set_activation_steepness_hidden ( resource $ann , float $activation_steepness ) : bool"
    ],
    "fann_set_activation_steepness_layer": [
        "Sets the activation steepness for all of the neurons in the supplied layer number",
        "fann_set_activation_steepness_layer ( resource $ann , float $activation_steepness , int $layer ) : bool"
    ],
    "fann_set_activation_steepness_output": [
        "Sets the steepness of the activation steepness in the output layer",
        "fann_set_activation_steepness_output ( resource $ann , float $activation_steepness ) : bool"
    ],
    "fann_set_bit_fail_limit": [
        "Set the bit fail limit used during training",
        "fann_set_bit_fail_limit ( resource $ann , float $bit_fail_limit ) : bool"
    ],
    "fann_set_callback": [
        "Sets the callback function for use during training",
        "fann_set_callback ( resource $ann , callable $callback ) : bool"
    ],
    "fann_set_cascade_activation_functions": [
        "Sets the array of cascade candidate activation functions",
        "fann_set_cascade_activation_functions ( resource $ann , array $cascade_activation_functions ) : bool"
    ],
    "fann_set_cascade_activation_steepnesses": [
        "Sets the array of cascade candidate activation steepnesses",
        "fann_set_cascade_activation_steepnesses ( resource $ann , array $cascade_activation_steepnesses_count ) : bool"
    ],
    "fann_set_cascade_candidate_change_fraction": [
        "Sets the cascade candidate change fraction",
        "fann_set_cascade_candidate_change_fraction ( resource $ann , float $cascade_candidate_change_fraction ) : bool"
    ],
    "fann_set_cascade_candidate_limit": [
        "Sets the candidate limit",
        "fann_set_cascade_candidate_limit ( resource $ann , float $cascade_candidate_limit ) : bool"
    ],
    "fann_set_cascade_candidate_stagnation_epochs": [
        "Sets the number of cascade candidate stagnation epochs",
        "fann_set_cascade_candidate_stagnation_epochs ( resource $ann , int $cascade_candidate_stagnation_epochs ) : bool"
    ],
    "fann_set_cascade_max_cand_epochs": [
        "Sets the max candidate epochs",
        "fann_set_cascade_max_cand_epochs ( resource $ann , int $cascade_max_cand_epochs ) : bool"
    ],
    "fann_set_cascade_max_out_epochs": [
        "Sets the maximum out epochs",
        "fann_set_cascade_max_out_epochs ( resource $ann , int $cascade_max_out_epochs ) : bool"
    ],
    "fann_set_cascade_min_cand_epochs": [
        "Sets the min candidate epochs",
        "fann_set_cascade_min_cand_epochs ( resource $ann , int $cascade_min_cand_epochs ) : bool"
    ],
    "fann_set_cascade_min_out_epochs": [
        "Sets the minimum out epochs",
        "fann_set_cascade_min_out_epochs ( resource $ann , int $cascade_min_out_epochs ) : bool"
    ],
    "fann_set_cascade_num_candidate_groups": [
        "Sets the number of candidate groups",
        "fann_set_cascade_num_candidate_groups ( resource $ann , int $cascade_num_candidate_groups ) : bool"
    ],
    "fann_set_cascade_output_change_fraction": [
        "Sets the cascade output change fraction",
        "fann_set_cascade_output_change_fraction ( resource $ann , float $cascade_output_change_fraction ) : bool"
    ],
    "fann_set_cascade_output_stagnation_epochs": [
        "Sets the number of cascade output stagnation epochs",
        "fann_set_cascade_output_stagnation_epochs ( resource $ann , int $cascade_output_stagnation_epochs ) : bool"
    ],
    "fann_set_cascade_weight_multiplier": [
        "Sets the weight multiplier",
        "fann_set_cascade_weight_multiplier ( resource $ann , float $cascade_weight_multiplier ) : bool"
    ],
    "fann_set_error_log": [
        "Sets where the errors are logged to",
        "fann_set_error_log ( resource $errdat , string $log_file ) : void"
    ],
    "fann_set_input_scaling_params": [
        "Calculate input scaling parameters for future use based on training data",
        "fann_set_input_scaling_params ( resource $ann , resource $train_data , float $new_input_min , float $new_input_max ) : bool"
    ],
    "fann_set_learning_momentum": [
        "Sets the learning momentum",
        "fann_set_learning_momentum ( resource $ann , float $learning_momentum ) : bool"
    ],
    "fann_set_learning_rate": [
        "Sets the learning rate",
        "fann_set_learning_rate ( resource $ann , float $learning_rate ) : bool"
    ],
    "fann_set_output_scaling_params": [
        "Calculate output scaling parameters for future use based on training data",
        "fann_set_output_scaling_params ( resource $ann , resource $train_data , float $new_output_min , float $new_output_max ) : bool"
    ],
    "fann_set_quickprop_decay": [
        "Sets the quickprop decay factor",
        "fann_set_quickprop_decay ( resource $ann , float $quickprop_decay ) : bool"
    ],
    "fann_set_quickprop_mu": [
        "Sets the quickprop mu factor",
        "fann_set_quickprop_mu ( resource $ann , float $quickprop_mu ) : bool"
    ],
    "fann_set_rprop_decrease_factor": [
        "Sets the decrease factor used during RPROP training",
        "fann_set_rprop_decrease_factor ( resource $ann , float $rprop_decrease_factor ) : bool"
    ],
    "fann_set_rprop_delta_max": [
        "Sets the maximum step-size",
        "fann_set_rprop_delta_max ( resource $ann , float $rprop_delta_max ) : bool"
    ],
    "fann_set_rprop_delta_min": [
        "Sets the minimum step-size",
        "fann_set_rprop_delta_min ( resource $ann , float $rprop_delta_min ) : bool"
    ],
    "fann_set_rprop_delta_zero": [
        "Sets the initial step-size",
        "fann_set_rprop_delta_zero ( resource $ann , float $rprop_delta_zero ) : bool"
    ],
    "fann_set_rprop_increase_factor": [
        "Sets the increase factor used during RPROP training",
        "fann_set_rprop_increase_factor ( resource $ann , float $rprop_increase_factor ) : bool"
    ],
    "fann_set_sarprop_step_error_shift": [
        "Sets the sarprop step error shift",
        "fann_set_sarprop_step_error_shift ( resource $ann , float $sarprop_step_error_shift ) : bool"
    ],
    "fann_set_sarprop_step_error_threshold_factor": [
        "Sets the sarprop step error threshold factor",
        "fann_set_sarprop_step_error_threshold_factor ( resource $ann , float $sarprop_step_error_threshold_factor ) : bool"
    ],
    "fann_set_sarprop_temperature": [
        "Sets the sarprop temperature",
        "fann_set_sarprop_temperature ( resource $ann , float $sarprop_temperature ) : bool"
    ],
    "fann_set_sarprop_weight_decay_shift": [
        "Sets the sarprop weight decay shift",
        "fann_set_sarprop_weight_decay_shift ( resource $ann , float $sarprop_weight_decay_shift ) : bool"
    ],
    "fann_set_scaling_params": [
        "Calculate input and output scaling parameters for future use based on training data",
        "fann_set_scaling_params ( resource $ann , resource $train_data , float $new_input_min , float $new_input_max , float $new_output_min , float $new_output_max ) : bool"
    ],
    "fann_set_train_error_function": [
        "Sets the error function used during training",
        "fann_set_train_error_function ( resource $ann , int $error_function ) : bool"
    ],
    "fann_set_train_stop_function": [
        "Sets the stop function used during training",
        "fann_set_train_stop_function ( resource $ann , int $stop_function ) : bool"
    ],
    "fann_set_training_algorithm": [
        "Sets the training algorithm",
        "fann_set_training_algorithm ( resource $ann , int $training_algorithm ) : bool"
    ],
    "fann_set_weight": [
        "Set a connection in the network",
        "fann_set_weight ( resource $ann , int $from_neuron , int $to_neuron , float $weight ) : bool"
    ],
    "fann_set_weight_array": [
        "Set connections in the network",
        "fann_set_weight_array ( resource $ann , array $connections ) : bool"
    ],
    "fann_shuffle_train_data": [
        "Shuffles training data, randomizing the order",
        "fann_shuffle_train_data ( resource $train_data ) : bool"
    ],
    "fann_subset_train_data": [
        "Returns an copy of a subset of the train data",
        "fann_subset_train_data ( resource $data , int $pos , int $length ) : resource"
    ],
    "fann_test": [
        "Test with a set of inputs, and a set of desired outputs",
        "fann_test ( resource $ann , array $input , array $desired_output ) : array"
    ],
    "fann_test_data": [
        "Test a set of training data and calculates the MSE for the training data",
        "fann_test_data ( resource $ann , resource $data ) : float"
    ],
    "fann_train": [
        "Train one iteration with a set of inputs, and a set of desired outputs",
        "fann_train ( resource $ann , array $input , array $desired_output ) : bool"
    ],
    "fann_train_epoch": [
        "Train one epoch with a set of training data",
        "fann_train_epoch ( resource $ann , resource $data ) : float"
    ],
    "fann_train_on_data": [
        "Trains on an entire dataset for a period of time",
        "fann_train_on_data ( resource $ann , resource $data , int $max_epochs , int $epochs_between_reports , float $desired_error ) : bool"
    ],
    "fann_train_on_file": [
        "Trains on an entire dataset, which is read from file, for a period of time",
        "fann_train_on_file ( resource $ann , string $filename , int $max_epochs , int $epochs_between_reports , float $desired_error ) : bool"
    ],
    "FANNConnection": [
        "FANNConnection is used for the neural network connection. The objects of this class are used in fann_get_connection_array() and fann_set_weight_array().",
        "new FANNConnection ( int $from_neuron , int $to_neuron , float $weight )"
    ],
    "fastcgi_finish_request": [
        "Flushes all response data to the client",
        "fastcgi_finish_request ( ) : bool"
    ],
    "fbird_blob_cancel": [
        "Cancel creating blob",
        "fbird_blob_cancel ( resource $blob_handle ) : bool"
    ],
    "fbsql_affected_rows": [
        "Get number of affected rows in previous FrontBase operation",
        "fbsql_affected_rows ( resource $link_identifier = ? ) : int"
    ],
    "fbsql_autocommit": [
        "Enable or disable autocommit",
        "fbsql_autocommit ( resource $link_identifier , bool $OnOff = ? ) : bool"
    ],
    "fbsql_blob_size": [
        "Get the size of a BLOB",
        "fbsql_blob_size ( string $blob_handle , resource $link_identifier = ? ) : int"
    ],
    "fbsql_change_user": [
        "Change logged in user of the active connection",
        "fbsql_change_user ( string $user , string $password , string $database = ? , resource $link_identifier = ? ) : bool"
    ],
    "fbsql_clob_size": [
        "Get the size of a CLOB",
        "fbsql_clob_size ( string $clob_handle , resource $link_identifier = ? ) : int"
    ],
    "fbsql_close": [
        "Close FrontBase connection",
        "fbsql_close ( resource $link_identifier = ? ) : bool"
    ],
    "fbsql_commit": [
        "Commits a transaction to the database",
        "fbsql_commit ( resource $link_identifier = ? ) : bool"
    ],
    "fbsql_connect": [
        "Open a connection to a FrontBase Server",
        "fbsql_connect ( string $hostname = ini_get(\"fbsql.default_host\") , string $username = ini_get(\"fbsql.default_user\") , string $password = ini_get(\"fbsql.default_password\") ) : resource"
    ],
    "fbsql_create_blob": [
        "Create a BLOB",
        "fbsql_create_blob ( string $blob_data , resource $link_identifier = ? ) : string"
    ],
    "fbsql_create_clob": [
        "Create a CLOB",
        "fbsql_create_clob ( string $clob_data , resource $link_identifier = ? ) : string"
    ],
    "fbsql_create_db": [
        "Create a FrontBase database",
        "fbsql_create_db ( string $database_name , resource $link_identifier = ? , string $database_options = ? ) : bool"
    ],
    "fbsql_data_seek": [
        "Move internal result pointer",
        "fbsql_data_seek ( resource $result , int $row_number ) : bool"
    ],
    "fbsql_database": [
        "Get or set the database name used with a connection",
        "fbsql_database ( resource $link_identifier , string $database = ? ) : string"
    ],
    "fbsql_database_password": [
        "Sets or retrieves the password for a FrontBase database",
        "fbsql_database_password ( resource $link_identifier , string $database_password = ? ) : string"
    ],
    "fbsql_db_query": [
        "Send a FrontBase query",
        "fbsql_db_query ( string $database , string $query , resource $link_identifier = ? ) : resource"
    ],
    "fbsql_db_status": [
        "Get the status for a given database",
        "fbsql_db_status ( string $database_name , resource $link_identifier = ? ) : int"
    ],
    "fbsql_drop_db": [
        "Drop (delete) a FrontBase database",
        "fbsql_drop_db ( string $database_name , resource $link_identifier = ? ) : bool"
    ],
    "fbsql_errno": [
        "Returns the error number from previous operation",
        "fbsql_errno ( resource $link_identifier = ? ) : int"
    ],
    "fbsql_error": [
        "Returns the error message from previous operation",
        "fbsql_error ( resource $link_identifier = ? ) : string"
    ],
    "fbsql_fetch_array": [
        "Fetch a result row as an associative array, a numeric array, or both",
        "fbsql_fetch_array ( resource $result , int $result_type = ? ) : array"
    ],
    "fbsql_fetch_assoc": [
        "Fetch a result row as an associative array",
        "fbsql_fetch_assoc ( resource $result ) : array"
    ],
    "fbsql_fetch_field": [
        "Get column information from a result and return as an object",
        "fbsql_fetch_field ( resource $result , int $field_offset = ? ) : object"
    ],
    "fbsql_fetch_lengths": [
        "Get the length of each output in a result",
        "fbsql_fetch_lengths ( resource $result ) : array"
    ],
    "fbsql_fetch_object": [
        "Fetch a result row as an object",
        "fbsql_fetch_object ( resource $result ) : object"
    ],
    "fbsql_fetch_row": [
        "Get a result row as an enumerated array",
        "fbsql_fetch_row ( resource $result ) : array"
    ],
    "fbsql_field_flags": [
        "Get the flags associated with the specified field in a result",
        "fbsql_field_flags ( resource $result , int $field_offset = ? ) : string"
    ],
    "fbsql_field_len": [
        "Returns the length of the specified field",
        "fbsql_field_len ( resource $result , int $field_offset = ? ) : int"
    ],
    "fbsql_field_name": [
        "Get the name of the specified field in a result",
        "fbsql_field_name ( resource $result , int $field_index = ? ) : string"
    ],
    "fbsql_field_seek": [
        "Set result pointer to a specified field offset",
        "fbsql_field_seek ( resource $result , int $field_offset = ? ) : bool"
    ],
    "fbsql_field_table": [
        "Get name of the table the specified field is in",
        "fbsql_field_table ( resource $result , int $field_offset = ? ) : string"
    ],
    "fbsql_field_type": [
        "Get the type of the specified field in a result",
        "fbsql_field_type ( resource $result , int $field_offset = ? ) : string"
    ],
    "fbsql_free_result": [
        "Free result memory",
        "fbsql_free_result ( resource $result ) : bool"
    ],
    "fbsql_get_autostart_info": [
        "<not documented>",
        "fbsql_get_autostart_info ( resource $link_identifier = ? ) : array"
    ],
    "fbsql_hostname": [
        "Get or set the host name used with a connection",
        "fbsql_hostname ( resource $link_identifier , string $host_name = ? ) : string"
    ],
    "fbsql_insert_id": [
        "Get the id generated from the previous INSERT operation",
        "fbsql_insert_id ( resource $link_identifier = ? ) : int"
    ],
    "fbsql_list_dbs": [
        "List databases available on a FrontBase server",
        "fbsql_list_dbs ( resource $link_identifier = ? ) : resource"
    ],
    "fbsql_list_fields": [
        "List FrontBase result fields",
        "fbsql_list_fields ( string $database_name , string $table_name , resource $link_identifier = ? ) : resource"
    ],
    "fbsql_list_tables": [
        "List tables in a FrontBase database",
        "fbsql_list_tables ( string $database , resource $link_identifier = ? ) : resource"
    ],
    "fbsql_next_result": [
        "Move the internal result pointer to the next result",
        "fbsql_next_result ( resource $result ) : bool"
    ],
    "fbsql_num_fields": [
        "Get number of fields in result",
        "fbsql_num_fields ( resource $result ) : int"
    ],
    "fbsql_num_rows": [
        "Get number of rows in result",
        "fbsql_num_rows ( resource $result ) : int"
    ],
    "fbsql_password": [
        "Get or set the user password used with a connection",
        "fbsql_password ( resource $link_identifier , string $password = ? ) : string"
    ],
    "fbsql_pconnect": [
        "Open a persistent connection to a FrontBase Server",
        "fbsql_pconnect ( string $hostname = ini_get(\"fbsql.default_host\") , string $username = ini_get(\"fbsql.default_user\") , string $password = ini_get(\"fbsql.default_password\") ) : resource"
    ],
    "fbsql_query": [
        "Send a FrontBase query",
        "fbsql_query ( string $query , resource $link_identifier = ? , int $batch_size = ? ) : resource"
    ],
    "fbsql_read_blob": [
        "Read a BLOB from the database",
        "fbsql_read_blob ( string $blob_handle , resource $link_identifier = ? ) : string"
    ],
    "fbsql_read_clob": [
        "Read a CLOB from the database",
        "fbsql_read_clob ( string $clob_handle , resource $link_identifier = ? ) : string"
    ],
    "fbsql_result": [
        "Get result data",
        "fbsql_result ( resource $result , int $row = ? , mixed $field = ? ) : mixed"
    ],
    "fbsql_rollback": [
        "Rollback a transaction to the database",
        "fbsql_rollback ( resource $link_identifier = ? ) : bool"
    ],
    "fbsql_rows_fetched": [
        "Get the number of rows affected by the last statement",
        "fbsql_rows_fetched ( resource $result ) : int"
    ],
    "fbsql_select_db": [
        "Select a FrontBase database",
        "fbsql_select_db ( string $database_name = ? , resource $link_identifier = ? ) : bool"
    ],
    "fbsql_set_characterset": [
        "Change input\/output character set",
        "fbsql_set_characterset ( resource $link_identifier , int $characterset , int $in_out_both = ? ) : void"
    ],
    "fbsql_set_lob_mode": [
        "Set the LOB retrieve mode for a FrontBase result set",
        "fbsql_set_lob_mode ( resource $result , int $lob_mode ) : bool"
    ],
    "fbsql_set_password": [
        "Change the password for a given user",
        "fbsql_set_password ( resource $link_identifier , string $user , string $password , string $old_password ) : bool"
    ],
    "fbsql_set_transaction": [
        "Set the transaction locking and isolation",
        "fbsql_set_transaction ( resource $link_identifier , int $locking , int $isolation ) : void"
    ],
    "fbsql_start_db": [
        "Start a database on local or remote server",
        "fbsql_start_db ( string $database_name , resource $link_identifier = ? , string $database_options = ? ) : bool"
    ],
    "fbsql_stop_db": [
        "Stop a database on local or remote server",
        "fbsql_stop_db ( string $database_name , resource $link_identifier = ? ) : bool"
    ],
    "fbsql_table_name": [
        "Get table name of field",
        "fbsql_table_name ( resource $result , int $index ) : string"
    ],
    "fbsql_username": [
        "Get or set the username for the connection",
        "fbsql_username ( resource $link_identifier , string $username = ? ) : string"
    ],
    "fbsql_warnings": [
        "Enable or disable FrontBase warnings",
        "fbsql_warnings ( bool $OnOff = ? ) : bool"
    ],
    "fclose": [
        "Closes an open file pointer",
        "fclose ( resource $stream ) : bool"
    ],
    "fdf_add_doc_javascript": [
        "Adds javascript code to the FDF document",
        "fdf_add_doc_javascript ( resource $fdf_document , string $script_name , string $script_code ) : bool"
    ],
    "fdf_add_template": [
        "Adds a template into the FDF document",
        "fdf_add_template ( resource $fdf_document , int $newpage , string $filename , string $template , int $rename ) : bool"
    ],
    "fdf_close": [
        "Close an FDF document",
        "fdf_close ( resource $fdf_document ) : void"
    ],
    "fdf_create": [
        "Create a new FDF document",
        "fdf_create ( ) : resource"
    ],
    "fdf_enum_values": [
        "Call a user defined function for each document value",
        "fdf_enum_values ( resource $fdf_document , callable $function , mixed $userdata = ? ) : bool"
    ],
    "fdf_errno": [
        "Return error code for last fdf operation",
        "fdf_errno ( ) : int"
    ],
    "fdf_error": [
        "Return error description for FDF error code",
        "fdf_error ( int $error_code = -1 ) : string"
    ],
    "fdf_get_ap": [
        "Get the appearance of a field",
        "fdf_get_ap ( resource $fdf_document , string $field , int $face , string $filename ) : bool"
    ],
    "fdf_get_attachment": [
        "Extracts uploaded file embedded in the FDF",
        "fdf_get_attachment ( resource $fdf_document , string $fieldname , string $savepath ) : array"
    ],
    "fdf_get_encoding": [
        "Get the value of the \/Encoding key",
        "fdf_get_encoding ( resource $fdf_document ) : string"
    ],
    "fdf_get_file": [
        "Get the value of the \/F key",
        "fdf_get_file ( resource $fdf_document ) : string"
    ],
    "fdf_get_flags": [
        "Gets the flags of a field",
        "fdf_get_flags ( resource $fdf_document , string $fieldname , int $whichflags ) : int"
    ],
    "fdf_get_opt": [
        "Gets a value from the opt array of a field",
        "fdf_get_opt ( resource $fdf_document , string $fieldname , int $element = -1 ) : mixed"
    ],
    "fdf_get_status": [
        "Get the value of the \/STATUS key",
        "fdf_get_status ( resource $fdf_document ) : string"
    ],
    "fdf_get_value": [
        "Get the value of a field",
        "fdf_get_value ( resource $fdf_document , string $fieldname , int $which = -1 ) : mixed"
    ],
    "fdf_get_version": [
        "Gets version number for FDF API or file",
        "fdf_get_version ( resource $fdf_document = ? ) : string"
    ],
    "fdf_header": [
        "Sets FDF-specific output headers",
        "fdf_header ( ) : void"
    ],
    "fdf_next_field_name": [
        "Get the next field name",
        "fdf_next_field_name ( resource $fdf_document , string $fieldname = ? ) : string"
    ],
    "fdf_open": [
        "Open a FDF document",
        "fdf_open ( string $filename ) : resource"
    ],
    "fdf_open_string": [
        "Read a FDF document from a string",
        "fdf_open_string ( string $fdf_data ) : resource"
    ],
    "fdf_remove_item": [
        "Sets target frame for form",
        "fdf_remove_item ( resource $fdf_document , string $fieldname , int $item ) : bool"
    ],
    "fdf_save": [
        "Save a FDF document",
        "fdf_save ( resource $fdf_document , string $filename = ? ) : bool"
    ],
    "fdf_save_string": [
        "Returns the FDF document as a string",
        "fdf_save_string ( resource $fdf_document ) : string"
    ],
    "fdf_set_ap": [
        "Set the appearance of a field",
        "fdf_set_ap ( resource $fdf_document , string $field_name , int $face , string $filename , int $page_number ) : bool"
    ],
    "fdf_set_encoding": [
        "Sets FDF character encoding",
        "fdf_set_encoding ( resource $fdf_document , string $encoding ) : bool"
    ],
    "fdf_set_file": [
        "Set PDF document to display FDF data in",
        "fdf_set_file ( resource $fdf_document , string $url , string $target_frame = ? ) : bool"
    ],
    "fdf_set_flags": [
        "Sets a flag of a field",
        "fdf_set_flags ( resource $fdf_document , string $fieldname , int $whichFlags , int $newFlags ) : bool"
    ],
    "fdf_set_javascript_action": [
        "Sets an javascript action of a field",
        "fdf_set_javascript_action ( resource $fdf_document , string $fieldname , int $trigger , string $script ) : bool"
    ],
    "fdf_set_on_import_javascript": [
        "Adds javascript code to be executed when Acrobat opens the FDF",
        "fdf_set_on_import_javascript ( resource $fdf_document , string $script , bool $before_data_import ) : bool"
    ],
    "fdf_set_opt": [
        "Sets an option of a field",
        "fdf_set_opt ( resource $fdf_document , string $fieldname , int $element , string $str1 , string $str2 ) : bool"
    ],
    "fdf_set_status": [
        "Set the value of the \/STATUS key",
        "fdf_set_status ( resource $fdf_document , string $status ) : bool"
    ],
    "fdf_set_submit_form_action": [
        "Sets a submit form action of a field",
        "fdf_set_submit_form_action ( resource $fdf_document , string $fieldname , int $trigger , string $script , int $flags ) : bool"
    ],
    "fdf_set_target_frame": [
        "Set target frame for form display",
        "fdf_set_target_frame ( resource $fdf_document , string $frame_name ) : bool"
    ],
    "fdf_set_value": [
        "Set the value of a field",
        "fdf_set_value ( resource $fdf_document , string $fieldname , mixed $value , int $isName = ? ) : bool"
    ],
    "fdf_set_version": [
        "Sets version number for a FDF file",
        "fdf_set_version ( resource $fdf_document , string $version ) : bool"
    ],
    "fdiv": [
        "Divides two numbers, according to IEEE 754",
        "fdiv ( float $num1 , float $num2 ) : float"
    ],
    "feof": [
        "Tests for end-of-file on a file pointer",
        "feof ( resource $stream ) : bool"
    ],
    "FFI": [
        "Objects of this class are created by the factory methods FFI::cdef(), FFI::load() or FFI::scope(). Defined C variables are made available as properties of the FFI instance, and defined C functions are made available as methods of the FFI instance. Declared C types can be used to create new C data structures using FFI::new() and FFI::type()."
    ],
    "fflush": [
        "Flushes the output to a file",
        "fflush ( resource $stream ) : bool"
    ],
    "fgetc": [
        "Gets character from file pointer",
        "fgetc ( resource $stream ) : string|false"
    ],
    "fgetcsv": [
        "Gets line from file pointer and parse for CSV fields",
        "fgetcsv ( resource $handle , int $length = 0 , string $delimiter = \",\" , string $enclosure = '\"' , string $escape = \"\\\\\" ) : array"
    ],
    "fgets": [
        "Gets line from file pointer",
        "fgets ( resource $handle , int $length = ? ) : string|false"
    ],
    "fgetss": [
        "Gets line from file pointer and strip HTML tags",
        "fgetss ( resource $handle , int $length = ? , string $allowable_tags = ? ) : string"
    ],
    "file": [
        "Reads entire file into an array",
        "file ( string $filename , int $flags = 0 , resource $context = ? ) : array"
    ],
    "file_exists": [
        "Checks whether a file or directory exists",
        "file_exists ( string $filename ) : bool"
    ],
    "file_get_contents": [
        "Reads entire file into a string",
        "file_get_contents ( string $filename , bool $use_include_path = false , resource $context = ? , int $offset = 0 , int $maxlen = ? ) : string|false"
    ],
    "file_put_contents": [
        "Write data to a file",
        "file_put_contents ( string $filename , mixed $data , int $flags = 0 , resource $context = ? ) : int"
    ],
    "fileatime": [
        "Gets last access time of file",
        "fileatime ( string $filename ) : int|false"
    ],
    "filectime": [
        "Gets inode change time of file",
        "filectime ( string $filename ) : int|false"
    ],
    "filegroup": [
        "Gets file group",
        "filegroup ( string $filename ) : int|false"
    ],
    "fileinode": [
        "Gets file inode",
        "fileinode ( string $filename ) : int|false"
    ],
    "filemtime": [
        "Gets file modification time",
        "filemtime ( string $filename ) : int|false"
    ],
    "fileowner": [
        "Gets file owner",
        "fileowner ( string $filename ) : int|false"
    ],
    "fileperms": [
        "Gets file permissions",
        "fileperms ( string $filename ) : int|false"
    ],
    "filepro": [
        "Read and verify the map file",
        "filepro ( string $directory ) : bool"
    ],
    "filepro_fieldcount": [
        "Find out how many fields are in a filePro database",
        "filepro_fieldcount ( ) : int"
    ],
    "filepro_fieldname": [
        "Gets the name of a field",
        "filepro_fieldname ( int $field_number ) : string"
    ],
    "filepro_fieldtype": [
        "Gets the type of a field",
        "filepro_fieldtype ( int $field_number ) : string"
    ],
    "filepro_fieldwidth": [
        "Gets the width of a field",
        "filepro_fieldwidth ( int $field_number ) : int"
    ],
    "filepro_retrieve": [
        "Retrieves data from a filePro database",
        "filepro_retrieve ( int $row_number , int $field_number ) : string"
    ],
    "filepro_rowcount": [
        "Find out how many rows are in a filePro database",
        "filepro_rowcount ( ) : int"
    ],
    "filesize": [
        "Gets file size",
        "filesize ( string $filename ) : int|false"
    ],
    "FilesystemIterator": [
        "The Filesystem iterator",
        "new FilesystemIterator ( string $path , int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS )"
    ],
    "filetype": [
        "Gets file type",
        "filetype ( string $filename ) : string|false"
    ],
    "filter_has_var": [
        "Checks if variable of specified type exists",
        "filter_has_var ( int $input_type , string $var_name ) : bool"
    ],
    "filter_id": [
        "Returns the filter ID belonging to a named filter",
        "filter_id ( string $name ) : int|false"
    ],
    "filter_input": [
        "Gets a specific external variable by name and optionally filters it",
        "filter_input ( int $type , string $var_name , int $filter = FILTER_DEFAULT , array|int $options = 0 ) : mixed"
    ],
    "filter_input_array": [
        "Gets external variables and optionally filters them",
        "filter_input_array ( int $type , array|int $options = FILTER_DEFAULT , bool $add_empty = true ) : array|false|null"
    ],
    "filter_list": [
        "Returns a list of all supported filters",
        "filter_list ( ) : array"
    ],
    "filter_var": [
        "Filters a variable with a specified filter",
        "filter_var ( mixed $value , int $filter = FILTER_DEFAULT , array|int $options = 0 ) : mixed"
    ],
    "filter_var_array": [
        "Gets multiple variables and optionally filters them",
        "filter_var_array ( array $array , array|int $options = FILTER_DEFAULT , bool $add_empty = true ) : array|false|null"
    ],
    "FilterIterator": [
        "This abstract iterator filters out unwanted values. This class should be extended to implement custom iterator filters. The FilterIterator::accept() must be implemented in the subclass.",
        "new FilterIterator ( Iterator $iterator )"
    ],
    "finfo": [
        "This class provides an object oriented interface into the fileinfo functions.",
        "new finfo ( int $flags = FILEINFO_NONE , string $magic_database = \"\" )"
    ],
    "finfo_buffer": [
        "Return information about a string buffer",
        "finfo_buffer ( resource $finfo , string $string , int $flags = FILEINFO_NONE , resource|null $context = null ) : string|false"
    ],
    "finfo_close": [
        "Close fileinfo resource",
        "finfo_close ( resource $finfo ) : bool"
    ],
    "finfo_file": [
        "Return information about a file",
        "finfo_file ( resource $finfo , string $filename , int $flags = FILEINFO_NONE , resource|null $context = null ) : string|false"
    ],
    "finfo_open": [
        "Create a new fileinfo resource",
        "finfo_open ( int $flags = FILEINFO_NONE , string $magic_database = \"\" ) : resource|false"
    ],
    "finfo_set_flags": [
        "Set libmagic configuration options",
        "finfo_set_flags ( resource $finfo , int $flags ) : bool"
    ],
    "floatval": [
        "Get float value of a variable",
        "floatval ( mixed $value ) : float"
    ],
    "flock": [
        "Portable advisory file locking",
        "flock ( resource $stream , int $operation , int &$would_block = null ) : bool"
    ],
    "floor": [
        "Round fractions down",
        "floor ( float $value ) : float"
    ],
    "flush": [
        "Flush system output buffer",
        "flush ( ) : void"
    ],
    "fmod": [
        "Returns the floating point remainder (modulo) of the division\n  of the arguments",
        "fmod ( float $num1 , float $num2 ) : float"
    ],
    "fnmatch": [
        "Match filename against a pattern",
        "fnmatch ( string $pattern , string $filename , int $flags = 0 ) : bool"
    ],
    "fopen": [
        "Opens file or URL",
        "fopen ( string $filename , string $mode , bool $use_include_path = false , resource $context = ? ) : resource"
    ],
    "forward_static_call": [
        "Call a static method",
        "forward_static_call ( callable $callback , mixed ...$args ) : mixed"
    ],
    "forward_static_call_array": [
        "Call a static method and pass the arguments as array",
        "forward_static_call_array ( callable $callback , array $args ) : mixed"
    ],
    "fpassthru": [
        "Output all remaining data on a file pointer",
        "fpassthru ( resource $stream ) : int"
    ],
    "fprintf": [
        "Write a formatted string to a stream",
        "fprintf ( resource $stream , string $format , mixed ...$values ) : int"
    ],
    "fputcsv": [
        "Format line as CSV and write to file pointer",
        "fputcsv ( resource $handle , array $fields , string $delimiter = \",\" , string $enclosure = '\"' , string $escape_char = \"\\\\\" ) : int|false"
    ],
    "fread": [
        "Binary-safe file read",
        "fread ( resource $stream , int $length ) : string|false"
    ],
    "frenchtojd": [
        "Converts a date from the French Republican Calendar to a Julian Day Count",
        "frenchtojd ( int $month , int $day , int $year ) : int"
    ],
    "fscanf": [
        "Parses input from a file according to a format",
        "fscanf ( resource $stream , string $format , mixed &...$vars ) : array|int|false|null"
    ],
    "fseek": [
        "Seeks on a file pointer",
        "fseek ( resource $stream , int $offset , int $whence = SEEK_SET ) : int"
    ],
    "fsockopen": [
        "Open Internet or Unix domain socket connection",
        "fsockopen ( string $hostname , int $port = -1 , int &$error_code = null , string &$error_message = null , float|null $timeout = null ) : resource|false"
    ],
    "fstat": [
        "Gets information about a file using an open file pointer",
        "fstat ( resource $stream ) : array|false"
    ],
    "ftell": [
        "Returns the current position of the file read\/write pointer",
        "ftell ( resource $stream ) : int|false"
    ],
    "ftok": [
        "Convert a pathname and a project identifier to a System V IPC key",
        "ftok ( string $filename , string $project_id ) : int"
    ],
    "ftp_alloc": [
        "Allocates space for a file to be uploaded",
        "ftp_alloc ( resource $ftp , int $size , string &$response = null ) : bool"
    ],
    "ftp_append": [
        "Append the contents of a file to another file on the FTP server",
        "ftp_append ( resource $ftp , string $remote_filename , string $local_filename , int $mode = FTP_BINARY ) : bool"
    ],
    "ftp_cdup": [
        "Changes to the parent directory",
        "ftp_cdup ( resource $ftp ) : bool"
    ],
    "ftp_chdir": [
        "Changes the current directory on a FTP server",
        "ftp_chdir ( resource $ftp , string $directory ) : bool"
    ],
    "ftp_chmod": [
        "Set permissions on a file via FTP",
        "ftp_chmod ( resource $ftp , int $permissions , string $filename ) : int|false"
    ],
    "ftp_close": [
        "Closes an FTP connection",
        "ftp_close ( resource $ftp ) : bool"
    ],
    "ftp_connect": [
        "Opens an FTP connection",
        "ftp_connect ( string $hostname , int $port = 21 , int $timeout = 90 ) : resource|false"
    ],
    "ftp_delete": [
        "Deletes a file on the FTP server",
        "ftp_delete ( resource $ftp , string $filename ) : bool"
    ],
    "ftp_exec": [
        "Requests execution of a command on the FTP server",
        "ftp_exec ( resource $ftp , string $command ) : bool"
    ],
    "ftp_fget": [
        "Downloads a file from the FTP server and saves to an open file",
        "ftp_fget ( resource $ftp , resource $stream , string $remote_filename , int $mode = FTP_BINARY , int $offset = 0 ) : bool"
    ],
    "ftp_fput": [
        "Uploads from an open file to the FTP server",
        "ftp_fput ( resource $ftp , string $remote_filename , resource $stream , int $mode = FTP_BINARY , int $offset = 0 ) : bool"
    ],
    "ftp_get": [
        "Downloads a file from the FTP server",
        "ftp_get ( resource $ftp , string $local_filename , string $remote_filename , int $mode = FTP_BINARY , int $offset = 0 ) : bool"
    ],
    "ftp_get_option": [
        "Retrieves various runtime behaviours of the current FTP stream",
        "ftp_get_option ( resource $ftp , int $option ) : int|bool"
    ],
    "ftp_login": [
        "Logs in to an FTP connection",
        "ftp_login ( resource $ftp , string $username , string $password ) : bool"
    ],
    "ftp_mdtm": [
        "Returns the last modified time of the given file",
        "ftp_mdtm ( resource $ftp , string $filename ) : int"
    ],
    "ftp_mkdir": [
        "Creates a directory",
        "ftp_mkdir ( resource $ftp , string $directory ) : string|false"
    ],
    "ftp_mlsd": [
        "Returns a list of files in the given directory",
        "ftp_mlsd ( resource $ftp , string $directory ) : array|false"
    ],
    "ftp_nb_continue": [
        "Continues retrieving\/sending a file (non-blocking)",
        "ftp_nb_continue ( resource $ftp ) : int"
    ],
    "ftp_nb_fget": [
        "Retrieves a file from the FTP server and writes it to an open file (non-blocking)",
        "ftp_nb_fget ( resource $ftp , resource $stream , string $remote_filename , int $mode = FTP_BINARY , int $offset = 0 ) : int"
    ],
    "ftp_nb_fput": [
        "Stores a file from an open file to the FTP server (non-blocking)",
        "ftp_nb_fput ( resource $ftp , string $remote_filename , resource $stream , int $mode = FTP_BINARY , int $offset = 0 ) : int"
    ],
    "ftp_nb_get": [
        "Retrieves a file from the FTP server and writes it to a local file (non-blocking)",
        "ftp_nb_get ( resource $ftp , string $local_filename , string $remote_filename , int $mode = FTP_BINARY , int $offset = 0 ) : int"
    ],
    "ftp_nb_put": [
        "Stores a file on the FTP server (non-blocking)",
        "ftp_nb_put ( resource $ftp , string $remote_filename , string $local_filename , int $mode = FTP_BINARY , int $offset = 0 ) : int|false"
    ],
    "ftp_nlist": [
        "Returns a list of files in the given directory",
        "ftp_nlist ( resource $ftp , string $directory ) : array|false"
    ],
    "ftp_pasv": [
        "Turns passive mode on or off",
        "ftp_pasv ( resource $ftp , bool $enable ) : bool"
    ],
    "ftp_put": [
        "Uploads a file to the FTP server",
        "ftp_put ( resource $ftp , string $remote_filename , string $local_filename , int $mode = FTP_BINARY , int $offset = 0 ) : bool"
    ],
    "ftp_pwd": [
        "Returns the current directory name",
        "ftp_pwd ( resource $ftp ) : string|false"
    ],
    "ftp_raw": [
        "Sends an arbitrary command to an FTP server",
        "ftp_raw ( resource $ftp , string $command ) : array"
    ],
    "ftp_rawlist": [
        "Returns a detailed list of files in the given directory",
        "ftp_rawlist ( resource $ftp , string $directory , bool $recursive = false ) : array|false"
    ],
    "ftp_rename": [
        "Renames a file or a directory on the FTP server",
        "ftp_rename ( resource $ftp , string $from , string $to ) : bool"
    ],
    "ftp_rmdir": [
        "Removes a directory",
        "ftp_rmdir ( resource $ftp , string $directory ) : bool"
    ],
    "ftp_set_option": [
        "Set miscellaneous runtime FTP options",
        "ftp_set_option ( resource $ftp , int $option , int|bool $value ) : bool"
    ],
    "ftp_site": [
        "Sends a SITE command to the server",
        "ftp_site ( resource $ftp , string $command ) : bool"
    ],
    "ftp_size": [
        "Returns the size of the given file",
        "ftp_size ( resource $ftp , string $filename ) : int"
    ],
    "ftp_ssl_connect": [
        "Opens a Secure SSL-FTP connection",
        "ftp_ssl_connect ( string $hostname , int $port = 21 , int $timeout = 90 ) : resource|false"
    ],
    "ftp_systype": [
        "Returns the system type identifier of the remote FTP server",
        "ftp_systype ( resource $ftp ) : string|false"
    ],
    "ftruncate": [
        "Truncates a file to a given length",
        "ftruncate ( resource $stream , int $size ) : bool"
    ],
    "func_get_arg": [
        "Return an item from the argument list",
        "func_get_arg ( int $arg_num ) : mixed"
    ],
    "func_get_args": [
        "Returns an array comprising a function's argument list",
        "func_get_args ( ) : array"
    ],
    "func_num_args": [
        "Returns the number of arguments passed to the function",
        "func_num_args ( ) : int"
    ],
    "function_exists": [
        "Return true if the given function has been defined",
        "function_exists ( string $function_name ) : bool"
    ],
    "fwrite": [
        "Binary-safe file write",
        "fwrite ( resource $handle , string $string , int $length = ? ) : int"
    ],
    "gc_collect_cycles": [
        "Forces collection of any existing garbage cycles",
        "gc_collect_cycles ( ) : int"
    ],
    "gc_disable": [
        "Deactivates the circular reference collector",
        "gc_disable ( ) : void"
    ],
    "gc_enable": [
        "Activates the circular reference collector",
        "gc_enable ( ) : void"
    ],
    "gc_enabled": [
        "Returns status of the circular reference collector",
        "gc_enabled ( ) : bool"
    ],
    "gc_mem_caches": [
        "Reclaims memory used by the Zend Engine memory manager",
        "gc_mem_caches ( ) : int"
    ],
    "gc_status": [
        "Gets information about the garbage collector",
        "gc_status ( ) : array"
    ],
    "gd_info": [
        "Retrieve information about the currently installed GD library",
        "gd_info ( ) : array"
    ],
    "GdImage": [
        "A fully opaque class which replaces gd resources as of PHP 8.0.0."
    ],
    "GearmanClient": [
        "Represents a class for connecting to a Gearman job server and making requests to perform some function on provided data. The function performed must be one registered by a Gearman worker and the data passed is opaque to the job server.",
        "new GearmanClient ( )"
    ],
    "GearmanJob": [
        "Create a GearmanJob instance",
        "new GearmanJob ( )"
    ],
    "GearmanTask": [
        "Create a GearmanTask instance",
        "new GearmanTask ( )"
    ],
    "GearmanWorker": [
        "Create a GearmanWorker instance",
        "new GearmanWorker ( )"
    ],
    "Generator": [
        "Generator objects are returned from generators."
    ],
    "geoip_asnum_by_name": [
        "Get the Autonomous System Numbers (ASN)",
        "geoip_asnum_by_name ( string $hostname ) : string"
    ],
    "geoip_continent_code_by_name": [
        "Get the two letter continent code",
        "geoip_continent_code_by_name ( string $hostname ) : string"
    ],
    "geoip_country_code3_by_name": [
        "Get the three letter country code",
        "geoip_country_code3_by_name ( string $hostname ) : string"
    ],
    "geoip_country_code_by_name": [
        "Get the two letter country code",
        "geoip_country_code_by_name ( string $hostname ) : string"
    ],
    "geoip_country_name_by_name": [
        "Get the full country name",
        "geoip_country_name_by_name ( string $hostname ) : string"
    ],
    "geoip_database_info": [
        "Get GeoIP Database information",
        "geoip_database_info ( int $database = GEOIP_COUNTRY_EDITION ) : string"
    ],
    "geoip_db_avail": [
        "Determine if GeoIP Database is available",
        "geoip_db_avail ( int $database ) : bool"
    ],
    "geoip_db_filename": [
        "Returns the filename of the corresponding GeoIP Database",
        "geoip_db_filename ( int $database ) : string"
    ],
    "geoip_db_get_all_info": [
        "Returns detailed information about all GeoIP database types",
        "geoip_db_get_all_info ( ) : array"
    ],
    "geoip_domain_by_name": [
        "Get the second level domain name",
        "geoip_domain_by_name ( string $hostname ) : string"
    ],
    "geoip_id_by_name": [
        "Get the Internet connection type",
        "geoip_id_by_name ( string $hostname ) : int"
    ],
    "geoip_isp_by_name": [
        "Get the Internet Service Provider (ISP) name",
        "geoip_isp_by_name ( string $hostname ) : string"
    ],
    "geoip_netspeedcell_by_name": [
        "Get the Internet connection speed",
        "geoip_netspeedcell_by_name ( string $hostname ) : string"
    ],
    "geoip_org_by_name": [
        "Get the organization name",
        "geoip_org_by_name ( string $hostname ) : string"
    ],
    "geoip_record_by_name": [
        "Returns the detailed City information found in the GeoIP Database",
        "geoip_record_by_name ( string $hostname ) : array"
    ],
    "geoip_region_by_name": [
        "Get the country code and region",
        "geoip_region_by_name ( string $hostname ) : array"
    ],
    "geoip_region_name_by_code": [
        "Returns the region name for some country and region code combo",
        "geoip_region_name_by_code ( string $country_code , string $region_code ) : string"
    ],
    "geoip_setup_custom_directory": [
        "Set a custom directory for the GeoIP database",
        "geoip_setup_custom_directory ( string $path ) : void"
    ],
    "geoip_time_zone_by_country_and_region": [
        "Returns the time zone for some country and region code combo",
        "geoip_time_zone_by_country_and_region ( string $country_code , string $region_code = ? ) : string"
    ],
    "get_browser": [
        "Tells what the user's browser is capable of",
        "get_browser ( string $user_agent = ? , bool $return_array = false ) : mixed"
    ],
    "get_called_class": [
        "The \"Late Static Binding\" class name",
        "get_called_class ( ) : string"
    ],
    "get_cfg_var": [
        "Gets the value of a PHP configuration option",
        "get_cfg_var ( string $option ) : string|array|false"
    ],
    "get_class": [
        "Returns the name of the class of an object",
        "get_class ( object $object = ? ) : string"
    ],
    "get_class_methods": [
        "Gets the class methods' names",
        "get_class_methods ( mixed $class_name ) : array"
    ],
    "get_class_vars": [
        "Get the default properties of the class",
        "get_class_vars ( string $class_name ) : array"
    ],
    "get_current_user": [
        "Gets the name of the owner of the current PHP script",
        "get_current_user ( ) : string"
    ],
    "get_declared_classes": [
        "Returns an array with the name of the defined classes",
        "get_declared_classes ( ) : array"
    ],
    "get_declared_interfaces": [
        "Returns an array of all declared interfaces",
        "get_declared_interfaces ( ) : array"
    ],
    "get_declared_traits": [
        "Returns an array of all declared traits",
        "get_declared_traits ( ) : array"
    ],
    "get_defined_constants": [
        "Returns an associative array with the names of all the constants and their values",
        "get_defined_constants ( bool $categorize = false ) : array"
    ],
    "get_defined_functions": [
        "Returns an array of all defined functions",
        "get_defined_functions ( bool $exclude_disabled = false ) : array"
    ],
    "get_defined_vars": [
        "Returns an array of all defined variables",
        "get_defined_vars ( ) : array"
    ],
    "get_extension_funcs": [
        "Returns an array with the names of the functions of a module",
        "get_extension_funcs ( string $module_name ) : array"
    ],
    "get_headers": [
        "Fetches all the headers sent by the server in response to an HTTP request",
        "get_headers ( string $url , int $format = 0 , resource $context = ? ) : array"
    ],
    "get_html_translation_table": [
        "Returns the translation table used by htmlspecialchars() and htmlentities()",
        "get_html_translation_table ( int $table = HTML_SPECIALCHARS , int $flags = ENT_COMPAT , string $encoding = \"UTF-8\" ) : array"
    ],
    "get_include_path": [
        "Gets the current include_path configuration option",
        "get_include_path ( ) : string|false"
    ],
    "get_included_files": [
        "Returns an array with the names of included or required files",
        "get_included_files ( ) : array"
    ],
    "get_loaded_extensions": [
        "Returns an array with the names of all modules compiled and loaded",
        "get_loaded_extensions ( bool $zend_extensions = false ) : array"
    ],
    "get_magic_quotes_gpc": [
        "Gets the current configuration setting of magic_quotes_gpc",
        "get_magic_quotes_gpc ( ) : bool"
    ],
    "get_magic_quotes_runtime": [
        "Gets the current active configuration setting of magic_quotes_runtime",
        "get_magic_quotes_runtime ( ) : bool"
    ],
    "get_meta_tags": [
        "Extracts all meta tag content attributes from a file and returns an array",
        "get_meta_tags ( string $filename , bool $use_include_path = false ) : array|false"
    ],
    "get_object_vars": [
        "Gets the properties of the given object",
        "get_object_vars ( object $object ) : array"
    ],
    "get_parent_class": [
        "Retrieves the parent class name for object or class",
        "get_parent_class ( mixed $object = ? ) : string"
    ],
    "get_resource_id": [
        "Returns an integer identifier for the given resource",
        "get_resource_id ( resource $res ) : int"
    ],
    "get_resource_type": [
        "Returns the resource type",
        "get_resource_type ( resource $handle ) : string"
    ],
    "get_resources": [
        "Returns active resources",
        "get_resources ( string $type = ? ) : array"
    ],
    "getallheaders": [
        "Fetch all HTTP request headers",
        "getallheaders ( ) : array"
    ],
    "getcwd": [
        "Gets the current working directory",
        "getcwd ( ) : string|false"
    ],
    "getdate": [
        "Get date\/time information",
        "getdate ( int|null $timestamp = null ) : array"
    ],
    "getenv": [
        "Gets the value of an environment variable",
        "getenv ( string $varname , bool $local_only = false ) : string|false",
        "getenv ( ) : array"
    ],
    "gethostbyaddr": [
        "Get the Internet host name corresponding to a given IP address",
        "gethostbyaddr ( string $ip ) : string|false"
    ],
    "gethostbyname": [
        "Get the IPv4 address corresponding to a given Internet host name",
        "gethostbyname ( string $hostname ) : string"
    ],
    "gethostbynamel": [
        "Get a list of IPv4 addresses corresponding to a given Internet host\n   name",
        "gethostbynamel ( string $hostname ) : array|false"
    ],
    "gethostname": [
        "Gets the host name",
        "gethostname ( ) : string|false"
    ],
    "getimagesize": [
        "Get the size of an image",
        "getimagesize ( string $filename , array &$image_info = null ) : array|false"
    ],
    "getimagesizefromstring": [
        "Get the size of an image from a string",
        "getimagesizefromstring ( string $string , array &$image_info = null ) : array|false"
    ],
    "getlastmod": [
        "Gets time of last page modification",
        "getlastmod ( ) : int|false"
    ],
    "getmxrr": [
        "Get MX records corresponding to a given Internet host name",
        "getmxrr ( string $hostname , array &$hosts , array &$weights = null ) : bool"
    ],
    "getmygid": [
        "Get PHP script owner's GID",
        "getmygid ( ) : int|false"
    ],
    "getmyinode": [
        "Gets the inode of the current script",
        "getmyinode ( ) : int|false"
    ],
    "getmypid": [
        "Gets PHP's process ID",
        "getmypid ( ) : int|false"
    ],
    "getmyuid": [
        "Gets PHP script owner's UID",
        "getmyuid ( ) : int|false"
    ],
    "getopt": [
        "Gets options from the command line argument list",
        "getopt ( string $short_options , array $long_options = [] , int &$rest_index = null ) : array|false"
    ],
    "getprotobyname": [
        "Get protocol number associated with protocol name",
        "getprotobyname ( string $protocol ) : int|false"
    ],
    "getprotobynumber": [
        "Get protocol name associated with protocol number",
        "getprotobynumber ( int $protocol ) : string|false"
    ],
    "getrandmax": [
        "Show largest possible random value",
        "getrandmax ( ) : int"
    ],
    "getrusage": [
        "Gets the current resource usages",
        "getrusage ( int $mode = 0 ) : array|false"
    ],
    "getservbyname": [
        "Get port number associated with an Internet service and protocol",
        "getservbyname ( string $service , string $protocol ) : int|false"
    ],
    "getservbyport": [
        "Get Internet service which corresponds to port and protocol",
        "getservbyport ( int $port , string $protocol ) : string|false"
    ],
    "gettext": [
        "Lookup a message in the current domain",
        "gettext ( string $message ) : string"
    ],
    "gettimeofday": [
        "Get current time",
        "gettimeofday ( bool $as_float = false ) : array|float"
    ],
    "gettype": [
        "Get the type of a variable",
        "gettype ( mixed $value ) : string"
    ],
    "glob": [
        "Find pathnames matching a pattern",
        "glob ( string $pattern , int $flags = 0 ) : array|false"
    ],
    "GlobIterator": [
        "Iterates through a file system in a similar fashion to glob().",
        "new GlobIterator ( string $pattern , int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO )"
    ],
    "Gmagick": [
        "The Gmagick constructor",
        "new Gmagick ( string $filename = ? )"
    ],
    "GmagickPixel": [
        "The GmagickPixel constructor",
        "new GmagickPixel ( string $color = ? )"
    ],
    "gmdate": [
        "Format a GMT\/UTC date\/time",
        "gmdate ( string $format , int|null $timestamp = null ) : string"
    ],
    "gmmktime": [
        "Get Unix timestamp for a GMT date",
        "gmmktime ( int $hour , int|null $minute = null , int|null $second = null , int|null $month = null , int|null $day = null , int|null $year = null ) : int|false"
    ],
    "GMP": [
        "A GMP number. These objects support overloaded arithmetic, bitwise and comparison operators."
    ],
    "gmp_abs": [
        "Absolute value",
        "gmp_abs ( GMP|int|string $num ) : GMP"
    ],
    "gmp_add": [
        "Add numbers",
        "gmp_add ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmp_and": [
        "Bitwise AND",
        "gmp_and ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmp_binomial": [
        "Calculates binomial coefficient",
        "gmp_binomial ( GMP|int|string $n , int $k ) : GMP"
    ],
    "gmp_clrbit": [
        "Clear bit",
        "gmp_clrbit ( GMP $num , int $index ) : void"
    ],
    "gmp_cmp": [
        "Compare numbers",
        "gmp_cmp ( GMP|int|string $num1 , GMP|int|string $num2 ) : int"
    ],
    "gmp_com": [
        "Calculates one's complement",
        "gmp_com ( GMP|int|string $num ) : GMP"
    ],
    "gmp_div_q": [
        "Divide numbers",
        "gmp_div_q ( GMP|int|string $num1 , GMP|int|string $num2 , int $rounding_mode = GMP_ROUND_ZERO ) : GMP"
    ],
    "gmp_div_qr": [
        "Divide numbers and get quotient and remainder",
        "gmp_div_qr ( GMP|int|string $num1 , GMP|int|string $num2 , int $rounding_mode = GMP_ROUND_ZERO ) : array"
    ],
    "gmp_div_r": [
        "Remainder of the division of numbers",
        "gmp_div_r ( GMP|int|string $num1 , GMP|int|string $num2 , int $rounding_mode = GMP_ROUND_ZERO ) : GMP"
    ],
    "gmp_divexact": [
        "Exact division of numbers",
        "gmp_divexact ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmp_export": [
        "Export to a binary string",
        "gmp_export ( GMP|int|string $num , int $word_size = 1 , int $flags = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN ) : string"
    ],
    "gmp_fact": [
        "Factorial",
        "gmp_fact ( GMP|int|string $num ) : GMP"
    ],
    "gmp_gcd": [
        "Calculate GCD",
        "gmp_gcd ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmp_gcdext": [
        "Calculate GCD and multipliers",
        "gmp_gcdext ( GMP|int|string $num1 , GMP|int|string $num2 ) : array"
    ],
    "gmp_hamdist": [
        "Hamming distance",
        "gmp_hamdist ( GMP|int|string $num1 , GMP|int|string $num2 ) : int"
    ],
    "gmp_import": [
        "Import from a binary string",
        "gmp_import ( string $data , int $word_size = 1 , int $flags = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN ) : GMP"
    ],
    "gmp_init": [
        "Create GMP number",
        "gmp_init ( int|string $num , int $base = 0 ) : GMP"
    ],
    "gmp_intval": [
        "Convert GMP number to integer",
        "gmp_intval ( GMP|int|string $num ) : int"
    ],
    "gmp_invert": [
        "Inverse by modulo",
        "gmp_invert ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP|false"
    ],
    "gmp_jacobi": [
        "Jacobi symbol",
        "gmp_jacobi ( GMP|int|string $num1 , GMP|int|string $num2 ) : int"
    ],
    "gmp_kronecker": [
        "Kronecker symbol",
        "gmp_kronecker ( GMP|int|string $num1 , GMP|int|string $num2 ) : int"
    ],
    "gmp_lcm": [
        "Calculate LCM",
        "gmp_lcm ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmp_legendre": [
        "Legendre symbol",
        "gmp_legendre ( GMP|int|string $num1 , GMP|int|string $num2 ) : int"
    ],
    "gmp_mod": [
        "Modulo operation",
        "gmp_mod ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmp_mul": [
        "Multiply numbers",
        "gmp_mul ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmp_neg": [
        "Negate number",
        "gmp_neg ( GMP|int|string $num ) : GMP"
    ],
    "gmp_nextprime": [
        "Find next prime number",
        "gmp_nextprime ( GMP|int|string $num ) : GMP"
    ],
    "gmp_or": [
        "Bitwise OR",
        "gmp_or ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmp_perfect_power": [
        "Perfect power check",
        "gmp_perfect_power ( GMP|int|string $num ) : bool"
    ],
    "gmp_perfect_square": [
        "Perfect square check",
        "gmp_perfect_square ( GMP|int|string $num ) : bool"
    ],
    "gmp_popcount": [
        "Population count",
        "gmp_popcount ( GMP|int|string $num ) : int"
    ],
    "gmp_pow": [
        "Raise number into power",
        "gmp_pow ( GMP|int|string $num , int $exponent ) : GMP"
    ],
    "gmp_powm": [
        "Raise number into power with modulo",
        "gmp_powm ( GMP|int|string $num , GMP|int|string $exponent , GMP|int|string $modulus ) : GMP"
    ],
    "gmp_prob_prime": [
        "Check if number is \"probably prime\"",
        "gmp_prob_prime ( GMP|int|string $num , int $repetitions = 10 ) : int"
    ],
    "gmp_random": [
        "Random number",
        "gmp_random ( int $limiter = 20 ) : GMP"
    ],
    "gmp_random_bits": [
        "Random number",
        "gmp_random_bits ( int $bits ) : GMP"
    ],
    "gmp_random_range": [
        "Random number",
        "gmp_random_range ( GMP|int|string $min , GMP|int|string $max ) : GMP"
    ],
    "gmp_random_seed": [
        "Sets the RNG seed",
        "gmp_random_seed ( GMP|int|string $seed ) : void"
    ],
    "gmp_root": [
        "Take the integer part of nth root",
        "gmp_root ( GMP|int|string $num , int $nth ) : GMP"
    ],
    "gmp_rootrem": [
        "Take the integer part and remainder of nth root",
        "gmp_rootrem ( GMP|int|string $num , int $nth ) : array"
    ],
    "gmp_scan0": [
        "Scan for 0",
        "gmp_scan0 ( GMP|int|string $num1 , int $start ) : int"
    ],
    "gmp_scan1": [
        "Scan for 1",
        "gmp_scan1 ( GMP|int|string $num1 , int $start ) : int"
    ],
    "gmp_setbit": [
        "Set bit",
        "gmp_setbit ( GMP $num , int $index , bool $value = true ) : void"
    ],
    "gmp_sign": [
        "Sign of number",
        "gmp_sign ( GMP|int|string $num ) : int"
    ],
    "gmp_sqrt": [
        "Calculate square root",
        "gmp_sqrt ( GMP|int|string $num ) : GMP"
    ],
    "gmp_sqrtrem": [
        "Square root with remainder",
        "gmp_sqrtrem ( GMP|int|string $num ) : array"
    ],
    "gmp_strval": [
        "Convert GMP number to string",
        "gmp_strval ( GMP|int|string $num , int $base = 10 ) : string"
    ],
    "gmp_sub": [
        "Subtract numbers",
        "gmp_sub ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmp_testbit": [
        "Tests if a bit is set",
        "gmp_testbit ( GMP|int|string $num , int $index ) : bool"
    ],
    "gmp_xor": [
        "Bitwise XOR",
        "gmp_xor ( GMP|int|string $num1 , GMP|int|string $num2 ) : GMP"
    ],
    "gmstrftime": [
        "Format a GMT\/UTC time\/date according to locale settings",
        "gmstrftime ( string $format , int|null $timestamp = null ) : string|false"
    ],
    "gnupg_adddecryptkey": [
        "Add a key for decryption",
        "gnupg_adddecryptkey ( resource $identifier , string $fingerprint , string $passphrase ) : bool"
    ],
    "gnupg_addencryptkey": [
        "Add a key for encryption",
        "gnupg_addencryptkey ( resource $identifier , string $fingerprint ) : bool"
    ],
    "gnupg_addsignkey": [
        "Add a key for signing",
        "gnupg_addsignkey ( resource $identifier , string $fingerprint , string $passphrase = ? ) : bool"
    ],
    "gnupg_cleardecryptkeys": [
        "Removes all keys which were set for decryption before",
        "gnupg_cleardecryptkeys ( resource $identifier ) : bool"
    ],
    "gnupg_clearencryptkeys": [
        "Removes all keys which were set for encryption before",
        "gnupg_clearencryptkeys ( resource $identifier ) : bool"
    ],
    "gnupg_clearsignkeys": [
        "Removes all keys which were set for signing before",
        "gnupg_clearsignkeys ( resource $identifier ) : bool"
    ],
    "gnupg_decrypt": [
        "Decrypts a given text",
        "gnupg_decrypt ( resource $identifier , string $text ) : string"
    ],
    "gnupg_decryptverify": [
        "Decrypts and verifies a given text",
        "gnupg_decryptverify ( resource $identifier , string $text , string &$plaintext ) : array"
    ],
    "gnupg_encrypt": [
        "Encrypts a given text",
        "gnupg_encrypt ( resource $identifier , string $plaintext ) : string"
    ],
    "gnupg_encryptsign": [
        "Encrypts and signs a given text",
        "gnupg_encryptsign ( resource $identifier , string $plaintext ) : string"
    ],
    "gnupg_export": [
        "Exports a key",
        "gnupg_export ( resource $identifier , string $fingerprint ) : string"
    ],
    "gnupg_geterror": [
        "Returns the errortext, if a function fails",
        "gnupg_geterror ( resource $identifier ) : string"
    ],
    "gnupg_getprotocol": [
        "Returns the currently active protocol for all operations",
        "gnupg_getprotocol ( resource $identifier ) : int"
    ],
    "gnupg_import": [
        "Imports a key",
        "gnupg_import ( resource $identifier , string $keydata ) : array"
    ],
    "gnupg_init": [
        "Initialize a connection",
        "gnupg_init ( ) : resource"
    ],
    "gnupg_keyinfo": [
        "Returns an array with information about all keys that matches the given pattern",
        "gnupg_keyinfo ( resource $identifier , string $pattern ) : array"
    ],
    "gnupg_setarmor": [
        "Toggle armored output",
        "gnupg_setarmor ( resource $identifier , int $armor ) : bool"
    ],
    "gnupg_seterrormode": [
        "Sets the mode for error_reporting",
        "gnupg_seterrormode ( resource $identifier , int $errormode ) : void"
    ],
    "gnupg_setsignmode": [
        "Sets the mode for signing",
        "gnupg_setsignmode ( resource $identifier , int $signmode ) : bool"
    ],
    "gnupg_sign": [
        "Signs a given text",
        "gnupg_sign ( resource $identifier , string $plaintext ) : string"
    ],
    "gnupg_verify": [
        "Verifies a signed text",
        "gnupg_verify ( resource $identifier , string $signed_text , string $signature , string &$plaintext = ? ) : array"
    ],
    "grapheme_extract": [
        "Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8",
        "grapheme_extract ( string $haystack , int $size , int $type = GRAPHEME_EXTR_COUNT , int $offset = 0 , int &$next = null ) : string|false"
    ],
    "grapheme_stripos": [
        "Find position (in grapheme units) of first occurrence of a case-insensitive string",
        "grapheme_stripos ( string $haystack , string $needle , int $offset = 0 ) : int|false"
    ],
    "grapheme_stristr": [
        "Returns part of haystack string from the first occurrence of case-insensitive needle to the end of haystack",
        "grapheme_stristr ( string $haystack , string $needle , bool $beforeNeedle = false ) : string|false"
    ],
    "grapheme_strlen": [
        "Get string length in grapheme units",
        "grapheme_strlen ( string $string ) : int|false|null"
    ],
    "grapheme_strpos": [
        "Find position (in grapheme units) of first occurrence of a string",
        "grapheme_strpos ( string $haystack , string $needle , int $offset = 0 ) : int|false"
    ],
    "grapheme_strripos": [
        "Find position (in grapheme units) of last occurrence of a case-insensitive string",
        "grapheme_strripos ( string $haystack , string $needle , int $offset = 0 ) : int|false"
    ],
    "grapheme_strrpos": [
        "Find position (in grapheme units) of last occurrence of a string",
        "grapheme_strrpos ( string $haystack , string $needle , int $offset = 0 ) : int|false"
    ],
    "grapheme_strstr": [
        "Returns part of haystack string from the first occurrence of needle to the end of haystack",
        "grapheme_strstr ( string $haystack , string $needle , bool $beforeNeedle = false ) : string|false"
    ],
    "grapheme_substr": [
        "Return part of a string",
        "grapheme_substr ( string $string , int $offset , int|null $length = null ) : string|false"
    ],
    "gregoriantojd": [
        "Converts a Gregorian date to Julian Day Count",
        "gregoriantojd ( int $month , int $day , int $year ) : int"
    ],
    "gzclose": [
        "Close an open gz-file pointer",
        "gzclose ( resource $stream ) : bool"
    ],
    "gzcompress": [
        "Compress a string",
        "gzcompress ( string $data , int $level = -1 , int $encoding = ZLIB_ENCODING_DEFLATE ) : string|false"
    ],
    "gzdecode": [
        "Decodes a gzip compressed string",
        "gzdecode ( string $data , int $max_length = 0 ) : string|false"
    ],
    "gzdeflate": [
        "Deflate a string",
        "gzdeflate ( string $data , int $level = -1 , int $encoding = ZLIB_ENCODING_RAW ) : string|false"
    ],
    "gzencode": [
        "Create a gzip compressed string",
        "gzencode ( string $data , int $level = -1 , int $encoding = ZLIB_ENCODING_GZIP ) : string|false"
    ],
    "gzeof": [
        "Test for EOF on a gz-file pointer",
        "gzeof ( resource $stream ) : bool"
    ],
    "gzfile": [
        "Read entire gz-file into an array",
        "gzfile ( string $filename , int $use_include_path = 0 ) : array|false"
    ],
    "gzgetc": [
        "Get character from gz-file pointer",
        "gzgetc ( resource $stream ) : string|false"
    ],
    "gzgets": [
        "Get line from file pointer",
        "gzgets ( resource $stream , int|null $length = null ) : string|false"
    ],
    "gzgetss": [
        "Get line from gz-file pointer and strip HTML tags",
        "gzgetss ( resource $zp , int $length , string $allowable_tags = ? ) : string"
    ],
    "gzinflate": [
        "Inflate a deflated string",
        "gzinflate ( string $data , int $max_length = 0 ) : string|false"
    ],
    "gzopen": [
        "Open gz-file",
        "gzopen ( string $filename , string $mode , int $use_include_path = 0 ) : resource|false"
    ],
    "gzpassthru": [
        "Output all remaining data on a gz-file pointer",
        "gzpassthru ( resource $stream ) : int"
    ],
    "gzread": [
        "Binary-safe gz-file read",
        "gzread ( resource $stream , int $length ) : string|false"
    ],
    "gzrewind": [
        "Rewind the position of a gz-file pointer",
        "gzrewind ( resource $stream ) : bool"
    ],
    "gzseek": [
        "Seek on a gz-file pointer",
        "gzseek ( resource $stream , int $offset , int $whence = SEEK_SET ) : int"
    ],
    "gztell": [
        "Tell gz-file pointer read\/write position",
        "gztell ( resource $stream ) : int|false"
    ],
    "gzuncompress": [
        "Uncompress a compressed string",
        "gzuncompress ( string $data , int $max_length = 0 ) : string|false"
    ],
    "gzwrite": [
        "Binary-safe gz-file write",
        "gzwrite ( resource $stream , string $data , int|null $length = null ) : int|false"
    ],
    "hash": [
        "Generate a hash value (message digest)",
        "hash ( string $algo , string $data , bool $binary = false ) : string|false"
    ],
    "hash_algos": [
        "Return a list of registered hashing algorithms",
        "hash_algos ( ) : array"
    ],
    "hash_copy": [
        "Copy hashing context",
        "hash_copy ( HashContext $context ) : HashContext"
    ],
    "hash_equals": [
        "Timing attack safe string comparison",
        "hash_equals ( string $known_string , string $user_string ) : bool"
    ],
    "hash_file": [
        "Generate a hash value using the contents of a given file",
        "hash_file ( string $algo , string $filename , bool $binary = false ) : string|false"
    ],
    "hash_final": [
        "Finalize an incremental hash and return resulting digest",
        "hash_final ( HashContext $context , bool $binary = false ) : string"
    ],
    "hash_hkdf": [
        "Generate a HKDF key derivation of a supplied key input",
        "hash_hkdf ( string $algo , string $key , int $length = 0 , string $info = \"\" , string $salt = \"\" ) : string"
    ],
    "hash_hmac": [
        "Generate a keyed hash value using the HMAC method",
        "hash_hmac ( string $algo , string $data , string $key , bool $binary = false ) : string|false"
    ],
    "hash_hmac_algos": [
        "Return a list of registered hashing algorithms suitable for hash_hmac",
        "hash_hmac_algos ( ) : array"
    ],
    "hash_hmac_file": [
        "Generate a keyed hash value using the HMAC method and the contents of a given file",
        "hash_hmac_file ( string $algo , string $data , string $key , bool $binary = false ) : string|false"
    ],
    "hash_init": [
        "Initialize an incremental hashing context",
        "hash_init ( string $algo , int $flags = 0 , string $key = \"\" ) : HashContext"
    ],
    "hash_pbkdf2": [
        "Generate a PBKDF2 key derivation of a supplied password",
        "hash_pbkdf2 ( string $algo , string $password , string $salt , int $iterations , int $length = 0 , bool $binary = false ) : string"
    ],
    "hash_update": [
        "Pump data into an active hashing context",
        "hash_update ( HashContext $context , string $data ) : bool"
    ],
    "hash_update_file": [
        "Pump data into an active hashing context from a file",
        "hash_update_file ( HashContext $context , string $filename , resource|null $stream_context = null ) : bool"
    ],
    "hash_update_stream": [
        "Pump data into an active hashing context from an open stream",
        "hash_update_stream ( HashContext $context , resource $stream , int $length = -1 ) : int"
    ],
    "header": [
        "Send a raw HTTP header",
        "header ( string $header , bool $replace = true , int $response_code = 0 ) : void"
    ],
    "header_register_callback": [
        "Call a header function",
        "header_register_callback ( callable $callback ) : bool"
    ],
    "header_remove": [
        "Remove previously set headers",
        "header_remove ( string $name = ? ) : void"
    ],
    "headers_list": [
        "Returns a list of response headers sent (or ready to send)",
        "headers_list ( ) : array"
    ],
    "headers_sent": [
        "Checks if or where headers have been sent",
        "headers_sent ( string &$filename = null , int &$line = null ) : bool"
    ],
    "hebrev": [
        "Convert logical Hebrew text to visual text",
        "hebrev ( string $string , int $max_chars_per_line = 0 ) : string"
    ],
    "hebrevc": [
        "Convert logical Hebrew text to visual text with newline conversion",
        "hebrevc ( string $hebrew_text , int $max_chars_per_line = 0 ) : string"
    ],
    "hex2bin": [
        "Decodes a hexadecimally encoded binary string",
        "hex2bin ( string $string ) : string|false"
    ],
    "hexdec": [
        "Hexadecimal to decimal",
        "hexdec ( string $hex_string ) : int|float"
    ],
    "highlight_file": [
        "Syntax highlighting of a file",
        "highlight_file ( string $filename , bool $return = false ) : mixed"
    ],
    "highlight_string": [
        "Syntax highlighting of a string",
        "highlight_string ( string $str , bool $return = false ) : mixed"
    ],
    "hrtime": [
        "Get the system's high resolution time",
        "hrtime ( bool $as_number = false ) : array|int|float|false"
    ],
    "html_entity_decode": [
        "Convert HTML entities to their corresponding characters",
        "html_entity_decode ( string $string , int $flags = ENT_COMPAT , string|null $encoding = null ) : string"
    ],
    "htmlentities": [
        "Convert all applicable characters to HTML entities",
        "htmlentities ( string $string , int $flags = ENT_COMPAT , string|null $encoding = null , bool $double_encode = true ) : string"
    ],
    "htmlspecialchars": [
        "Convert special characters to HTML entities",
        "htmlspecialchars ( string $string , int $flags = ENT_COMPAT , string|null $encoding = null , bool $double_encode = true ) : string"
    ],
    "htmlspecialchars_decode": [
        "Convert special HTML entities back to characters",
        "htmlspecialchars_decode ( string $string , int $flags = ENT_COMPAT ) : string"
    ],
    "http_build_query": [
        "Generate URL-encoded query string",
        "http_build_query ( mixed $data , string $numeric_prefix = ? , string $arg_separator = ? , int $encoding_type = PHP_QUERY_RFC1738 ) : string"
    ],
    "http_response_code": [
        "Get or Set the HTTP response code",
        "http_response_code ( int $response_code = 0 ) : int|bool"
    ],
    "hypot": [
        "Calculate the length of the hypotenuse of a right-angle triangle",
        "hypot ( float $x , float $y ) : float"
    ],
    "ibase_add_user": [
        "Add a user to a security database",
        "ibase_add_user ( resource $service_handle , string $user_name , string $password , string $first_name = ? , string $middle_name = ? , string $last_name = ? ) : bool"
    ],
    "ibase_affected_rows": [
        "Return the number of rows that were affected by the previous query",
        "ibase_affected_rows ( resource $link_identifier = ? ) : int"
    ],
    "ibase_backup": [
        "Initiates a backup task in the service manager and returns immediately",
        "ibase_backup ( resource $service_handle , string $source_db , string $dest_file , int $options = 0 , bool $verbose = false ) : mixed"
    ],
    "ibase_blob_add": [
        "Add data into a newly created blob",
        "ibase_blob_add ( resource $blob_handle , string $data ) : void"
    ],
    "ibase_blob_cancel": [
        "Cancel creating blob",
        "ibase_blob_cancel ( resource $blob_handle ) : bool"
    ],
    "ibase_blob_close": [
        "Close blob",
        "ibase_blob_close ( resource $blob_handle ) : mixed"
    ],
    "ibase_blob_create": [
        "Create a new blob for adding data",
        "ibase_blob_create ( resource $link_identifier = null ) : resource|false"
    ],
    "ibase_blob_echo": [
        "Output blob contents to browser",
        "ibase_blob_echo ( string $blob_id ) : bool",
        "ibase_blob_echo ( resource $link_identifier , string $blob_id ) : bool"
    ],
    "ibase_blob_get": [
        "Get len bytes data from open blob",
        "ibase_blob_get ( resource $blob_handle , int $len ) : string"
    ],
    "ibase_blob_import": [
        "Create blob, copy file in it, and close it",
        "ibase_blob_import ( resource $link_identifier , resource $file_handle ) : string",
        "ibase_blob_import ( resource $file_handle ) : string"
    ],
    "ibase_blob_info": [
        "Return blob length and other useful info",
        "ibase_blob_info ( resource $link_identifier , string $blob_id ) : array",
        "ibase_blob_info ( string $blob_id ) : array"
    ],
    "ibase_blob_open": [
        "Open blob for retrieving data parts",
        "ibase_blob_open ( resource $link_identifier , string $blob_id ) : resource|false",
        "ibase_blob_open ( string $blob_id ) : resource|false"
    ],
    "ibase_close": [
        "Close a connection to an InterBase database",
        "ibase_close ( resource $connection_id = null ) : bool"
    ],
    "ibase_commit": [
        "Commit a transaction",
        "ibase_commit ( resource $link_or_trans_identifier = null ) : bool"
    ],
    "ibase_commit_ret": [
        "Commit a transaction without closing it",
        "ibase_commit_ret ( resource $link_or_trans_identifier = null ) : bool"
    ],
    "ibase_connect": [
        "Open a connection to a database",
        "ibase_connect ( string $database = ? , string $username = ? , string $password = ? , string $charset = ? , int $buffers = ? , int $dialect = ? , string $role = ? , int $sync = ? ) : resource"
    ],
    "ibase_db_info": [
        "Request statistics about a database",
        "ibase_db_info ( resource $service_handle , string $db , int $action , int $argument = 0 ) : string"
    ],
    "ibase_delete_user": [
        "Delete a user from a security database",
        "ibase_delete_user ( resource $service_handle , string $user_name ) : bool"
    ],
    "ibase_drop_db": [
        "Drops a database",
        "ibase_drop_db ( resource $connection = null ) : bool"
    ],
    "ibase_errcode": [
        "Return an error code",
        "ibase_errcode ( ) : int"
    ],
    "ibase_errmsg": [
        "Return error messages",
        "ibase_errmsg ( ) : string"
    ],
    "ibase_execute": [
        "Execute a previously prepared query",
        "ibase_execute ( resource $query , mixed ...$values ) : resource"
    ],
    "ibase_fetch_assoc": [
        "Fetch a result row from a query as an associative array",
        "ibase_fetch_assoc ( resource $result , int $fetch_flag = 0 ) : array"
    ],
    "ibase_fetch_object": [
        "Get an object from a InterBase database",
        "ibase_fetch_object ( resource $result_id , int $fetch_flag = 0 ) : object"
    ],
    "ibase_fetch_row": [
        "Fetch a row from an InterBase database",
        "ibase_fetch_row ( resource $result_identifier , int $fetch_flag = 0 ) : array"
    ],
    "ibase_field_info": [
        "Get information about a field",
        "ibase_field_info ( resource $result , int $field_number ) : array"
    ],
    "ibase_free_event_handler": [
        "Cancels a registered event handler",
        "ibase_free_event_handler ( resource $event ) : bool"
    ],
    "ibase_free_query": [
        "Free memory allocated by a prepared query",
        "ibase_free_query ( resource $query ) : bool"
    ],
    "ibase_free_result": [
        "Free a result set",
        "ibase_free_result ( resource $result_identifier ) : bool"
    ],
    "ibase_gen_id": [
        "Increments the named generator and returns its new value",
        "ibase_gen_id ( string $generator , int $increment = 1 , resource $link_identifier = null ) : mixed"
    ],
    "ibase_maintain_db": [
        "Execute a maintenance command on the database server",
        "ibase_maintain_db ( resource $service_handle , string $db , int $action , int $argument = 0 ) : bool"
    ],
    "ibase_modify_user": [
        "Modify a user to a security database",
        "ibase_modify_user ( resource $service_handle , string $user_name , string $password , string $first_name = ? , string $middle_name = ? , string $last_name = ? ) : bool"
    ],
    "ibase_name_result": [
        "Assigns a name to a result set",
        "ibase_name_result ( resource $result , string $name ) : bool"
    ],
    "ibase_num_fields": [
        "Get the number of fields in a result set",
        "ibase_num_fields ( resource $result_id ) : int"
    ],
    "ibase_num_params": [
        "Return the number of parameters in a prepared query",
        "ibase_num_params ( resource $query ) : int"
    ],
    "ibase_param_info": [
        "Return information about a parameter in a prepared query",
        "ibase_param_info ( resource $query , int $param_number ) : array"
    ],
    "ibase_pconnect": [
        "Open a persistent connection to an InterBase database",
        "ibase_pconnect ( string $database = ? , string $username = ? , string $password = ? , string $charset = ? , int $buffers = ? , int $dialect = ? , string $role = ? , int $sync = ? ) : resource"
    ],
    "ibase_prepare": [
        "Prepare a query for later binding of parameter placeholders and execution",
        "ibase_prepare ( string $query ) : resource",
        "ibase_prepare ( resource $link_identifier , string $query ) : resource",
        "ibase_prepare ( resource $link_identifier , string $trans , string $query ) : resource"
    ],
    "ibase_query": [
        "Execute a query on an InterBase database",
        "ibase_query ( resource $link_identifier = ? , string $query , int $bind_args = ? ) : resource"
    ],
    "ibase_restore": [
        "Initiates a restore task in the service manager and returns immediately",
        "ibase_restore ( resource $service_handle , string $source_file , string $dest_db , int $options = 0 , bool $verbose = false ) : mixed"
    ],
    "ibase_rollback": [
        "Roll back a transaction",
        "ibase_rollback ( resource $link_or_trans_identifier = null ) : bool"
    ],
    "ibase_rollback_ret": [
        "Roll back a transaction without closing it",
        "ibase_rollback_ret ( resource $link_or_trans_identifier = null ) : bool"
    ],
    "ibase_server_info": [
        "Request information about a database server",
        "ibase_server_info ( resource $service_handle , int $action ) : string"
    ],
    "ibase_service_attach": [
        "Connect to the service manager",
        "ibase_service_attach ( string $host , string $dba_username , string $dba_password ) : resource|false"
    ],
    "ibase_service_detach": [
        "Disconnect from the service manager",
        "ibase_service_detach ( resource $service_handle ) : bool"
    ],
    "ibase_set_event_handler": [
        "Register a callback function to be called when events are posted",
        "ibase_set_event_handler ( callable $event_handler , string $event_name , string ...$even_names ) : resource",
        "ibase_set_event_handler ( resource $connection , callable $event_handler , string $event_name , string ...$event_names ) : resource"
    ],
    "ibase_trans": [
        "Begin a transaction",
        "ibase_trans ( int $trans_args = ? , resource $link_identifier = ? ) : resource",
        "ibase_trans ( resource $link_identifier = ? , int $trans_args = ? ) : resource"
    ],
    "ibase_wait_event": [
        "Wait for an event to be posted by the database",
        "ibase_wait_event ( string $event_name , string ...$event_names ) : string",
        "ibase_wait_event ( resource $connection , string $event_name , string ...$event_names ) : string"
    ],
    "iconv": [
        "Convert string to requested character encoding",
        "iconv ( string $from_encoding , string $to_encoding , string $string ) : string|false"
    ],
    "iconv_get_encoding": [
        "Retrieve internal configuration variables of iconv extension",
        "iconv_get_encoding ( string $type = \"all\" ) : array|string|false"
    ],
    "iconv_mime_decode": [
        "Decodes a MIME header field",
        "iconv_mime_decode ( string $string , int $mode = 0 , string|null $encoding = null ) : string|false"
    ],
    "iconv_mime_decode_headers": [
        "Decodes multiple MIME header fields at once",
        "iconv_mime_decode_headers ( string $headers , int $mode = 0 , string|null $encoding = null ) : array|false"
    ],
    "iconv_mime_encode": [
        "Composes a MIME header field",
        "iconv_mime_encode ( string $field_name , string $field_value , array $options = [] ) : string|false"
    ],
    "iconv_set_encoding": [
        "Set current setting for character encoding conversion",
        "iconv_set_encoding ( string $type , string $encoding ) : bool"
    ],
    "iconv_strlen": [
        "Returns the character count of string",
        "iconv_strlen ( string $string , string|null $encoding = null ) : int|false"
    ],
    "iconv_strpos": [
        "Finds position of first occurrence of a needle within a haystack",
        "iconv_strpos ( string $haystack , string $needle , int $offset = 0 , string|null $encoding = null ) : int|false"
    ],
    "iconv_strrpos": [
        "Finds the last occurrence of a needle within a haystack",
        "iconv_strrpos ( string $haystack , string $needle , string|null $encoding = null ) : int|false"
    ],
    "iconv_substr": [
        "Cut out part of a string",
        "iconv_substr ( string $string , int $offset , int|null $length = null , string|null $encoding = null ) : string|false"
    ],
    "idate": [
        "Format a local time\/date as integer",
        "idate ( string $format , int|null $timestamp = null ) : int|false"
    ],
    "idn_to_ascii": [
        "Convert domain name to IDNA ASCII form",
        "idn_to_ascii ( string $domain , int $flags = IDNA_DEFAULT , int $variant = INTL_IDNA_VARIANT_UTS46 , array &$idna_info = null ) : string|false"
    ],
    "idn_to_utf8": [
        "Convert domain name from IDNA ASCII to Unicode",
        "idn_to_utf8 ( string $domain , int $flags = 0 , int $variant = INTL_IDNA_VARIANT_UTS46 , array &$idna_info = null ) : string|false"
    ],
    "ignore_user_abort": [
        "Set whether a client disconnect should abort script execution",
        "ignore_user_abort ( bool|null $enable = null ) : int"
    ],
    "image2wbmp": [
        "Output image to browser or file",
        "image2wbmp ( resource $image , string $filename = ? , int $foreground = ? ) : bool"
    ],
    "image_type_to_extension": [
        "Get file extension for image type",
        "image_type_to_extension ( int $image_type , bool $include_dot = true ) : string|false"
    ],
    "image_type_to_mime_type": [
        "Get Mime-Type for image-type returned by getimagesize,\n   exif_read_data, exif_thumbnail, exif_imagetype",
        "image_type_to_mime_type ( int $image_type ) : string"
    ],
    "imageaffine": [
        "Return an image containing the affine transformed src image, using an optional clipping area",
        "imageaffine ( resource $image , array $affine , array $clip = ? ) : resource|false"
    ],
    "imageaffinematrixconcat": [
        "Concatenate two affine transformation matrices",
        "imageaffinematrixconcat ( array $m1 , array $m2 ) : array|false"
    ],
    "imageaffinematrixget": [
        "Get an affine transformation matrix",
        "imageaffinematrixget ( int $type , mixed $options = ? ) : array|false"
    ],
    "imagealphablending": [
        "Set the blending mode for an image",
        "imagealphablending ( resource $image , bool $blendmode ) : bool"
    ],
    "imageantialias": [
        "Should antialias functions be used or not",
        "imageantialias ( resource $image , bool $enabled ) : bool"
    ],
    "imagearc": [
        "Draws an arc",
        "imagearc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color ) : bool"
    ],
    "imagebmp": [
        "Output a BMP image to browser or file",
        "imagebmp ( resource $image , mixed $to = null , bool $compressed = true ) : bool"
    ],
    "imagechar": [
        "Draw a character horizontally",
        "imagechar ( resource $image , int $font , int $x , int $y , string $c , int $color ) : bool"
    ],
    "imagecharup": [
        "Draw a character vertically",
        "imagecharup ( resource $image , int $font , int $x , int $y , string $c , int $color ) : bool"
    ],
    "imagecolorallocate": [
        "Allocate a color for an image",
        "imagecolorallocate ( resource $image , int $red , int $green , int $blue ) : int"
    ],
    "imagecolorallocatealpha": [
        "Allocate a color for an image",
        "imagecolorallocatealpha ( resource $image , int $red , int $green , int $blue , int $alpha ) : int"
    ],
    "imagecolorat": [
        "Get the index of the color of a pixel",
        "imagecolorat ( resource $image , int $x , int $y ) : int|false"
    ],
    "imagecolorclosest": [
        "Get the index of the closest color to the specified color",
        "imagecolorclosest ( resource $image , int $red , int $green , int $blue ) : int"
    ],
    "imagecolorclosestalpha": [
        "Get the index of the closest color to the specified color + alpha",
        "imagecolorclosestalpha ( resource $image , int $red , int $green , int $blue , int $alpha ) : int"
    ],
    "imagecolorclosesthwb": [
        "Get the index of the color which has the hue, white and blackness",
        "imagecolorclosesthwb ( resource $image , int $red , int $green , int $blue ) : int"
    ],
    "imagecolordeallocate": [
        "De-allocate a color for an image",
        "imagecolordeallocate ( resource $image , int $color ) : bool"
    ],
    "imagecolorexact": [
        "Get the index of the specified color",
        "imagecolorexact ( resource $image , int $red , int $green , int $blue ) : int"
    ],
    "imagecolorexactalpha": [
        "Get the index of the specified color + alpha",
        "imagecolorexactalpha ( resource $image , int $red , int $green , int $blue , int $alpha ) : int"
    ],
    "imagecolormatch": [
        "Makes the colors of the palette version of an image more closely match the true color version",
        "imagecolormatch ( resource $image1 , resource $image2 ) : bool"
    ],
    "imagecolorresolve": [
        "Get the index of the specified color or its closest possible alternative",
        "imagecolorresolve ( resource $image , int $red , int $green , int $blue ) : int"
    ],
    "imagecolorresolvealpha": [
        "Get the index of the specified color + alpha or its closest possible alternative",
        "imagecolorresolvealpha ( resource $image , int $red , int $green , int $blue , int $alpha ) : int"
    ],
    "imagecolorset": [
        "Set the color for the specified palette index",
        "imagecolorset ( resource $image , int $index , int $red , int $green , int $blue , int $alpha = 0 ) : void"
    ],
    "imagecolorsforindex": [
        "Get the colors for an index",
        "imagecolorsforindex ( resource $image , int $index ) : array"
    ],
    "imagecolorstotal": [
        "Find out the number of colors in an image's palette",
        "imagecolorstotal ( resource $image ) : int"
    ],
    "imagecolortransparent": [
        "Define a color as transparent",
        "imagecolortransparent ( resource $image ) : int",
        "imagecolortransparent ( resource $image , int $color ) : int"
    ],
    "imageconvolution": [
        "Apply a 3x3 convolution matrix, using coefficient and offset",
        "imageconvolution ( resource $image , array $matrix , float $div , float $offset ) : bool"
    ],
    "imagecopy": [
        "Copy part of an image",
        "imagecopy ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h ) : bool"
    ],
    "imagecopymerge": [
        "Copy and merge part of an image",
        "imagecopymerge ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct ) : bool"
    ],
    "imagecopymergegray": [
        "Copy and merge part of an image with gray scale",
        "imagecopymergegray ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct ) : bool"
    ],
    "imagecopyresampled": [
        "Copy and resize part of an image with resampling",
        "imagecopyresampled ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h ) : bool"
    ],
    "imagecopyresized": [
        "Copy and resize part of an image",
        "imagecopyresized ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h ) : bool"
    ],
    "imagecreate": [
        "Create a new palette based image",
        "imagecreate ( int $width , int $height ) : resource"
    ],
    "imagecreatefrombmp": [
        "Create a new image from file or URL",
        "imagecreatefrombmp ( string $filename ) : resource"
    ],
    "imagecreatefromgd": [
        "Create a new image from GD file or URL",
        "imagecreatefromgd ( string $filename ) : resource"
    ],
    "imagecreatefromgd2": [
        "Create a new image from GD2 file or URL",
        "imagecreatefromgd2 ( string $filename ) : resource"
    ],
    "imagecreatefromgd2part": [
        "Create a new image from a given part of GD2 file or URL",
        "imagecreatefromgd2part ( string $filename , int $srcX , int $srcY , int $width , int $height ) : resource"
    ],
    "imagecreatefromgif": [
        "Create a new image from file or URL",
        "imagecreatefromgif ( string $filename ) : resource"
    ],
    "imagecreatefromjpeg": [
        "Create a new image from file or URL",
        "imagecreatefromjpeg ( string $filename ) : resource"
    ],
    "imagecreatefrompng": [
        "Create a new image from file or URL",
        "imagecreatefrompng ( string $filename ) : resource"
    ],
    "imagecreatefromstring": [
        "Create a new image from the image stream in the string",
        "imagecreatefromstring ( string $image ) : resource"
    ],
    "imagecreatefromwbmp": [
        "Create a new image from file or URL",
        "imagecreatefromwbmp ( string $filename ) : resource"
    ],
    "imagecreatefromwebp": [
        "Create a new image from file or URL",
        "imagecreatefromwebp ( string $filename ) : resource"
    ],
    "imagecreatefromxbm": [
        "Create a new image from file or URL",
        "imagecreatefromxbm ( string $filename ) : resource"
    ],
    "imagecreatefromxpm": [
        "Create a new image from file or URL",
        "imagecreatefromxpm ( string $filename ) : resource"
    ],
    "imagecreatetruecolor": [
        "Create a new true color image",
        "imagecreatetruecolor ( int $width , int $height ) : resource"
    ],
    "imagecrop": [
        "Crop an image to the given rectangle",
        "imagecrop ( resource $image , array $rect ) : resource|false"
    ],
    "imagecropauto": [
        "Crop an image automatically using one of the available modes",
        "imagecropauto ( resource $image , int $mode = IMG_CROP_DEFAULT , float $threshold = .5 , int $color = -1 ) : resource|false"
    ],
    "imagedashedline": [
        "Draw a dashed line",
        "imagedashedline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color ) : bool"
    ],
    "imagedestroy": [
        "Destroy an image",
        "imagedestroy ( resource $image ) : bool"
    ],
    "imageellipse": [
        "Draw an ellipse",
        "imageellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color ) : bool"
    ],
    "imagefill": [
        "Flood fill",
        "imagefill ( resource $image , int $x , int $y , int $color ) : bool"
    ],
    "imagefilledarc": [
        "Draw a partial arc and fill it",
        "imagefilledarc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color , int $style ) : bool"
    ],
    "imagefilledellipse": [
        "Draw a filled ellipse",
        "imagefilledellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color ) : bool"
    ],
    "imagefilledpolygon": [
        "Draw a filled polygon",
        "imagefilledpolygon ( resource $image , array $points , int $num_points , int $color ) : bool",
        "imagefilledpolygon ( resource $image , array $points , int $color ) : bool"
    ],
    "imagefilledrectangle": [
        "Draw a filled rectangle",
        "imagefilledrectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color ) : bool"
    ],
    "imagefilltoborder": [
        "Flood fill to specific color",
        "imagefilltoborder ( resource $image , int $x , int $y , int $border , int $color ) : bool"
    ],
    "imagefilter": [
        "Applies a filter to an image",
        "imagefilter ( resource $image , int $filtertype , int $arg1 = ? , int $arg2 = ? , int $arg3 = ? , int $arg4 = ? ) : bool"
    ],
    "imageflip": [
        "Flips an image using a given mode",
        "imageflip ( resource $image , int $mode ) : bool"
    ],
    "imagefontheight": [
        "Get font height",
        "imagefontheight ( int $font ) : int"
    ],
    "imagefontwidth": [
        "Get font width",
        "imagefontwidth ( int $font ) : int"
    ],
    "imageftbbox": [
        "Give the bounding box of a text using fonts via freetype2",
        "imageftbbox ( float $size , float $angle , string $fontfile , string $text , array $extrainfo = ? ) : array"
    ],
    "imagefttext": [
        "Write text to the image using fonts using FreeType 2",
        "imagefttext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text , array $extrainfo = ? ) : array"
    ],
    "imagegammacorrect": [
        "Apply a gamma correction to a GD image",
        "imagegammacorrect ( resource $image , float $inputgamma , float $outputgamma ) : bool"
    ],
    "imagegd": [
        "Output GD image to browser or file",
        "imagegd ( resource $image , mixed $to = NULL ) : bool"
    ],
    "imagegd2": [
        "Output GD2 image to browser or file",
        "imagegd2 ( resource $image , mixed $to = NULL , int $chunk_size = 128 , int $type = IMG_GD2_RAW ) : bool"
    ],
    "imagegetclip": [
        "Get the clipping rectangle",
        "imagegetclip ( resource $im ) : array"
    ],
    "imagegetinterpolation": [
        "Get the interpolation method",
        "imagegetinterpolation ( GdImage $image ) : int"
    ],
    "imagegif": [
        "Output image to browser or file",
        "imagegif ( resource $image , mixed $to = null ) : bool"
    ],
    "imagegrabscreen": [
        "Captures the whole screen",
        "imagegrabscreen ( ) : resource"
    ],
    "imagegrabwindow": [
        "Captures a window",
        "imagegrabwindow ( int $window_handle , int $client_area = 0 ) : resource"
    ],
    "imageinterlace": [
        "Enable or disable interlace",
        "imageinterlace ( resource $image , int $interlace = 0 ) : int"
    ],
    "imageistruecolor": [
        "Finds whether an image is a truecolor image",
        "imageistruecolor ( resource $image ) : bool"
    ],
    "imagejpeg": [
        "Output image to browser or file",
        "imagejpeg ( resource $image , mixed $to = null , int $quality = -1 ) : bool"
    ],
    "imagelayereffect": [
        "Set the alpha blending flag to use layering effects",
        "imagelayereffect ( resource $image , int $effect ) : bool"
    ],
    "imageline": [
        "Draw a line",
        "imageline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color ) : bool"
    ],
    "imageloadfont": [
        "Load a new font",
        "imageloadfont ( string $file ) : int"
    ],
    "imageopenpolygon": [
        "Draws an open polygon",
        "imageopenpolygon ( resource $image , array $points , int $num_points , int $color ) : bool",
        "imageopenpolygon ( resource $image , array $points , int $color ) : bool"
    ],
    "imagepalettecopy": [
        "Copy the palette from one image to another",
        "imagepalettecopy ( resource $destination , resource $source ) : void"
    ],
    "imagepalettetotruecolor": [
        "Converts a palette based image to true color",
        "imagepalettetotruecolor ( resource $src ) : bool"
    ],
    "imagepng": [
        "Output a PNG image to either the browser or a file",
        "imagepng ( resource $image , mixed $to = null , int $quality = -1 , int $filters = -1 ) : bool"
    ],
    "imagepolygon": [
        "Draws a polygon",
        "imagepolygon ( resource $image , array $points , int $num_points , int $color ) : bool",
        "imagepolygon ( resource $image , array $points , int $color ) : bool"
    ],
    "imagerectangle": [
        "Draw a rectangle",
        "imagerectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color ) : bool"
    ],
    "imageresolution": [
        "Get or set the resolution of the image",
        "imageresolution ( resource $image ) : mixed",
        "imageresolution ( resource $image , int $res_x , int $res_y = $res_x ) : mixed"
    ],
    "imagerotate": [
        "Rotate an image with a given angle",
        "imagerotate ( resource $image , float $angle , int $bgd_color , int $dummy = 0 ) : resource|false"
    ],
    "imagesavealpha": [
        "Whether to retain full alpha channel information when saving PNG images",
        "imagesavealpha ( resource $image , bool $saveflag ) : bool"
    ],
    "imagescale": [
        "Scale an image using the given new width and height",
        "imagescale ( resource $image , int $new_width , int $new_height = -1 , int $mode = IMG_BILINEAR_FIXED ) : resource|false"
    ],
    "imagesetbrush": [
        "Set the brush image for line drawing",
        "imagesetbrush ( resource $image , resource $brush ) : bool"
    ],
    "imagesetclip": [
        "Set the clipping rectangle",
        "imagesetclip ( resource $im , int $x1 , int $y1 , int $x2 , int $y2 ) : bool"
    ],
    "imagesetinterpolation": [
        "Set the interpolation method",
        "imagesetinterpolation ( resource $image , int $method = IMG_BILINEAR_FIXED ) : bool"
    ],
    "imagesetpixel": [
        "Set a single pixel",
        "imagesetpixel ( resource $image , int $x , int $y , int $color ) : bool"
    ],
    "imagesetstyle": [
        "Set the style for line drawing",
        "imagesetstyle ( resource $image , array $style ) : bool"
    ],
    "imagesetthickness": [
        "Set the thickness for line drawing",
        "imagesetthickness ( resource $image , int $thickness ) : bool"
    ],
    "imagesettile": [
        "Set the tile image for filling",
        "imagesettile ( resource $image , resource $tile ) : bool"
    ],
    "imagestring": [
        "Draw a string horizontally",
        "imagestring ( resource $image , int $font , int $x , int $y , string $string , int $color ) : bool"
    ],
    "imagestringup": [
        "Draw a string vertically",
        "imagestringup ( resource $image , int $font , int $x , int $y , string $string , int $color ) : bool"
    ],
    "imagesx": [
        "Get image width",
        "imagesx ( resource $image ) : int"
    ],
    "imagesy": [
        "Get image height",
        "imagesy ( resource $image ) : int"
    ],
    "imagetruecolortopalette": [
        "Convert a true color image to a palette image",
        "imagetruecolortopalette ( resource $image , bool $dither , int $ncolors ) : bool"
    ],
    "imagettfbbox": [
        "Give the bounding box of a text using TrueType fonts",
        "imagettfbbox ( float $size , float $angle , string $fontfile , string $text ) : array"
    ],
    "imagettftext": [
        "Write text to the image using TrueType fonts",
        "imagettftext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text ) : array"
    ],
    "imagetypes": [
        "Return the image types supported by this PHP build",
        "imagetypes ( ) : int"
    ],
    "imagewbmp": [
        "Output image to browser or file",
        "imagewbmp ( resource $image , mixed $to = null , int $foreground = ? ) : bool"
    ],
    "imagewebp": [
        "Output a WebP image to browser or file",
        "imagewebp ( resource $image , mixed $to = null , int $quality = 80 ) : bool"
    ],
    "imagexbm": [
        "Output an XBM image to browser or file",
        "imagexbm ( resource $image , mixed $filename , int $foreground = ? ) : bool"
    ],
    "Imagick": [
        "The Imagick class has the ability to hold and operate on multiple images simultaneously. This is achieved through an internal stack. There is always an internal pointer that points at the current image. Some functions operate on all images in the Imagick class, but most operate only on the current image in the internal stack. As a convention, method names can contain the word Image to denote they affect only the current image in the stack.",
        "new Imagick ( mixed $files = ? )"
    ],
    "ImagickDraw": [
        "The ImagickDraw constructor",
        "new ImagickDraw ( )"
    ],
    "ImagickPixel": [
        "The ImagickPixel constructor",
        "new ImagickPixel ( string $color = ? )"
    ],
    "ImagickPixelIterator": [
        "The ImagickPixelIterator constructor",
        "new ImagickPixelIterator ( Imagick $wand )"
    ],
    "imap_8bit": [
        "Convert an 8bit string to a quoted-printable string",
        "imap_8bit ( string $string ) : string|false"
    ],
    "imap_alerts": [
        "Returns all IMAP alert messages that have occurred",
        "imap_alerts ( ) : array|false"
    ],
    "imap_append": [
        "Append a string message to a specified mailbox",
        "imap_append ( resource $imap , string $folder , string $message , string|null $options = null , string|null $internal_date = null ) : bool"
    ],
    "imap_base64": [
        "Decode BASE64 encoded text",
        "imap_base64 ( string $string ) : string|false"
    ],
    "imap_binary": [
        "Convert an 8bit string to a base64 string",
        "imap_binary ( string $string ) : string|false"
    ],
    "imap_body": [
        "Read the message body",
        "imap_body ( resource $imap , int $message_num , int $flags = 0 ) : string|false"
    ],
    "imap_bodystruct": [
        "Read the structure of a specified body section of a specific message",
        "imap_bodystruct ( resource $imap , int $message_num , string $section ) : stdClass|false"
    ],
    "imap_check": [
        "Check current mailbox",
        "imap_check ( resource $imap ) : stdClass|false"
    ],
    "imap_clearflag_full": [
        "Clears flags on messages",
        "imap_clearflag_full ( resource $imap , string $sequence , string $flag , int $options = 0 ) : bool"
    ],
    "imap_close": [
        "Close an IMAP stream",
        "imap_close ( resource $imap , int $flags = 0 ) : bool"
    ],
    "imap_createmailbox": [
        "Create a new mailbox",
        "imap_createmailbox ( resource $imap , string $mailbox ) : bool"
    ],
    "imap_delete": [
        "Mark a message for deletion from current mailbox",
        "imap_delete ( resource $imap , string $message_num , int $flags = 0 ) : bool"
    ],
    "imap_deletemailbox": [
        "Delete a mailbox",
        "imap_deletemailbox ( resource $imap , string $mailbox ) : bool"
    ],
    "imap_errors": [
        "Returns all of the IMAP errors that have occurred",
        "imap_errors ( ) : array|false"
    ],
    "imap_expunge": [
        "Delete all messages marked for deletion",
        "imap_expunge ( resource $imap ) : bool"
    ],
    "imap_fetch_overview": [
        "Read an overview of the information in the headers of the given message",
        "imap_fetch_overview ( resource $imap , string $sequence , int $flags = 0 ) : array|false"
    ],
    "imap_fetchbody": [
        "Fetch a particular section of the body of the message",
        "imap_fetchbody ( resource $imap , int $message_num , string $section , int $flags = 0 ) : string|false"
    ],
    "imap_fetchheader": [
        "Returns header for a message",
        "imap_fetchheader ( resource $imap , int $message_num , int $flags = 0 ) : string|false"
    ],
    "imap_fetchmime": [
        "Fetch MIME headers for a particular section of the message",
        "imap_fetchmime ( resource $imap , int $message_num , string $section , int $flags = 0 ) : string|false"
    ],
    "imap_fetchstructure": [
        "Read the structure of a particular message",
        "imap_fetchstructure ( resource $imap , int $message_num , int $flags = 0 ) : stdClass|false"
    ],
    "imap_gc": [
        "Clears IMAP cache",
        "imap_gc ( resource $imap , int $flags ) : bool"
    ],
    "imap_get_quota": [
        "Retrieve the quota level settings, and usage statics per mailbox",
        "imap_get_quota ( resource $imap , string $quota_root ) : array|false"
    ],
    "imap_get_quotaroot": [
        "Retrieve the quota settings per user",
        "imap_get_quotaroot ( resource $imap , string $mailbox ) : array|false"
    ],
    "imap_getacl": [
        "Gets the ACL for a given mailbox",
        "imap_getacl ( resource $imap , string $mailbox ) : array|false"
    ],
    "imap_getmailboxes": [
        "Read the list of mailboxes, returning detailed information on each one",
        "imap_getmailboxes ( resource $imap , string $reference , string $pattern ) : array|false"
    ],
    "imap_getsubscribed": [
        "List all the subscribed mailboxes",
        "imap_getsubscribed ( resource $imap , string $reference , string $pattern ) : array|false"
    ],
    "imap_headerinfo": [
        "Read the header of the message",
        "imap_headerinfo ( resource $imap , int $message_num , int $from_length = 0 , int $subject_length = 0 ) : stdClass|false"
    ],
    "imap_headers": [
        "Returns headers for all messages in a mailbox",
        "imap_headers ( resource $imap ) : array|false"
    ],
    "imap_last_error": [
        "Gets the last IMAP error that occurred during this page request",
        "imap_last_error ( ) : string|false"
    ],
    "imap_list": [
        "Read the list of mailboxes",
        "imap_list ( resource $imap , string $reference , string $pattern ) : array|false"
    ],
    "imap_listscan": [
        "Returns the list of mailboxes that matches the given text",
        "imap_listscan ( resource $imap , string $reference , string $pattern , string $content ) : array|false"
    ],
    "imap_lsub": [
        "List all the subscribed mailboxes",
        "imap_lsub ( resource $imap , string $reference , string $pattern ) : array|false"
    ],
    "imap_mail": [
        "Send an email message",
        "imap_mail ( string $to , string $subject , string $message , string|null $additional_headers = null , string|null $cc = null , string|null $bcc = null , string|null $return_path = null ) : bool"
    ],
    "imap_mail_compose": [
        "Create a MIME message based on given envelope and body sections",
        "imap_mail_compose ( array $envelope , array $bodies ) : string|false"
    ],
    "imap_mail_copy": [
        "Copy specified messages to a mailbox",
        "imap_mail_copy ( resource $imap , string $message_nums , string $mailbox , int $flags = 0 ) : bool"
    ],
    "imap_mail_move": [
        "Move specified messages to a mailbox",
        "imap_mail_move ( resource $imap , string $message_nums , string $mailbox , int $flags = 0 ) : bool"
    ],
    "imap_mailboxmsginfo": [
        "Get information about the current mailbox",
        "imap_mailboxmsginfo ( resource $imap ) : stdClass"
    ],
    "imap_mime_header_decode": [
        "Decode MIME header elements",
        "imap_mime_header_decode ( string $string ) : array|false"
    ],
    "imap_msgno": [
        "Gets the message sequence number for the given UID",
        "imap_msgno ( resource $imap , int $message_uid ) : int"
    ],
    "imap_mutf7_to_utf8": [
        "Decode a modified UTF-7 string to UTF-8",
        "imap_mutf7_to_utf8 ( string $string ) : string|false"
    ],
    "imap_num_msg": [
        "Gets the number of messages in the current mailbox",
        "imap_num_msg ( resource $imap ) : int|false"
    ],
    "imap_num_recent": [
        "Gets the number of recent messages in current mailbox",
        "imap_num_recent ( resource $imap ) : int"
    ],
    "imap_open": [
        "Open an IMAP stream to a mailbox",
        "imap_open ( string $mailbox , string $user , string $password , int $flags = 0 , int $retries = 0 , array $options = [] ) : resource|false"
    ],
    "imap_ping": [
        "Check if the IMAP stream is still active",
        "imap_ping ( resource $imap ) : bool"
    ],
    "imap_qprint": [
        "Convert a quoted-printable string to an 8 bit string",
        "imap_qprint ( string $string ) : string|false"
    ],
    "imap_renamemailbox": [
        "Rename an old mailbox to new mailbox",
        "imap_renamemailbox ( resource $imap , string $from , string $to ) : bool"
    ],
    "imap_reopen": [
        "Reopen IMAP stream to new mailbox",
        "imap_reopen ( resource $imap , string $mailbox , int $flags = 0 , int $retries = 0 ) : bool"
    ],
    "imap_rfc822_parse_adrlist": [
        "Parses an address string",
        "imap_rfc822_parse_adrlist ( string $string , string $default_hostname ) : array"
    ],
    "imap_rfc822_parse_headers": [
        "Parse mail headers from a string",
        "imap_rfc822_parse_headers ( string $headers , string $default_hostname = \"UNKNOWN\" ) : stdClass"
    ],
    "imap_rfc822_write_address": [
        "Returns a properly formatted email address given the mailbox, host, and personal info",
        "imap_rfc822_write_address ( string $mailbox , string $hostname , string $personal ) : string|false"
    ],
    "imap_savebody": [
        "Save a specific body section to a file",
        "imap_savebody ( resource $imap , resource|string|int $file , int $message_num , string $section = \"\" , int $flags = 0 ) : bool"
    ],
    "imap_search": [
        "This function returns an array of messages matching the given search criteria",
        "imap_search ( resource $imap , string $criteria , int $flags = SE_FREE , string $charset = \"\" ) : array|false"
    ],
    "imap_set_quota": [
        "Sets a quota for a given mailbox",
        "imap_set_quota ( resource $imap , string $quota_root , int $mailbox_size ) : bool"
    ],
    "imap_setacl": [
        "Sets the ACL for a given mailbox",
        "imap_setacl ( resource $imap , string $mailbox , string $user_id , string $rights ) : bool"
    ],
    "imap_setflag_full": [
        "Sets flags on messages",
        "imap_setflag_full ( resource $imap , string $sequence , string $flag , int $options = 0 ) : bool"
    ],
    "imap_sort": [
        "Gets and sort messages",
        "imap_sort ( resource $imap , int $criteria , bool $reverse , int $flags = 0 , string|null $search_criteria = null , string|null $charset = null ) : array|false"
    ],
    "imap_status": [
        "Returns status information on a mailbox",
        "imap_status ( resource $imap , string $mailbox , int $flags ) : stdClass|false"
    ],
    "imap_subscribe": [
        "Subscribe to a mailbox",
        "imap_subscribe ( resource $imap , string $mailbox ) : bool"
    ],
    "imap_thread": [
        "Returns a tree of threaded message",
        "imap_thread ( resource $imap , int $flags = SE_FREE ) : array|false"
    ],
    "imap_timeout": [
        "Set or fetch imap timeout",
        "imap_timeout ( int $timeout_type , int $timeout = -1 ) : int|bool"
    ],
    "imap_uid": [
        "This function returns the UID for the given message sequence number",
        "imap_uid ( resource $imap , int $message_num ) : int|false"
    ],
    "imap_undelete": [
        "Unmark the message which is marked deleted",
        "imap_undelete ( resource $imap , string $message_num , int $flags = 0 ) : bool"
    ],
    "imap_unsubscribe": [
        "Unsubscribe from a mailbox",
        "imap_unsubscribe ( resource $imap , string $mailbox ) : bool"
    ],
    "imap_utf7_decode": [
        "Decodes a modified UTF-7 encoded string",
        "imap_utf7_decode ( string $string ) : string|false"
    ],
    "imap_utf7_encode": [
        "Converts ISO-8859-1 string to modified UTF-7 text",
        "imap_utf7_encode ( string $string ) : string"
    ],
    "imap_utf8": [
        "Converts MIME-encoded text to UTF-8",
        "imap_utf8 ( string $mime_encoded_text ) : string"
    ],
    "imap_utf8_to_mutf7": [
        "Encode a UTF-8 string to modified UTF-7",
        "imap_utf8_to_mutf7 ( string $string ) : string|false"
    ],
    "implode": [
        "Join array elements with a string",
        "implode ( string $separator , array $array ) : string",
        "implode ( array $array ) : string",
        "implode ( array $array , string $separator ) : string"
    ],
    "in_array": [
        "Checks if a value exists in an array",
        "in_array ( mixed $needle , array $haystack , bool $strict = false ) : bool"
    ],
    "inet_ntop": [
        "Converts a packed internet address to a human readable representation",
        "inet_ntop ( string $ip ) : string|false"
    ],
    "inet_pton": [
        "Converts a human readable IP address to its packed in_addr representation",
        "inet_pton ( string $ip ) : string|false"
    ],
    "InfiniteIterator": [
        "The InfiniteIterator allows one to infinitely iterate over an iterator without having to manually rewind the iterator upon reaching its end.",
        "new InfiniteIterator ( Iterator $iterator )"
    ],
    "inflate_add": [
        "Incrementally inflate encoded data",
        "inflate_add ( InflateContext $context , string $data , int $flush_mode = ZLIB_SYNC_FLUSH ) : string|false"
    ],
    "inflate_get_read_len": [
        "Get number of bytes read so far",
        "inflate_get_read_len ( InflateContext $context ) : int"
    ],
    "inflate_get_status": [
        "Get decompression status",
        "inflate_get_status ( InflateContext $context ) : int"
    ],
    "inflate_init": [
        "Initialize an incremental inflate context",
        "inflate_init ( int $encoding , array $options = [] ) : InflateContext|false"
    ],
    "InflateContext": [
        "A fully opaque class which replaces zlib.inflate resources as of PHP 8.0.0."
    ],
    "ingres_autocommit": [
        "Switch autocommit on or off",
        "ingres_autocommit ( resource $link ) : bool"
    ],
    "ingres_autocommit_state": [
        "Test if the connection is using autocommit",
        "ingres_autocommit_state ( resource $link ) : bool"
    ],
    "ingres_charset": [
        "Returns the installation character set",
        "ingres_charset ( resource $link ) : string"
    ],
    "ingres_close": [
        "Close an Ingres database connection",
        "ingres_close ( resource $link ) : bool"
    ],
    "ingres_commit": [
        "Commit a transaction",
        "ingres_commit ( resource $link ) : bool"
    ],
    "ingres_connect": [
        "Open a connection to an Ingres database",
        "ingres_connect ( string $database = ? , string $username = ? , string $password = ? , array $options = ? ) : resource|false"
    ],
    "ingres_cursor": [
        "Get a cursor name for a given result resource",
        "ingres_cursor ( resource $result ) : string"
    ],
    "ingres_errno": [
        "Get the last Ingres error number generated",
        "ingres_errno ( resource $link = ? ) : int"
    ],
    "ingres_error": [
        "Get a meaningful error message for the last error generated",
        "ingres_error ( resource $link = ? ) : string"
    ],
    "ingres_errsqlstate": [
        "Get the last SQLSTATE error code generated",
        "ingres_errsqlstate ( resource $link = ? ) : string"
    ],
    "ingres_escape_string": [
        "Escape special characters for use in a query",
        "ingres_escape_string ( resource $link , string $source_string ) : string"
    ],
    "ingres_execute": [
        "Execute a prepared query",
        "ingres_execute ( resource $result , array $params = ? , string $types = ? ) : bool"
    ],
    "ingres_fetch_array": [
        "Fetch a row of result into an array",
        "ingres_fetch_array ( resource $result , int $result_type = ? ) : array"
    ],
    "ingres_fetch_assoc": [
        "Fetch a row of result into an associative array",
        "ingres_fetch_assoc ( resource $result ) : array"
    ],
    "ingres_fetch_object": [
        "Fetch a row of result into an object",
        "ingres_fetch_object ( resource $result , int $result_type = ? ) : object"
    ],
    "ingres_fetch_proc_return": [
        "Get the return value from a procedure call",
        "ingres_fetch_proc_return ( resource $result ) : int"
    ],
    "ingres_fetch_row": [
        "Fetch a row of result into an enumerated array",
        "ingres_fetch_row ( resource $result ) : array"
    ],
    "ingres_field_length": [
        "Get the length of a field",
        "ingres_field_length ( resource $result , int $index ) : int"
    ],
    "ingres_field_name": [
        "Get the name of a field in a query result",
        "ingres_field_name ( resource $result , int $index ) : string|false"
    ],
    "ingres_field_nullable": [
        "Test if a field is nullable",
        "ingres_field_nullable ( resource $result , int $index ) : bool"
    ],
    "ingres_field_precision": [
        "Get the precision of a field",
        "ingres_field_precision ( resource $result , int $index ) : int"
    ],
    "ingres_field_scale": [
        "Get the scale of a field",
        "ingres_field_scale ( resource $result , int $index ) : int"
    ],
    "ingres_field_type": [
        "Get the type of a field in a query result",
        "ingres_field_type ( resource $result , int $index ) : string|false"
    ],
    "ingres_free_result": [
        "Free the resources associated with a result identifier",
        "ingres_free_result ( resource $result ) : bool"
    ],
    "ingres_next_error": [
        "Get the next Ingres error",
        "ingres_next_error ( resource $link = ? ) : bool"
    ],
    "ingres_num_fields": [
        "Get the number of fields returned by the last query",
        "ingres_num_fields ( resource $result ) : int"
    ],
    "ingres_num_rows": [
        "Get the number of rows affected or returned by a query",
        "ingres_num_rows ( resource $result ) : int"
    ],
    "ingres_pconnect": [
        "Open a persistent connection to an Ingres database",
        "ingres_pconnect ( string $database = ? , string $username = ? , string $password = ? , array $options = ? ) : resource|false"
    ],
    "ingres_prepare": [
        "Prepare a query for later execution",
        "ingres_prepare ( resource $link , string $query ) : mixed"
    ],
    "ingres_query": [
        "Send an SQL query to Ingres",
        "ingres_query ( resource $link , string $query , array $params = ? , string $types = ? ) : mixed"
    ],
    "ingres_result_seek": [
        "Set the row position before fetching data",
        "ingres_result_seek ( resource $result , int $position ) : bool"
    ],
    "ingres_rollback": [
        "Roll back a transaction",
        "ingres_rollback ( resource $link ) : bool"
    ],
    "ingres_set_environment": [
        "Set environment features controlling output options",
        "ingres_set_environment ( resource $link , array $options ) : bool"
    ],
    "ingres_unbuffered_query": [
        "Send an unbuffered  SQL query to Ingres",
        "ingres_unbuffered_query ( resource $link , string $query , array $params = ? , string $types = ? ) : mixed"
    ],
    "ini_get": [
        "Gets the value of a configuration option",
        "ini_get ( string $option ) : string|false"
    ],
    "ini_get_all": [
        "Gets all configuration options",
        "ini_get_all ( string $extension = ? , bool $details = true ) : array"
    ],
    "ini_restore": [
        "Restores the value of a configuration option",
        "ini_restore ( string $option ) : void"
    ],
    "ini_set": [
        "Sets the value of a configuration option",
        "ini_set ( string $option , string $value ) : string|false"
    ],
    "inotify_add_watch": [
        "Add a watch to an initialized inotify instance",
        "inotify_add_watch ( resource $inotify_instance , string $pathname , int $mask ) : int"
    ],
    "inotify_init": [
        "Initialize an inotify instance",
        "inotify_init ( ) : resource"
    ],
    "inotify_queue_len": [
        "Return a number upper than zero if there are pending events",
        "inotify_queue_len ( resource $inotify_instance ) : int"
    ],
    "inotify_read": [
        "Read events from an inotify instance",
        "inotify_read ( resource $inotify_instance ) : array"
    ],
    "inotify_rm_watch": [
        "Remove an existing watch from an inotify instance",
        "inotify_rm_watch ( resource $inotify_instance , int $watch_descriptor ) : bool"
    ],
    "intdiv": [
        "Integer division",
        "intdiv ( int $num1 , int $num2 ) : int"
    ],
    "interface_exists": [
        "Checks if the interface has been defined",
        "interface_exists ( string $interface_name , bool $autoload = true ) : bool"
    ],
    "intl_error_name": [
        "Get symbolic name for a given error code",
        "intl_error_name ( int $errorCode ) : string"
    ],
    "intl_get_error_code": [
        "Get the last error code",
        "intl_get_error_code ( ) : int"
    ],
    "intl_get_error_message": [
        "Get description of the last error",
        "intl_get_error_message ( ) : string"
    ],
    "intl_is_failure": [
        "Check whether the given error code indicates failure",
        "intl_is_failure ( int $errorCode ) : bool"
    ],
    "IntlBreakIterator": [
        "A \u201cbreak iterator\u201d is an ICU object that exposes methods for locating boundaries in text (e.g. word or sentence boundaries). The PHP IntlBreakIterator serves as the base class for all types of ICU break iterators. Where extra functionality is available, the intl extension may expose the ICU break iterator with suitable subclasses, such as IntlRuleBasedBreakIterator or IntlCodePointBreakIterator."
    ],
    "intlcal_add": [
        "Add a (signed) amount of time to a field",
        "intlcal_add ( IntlCalendar $cal , int $field , int $amount ) : bool"
    ],
    "intlcal_after": [
        "Whether this object\u02bcs time is after that of the passed object",
        "intlcal_after ( IntlCalendar $cal , IntlCalendar $other ) : bool"
    ],
    "intlcal_before": [
        "Whether this object\u02bcs time is before that of the passed object",
        "intlcal_before ( IntlCalendar $cal , IntlCalendar $other ) : bool"
    ],
    "intlcal_clear": [
        "Clear a field or all fields",
        "intlcal_clear ( IntlCalendar $cal , int $field = NULL ) : bool"
    ],
    "intlcal_create_instance": [
        "Create a new IntlCalendar",
        "intlcal_create_instance ( mixed $timeZone = NULL , string $locale = \"\" ) : IntlCalendar"
    ],
    "intlcal_equals": [
        "Compare time of two IntlCalendar objects for equality",
        "intlcal_equals ( IntlCalendar $cal , IntlCalendar $other ) : bool"
    ],
    "intlcal_field_difference": [
        "Calculate difference between given time and this object\u02bcs time",
        "intlcal_field_difference ( IntlCalendar $cal , float $when , int $field ) : int|false"
    ],
    "intlcal_from_date_time": [
        "Create an IntlCalendar from a DateTime object or string",
        "intlcal_from_date_time ( mixed $dateTime ) : IntlCalendar"
    ],
    "intlcal_get": [
        "Get the value for a field",
        "intlcal_get ( IntlCalendar $cal , int $field ) : int"
    ],
    "intlcal_get_actual_maximum": [
        "The maximum value for a field, considering the object\u02bcs current time",
        "intlcal_get_actual_maximum ( IntlCalendar $cal , int $field ) : int|false"
    ],
    "intlcal_get_actual_minimum": [
        "The minimum value for a field, considering the object\u02bcs current time",
        "intlcal_get_actual_minimum ( IntlCalendar $cal , int $field ) : int|false"
    ],
    "intlcal_get_available_locales": [
        "Get array of locales for which there is data",
        "intlcal_get_available_locales ( ) : array"
    ],
    "intlcal_get_day_of_week_type": [
        "Tell whether a day is a weekday, weekend or a day that has a transition between the two",
        "intlcal_get_day_of_week_type ( IntlCalendar $cal , int $dayOfWeek ) : int|false"
    ],
    "intlcal_get_error_code": [
        "Get last error code on the object",
        "intlcal_get_error_code ( IntlCalendar $calendar ) : int"
    ],
    "intlcal_get_error_message": [
        "Get last error message on the object",
        "intlcal_get_error_message ( IntlCalendar $calendar ) : string"
    ],
    "intlcal_get_first_day_of_week": [
        "Get the first day of the week for the calendar\u02bcs locale",
        "intlcal_get_first_day_of_week ( IntlCalendar $cal ) : int|false"
    ],
    "intlcal_get_greatest_minimum": [
        "Get the largest local minimum value for a field",
        "intlcal_get_greatest_minimum ( IntlCalendar $cal , int $field ) : int|false"
    ],
    "intlcal_get_keyword_values_for_locale": [
        "Get set of locale keyword values",
        "static intlcal_get_keyword_values_for_locale ( string $key , string $locale , bool $commonlyUsed ) : Iterator|false"
    ],
    "intlcal_get_least_maximum": [
        "Get the smallest local maximum for a field",
        "intlcal_get_least_maximum ( IntlCalendar $cal , int $field ) : int|false"
    ],
    "intlcal_get_locale": [
        "Get the locale associated with the object",
        "intlcal_get_locale ( IntlCalendar $cal , int $localeType ) : string|false"
    ],
    "intlcal_get_maximum": [
        "Get the global maximum value for a field",
        "intlcal_get_maximum ( IntlCalendar $cal , int $field ) : int|false"
    ],
    "intlcal_get_minimal_days_in_first_week": [
        "Get minimal number of days the first week in a year or month can have",
        "intlcal_get_minimal_days_in_first_week ( IntlCalendar $cal ) : int|false"
    ],
    "intlcal_get_minimum": [
        "Get the global minimum value for a field",
        "intlcal_get_minimum ( IntlCalendar $cal , int $field ) : int|false"
    ],
    "intlcal_get_now": [
        "Get number representing the current time",
        "intlcal_get_now ( ) : float"
    ],
    "intlcal_get_repeated_wall_time_option": [
        "Get behavior for handling repeating wall time",
        "intlcal_get_repeated_wall_time_option ( IntlCalendar $cal ) : int"
    ],
    "intlcal_get_skipped_wall_time_option": [
        "Get behavior for handling skipped wall time",
        "intlcal_get_skipped_wall_time_option ( IntlCalendar $cal ) : int"
    ],
    "intlcal_get_time": [
        "Get time currently represented by the object",
        "intlcal_get_time ( IntlCalendar $cal ) : float"
    ],
    "intlcal_get_time_zone": [
        "Get the object\u02bcs timezone",
        "intlcal_get_time_zone ( IntlCalendar $cal ) : IntlTimeZone"
    ],
    "intlcal_get_type": [
        "Get the calendar type",
        "intlcal_get_type ( IntlCalendar $cal ) : string"
    ],
    "intlcal_get_weekend_transition": [
        "Get time of the day at which weekend begins or ends",
        "intlcal_get_weekend_transition ( IntlCalendar $cal , string $dayOfWeek ) : int|false"
    ],
    "intlcal_in_daylight_time": [
        "Whether the object\u02bcs time is in Daylight Savings Time",
        "intlcal_in_daylight_time ( IntlCalendar $cal ) : bool"
    ],
    "intlcal_is_equivalent_to": [
        "Whether another calendar is equal but for a different time",
        "intlcal_is_equivalent_to ( IntlCalendar $cal , IntlCalendar $other ) : bool"
    ],
    "intlcal_is_lenient": [
        "Whether date\/time interpretation is in lenient mode",
        "intlcal_is_lenient ( IntlCalendar $cal ) : bool"
    ],
    "intlcal_is_set": [
        "Whether a field is set",
        "intlcal_is_set ( IntlCalendar $cal , int $field ) : bool"
    ],
    "intlcal_is_weekend": [
        "Whether a certain date\/time is in the weekend",
        "intlcal_is_weekend ( IntlCalendar $cal , float $date = NULL ) : bool"
    ],
    "intlcal_roll": [
        "Add value to field without carrying into more significant fields",
        "intlcal_roll ( IntlCalendar $cal , int $field , mixed $amountOrUpOrDown ) : bool"
    ],
    "intlcal_set": [
        "Set a time field or several common fields at once",
        "intlcal_set ( IntlCalendar $cal , int $field , int $value ) : bool",
        "intlcal_set ( IntlCalendar $cal , int $year , int $month , int $dayOfMonth = NULL , int $hour = NULL , int $minute = NULL , int $second = NULL ) : bool"
    ],
    "intlcal_set_first_day_of_week": [
        "Set the day on which the week is deemed to start",
        "intlcal_set_first_day_of_week ( IntlCalendar $cal , int $dayOfWeek ) : bool"
    ],
    "intlcal_set_lenient": [
        "Set whether date\/time interpretation is to be lenient",
        "intlcal_set_lenient ( IntlCalendar $cal , bool $isLenient ) : bool"
    ],
    "intlcal_set_minimal_days_in_first_week": [
        "Set minimal number of days the first week in a year or month can have",
        "intlcal_set_minimal_days_in_first_week ( IntlCalendar $cal , int $minimalDays ) : bool"
    ],
    "intlcal_set_repeated_wall_time_option": [
        "Set behavior for handling repeating wall times at negative timezone offset transitions",
        "intlcal_set_repeated_wall_time_option ( IntlCalendar $cal , int $wallTimeOption ) : bool"
    ],
    "intlcal_set_skipped_wall_time_option": [
        "Set behavior for handling skipped wall times at positive timezone offset transitions",
        "intlcal_set_skipped_wall_time_option ( IntlCalendar $cal , int $wallTimeOption ) : bool"
    ],
    "intlcal_set_time": [
        "Set the calendar time in milliseconds since the epoch",
        "intlcal_set_time ( IntlCalendar $cal , float $date ) : bool"
    ],
    "intlcal_set_time_zone": [
        "Set the timezone used by this calendar",
        "intlcal_set_time_zone ( IntlCalendar $cal , mixed $timeZone ) : bool"
    ],
    "intlcal_to_date_time": [
        "Convert an IntlCalendar into a DateTime object",
        "intlcal_to_date_time ( IntlCalendar $cal ) : DateTime"
    ],
    "IntlChar": [
        "IntlChar provides access to a number of utility methods that can be used to access information about Unicode characters."
    ],
    "IntlCodePointBreakIterator": [
        "This break iterator identifies the boundaries between UTF-8 code points."
    ],
    "IntlDateFormatter": [
        "Create a date formatter",
        "new IntlDateFormatter ( string|null $locale , int $dateType , int $timeType , IntlTimeZone|DateTimeZone|string|null $timezone = null , IntlCalendar|int|null $calendar = null , string $pattern = \"\" )"
    ],
    "IntlException": [
        "This class is used for generating exceptions when errors occur inside intl functions. Such exceptions are only generated when intl.use_exceptions is enabled."
    ],
    "IntlGregorianCalendar": [
        "Create the Gregorian Calendar class",
        "new IntlGregorianCalendar ( IntlTimeZone $tz = ? , string $locale = ? )",
        "new IntlGregorianCalendar ( int $timeZoneOrYear , int $localeOrMonth , int $dayOfMonth )",
        "new IntlGregorianCalendar ( int $timeZoneOrYear , int $localeOrMonth , int $dayOfMonth , int $hour , int $minute , int $second = ? )"
    ],
    "IntlIterator": [
        "This class represents iterator objects throughout the intl extension whenever the iterator cannot be identified with any other object provided by the extension. The distinct iterator object used internally by the foreach construct can only be obtained (in the relevant part here) from objects, so objects of this class serve the purpose of providing the hook through which this internal object can be obtained. As a convenience, this class also implements the Iterator interface, allowing the collection of values to be navigated using the methods defined in that interface. Both these methods and the internal iterator objects provided to foreach are backed by the same state (e.g. the position of the iterator and its current value)."
    ],
    "IntlPartsIterator": [
        "Objects of this class can be obtained from IntlBreakIterator objects. While the break iterators provide a sequence of boundary positions when iterated, IntlPartsIterator objects provide, as a convenience, the text fragments comprehended between two successive boundaries."
    ],
    "IntlRuleBasedBreakIterator": [
        "A subclass of IntlBreakIterator that encapsulates ICU break iterators whose behavior is specified using a set of rules. This is the most common kind of break iterators.",
        "new IntlRuleBasedBreakIterator ( string $rules , string $areCompiled = ? )"
    ],
    "intltz_count_equivalent_ids": [
        "Get the number of IDs in the equivalency group that includes the given ID",
        "intltz_count_equivalent_ids ( string $zoneId ) : int"
    ],
    "intltz_create_default": [
        "Create a new copy of the default timezone for this host",
        "intltz_create_default ( ) : IntlTimeZone"
    ],
    "intltz_create_enumeration": [
        "Get an enumeration over time zone IDs associated with the\n  given country or offset",
        "intltz_create_enumeration ( mixed $countryOrRawOffset = ? ) : IntlIterator"
    ],
    "intltz_create_time_zone": [
        "Create a timezone object for the given ID",
        "intltz_create_time_zone ( string $zoneId ) : IntlTimeZone"
    ],
    "intltz_create_time_zone_id_enumeration": [
        "Get an enumeration over system time zone IDs with the given filter conditions",
        "intltz_create_time_zone_id_enumeration ( int $zoneType , string $region = ? , int $rawOffset = ? ) : IntlIterator|false"
    ],
    "intltz_from_date_time_zone": [
        "Create a timezone object from DateTimeZone",
        "intltz_from_date_time_zone ( DateTimeZone $zoneId ) : IntlTimeZone"
    ],
    "intltz_get_canonical_id": [
        "Get the canonical system timezone ID or the normalized custom time zone ID for the given time zone ID",
        "intltz_get_canonical_id ( string $zoneId , bool &$isSystemID = ? ) : string"
    ],
    "intltz_get_display_name": [
        "Get a name of this time zone suitable for presentation to the user",
        "intltz_get_display_name ( IntlTimeZone $timezone , bool $isDaylight = ? , int $style = ? , string $locale = ? ) : string"
    ],
    "intltz_get_dst_savings": [
        "Get the amount of time to be added to local standard time to get local wall clock time",
        "intltz_get_dst_savings ( IntlTimeZone $timezone ) : int"
    ],
    "intltz_get_equivalent_id": [
        "Get an ID in the equivalency group that includes the given ID",
        "intltz_get_equivalent_id ( string $zoneId , int $index ) : string"
    ],
    "intltz_get_error_code": [
        "Get last error code on the object",
        "intltz_get_error_code ( IntlTimeZone $timezone ) : int"
    ],
    "intltz_get_error_message": [
        "Get last error message on the object",
        "intltz_get_error_message ( IntlTimeZone $timezone ) : string"
    ],
    "intltz_get_gmt": [
        "Create GMT (UTC) timezone",
        "intltz_get_gmt ( ) : IntlTimeZone"
    ],
    "intltz_get_id": [
        "Get timezone ID",
        "intltz_get_id ( IntlTimeZone $timezone ) : string"
    ],
    "intltz_get_id_for_windows_id": [
        "Translate a Windows timezone into a system timezone",
        "intltz_get_id_for_windows_id ( string $timezone , string $region = ? ) : string|false"
    ],
    "intltz_get_offset": [
        "Get the time zone raw and GMT offset for the given moment in time",
        "intltz_get_offset ( IntlTimeZone $timezone , float $date , bool $local , int &$rawOffset , int &$dstOffset ) : bool"
    ],
    "intltz_get_raw_offset": [
        "Get the raw GMT offset (before taking daylight savings time into account",
        "intltz_get_raw_offset ( IntlTimeZone $timezone ) : int"
    ],
    "intltz_get_region": [
        "Get the region code associated with the given system time zone ID",
        "intltz_get_region ( string $zoneId ) : string|false"
    ],
    "intltz_get_tz_data_version": [
        "Get the timezone data version currently used by ICU",
        "intltz_get_tz_data_version ( ) : string"
    ],
    "intltz_get_unknown": [
        "Get the \"unknown\" time zone",
        "intltz_get_unknown ( ) : IntlTimeZone"
    ],
    "intltz_get_windows_id": [
        "Translate a system timezone into a Windows timezone",
        "intltz_get_windows_id ( string $timezone ) : string|false"
    ],
    "intltz_has_same_rules": [
        "Check if this zone has the same rules and offset as another zone",
        "intltz_has_same_rules ( IntlTimeZone $timezone , IntlTimeZone $otherTimeZone ) : bool"
    ],
    "intltz_to_date_time_zone": [
        "Convert to DateTimeZone object",
        "intltz_to_date_time_zone ( IntlTimeZone $timezone ) : DateTimeZone"
    ],
    "intltz_use_daylight_time": [
        "Check if this time zone uses daylight savings time",
        "intltz_use_daylight_time ( IntlTimeZone $timezone ) : bool"
    ],
    "intval": [
        "Get the integer value of a variable",
        "intval ( mixed $value , int $base = 10 ) : int"
    ],
    "InvalidArgumentException": [
        "Exception thrown if an argument is not of the expected type."
    ],
    "ip2long": [
        "Converts a string containing an (IPv4) Internet Protocol dotted address into a long integer",
        "ip2long ( string $ip ) : int|false"
    ],
    "iptcembed": [
        "Embeds binary IPTC data into a JPEG image",
        "iptcembed ( string $iptc_data , string $filename , int $spool = 0 ) : string|bool"
    ],
    "iptcparse": [
        "Parse a binary IPTC block into single tags",
        "iptcparse ( string $iptc_block ) : array|false"
    ],
    "is_a": [
        "Checks if the object is of this class or has this class as one of its parents",
        "is_a ( mixed $object , string $class_name , bool $allow_string = false ) : bool"
    ],
    "is_array": [
        "Finds whether a variable is an array",
        "is_array ( mixed $value ) : bool"
    ],
    "is_bool": [
        "Finds out whether a variable is a boolean",
        "is_bool ( mixed $value ) : bool"
    ],
    "is_callable": [
        "Verify that the contents of a variable can be called as a function",
        "is_callable ( mixed $value , bool $syntax_only = false , string &$callable_name = null ) : bool"
    ],
    "is_countable": [
        "Verify that the contents of a variable is a countable value",
        "is_countable ( mixed $value ) : bool"
    ],
    "is_dir": [
        "Tells whether the filename is a directory",
        "is_dir ( string $filename ) : bool"
    ],
    "is_executable": [
        "Tells whether the filename is executable",
        "is_executable ( string $filename ) : bool"
    ],
    "is_file": [
        "Tells whether the filename is a regular file",
        "is_file ( string $filename ) : bool"
    ],
    "is_finite": [
        "Finds whether a value is a legal finite number",
        "is_finite ( float $num ) : bool"
    ],
    "is_float": [
        "Finds whether the type of a variable is float",
        "is_float ( mixed $value ) : bool"
    ],
    "is_infinite": [
        "Finds whether a value is infinite",
        "is_infinite ( float $num ) : bool"
    ],
    "is_int": [
        "Find whether the type of a variable is integer",
        "is_int ( mixed $value ) : bool"
    ],
    "is_iterable": [
        "Verify that the contents of a variable is an iterable value",
        "is_iterable ( mixed $value ) : bool"
    ],
    "is_link": [
        "Tells whether the filename is a symbolic link",
        "is_link ( string $filename ) : bool"
    ],
    "is_nan": [
        "Finds whether a value is not a number",
        "is_nan ( float $num ) : bool"
    ],
    "is_null": [
        "Finds whether a variable is null",
        "is_null ( mixed $value ) : bool"
    ],
    "is_numeric": [
        "Finds whether a variable is a number or a numeric string",
        "is_numeric ( mixed $value ) : bool"
    ],
    "is_object": [
        "Finds whether a variable is an object",
        "is_object ( mixed $value ) : bool"
    ],
    "is_readable": [
        "Tells whether a file exists and is readable",
        "is_readable ( string $filename ) : bool"
    ],
    "is_resource": [
        "Finds whether a variable is a resource",
        "is_resource ( mixed $value ) : bool"
    ],
    "is_scalar": [
        "Finds whether a variable is a scalar",
        "is_scalar ( mixed $value ) : bool"
    ],
    "is_soap_fault": [
        "Checks if a SOAP call has failed",
        "is_soap_fault ( mixed $object ) : bool"
    ],
    "is_string": [
        "Find whether the type of a variable is string",
        "is_string ( mixed $value ) : bool"
    ],
    "is_subclass_of": [
        "Checks if the object has this class as one of its parents or implements it",
        "is_subclass_of ( mixed $object , string $class_name , bool $allow_string = true ) : bool"
    ],
    "is_tainted": [
        "Checks whether a string is tainted",
        "is_tainted ( string $string ) : bool"
    ],
    "is_uploaded_file": [
        "Tells whether the file was uploaded via HTTP POST",
        "is_uploaded_file ( string $filename ) : bool"
    ],
    "is_writable": [
        "Tells whether the filename is writable",
        "is_writable ( string $filename ) : bool"
    ],
    "isset": [
        "Determine if a variable is declared and is different than null",
        "isset ( mixed $var , mixed ...$vars ) : bool"
    ],
    "Iterator": [
        "Interface for external iterators or objects that can be iterated themselves internally."
    ],
    "iterator_apply": [
        "Call a function for every element in an iterator",
        "iterator_apply ( Traversable $iterator , callable $function , array $args = null ) : int"
    ],
    "iterator_count": [
        "Count the elements in an iterator",
        "iterator_count ( Traversable $iterator ) : int"
    ],
    "iterator_to_array": [
        "Copy the iterator into an array",
        "iterator_to_array ( Traversable $iterator , bool $use_keys = true ) : array"
    ],
    "IteratorAggregate": [
        "Interface to create an external Iterator."
    ],
    "IteratorIterator": [
        "This iterator wrapper allows the conversion of anything that is Traversable into an Iterator. It is important to understand that most classes that do not implement Iterators have reasons as most likely they do not allow the full Iterator feature set. If so, techniques should be provided to prevent misuse, otherwise expect exceptions or fatal errors.",
        "new IteratorIterator ( Traversable $iterator )"
    ],
    "jddayofweek": [
        "Returns the day of the week",
        "jddayofweek ( int $julian_day , int $mode = CAL_DOW_DAYNO ) : int|string"
    ],
    "jdmonthname": [
        "Returns a month name",
        "jdmonthname ( int $julian_day , int $mode ) : string"
    ],
    "jdtofrench": [
        "Converts a Julian Day Count to the French Republican Calendar",
        "jdtofrench ( int $julian_day ) : string"
    ],
    "jdtogregorian": [
        "Converts Julian Day Count to Gregorian date",
        "jdtogregorian ( int $julian_day ) : string"
    ],
    "jdtojewish": [
        "Converts a Julian day count to a Jewish calendar date",
        "jdtojewish ( int $julian_day , bool $hebrew = false , int $flags = 0 ) : string"
    ],
    "jdtojulian": [
        "Converts a Julian Day Count to a Julian Calendar Date",
        "jdtojulian ( int $julian_day ) : string"
    ],
    "jdtounix": [
        "Convert Julian Day to Unix timestamp",
        "jdtounix ( int $julian_day ) : int"
    ],
    "jewishtojd": [
        "Converts a date in the Jewish Calendar to Julian Day Count",
        "jewishtojd ( int $month , int $day , int $year ) : int"
    ],
    "jpeg2wbmp": [
        "Convert JPEG image file to WBMP image file",
        "jpeg2wbmp ( string $jpegname , string $wbmpname , int $dest_height , int $dest_width , int $threshold ) : bool"
    ],
    "json_decode": [
        "Decodes a JSON string",
        "json_decode ( string $json , bool|null $associative = null , int $depth = 512 , int $flags = 0 ) : mixed"
    ],
    "json_encode": [
        "Returns the JSON representation of a value",
        "json_encode ( mixed $value , int $flags = 0 , int $depth = 512 ) : string|false"
    ],
    "json_last_error": [
        "Returns the last error occurred",
        "json_last_error ( ) : int"
    ],
    "json_last_error_msg": [
        "Returns the error string of the last json_encode() or json_decode() call",
        "json_last_error_msg ( ) : string"
    ],
    "JsonException": [
        "Exception thrown if JSON_THROW_ON_ERROR option is set for json_encode() or json_decode(). code contains the error type, for possible values see json_last_error()."
    ],
    "JsonSerializable": [
        "Objects implementing JsonSerializable can customize their JSON representation when encoded with json_encode()."
    ],
    "juliantojd": [
        "Converts a Julian Calendar date to Julian Day Count",
        "juliantojd ( int $month , int $day , int $year ) : int"
    ],
    "key": [
        "Fetch a key from an array",
        "key ( array|object $array ) : int|string|null"
    ],
    "krsort": [
        "Sort an array by key in reverse order",
        "krsort ( array &$array , int $flags = SORT_REGULAR ) : bool"
    ],
    "ksort": [
        "Sort an array by key",
        "ksort ( array &$array , int $flags = SORT_REGULAR ) : bool"
    ],
    "lcfirst": [
        "Make a string's first character lowercase",
        "lcfirst ( string $string ) : string"
    ],
    "lcg_value": [
        "Combined linear congruential generator",
        "lcg_value ( ) : float"
    ],
    "lchgrp": [
        "Changes group ownership of symlink",
        "lchgrp ( string $filename , string|int $group ) : bool"
    ],
    "lchown": [
        "Changes user ownership of symlink",
        "lchown ( string $filename , string|int $user ) : bool"
    ],
    "ldap_8859_to_t61": [
        "Translate 8859 characters to t61 characters",
        "ldap_8859_to_t61 ( string $value ) : string|false"
    ],
    "ldap_add": [
        "Add entries to LDAP directory",
        "ldap_add ( resource $ldap , string $dn , array $entry , array|null $controls = null ) : bool"
    ],
    "ldap_add_ext": [
        "Add entries to LDAP directory",
        "ldap_add_ext ( resource $ldap , string $dn , array $entry , array|null $controls = null ) : resource|false"
    ],
    "ldap_bind": [
        "Bind to LDAP directory",
        "ldap_bind ( resource $ldap , string|null $dn = null , string|null $password = null ) : bool"
    ],
    "ldap_bind_ext": [
        "Bind to LDAP directory",
        "ldap_bind_ext ( resource $ldap , string|null $dn = null , string|null $password = null , array|null $controls = null ) : resource|false"
    ],
    "ldap_compare": [
        "Compare value of attribute found in entry specified with DN",
        "ldap_compare ( resource $ldap , string $dn , string $attribute , string $value , array|null $controls = null ) : bool|int"
    ],
    "ldap_connect": [
        "Connect to an LDAP server",
        "ldap_connect ( string|null $uri = null ) : resource|false",
        "ldap_connect ( string $host = null , int $port = 389 ) : resource|false"
    ],
    "ldap_control_paged_result": [
        "Send LDAP pagination control",
        "ldap_control_paged_result ( resource $link , int $pagesize , bool $iscritical = false , string $cookie = \"\" ) : bool"
    ],
    "ldap_control_paged_result_response": [
        "Retrieve the LDAP pagination cookie",
        "ldap_control_paged_result_response ( resource $link , resource $result , string &$cookie = ? , int &$estimated = ? ) : bool"
    ],
    "ldap_count_entries": [
        "Count the number of entries in a search",
        "ldap_count_entries ( resource $ldap , resource $result ) : int"
    ],
    "ldap_delete": [
        "Delete an entry from a directory",
        "ldap_delete ( resource $ldap , string $dn , array|null $controls = null ) : bool"
    ],
    "ldap_delete_ext": [
        "Delete an entry from a directory",
        "ldap_delete_ext ( resource $ldap , string $dn , array|null $controls = null ) : resource|false"
    ],
    "ldap_dn2ufn": [
        "Convert DN to User Friendly Naming format",
        "ldap_dn2ufn ( string $dn ) : string|false"
    ],
    "ldap_err2str": [
        "Convert LDAP error number into string error message",
        "ldap_err2str ( int $errno ) : string"
    ],
    "ldap_errno": [
        "Return the LDAP error number of the last LDAP command",
        "ldap_errno ( resource $ldap ) : int"
    ],
    "ldap_error": [
        "Return the LDAP error message of the last LDAP command",
        "ldap_error ( resource $ldap ) : string"
    ],
    "ldap_escape": [
        "Escape a string for use in an LDAP filter or DN",
        "ldap_escape ( string $value , string $ignore = \"\" , int $flags = 0 ) : string"
    ],
    "ldap_exop": [
        "Performs an extended operation",
        "ldap_exop ( resource $link , string $reqoid , string $reqdata = null , array $serverctrls = null , string &$retdata = ? , string &$retoid = ? ) : mixed"
    ],
    "ldap_exop_passwd": [
        "PASSWD extended operation helper",
        "ldap_exop_passwd ( resource $ldap , string $user = \"\" , string $old_password = \"\" , string $new_password = \"\" , array &$controls = null ) : string|bool"
    ],
    "ldap_exop_refresh": [
        "Refresh extended operation helper",
        "ldap_exop_refresh ( resource $ldap , string $dn , int $ttl ) : int|false"
    ],
    "ldap_exop_whoami": [
        "WHOAMI extended operation helper",
        "ldap_exop_whoami ( resource $ldap ) : string|false"
    ],
    "ldap_explode_dn": [
        "Splits DN into its component parts",
        "ldap_explode_dn ( string $dn , int $with_attrib ) : array|false"
    ],
    "ldap_first_attribute": [
        "Return first attribute",
        "ldap_first_attribute ( resource $ldap , resource $entry ) : string|false"
    ],
    "ldap_first_entry": [
        "Return first result id",
        "ldap_first_entry ( resource $ldap , resource $result ) : resource|false"
    ],
    "ldap_first_reference": [
        "Return first reference",
        "ldap_first_reference ( resource $ldap , resource $result ) : resource|false"
    ],
    "ldap_free_result": [
        "Free result memory",
        "ldap_free_result ( resource $ldap ) : bool"
    ],
    "ldap_get_attributes": [
        "Get attributes from a search result entry",
        "ldap_get_attributes ( resource $ldap , resource $entry ) : array"
    ],
    "ldap_get_dn": [
        "Get the DN of a result entry",
        "ldap_get_dn ( resource $ldap , resource $entry ) : string|false"
    ],
    "ldap_get_entries": [
        "Get all result entries",
        "ldap_get_entries ( resource $ldap , resource $result ) : array|false"
    ],
    "ldap_get_option": [
        "Get the current value for given option",
        "ldap_get_option ( resource $ldap , int $option , array|string|int &$value = null ) : bool"
    ],
    "ldap_get_values": [
        "Get all values from a result entry",
        "ldap_get_values ( resource $ldap , resource $entry , string $attribute ) : array|false"
    ],
    "ldap_get_values_len": [
        "Get all binary values from a result entry",
        "ldap_get_values_len ( resource $ldap , resource $entry , string $attribute ) : array|false"
    ],
    "ldap_list": [
        "Single-level search",
        "ldap_list ( resource|array $ldap , array|string $base , array|string $filter , array $attributes = [] , int $attributes_only = 0 , int $sizelimit = -1 , int $timelimit = -1 , int $deref = LDAP_DEREF_NEVER , array|null $controls = null ) : resource|array|false"
    ],
    "ldap_mod_add": [
        "Add attribute values to current attributes",
        "ldap_mod_add ( resource $ldap , string $dn , array $entry , array|null $controls = null ) : bool"
    ],
    "ldap_mod_add_ext": [
        "Add attribute values to current attributes",
        "ldap_mod_add_ext ( resource $ldap , string $dn , array $entry , array|null $controls = null ) : resource|false"
    ],
    "ldap_mod_del": [
        "Delete attribute values from current attributes",
        "ldap_mod_del ( resource $ldap , string $dn , array $entry , array|null $controls = null ) : bool"
    ],
    "ldap_mod_del_ext": [
        "Delete attribute values from current attributes",
        "ldap_mod_del_ext ( resource $ldap , string $dn , array $entry , array|null $controls = null ) : resource|false"
    ],
    "ldap_mod_replace": [
        "Replace attribute values with new ones",
        "ldap_mod_replace ( resource $ldap , string $dn , array $entry , array|null $controls = null ) : bool"
    ],
    "ldap_mod_replace_ext": [
        "Replace attribute values with new ones",
        "ldap_mod_replace_ext ( resource $ldap , string $dn , array $entry , array|null $controls = null ) : resource|false"
    ],
    "ldap_modify_batch": [
        "Batch and execute modifications on an LDAP entry",
        "ldap_modify_batch ( resource $ldap , string $dn , array $modifications_info , array|null $controls = null ) : bool"
    ],
    "ldap_next_attribute": [
        "Get the next attribute in result",
        "ldap_next_attribute ( resource $ldap , resource $entry ) : string|false"
    ],
    "ldap_next_entry": [
        "Get next result entry",
        "ldap_next_entry ( resource $ldap , resource $result ) : resource|false"
    ],
    "ldap_next_reference": [
        "Get next reference",
        "ldap_next_reference ( resource $ldap , resource $entry ) : resource|false"
    ],
    "ldap_parse_exop": [
        "Parse result object from an LDAP extended operation",
        "ldap_parse_exop ( resource $ldap , resource $result , string &$response_data = null , string &$response_oid = null ) : bool"
    ],
    "ldap_parse_reference": [
        "Extract information from reference entry",
        "ldap_parse_reference ( resource $ldap , resource $entry , array &$referrals ) : bool"
    ],
    "ldap_parse_result": [
        "Extract information from result",
        "ldap_parse_result ( resource $ldap , resource $result , int &$error_code , string &$matched_dn = null , string &$error_message = null , array &$referrals = null , array &$controls = null ) : bool"
    ],
    "ldap_read": [
        "Read an entry",
        "ldap_read ( resource|array $ldap , array|string $base , array|string $filter , array $attributes = [] , int $attributes_only = 0 , int $sizelimit = -1 , int $timelimit = -1 , int $deref = LDAP_DEREF_NEVER , array|null $controls = null ) : resource|array|false"
    ],
    "ldap_rename": [
        "Modify the name of an entry",
        "ldap_rename ( resource $ldap , string $dn , string $new_rdn , string $new_parent , bool $delete_old_rdn , array|null $controls = null ) : bool"
    ],
    "ldap_rename_ext": [
        "Modify the name of an entry",
        "ldap_rename_ext ( resource $ldap , string $dn , string $new_rdn , string $new_parent , bool $delete_old_rdn , array|null $controls = null ) : resource|false"
    ],
    "ldap_sasl_bind": [
        "Bind to LDAP directory using SASL",
        "ldap_sasl_bind ( resource $ldap , string|null $dn = null , string|null $password = null , string|null $mech = null , string|null $realm = null , string|null $authc_id = null , string|null $authz_id = null , string|null $props = null ) : bool"
    ],
    "ldap_search": [
        "Search LDAP tree",
        "ldap_search ( resource|array $ldap , array|string $base , array|string $filter , array $attributes = [] , int $attributes_only = 0 , int $sizelimit = -1 , int $timelimit = -1 , int $deref = LDAP_DEREF_NEVER , array|null $controls = null ) : resource|array|false"
    ],
    "ldap_set_option": [
        "Set the value of the given option",
        "ldap_set_option ( resource|null $ldap , int $option , array|string|int|bool $value ) : bool"
    ],
    "ldap_set_rebind_proc": [
        "Set a callback function to do re-binds on referral chasing",
        "ldap_set_rebind_proc ( resource $ldap , callable|null $callback ) : bool"
    ],
    "ldap_sort": [
        "Sort LDAP result entries on the client side",
        "ldap_sort ( resource $link , resource $result , string $sortfilter ) : bool"
    ],
    "ldap_start_tls": [
        "Start TLS",
        "ldap_start_tls ( resource $ldap ) : bool"
    ],
    "ldap_t61_to_8859": [
        "Translate t61 characters to 8859 characters",
        "ldap_t61_to_8859 ( string $value ) : string|false"
    ],
    "ldap_unbind": [
        "Unbind from LDAP directory",
        "ldap_unbind ( resource $ldap ) : bool"
    ],
    "LengthException": [
        "Exception thrown if a length is invalid."
    ],
    "levenshtein": [
        "Calculate Levenshtein distance between two strings",
        "levenshtein ( string $string1 , string $string2 , int $insertion_cost = 1 , int $replacement_cost = 1 , int $deletion_cost = 1 ) : int"
    ],
    "libxml_clear_errors": [
        "Clear libxml error buffer",
        "libxml_clear_errors ( ) : void"
    ],
    "libxml_disable_entity_loader": [
        "Disable the ability to load external entities",
        "libxml_disable_entity_loader ( bool $disable = true ) : bool"
    ],
    "libxml_get_errors": [
        "Retrieve array of errors",
        "libxml_get_errors ( ) : array"
    ],
    "libxml_get_last_error": [
        "Retrieve last error from libxml",
        "libxml_get_last_error ( ) : LibXMLError|false"
    ],
    "libxml_set_external_entity_loader": [
        "Changes the default external entity loader",
        "libxml_set_external_entity_loader ( callable|null $resolver_function ) : bool"
    ],
    "libxml_set_streams_context": [
        "Set the streams context for the next libxml document load or write",
        "libxml_set_streams_context ( resource $context ) : void"
    ],
    "libxml_use_internal_errors": [
        "Disable libxml errors and allow user to fetch error information as needed",
        "libxml_use_internal_errors ( bool|null $use_errors = null ) : bool"
    ],
    "libXMLError": [
        "Contains various information about errors thrown by libxml. The error codes are described within the official \u00bb\u00a0xmlError API documentation."
    ],
    "LimitIterator": [
        "The LimitIterator class allows iteration over a limited subset of items in an Iterator.",
        "new LimitIterator ( Iterator $iterator , int $offset = 0 , int $limit = -1 )"
    ],
    "link": [
        "Create a hard link",
        "link ( string $target , string $link ) : bool"
    ],
    "linkinfo": [
        "Gets information about a link",
        "linkinfo ( string $path ) : int|false"
    ],
    "list": [
        "Assign variables as if they were an array",
        "list ( mixed $var , mixed ...$vars = ? ) : array"
    ],
    "Locale": [
        "Examples of identifiers include:"
    ],
    "locale_accept_from_http": [
        "Tries to find out best available locale based on HTTP \"Accept-Language\" header",
        "locale_accept_from_http ( string $header ) : string"
    ],
    "locale_compose": [
        "Returns a correctly ordered and delimited locale ID",
        "locale_compose ( array $subtags ) : string"
    ],
    "locale_filter_matches": [
        "Checks if a language tag filter matches with locale",
        "locale_filter_matches ( string $langtag , string $locale , bool $canonicalize = false ) : bool"
    ],
    "locale_get_all_variants": [
        "Gets the variants for the input locale",
        "locale_get_all_variants ( string $locale ) : array"
    ],
    "locale_get_default": [
        "Gets the default locale value from the INTL global 'default_locale'",
        "locale_get_default ( ) : string"
    ],
    "locale_get_display_language": [
        "Returns an appropriately localized display name for language of the inputlocale",
        "locale_get_display_language ( string $locale , string $in_locale = ? ) : string"
    ],
    "locale_get_display_name": [
        "Returns an appropriately localized display name for the input locale",
        "locale_get_display_name ( string $locale , string $in_locale = ? ) : string"
    ],
    "locale_get_display_region": [
        "Returns an appropriately localized display name for region of the input locale",
        "locale_get_display_region ( string $locale , string $in_locale = ? ) : string"
    ],
    "locale_get_display_script": [
        "Returns an appropriately localized display name for script of the input locale",
        "locale_get_display_script ( string $locale , string $in_locale = ? ) : string"
    ],
    "locale_get_display_variant": [
        "Returns an appropriately localized display name for variants of the input locale",
        "locale_get_display_variant ( string $locale , string $in_locale = ? ) : string"
    ],
    "locale_get_keywords": [
        "Gets the keywords for the input locale",
        "locale_get_keywords ( string $locale ) : array"
    ],
    "locale_get_primary_language": [
        "Gets the primary language for the input locale",
        "locale_get_primary_language ( string $locale ) : string"
    ],
    "locale_get_region": [
        "Gets the region for the input locale",
        "locale_get_region ( string $locale ) : string"
    ],
    "locale_get_script": [
        "Gets the script for the input locale",
        "locale_get_script ( string $locale ) : string"
    ],
    "locale_lookup": [
        "Searches the language tag list for the best match to the language",
        "locale_lookup ( array $langtag , string $locale , bool $canonicalize = false , string $default = ? ) : string"
    ],
    "locale_parse": [
        "Returns a key-value array of locale ID subtag elements",
        "locale_parse ( string $locale ) : array"
    ],
    "locale_set_default": [
        "Sets the default runtime locale",
        "locale_set_default ( string $locale ) : bool"
    ],
    "localeconv": [
        "Get numeric formatting information",
        "localeconv ( ) : array"
    ],
    "localtime": [
        "Get the local time",
        "localtime ( int|null $timestamp = null , bool $associative = false ) : array"
    ],
    "log": [
        "Natural logarithm",
        "log ( float $num , float $base = M_E ) : float"
    ],
    "log10": [
        "Base-10 logarithm",
        "log10 ( float $num ) : float"
    ],
    "log1p": [
        "Returns log(1 + number), computed in a way that is accurate even when\n   the value of number is close to zero",
        "log1p ( float $num ) : float"
    ],
    "log_cmd_delete": [
        "Callback When Deleting Documents",
        "log_cmd_delete ( array $server , array $writeOptions , array $deleteOptions , array $protocolOptions )"
    ],
    "log_cmd_insert": [
        "Callback When Inserting Documents",
        "log_cmd_insert ( array $server , array $document , array $writeOptions , array $protocolOptions )"
    ],
    "log_cmd_update": [
        "Callback When Updating Documents",
        "log_cmd_update ( array $server , array $writeOptions , array $updateOptions , array $protocolOptions )"
    ],
    "log_getmore": [
        "Callback When Retrieving Next Cursor Batch",
        "log_getmore ( array $server , array $info )"
    ],
    "log_killcursor": [
        "Callback When Executing KILLCURSOR operations",
        "log_killcursor ( array $server , array $info )"
    ],
    "log_reply": [
        "Callback When Reading the MongoDB reply",
        "log_reply ( array $server , array $messageHeaders , array $operationHeaders )"
    ],
    "log_write_batch": [
        "Callback When Writing Batches",
        "log_write_batch ( array $server , array $writeOptions , array $batch , array $protocolOptions )"
    ],
    "LogicException": [
        "Exception that represents error in the program logic. This kind of exception should lead directly to a fix in your code."
    ],
    "long2ip": [
        "Converts an long integer address into a string in (IPv4) Internet standard dotted format",
        "long2ip ( int $ip ) : string|false"
    ],
    "lstat": [
        "Gives information about a file or symbolic link",
        "lstat ( string $filename ) : array|false"
    ],
    "ltrim": [
        "Strip whitespace (or other characters) from the beginning of a string",
        "ltrim ( string $string , string $characters = \" \\n\\r\\t\\v\\0\" ) : string"
    ],
    "Lua": [
        "Lua constructor",
        "new Lua ( string $lua_script_file = NULL )"
    ],
    "LuaClosure": [
        "LuaClosure is a wrapper class for LUA_TFUNCTION which could be return from calling to Lua function."
    ],
    "LuaSandbox": [
        "The LuaSandbox class creates a Lua environment and allows for execution of Lua code."
    ],
    "LuaSandboxError": [
        "Base class for LuaSandbox exceptions"
    ],
    "LuaSandboxErrorError": [
        "Exception thrown when Lua encounters an error inside an error handler."
    ],
    "LuaSandboxFatalError": [
        "Uncatchable LuaSandbox exceptions."
    ],
    "LuaSandboxFunction": [
        "Represents a Lua function, allowing it to be called from PHP."
    ],
    "LuaSandboxMemoryError": [
        "Exception thrown when Lua cannot allocate memory."
    ],
    "LuaSandboxRuntimeError": [
        "Catchable LuaSandbox runtime exceptions."
    ],
    "LuaSandboxSyntaxError": [
        "Exception thrown when Lua code cannot be parsed."
    ],
    "LuaSandboxTimeoutError": [
        "Exception thrown when the configured CPU time limit is exceeded."
    ],
    "lzf_compress": [
        "LZF compression",
        "lzf_compress ( string $data ) : string"
    ],
    "lzf_decompress": [
        "LZF decompression",
        "lzf_decompress ( string $data ) : string"
    ],
    "lzf_optimized_for": [
        "Determines what LZF extension was optimized for",
        "lzf_optimized_for ( ) : int"
    ],
    "mail": [
        "Send mail",
        "mail ( string $to , string $subject , string $message , array|string $additional_headers = [] , string $additional_params = \"\" ) : bool"
    ],
    "mailparse_determine_best_xfer_encoding": [
        "Gets the best way of encoding",
        "mailparse_determine_best_xfer_encoding ( resource $fp ) : string"
    ],
    "mailparse_msg_create": [
        "Create a mime mail resource",
        "mailparse_msg_create ( ) : resource"
    ],
    "mailparse_msg_extract_part": [
        "Extracts\/decodes a message section",
        "mailparse_msg_extract_part ( resource $mimemail , string $msgbody , callable $callbackfunc = ? ) : void"
    ],
    "mailparse_msg_extract_part_file": [
        "Extracts\/decodes a message section",
        "mailparse_msg_extract_part_file ( resource $mimemail , mixed $filename , callable $callbackfunc = ? ) : string"
    ],
    "mailparse_msg_extract_whole_part_file": [
        "Extracts a message section including headers without decoding the transfer encoding",
        "mailparse_msg_extract_whole_part_file ( resource $mimemail , string $filename , callable $callbackfunc = ? ) : string"
    ],
    "mailparse_msg_free": [
        "Frees a MIME resource",
        "mailparse_msg_free ( resource $mimemail ) : bool"
    ],
    "mailparse_msg_get_part": [
        "Returns a handle on a given section in a mimemessage",
        "mailparse_msg_get_part ( resource $mimemail , string $mimesection ) : resource"
    ],
    "mailparse_msg_get_part_data": [
        "Returns an associative array of info about the message",
        "mailparse_msg_get_part_data ( resource $mimemail ) : array"
    ],
    "mailparse_msg_get_structure": [
        "Returns an array of mime section names in the supplied message",
        "mailparse_msg_get_structure ( resource $mimemail ) : array"
    ],
    "mailparse_msg_parse": [
        "Incrementally parse data into buffer",
        "mailparse_msg_parse ( resource $mimemail , string $data ) : bool"
    ],
    "mailparse_msg_parse_file": [
        "Parses a file",
        "mailparse_msg_parse_file ( string $filename ) : resource"
    ],
    "mailparse_rfc822_parse_addresses": [
        "Parse RFC 822 compliant addresses",
        "mailparse_rfc822_parse_addresses ( string $addresses ) : array"
    ],
    "mailparse_stream_encode": [
        "Streams data from source file pointer, apply encoding and write to destfp",
        "mailparse_stream_encode ( resource $sourcefp , resource $destfp , string $encoding ) : bool"
    ],
    "mailparse_uudecode_all": [
        "Scans the data from fp and extract each embedded uuencoded file",
        "mailparse_uudecode_all ( resource $fp ) : array"
    ],
    "max": [
        "Find highest value",
        "max ( mixed $value , mixed ...$values ) : mixed",
        "max ( array $value_array ) : mixed"
    ],
    "mb_check_encoding": [
        "Check if strings are valid for the specified encoding",
        "mb_check_encoding ( array|string|null $value = null , string|null $encoding = null ) : bool"
    ],
    "mb_chr": [
        "Get a specific character",
        "mb_chr ( int $codepoint , string|null $encoding = null ) : string|false"
    ],
    "mb_convert_case": [
        "Perform case folding on a string",
        "mb_convert_case ( string $string , int $mode , string|null $encoding = null ) : string"
    ],
    "mb_convert_encoding": [
        "Convert character encoding",
        "mb_convert_encoding ( array|string $string , string $to_encoding , array|string|null $from_encoding = null ) : array|string|false"
    ],
    "mb_convert_kana": [
        "Convert \"kana\" one from another (\"zen-kaku\", \"han-kaku\" and more)",
        "mb_convert_kana ( string $string , string $mode = \"KV\" , string|null $encoding = null ) : string"
    ],
    "mb_convert_variables": [
        "Convert character code in variable(s)",
        "mb_convert_variables ( string $to_encoding , array|string $from_encoding , mixed &$var , mixed &...$vars ) : string|false"
    ],
    "mb_decode_mimeheader": [
        "Decode string in MIME header field",
        "mb_decode_mimeheader ( string $string ) : string"
    ],
    "mb_decode_numericentity": [
        "Decode HTML numeric string reference to character",
        "mb_decode_numericentity ( string $string , array $map , string|null $encoding = null ) : string"
    ],
    "mb_detect_encoding": [
        "Detect character encoding",
        "mb_detect_encoding ( string $string , array|string|null $encodings = null , bool $strict = false ) : string|false"
    ],
    "mb_detect_order": [
        "Set\/Get character encoding detection order",
        "mb_detect_order ( array|string|null $encoding = null ) : array|bool"
    ],
    "mb_encode_mimeheader": [
        "Encode string for MIME header",
        "mb_encode_mimeheader ( string $string , string|null $charset = null , string|null $transfer_encoding = null , string $newline = \"\\r\\n\" , int $indent = 0 ) : string"
    ],
    "mb_encode_numericentity": [
        "Encode character to HTML numeric string reference",
        "mb_encode_numericentity ( string $string , array $map , string|null $encoding = null , bool $hex = false ) : string"
    ],
    "mb_encoding_aliases": [
        "Get aliases of a known encoding type",
        "mb_encoding_aliases ( string $encoding ) : array"
    ],
    "mb_ereg": [
        "Regular expression match with multibyte support",
        "mb_ereg ( string $pattern , string $string , array &$matches = null ) : bool"
    ],
    "mb_ereg_match": [
        "Regular expression match for multibyte string",
        "mb_ereg_match ( string $pattern , string $string , string|null $options = null ) : bool"
    ],
    "mb_ereg_replace": [
        "Replace regular expression with multibyte support",
        "mb_ereg_replace ( string $pattern , string $replacement , string $string , string|null $options = null ) : string|false|null"
    ],
    "mb_ereg_replace_callback": [
        "Perform a regular expression search and replace with multibyte support using a callback",
        "mb_ereg_replace_callback ( string $pattern , callable $callback , string $string , string|null $options = null ) : string|false|null"
    ],
    "mb_ereg_search": [
        "Multibyte regular expression match for predefined multibyte string",
        "mb_ereg_search ( string|null $pattern = null , string|null $options = null ) : bool"
    ],
    "mb_ereg_search_getpos": [
        "Returns start point for next regular expression match",
        "mb_ereg_search_getpos ( ) : int"
    ],
    "mb_ereg_search_getregs": [
        "Retrieve the result from the last multibyte regular expression match",
        "mb_ereg_search_getregs ( ) : array|false"
    ],
    "mb_ereg_search_init": [
        "Setup string and regular expression for a multibyte regular expression match",
        "mb_ereg_search_init ( string $string , string|null $pattern = null , string|null $options = null ) : bool"
    ],
    "mb_ereg_search_pos": [
        "Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string",
        "mb_ereg_search_pos ( string|null $pattern = null , string|null $options = null ) : array|false"
    ],
    "mb_ereg_search_regs": [
        "Returns the matched part of a multibyte regular expression",
        "mb_ereg_search_regs ( string|null $pattern = null , string|null $options = null ) : array|false"
    ],
    "mb_ereg_search_setpos": [
        "Set start point of next regular expression match",
        "mb_ereg_search_setpos ( int $offset ) : bool"
    ],
    "mb_eregi": [
        "Regular expression match ignoring case with multibyte support",
        "mb_eregi ( string $pattern , string $string , array &$matches = null ) : bool"
    ],
    "mb_eregi_replace": [
        "Replace regular expression with multibyte support ignoring case",
        "mb_eregi_replace ( string $pattern , string $replacement , string $string , string|null $options = null ) : string|false|null"
    ],
    "mb_get_info": [
        "Get internal settings of mbstring",
        "mb_get_info ( string $type = \"all\" ) : array|string|int|false"
    ],
    "mb_http_input": [
        "Detect HTTP input character encoding",
        "mb_http_input ( string|null $type = null ) : array|string|false"
    ],
    "mb_http_output": [
        "Set\/Get HTTP output character encoding",
        "mb_http_output ( string|null $encoding = null ) : string|bool"
    ],
    "mb_internal_encoding": [
        "Set\/Get internal character encoding",
        "mb_internal_encoding ( string|null $encoding = null ) : string|bool"
    ],
    "mb_language": [
        "Set\/Get current language",
        "mb_language ( string|null $language = null ) : string|bool"
    ],
    "mb_list_encodings": [
        "Returns an array of all supported encodings",
        "mb_list_encodings ( ) : array"
    ],
    "mb_ord": [
        "Get code point of character",
        "mb_ord ( string $string , string|null $encoding = null ) : int|false"
    ],
    "mb_output_handler": [
        "Callback function converts character encoding in output buffer",
        "mb_output_handler ( string $string , int $status ) : string"
    ],
    "mb_parse_str": [
        "Parse GET\/POST\/COOKIE data and set global variable",
        "mb_parse_str ( string $string , array &$result ) : bool"
    ],
    "mb_preferred_mime_name": [
        "Get MIME charset string",
        "mb_preferred_mime_name ( string $encoding ) : string|false"
    ],
    "mb_regex_encoding": [
        "Set\/Get character encoding for multibyte regex",
        "mb_regex_encoding ( string|null $encoding = null ) : string|bool"
    ],
    "mb_regex_set_options": [
        "Set\/Get the default options for mbregex functions",
        "mb_regex_set_options ( string|null $options = null ) : string"
    ],
    "mb_scrub": [
        "Description",
        "mb_scrub ( string $string , string|null $encoding = null ) : string"
    ],
    "mb_send_mail": [
        "Send encoded mail",
        "mb_send_mail ( string $to , string $subject , string $message , array|string $additional_headers = [] , string|null $additional_params = null ) : bool"
    ],
    "mb_split": [
        "Split multibyte string using regular expression",
        "mb_split ( string $pattern , string $string , int $limit = -1 ) : array|false"
    ],
    "mb_str_split": [
        "Given a multibyte string, return an array of its characters",
        "mb_str_split ( string $string , int $length = 1 , string|null $encoding = null ) : array"
    ],
    "mb_strcut": [
        "Get part of string",
        "mb_strcut ( string $string , int $start , int|null $length = null , string|null $encoding = null ) : string"
    ],
    "mb_strimwidth": [
        "Get truncated string with specified width",
        "mb_strimwidth ( string $string , int $start , int $width , string $trim_marker = \"\" , string|null $encoding = null ) : string"
    ],
    "mb_stripos": [
        "Finds position of first occurrence of a string within another, case insensitive",
        "mb_stripos ( string $haystack , string $needle , int $offset = 0 , string|null $encoding = null ) : int|false"
    ],
    "mb_stristr": [
        "Finds first occurrence of a string within another, case insensitive",
        "mb_stristr ( string $haystack , string $needle , bool $before_needle = false , string|null $encoding = null ) : string|false"
    ],
    "mb_strlen": [
        "Get string length",
        "mb_strlen ( string $string , string|null $encoding = null ) : int"
    ],
    "mb_strpos": [
        "Find position of first occurrence of string in a string",
        "mb_strpos ( string $haystack , string $needle , int $offset = 0 , string|null $encoding = null ) : int|false"
    ],
    "mb_strrchr": [
        "Finds the last occurrence of a character in a string within another",
        "mb_strrchr ( string $haystack , string $needle , bool $before_needle = false , string|null $encoding = null ) : string|false"
    ],
    "mb_strrichr": [
        "Finds the last occurrence of a character in a string within another, case insensitive",
        "mb_strrichr ( string $haystack , string $needle , bool $before_needle = false , string|null $encoding = null ) : string|false"
    ],
    "mb_strripos": [
        "Finds position of last occurrence of a string within another, case insensitive",
        "mb_strripos ( string $haystack , string $needle , int $offset = 0 , string|null $encoding = null ) : int|false"
    ],
    "mb_strrpos": [
        "Find position of last occurrence of a string in a string",
        "mb_strrpos ( string $haystack , string $needle , int $offset = 0 , string|null $encoding = null ) : int|false"
    ],
    "mb_strstr": [
        "Finds first occurrence of a string within another",
        "mb_strstr ( string $haystack , string $needle , bool $before_needle = false , string|null $encoding = null ) : string|false"
    ],
    "mb_strtolower": [
        "Make a string lowercase",
        "mb_strtolower ( string $string , string|null $encoding = null ) : string"
    ],
    "mb_strtoupper": [
        "Make a string uppercase",
        "mb_strtoupper ( string $string , string|null $encoding = null ) : string"
    ],
    "mb_strwidth": [
        "Return width of string",
        "mb_strwidth ( string $string , string|null $encoding = null ) : int"
    ],
    "mb_substitute_character": [
        "Set\/Get substitution character",
        "mb_substitute_character ( string|int|null $substitute_character = null ) : string|int|bool"
    ],
    "mb_substr": [
        "Get part of string",
        "mb_substr ( string $string , int $start , int|null $length = null , string|null $encoding = null ) : string"
    ],
    "mb_substr_count": [
        "Count the number of substring occurrences",
        "mb_substr_count ( string $haystack , string $needle , string|null $encoding = null ) : int"
    ],
    "mcrypt_cbc": [
        "Encrypts\/decrypts data in CBC mode",
        "mcrypt_cbc ( int $cipher , string $key , string $data , int $mode , string $iv = ? ) : string",
        "mcrypt_cbc ( string $cipher , string $key , string $data , int $mode , string $iv = ? ) : string"
    ],
    "mcrypt_cfb": [
        "Encrypts\/decrypts data in CFB mode",
        "mcrypt_cfb ( int $cipher , string $key , string $data , int $mode , string $iv ) : string",
        "mcrypt_cfb ( string $cipher , string $key , string $data , int $mode , string $iv = ? ) : string"
    ],
    "mcrypt_create_iv": [
        "Creates an initialization vector (IV) from a random source",
        "mcrypt_create_iv ( int $size , int $source = MCRYPT_DEV_URANDOM ) : string"
    ],
    "mcrypt_decrypt": [
        "Decrypts crypttext with given parameters",
        "mcrypt_decrypt ( string $cipher , string $key , string $data , string $mode , string $iv = ? ) : string|false"
    ],
    "mcrypt_ecb": [
        "Deprecated: Encrypts\/decrypts data in ECB mode",
        "mcrypt_ecb ( int $cipher , string $key , string $data , int $mode ) : string",
        "mcrypt_ecb ( string $cipher , string $key , string $data , int $mode , string $iv = ? ) : string"
    ],
    "mcrypt_enc_get_algorithms_name": [
        "Returns the name of the opened algorithm",
        "mcrypt_enc_get_algorithms_name ( resource $td ) : string"
    ],
    "mcrypt_enc_get_block_size": [
        "Returns the blocksize of the opened algorithm",
        "mcrypt_enc_get_block_size ( resource $td ) : int"
    ],
    "mcrypt_enc_get_iv_size": [
        "Returns the size of the IV of the opened algorithm",
        "mcrypt_enc_get_iv_size ( resource $td ) : int"
    ],
    "mcrypt_enc_get_key_size": [
        "Returns the maximum supported keysize of the opened mode",
        "mcrypt_enc_get_key_size ( resource $td ) : int"
    ],
    "mcrypt_enc_get_modes_name": [
        "Returns the name of the opened mode",
        "mcrypt_enc_get_modes_name ( resource $td ) : string"
    ],
    "mcrypt_enc_get_supported_key_sizes": [
        "Returns an array with the supported keysizes of the opened algorithm",
        "mcrypt_enc_get_supported_key_sizes ( resource $td ) : array"
    ],
    "mcrypt_enc_is_block_algorithm": [
        "Checks whether the algorithm of the opened mode is a block algorithm",
        "mcrypt_enc_is_block_algorithm ( resource $td ) : bool"
    ],
    "mcrypt_enc_is_block_algorithm_mode": [
        "Checks whether the encryption of the opened mode works on blocks",
        "mcrypt_enc_is_block_algorithm_mode ( resource $td ) : bool"
    ],
    "mcrypt_enc_is_block_mode": [
        "Checks whether the opened mode outputs blocks",
        "mcrypt_enc_is_block_mode ( resource $td ) : bool"
    ],
    "mcrypt_enc_self_test": [
        "Runs a self test on the opened module",
        "mcrypt_enc_self_test ( resource $td ) : int"
    ],
    "mcrypt_encrypt": [
        "Encrypts plaintext with given parameters",
        "mcrypt_encrypt ( string $cipher , string $key , string $data , string $mode , string $iv = ? ) : string|false"
    ],
    "mcrypt_generic": [
        "This function encrypts data",
        "mcrypt_generic ( resource $td , string $data ) : string"
    ],
    "mcrypt_generic_deinit": [
        "This function deinitializes an encryption module",
        "mcrypt_generic_deinit ( resource $td ) : bool"
    ],
    "mcrypt_generic_end": [
        "This function terminates encryption",
        "mcrypt_generic_end ( resource $td ) : bool"
    ],
    "mcrypt_generic_init": [
        "This function initializes all buffers needed for encryption",
        "mcrypt_generic_init ( resource $td , string $key , string $iv ) : int"
    ],
    "mcrypt_get_block_size": [
        "Gets the block size of the specified cipher",
        "mcrypt_get_block_size ( int $cipher ) : int|false",
        "mcrypt_get_block_size ( string $cipher , string $mode ) : int|false"
    ],
    "mcrypt_get_cipher_name": [
        "Gets the name of the specified cipher",
        "mcrypt_get_cipher_name ( int $cipher ) : string",
        "mcrypt_get_cipher_name ( string $cipher ) : string"
    ],
    "mcrypt_get_iv_size": [
        "Returns the size of the IV belonging to a specific cipher\/mode combination",
        "mcrypt_get_iv_size ( string $cipher , string $mode ) : int"
    ],
    "mcrypt_get_key_size": [
        "Gets the key size of the specified cipher",
        "mcrypt_get_key_size ( int $cipher ) : int|false",
        "mcrypt_get_key_size ( string $cipher , string $mode ) : int|false"
    ],
    "mcrypt_list_algorithms": [
        "Gets an array of all supported ciphers",
        "mcrypt_list_algorithms ( string $lib_dir = ini_get(\"mcrypt.algorithms_dir\") ) : array"
    ],
    "mcrypt_list_modes": [
        "Gets an array of all supported modes",
        "mcrypt_list_modes ( string $lib_dir = ini_get(\"mcrypt.modes_dir\") ) : array"
    ],
    "mcrypt_module_close": [
        "Closes the mcrypt module",
        "mcrypt_module_close ( resource $td ) : bool"
    ],
    "mcrypt_module_get_algo_block_size": [
        "Returns the blocksize of the specified algorithm",
        "mcrypt_module_get_algo_block_size ( string $algorithm , string $lib_dir = ? ) : int"
    ],
    "mcrypt_module_get_algo_key_size": [
        "Returns the maximum supported keysize of the opened mode",
        "mcrypt_module_get_algo_key_size ( string $algorithm , string $lib_dir = ? ) : int"
    ],
    "mcrypt_module_get_supported_key_sizes": [
        "Returns an array with the supported keysizes of the opened algorithm",
        "mcrypt_module_get_supported_key_sizes ( string $algorithm , string $lib_dir = ? ) : array"
    ],
    "mcrypt_module_is_block_algorithm": [
        "This function checks whether the specified algorithm is a block algorithm",
        "mcrypt_module_is_block_algorithm ( string $algorithm , string $lib_dir = ? ) : bool"
    ],
    "mcrypt_module_is_block_algorithm_mode": [
        "Returns if the specified module is a block algorithm or not",
        "mcrypt_module_is_block_algorithm_mode ( string $mode , string $lib_dir = ? ) : bool"
    ],
    "mcrypt_module_is_block_mode": [
        "Returns if the specified mode outputs blocks or not",
        "mcrypt_module_is_block_mode ( string $mode , string $lib_dir = ? ) : bool"
    ],
    "mcrypt_module_open": [
        "Opens the module of the algorithm and the mode to be used",
        "mcrypt_module_open ( string $algorithm , string $algorithm_directory , string $mode , string $mode_directory ) : resource"
    ],
    "mcrypt_module_self_test": [
        "This function runs a self test on the specified module",
        "mcrypt_module_self_test ( string $algorithm , string $lib_dir = ? ) : bool"
    ],
    "mcrypt_ofb": [
        "Encrypts\/decrypts data in OFB mode",
        "mcrypt_ofb ( int $cipher , string $key , string $data , int $mode , string $iv ) : string",
        "mcrypt_ofb ( string $cipher , string $key , string $data , int $mode , string $iv = ? ) : string"
    ],
    "md5": [
        "Calculate the md5 hash of a string",
        "md5 ( string $string , bool $binary = false ) : string"
    ],
    "md5_file": [
        "Calculates the md5 hash of a given file",
        "md5_file ( string $filename , bool $binary = false ) : string|false"
    ],
    "mdecrypt_generic": [
        "Decrypts data",
        "mdecrypt_generic ( resource $td , string $data ) : string"
    ],
    "Memcache": [
        "Represents a connection to a set of memcache servers."
    ],
    "memcache_debug": [
        "Turn debug output on\/off",
        "memcache_debug ( bool $on_off ) : bool"
    ],
    "Memcached": [
        "Represents a connection to a set of memcached servers.",
        "new Memcached ( string $persistent_id = ? )"
    ],
    "memory_get_peak_usage": [
        "Returns the peak of memory allocated by PHP",
        "memory_get_peak_usage ( bool $real_usage = false ) : int"
    ],
    "memory_get_usage": [
        "Returns the amount of memory allocated to PHP",
        "memory_get_usage ( bool $real_usage = false ) : int"
    ],
    "MessageFormatter": [
        "Constructs a new Message Formatter",
        "new MessageFormatter ( string $locale , string $pattern )"
    ],
    "metaphone": [
        "Calculate the metaphone key of a string",
        "metaphone ( string $string , int $max_phonemes = 0 ) : string"
    ],
    "method_exists": [
        "Checks if the class method exists",
        "method_exists ( string|object $object , string $method_name ) : bool"
    ],
    "mhash": [
        "Computes hash",
        "mhash ( int $algo , string $data , string|null $key = null ) : string|false"
    ],
    "mhash_count": [
        "Gets the highest available hash ID",
        "mhash_count ( ) : int"
    ],
    "mhash_get_block_size": [
        "Gets the block size of the specified hash",
        "mhash_get_block_size ( int $algo ) : int|false"
    ],
    "mhash_get_hash_name": [
        "Gets the name of the specified hash",
        "mhash_get_hash_name ( int $algo ) : string|false"
    ],
    "mhash_keygen_s2k": [
        "Generates a key",
        "mhash_keygen_s2k ( int $algo , string $password , string $salt , int $length ) : string|false"
    ],
    "microtime": [
        "Return current Unix timestamp with microseconds",
        "microtime ( bool $as_float = false ) : string|float"
    ],
    "mime_content_type": [
        "Detect MIME Content-type for a file",
        "mime_content_type ( resource|string $filename ) : string|false"
    ],
    "min": [
        "Find lowest value",
        "min ( mixed $value , mixed ...$values ) : mixed",
        "min ( array $value_array ) : mixed"
    ],
    "mkdir": [
        "Makes directory",
        "mkdir ( string $pathname , int $mode = 0777 , bool $recursive = false , resource $context = ? ) : bool"
    ],
    "mktime": [
        "Get Unix timestamp for a date",
        "mktime ( int $hour , int|null $minute = null , int|null $second = null , int|null $month = null , int|null $day = null , int|null $year = null ) : int|false"
    ],
    "money_format": [
        "Formats a number as a currency string",
        "money_format ( string $format , float $number ) : string"
    ],
    "Mongo": [
        "A connection between PHP and MongoDB.",
        "new Mongo ( string $server = ? , array $options = ? )"
    ],
    "MongoBinData": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nAlternatives to this class include:",
        "new MongoBinData ( string $data , int $type = 0 )"
    ],
    "MongoClient": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nAlternatives to this class include:",
        "new MongoClient ( string $server = \"mongodb:\/\/localhost:27017\" , array $options = array(\"connect\" => true) , array $driver_options = ? )"
    ],
    "MongoCode": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nAlternatives to this class include:",
        "new MongoCode ( string $code , array $scope = array() )"
    ],
    "MongoCollection": [
        "Represents a MongoDB collection.",
        "new MongoCollection ( MongoDB $db , string $name )"
    ],
    "MongoCommandCursor": [
        "A command cursor is similar to a MongoCursor except that you use it for iterating through the results of a database command instead of a normal query. Command cursors are useful for iterating over large result sets that might exceed the document size limit (currently 16MB) of a single MongoDB::command() response.",
        "new MongoCommandCursor ( MongoClient $connection , string $ns , array $command = array() )"
    ],
    "MongoConnectionException": [
        "Thrown when the driver fails to connect to the database."
    ],
    "MongoCursor": [
        "A cursor is used to iterate through the results of a database query. For example, to query the database and see all results, you could do:",
        "new MongoCursor ( MongoClient $connection , string $ns , array $query = array() , array $fields = array() )"
    ],
    "MongoCursorException": [
        "Caused by accessing a cursor incorrectly or a error receiving a reply. Note that this can be thrown by any database request that receives a reply, not just queries. Writes, commands, and any other operation that sends information to the database and waits for a response can throw a MongoCursorException. The only exception is new MongoClient() (creating a new connection), which will only throw MongoConnectionExceptions."
    ],
    "MongoCursorInterface": [
        "Interface for cursors, which can be used to iterate through results of a database query or command. This interface is implemented by the MongoCursor and MongoCommandCursor classes."
    ],
    "MongoCursorTimeoutException": [
        "Caused by a query timing out. You can set the length of time to wait before this exception is thrown by calling MongoCursor::timeout() on the cursor or setting MongoCursor::$timeout. The static variable is useful for queries such as database commands and MongoCollection::findOne(), both of which implicitly use cursors."
    ],
    "MongoDate": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nAlternatives to this class include:",
        "new MongoDate ( int $sec = time() , int $usec = 0 )"
    ],
    "MongoDB": [
        "Instances of this class are used to interact with a database. To get a database:",
        "new MongoDB ( MongoClient $conn , string $name )"
    ],
    "MongoDBRef": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nThere is no equivalent for this class in the new extension."
    ],
    "MongoDeleteBatch": [
        "Constructs a batch of DELETE operations. See MongoWriteBatch.",
        "new MongoDeleteBatch ( MongoCollection $collection , array $write_options = ? )"
    ],
    "MongoDuplicateKeyException": [
        "Thrown when attempting to insert a document into a collection which already contains the same values for the unique keys."
    ],
    "MongoException": [
        "Default Mongo exception."
    ],
    "MongoExecutionTimeoutException": [
        "Thrown when a operation times out server side (i.e. in MongoDB)."
    ],
    "MongoGridFS": [
        "Creates new file collections",
        "new MongoGridFS ( MongoDB $db , string $prefix = \"fs\" , mixed $chunks = \"fs\" )"
    ],
    "MongoGridFSCursor": [
        "Create a new cursor",
        "new MongoGridFSCursor ( MongoGridFS $gridfs , resource $connection , string $ns , array $query , array $fields )"
    ],
    "MongoGridFSException": [
        "Thrown when there are errors reading or writing files to or from the database."
    ],
    "MongoGridFSFile": [
        "A database file object.",
        "new MongoGridfsFile ( MongoGridFS $gridfs , array $file )"
    ],
    "MongoId": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nAlternatives to this class include:",
        "new MongoId ( string|MongoId $id = null )"
    ],
    "MongoInsertBatch": [
        "Constructs a batch of INSERT operations. See MongoWriteBatch.",
        "new MongoInsertBatch ( MongoCollection $collection , array $write_options = ? )"
    ],
    "MongoInt32": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nThere is no equivalent for this class in the new extension.",
        "new MongoInt32 ( string $value )"
    ],
    "MongoInt64": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nThere is no equivalent for this class in the new extension.",
        "new MongoInt64 ( string $value )"
    ],
    "MongoLog": [
        "Logging can be used to get detailed information about what the driver is doing. Logging is disabled by default, but this class allows you to activate specific levels of logging for various parts of the driver. Some examples:"
    ],
    "MongoMaxKey": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nAlternatives to this class include:"
    ],
    "MongoMinKey": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nAlternatives to this class include:"
    ],
    "MongoProtocolException": [
        "When talking to MongoDB 2.6.0, and later, certain operations (such as writes) may throw MongoProtocolException when the response from the server did not make sense - for example during network failure (we could read the entire response) or data corruption."
    ],
    "MongoRegex": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nAlternatives to this class include:",
        "new MongoRegex ( string $regex )"
    ],
    "MongoResultException": [
        "The MongoResultException is thrown by several command helpers (such as MongoCollection::findAndModify()) in the event of failure. The original result document is available through MongoResultException::getDocument()."
    ],
    "MongoTimestamp": [
        "This extension that defines this class\nis deprecated. Instead, the MongoDB extension should be used.\nAlternatives to this class include:",
        "new MongoTimestamp ( int $sec = time() , int $inc = ? )"
    ],
    "MongoUpdateBatch": [
        "Constructs a batch of UPDATE operations. See MongoWriteBatch.",
        "new MongoUpdateBatch ( MongoCollection $collection , array $write_options = ? )"
    ],
    "MongoWriteBatch": [
        "MongoWriteBatch is the base class for the MongoInsertBatch, MongoUpdateBatch and MongoDeleteBatch classes."
    ],
    "MongoWriteConcernException": [
        "MongoWriteConcernException is thrown when a write fails. See Write Concerns for how to set failure thresholds."
    ],
    "move_uploaded_file": [
        "Moves an uploaded file to a new location",
        "move_uploaded_file ( string $from , string $to ) : bool"
    ],
    "mqseries_back": [
        "MQSeries MQBACK",
        "mqseries_back ( resource $hconn , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_begin": [
        "MQseries MQBEGIN",
        "mqseries_begin ( resource $hconn , array $beginOptions , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_close": [
        "MQSeries MQCLOSE",
        "mqseries_close ( resource $hconn , resource $hobj , int $options , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_cmit": [
        "MQSeries MQCMIT",
        "mqseries_cmit ( resource $hconn , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_conn": [
        "MQSeries MQCONN",
        "mqseries_conn ( string $qManagerName , resource &$hconn , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_connx": [
        "MQSeries MQCONNX",
        "mqseries_connx ( string $qManagerName , array &$connOptions , resource &$hconn , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_disc": [
        "MQSeries MQDISC",
        "mqseries_disc ( resource $hconn , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_get": [
        "MQSeries MQGET",
        "mqseries_get ( resource $hConn , resource $hObj , array &$md , array &$gmo , int &$bufferLength , string &$msg , int &$data_length , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_inq": [
        "MQSeries MQINQ",
        "mqseries_inq ( resource $hconn , resource $hobj , int $selectorCount , array $selectors , int $intAttrCount , resource &$intAttr , int $charAttrLength , resource &$charAttr , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_open": [
        "MQSeries MQOPEN",
        "mqseries_open ( resource $hconn , array &$objDesc , int $option , resource &$hobj , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_put": [
        "MQSeries MQPUT",
        "mqseries_put ( resource $hConn , resource $hObj , array &$md , array &$pmo , string $message , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_put1": [
        "MQSeries MQPUT1",
        "mqseries_put1 ( resource $hconn , resource &$objDesc , resource &$msgDesc , resource &$pmo , string $buffer , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_set": [
        "MQSeries MQSET",
        "mqseries_set ( resource $hConn , resource $hObj , int $selectorCount , array $selectors , int $intAttrCount , array $intAttrs , int $charAttrLength , array $charAttrs , resource &$compCode , resource &$reason ) : void"
    ],
    "mqseries_strerror": [
        "Returns the error message corresponding to a result code (MQRC)",
        "mqseries_strerror ( int $reason ) : string"
    ],
    "msg_get_queue": [
        "Create or attach to a message queue",
        "msg_get_queue ( int $key , int $permissions = 0666 ) : SysvMessageQueue|false"
    ],
    "msg_queue_exists": [
        "Check whether a message queue exists",
        "msg_queue_exists ( int $key ) : bool"
    ],
    "msg_receive": [
        "Receive a message from a message queue",
        "msg_receive ( SysvMessageQueue $queue , int $desired_message_type , int &$received_message_type , int $max_message_size , mixed &$message , bool $unserialize = true , int $flags = 0 , int &$error_code = null ) : bool"
    ],
    "msg_remove_queue": [
        "Destroy a message queue",
        "msg_remove_queue ( SysvMessageQueue $queue ) : bool"
    ],
    "msg_send": [
        "Send a message to a message queue",
        "msg_send ( SysvMessageQueue $queue , int $message_type , string|int|float|bool $message , bool $serialize = true , bool $blocking = true , int &$error_code = null ) : bool"
    ],
    "msg_set_queue": [
        "Set information in the message queue data structure",
        "msg_set_queue ( SysvMessageQueue $queue , array $data ) : bool"
    ],
    "msg_stat_queue": [
        "Returns information from the message queue data structure",
        "msg_stat_queue ( SysvMessageQueue $queue ) : array|false"
    ],
    "msgfmt_create": [
        "Constructs a new Message Formatter",
        "msgfmt_create ( string $locale , string $pattern ) : MessageFormatter"
    ],
    "msgfmt_format": [
        "Format the message",
        "msgfmt_format ( MessageFormatter $fmt , array $args ) : string"
    ],
    "msgfmt_format_message": [
        "Quick format message",
        "msgfmt_format_message ( string $locale , string $pattern , array $args ) : string"
    ],
    "msgfmt_get_error_code": [
        "Get the error code from last operation",
        "msgfmt_get_error_code ( MessageFormatter $fmt ) : int"
    ],
    "msgfmt_get_error_message": [
        "Get the error text from the last operation",
        "msgfmt_get_error_message ( MessageFormatter $fmt ) : string"
    ],
    "msgfmt_get_locale": [
        "Get the locale for which the formatter was created",
        "msgfmt_get_locale ( NumberFormatter $formatter ) : string"
    ],
    "msgfmt_get_pattern": [
        "Get the pattern used by the formatter",
        "msgfmt_get_pattern ( MessageFormatter $fmt ) : string"
    ],
    "msgfmt_parse": [
        "Parse input string according to pattern",
        "msgfmt_parse ( MessageFormatter $fmt , string $value ) : array"
    ],
    "msgfmt_parse_message": [
        "Quick parse input string",
        "msgfmt_parse_message ( string $locale , string $pattern , string $value ) : array"
    ],
    "msgfmt_set_pattern": [
        "Set the pattern used by the formatter",
        "msgfmt_set_pattern ( MessageFormatter $fmt , string $pattern ) : bool"
    ],
    "mt_getrandmax": [
        "Show largest possible random value",
        "mt_getrandmax ( ) : int"
    ],
    "mt_rand": [
        "Generate a random value via the Mersenne Twister Random Number Generator",
        "mt_rand ( ) : int",
        "mt_rand ( int $min , int $max ) : int"
    ],
    "mt_srand": [
        "Seeds the Mersenne Twister Random Number Generator",
        "mt_srand ( int $seed = 0 , int $mode = MT_RAND_MT19937 ) : void"
    ],
    "MultipleIterator": [
        "An Iterator that sequentially iterates over all attached iterators",
        "new MultipleIterator (  int $flags  = MultipleIterator::MIT_NEED_ALL|MultipleIterator::MIT_KEYS_NUMERIC  )"
    ],
    "Mutex": [
        "The static methods contained in the Mutex class provide direct access to Posix Mutex functionality."
    ],
    "mysql_affected_rows": [
        "Get number of affected rows in previous MySQL operation",
        "mysql_affected_rows ( resource $link_identifier = NULL ) : int"
    ],
    "mysql_client_encoding": [
        "Returns the name of the character set",
        "mysql_client_encoding ( resource $link_identifier = NULL ) : string"
    ],
    "mysql_close": [
        "Close MySQL connection",
        "mysql_close ( resource $link_identifier = NULL ) : bool"
    ],
    "mysql_connect": [
        "Open a connection to a MySQL Server",
        "mysql_connect ( string $server = ini_get(\"mysql.default_host\") , string $username = ini_get(\"mysql.default_user\") , string $password = ini_get(\"mysql.default_password\") , bool $new_link = false , int $client_flags = 0 ) : resource|false"
    ],
    "mysql_create_db": [
        "Create a MySQL database",
        "mysql_create_db ( string $database_name , resource $link_identifier = NULL ) : bool"
    ],
    "mysql_data_seek": [
        "Move internal result pointer",
        "mysql_data_seek ( resource $result , int $row_number ) : bool"
    ],
    "mysql_db_name": [
        "Retrieves database name from the call to mysql_list_dbs()",
        "mysql_db_name ( resource $result , int $row , mixed $field = NULL ) : string"
    ],
    "mysql_db_query": [
        "Selects a database and executes a query on it",
        "mysql_db_query ( string $database , string $query , resource $link_identifier = NULL ) : resource|bool"
    ],
    "mysql_drop_db": [
        "Drop (delete) a MySQL database",
        "mysql_drop_db ( string $database_name , resource $link_identifier = NULL ) : bool"
    ],
    "mysql_errno": [
        "Returns the numerical value of the error message from previous MySQL operation",
        "mysql_errno ( resource $link_identifier = NULL ) : int"
    ],
    "mysql_error": [
        "Returns the text of the error message from previous MySQL operation",
        "mysql_error ( resource $link_identifier = NULL ) : string"
    ],
    "mysql_escape_string": [
        "Escapes a string for use in a mysql_query",
        "mysql_escape_string ( string $unescaped_string ) : string"
    ],
    "mysql_fetch_array": [
        "Fetch a result row as an associative array, a numeric array, or both",
        "mysql_fetch_array ( resource $result , int $result_type = MYSQL_BOTH ) : array"
    ],
    "mysql_fetch_assoc": [
        "Fetch a result row as an associative array",
        "mysql_fetch_assoc ( resource $result ) : array"
    ],
    "mysql_fetch_field": [
        "Get column information from a result and return as an object",
        "mysql_fetch_field ( resource $result , int $field_offset = 0 ) : object"
    ],
    "mysql_fetch_lengths": [
        "Get the length of each output in a result",
        "mysql_fetch_lengths ( resource $result ) : array|false"
    ],
    "mysql_fetch_object": [
        "Fetch a result row as an object",
        "mysql_fetch_object ( resource $result , string $class_name = ? , array $params = ? ) : object"
    ],
    "mysql_fetch_row": [
        "Get a result row as an enumerated array",
        "mysql_fetch_row ( resource $result ) : array"
    ],
    "mysql_field_flags": [
        "Get the flags associated with the specified field in a result",
        "mysql_field_flags ( resource $result , int $field_offset ) : string|false"
    ],
    "mysql_field_len": [
        "Returns the length of the specified field",
        "mysql_field_len ( resource $result , int $field_offset ) : int|false"
    ],
    "mysql_field_name": [
        "Get the name of the specified field in a result",
        "mysql_field_name ( resource $result , int $field_offset ) : string|false"
    ],
    "mysql_field_seek": [
        "Set result pointer to a specified field offset",
        "mysql_field_seek ( resource $result , int $field_offset ) : bool"
    ],
    "mysql_field_table": [
        "Get name of the table the specified field is in",
        "mysql_field_table ( resource $result , int $field_offset ) : string"
    ],
    "mysql_field_type": [
        "Get the type of the specified field in a result",
        "mysql_field_type ( resource $result , int $field_offset ) : string"
    ],
    "mysql_free_result": [
        "Free result memory",
        "mysql_free_result ( resource $result ) : bool"
    ],
    "mysql_get_client_info": [
        "Get MySQL client info",
        "mysql_get_client_info ( ) : string"
    ],
    "mysql_get_host_info": [
        "Get MySQL host info",
        "mysql_get_host_info ( resource $link_identifier = NULL ) : string|false"
    ],
    "mysql_get_proto_info": [
        "Get MySQL protocol info",
        "mysql_get_proto_info ( resource $link_identifier = NULL ) : int|false"
    ],
    "mysql_get_server_info": [
        "Get MySQL server info",
        "mysql_get_server_info ( resource $link_identifier = NULL ) : string|false"
    ],
    "mysql_info": [
        "Get information about the most recent query",
        "mysql_info ( resource $link_identifier = NULL ) : string"
    ],
    "mysql_insert_id": [
        "Get the ID generated in the last query",
        "mysql_insert_id ( resource $link_identifier = NULL ) : int"
    ],
    "mysql_list_dbs": [
        "List databases available on a MySQL server",
        "mysql_list_dbs ( resource $link_identifier = NULL ) : resource"
    ],
    "mysql_list_fields": [
        "List MySQL table fields",
        "mysql_list_fields ( string $database_name , string $table_name , resource $link_identifier = NULL ) : resource"
    ],
    "mysql_list_processes": [
        "List MySQL processes",
        "mysql_list_processes ( resource $link_identifier = NULL ) : resource|false"
    ],
    "mysql_list_tables": [
        "List tables in a MySQL database",
        "mysql_list_tables ( string $database , resource $link_identifier = NULL ) : resource|false"
    ],
    "mysql_num_fields": [
        "Get number of fields in result",
        "mysql_num_fields ( resource $result ) : int|false"
    ],
    "mysql_num_rows": [
        "Get number of rows in result",
        "mysql_num_rows ( resource $result ) : int|false"
    ],
    "mysql_pconnect": [
        "Open a persistent connection to a MySQL server",
        "mysql_pconnect ( string $server = ini_get(\"mysql.default_host\") , string $username = ini_get(\"mysql.default_user\") , string $password = ini_get(\"mysql.default_password\") , int $client_flags = 0 ) : resource"
    ],
    "mysql_ping": [
        "Ping a server connection or reconnect if there is no connection",
        "mysql_ping ( resource $link_identifier = NULL ) : bool"
    ],
    "mysql_query": [
        "Send a MySQL query",
        "mysql_query ( string $query , resource $link_identifier = NULL ) : mixed"
    ],
    "mysql_real_escape_string": [
        "Escapes special characters in a string for use in an SQL statement",
        "mysql_real_escape_string ( string $unescaped_string , resource $link_identifier = NULL ) : string"
    ],
    "mysql_result": [
        "Get result data",
        "mysql_result ( resource $result , int $row , mixed $field = 0 ) : string"
    ],
    "mysql_select_db": [
        "Select a MySQL database",
        "mysql_select_db ( string $database_name , resource $link_identifier = NULL ) : bool"
    ],
    "mysql_set_charset": [
        "Sets the client character set",
        "mysql_set_charset ( string $charset , resource $link_identifier = NULL ) : bool"
    ],
    "mysql_stat": [
        "Get current system status",
        "mysql_stat ( resource $link_identifier = NULL ) : string"
    ],
    "mysql_tablename": [
        "Get table name of field",
        "mysql_tablename ( resource $result , int $i ) : string|false"
    ],
    "mysql_thread_id": [
        "Return the current thread ID",
        "mysql_thread_id ( resource $link_identifier = NULL ) : int|false"
    ],
    "mysql_unbuffered_query": [
        "Send an SQL query to MySQL without fetching and buffering the result rows",
        "mysql_unbuffered_query ( string $query , resource $link_identifier = NULL ) : resource"
    ],
    "mysqli": [
        "Represents a connection between PHP and a MySQL database.",
        "new mysqli ( string $host = ini_get(\"mysqli.default_host\") , string $username = ini_get(\"mysqli.default_user\") , string $passwd = ini_get(\"mysqli.default_pw\") , string $dbname = \"\" , int $port = ini_get(\"mysqli.default_port\") , string $socket = ini_get(\"mysqli.default_socket\") )"
    ],
    "mysqli_affected_rows": [
        "Gets the number of affected rows in a previous MySQL operation",
        "mysqli_affected_rows ( mysqli $link ) : int"
    ],
    "mysqli_autocommit": [
        "Turns on or off auto-committing database modifications",
        "mysqli_autocommit ( mysqli $link , bool $mode ) : bool"
    ],
    "mysqli_begin_transaction": [
        "Starts a transaction",
        "mysqli_begin_transaction ( mysqli $link , int $flags = 0 , string $name = ? ) : bool"
    ],
    "mysqli_change_user": [
        "Changes the user of the specified database connection",
        "mysqli_change_user ( mysqli $link , string $user , string $password , string $database ) : bool"
    ],
    "mysqli_character_set_name": [
        "Returns the default character set for the database connection",
        "mysqli_character_set_name ( mysqli $link ) : string"
    ],
    "mysqli_close": [
        "Closes a previously opened database connection",
        "mysqli_close ( mysqli $link ) : bool"
    ],
    "mysqli_commit": [
        "Commits the current transaction",
        "mysqli_commit ( mysqli $link , int $flags = 0 , string $name = ? ) : bool"
    ],
    "mysqli_connect": [
        "Open a new connection to the MySQL server",
        "mysqli_connect ( string $host = ini_get(\"mysqli.default_host\") , string $username = ini_get(\"mysqli.default_user\") , string $passwd = ini_get(\"mysqli.default_pw\") , string $dbname = \"\" , int $port = ini_get(\"mysqli.default_port\") , string $socket = ini_get(\"mysqli.default_socket\") ) : mysqli|false"
    ],
    "mysqli_connect_errno": [
        "Returns the error code from last connect call",
        "mysqli_connect_errno ( ) : int"
    ],
    "mysqli_connect_error": [
        "Returns a string description of the last connect error",
        "mysqli_connect_error ( ) : string"
    ],
    "mysqli_data_seek": [
        "Adjusts the result pointer to an arbitrary row in the result",
        "mysqli_data_seek ( mysqli_result $result , int $offset ) : bool"
    ],
    "mysqli_debug": [
        "Performs debugging operations",
        "mysqli_debug ( string $message ) : bool"
    ],
    "mysqli_driver": [
        "The mysqli_driver class is an instance of the monostate pattern, i.e. there is only one driver which can be accessed though an arbitrary amount of mysqli_driver instances."
    ],
    "mysqli_dump_debug_info": [
        "Dump debugging information into the log",
        "mysqli_dump_debug_info ( mysqli $link ) : bool"
    ],
    "mysqli_embedded_server_end": [
        "Stop embedded server",
        "mysqli_embedded_server_end ( ) : void"
    ],
    "mysqli_embedded_server_start": [
        "Initialize and start embedded server",
        "mysqli_embedded_server_start ( int $start , array $arguments , array $groups ) : bool"
    ],
    "mysqli_errno": [
        "Returns the error code for the most recent function call",
        "mysqli_errno ( mysqli $link ) : int"
    ],
    "mysqli_error": [
        "Returns a string description of the last error",
        "mysqli_error ( mysqli $link ) : string"
    ],
    "mysqli_error_list": [
        "Returns a list of errors from the last command executed",
        "mysqli_error_list ( mysqli $link ) : array"
    ],
    "mysqli_fetch_all": [
        "Fetches all result rows as an associative array, a numeric array, or both",
        "mysqli_fetch_all ( mysqli_result $result , int $resulttype = MYSQLI_NUM ) : mixed"
    ],
    "mysqli_fetch_array": [
        "Fetch a result row as an associative, a numeric array, or both",
        "mysqli_fetch_array ( mysqli_result $result , int $resulttype = MYSQLI_BOTH ) : mixed"
    ],
    "mysqli_fetch_assoc": [
        "Fetch a result row as an associative array",
        "mysqli_fetch_assoc ( mysqli_result $result ) : array"
    ],
    "mysqli_fetch_field": [
        "Returns the next field in the result set",
        "mysqli_fetch_field ( mysqli_result $result ) : object"
    ],
    "mysqli_fetch_field_direct": [
        "Fetch meta-data for a single field",
        "mysqli_fetch_field_direct ( mysqli_result $result , int $fieldnr ) : object"
    ],
    "mysqli_fetch_fields": [
        "Returns an array of objects representing the fields in a result set",
        "mysqli_fetch_fields ( mysqli_result $result ) : array"
    ],
    "mysqli_fetch_lengths": [
        "Returns the lengths of the columns of the current row in the result set",
        "mysqli_fetch_lengths ( mysqli_result $result ) : array"
    ],
    "mysqli_fetch_object": [
        "Returns the current row of a result set as an object",
        "mysqli_fetch_object ( mysqli_result $result , string $class_name = \"stdClass\" , array $params = ? ) : object"
    ],
    "mysqli_fetch_row": [
        "Get a result row as an enumerated array",
        "mysqli_fetch_row ( mysqli_result $result ) : mixed"
    ],
    "mysqli_field_count": [
        "Returns the number of columns for the most recent query",
        "mysqli_field_count ( mysqli $link ) : int"
    ],
    "mysqli_field_seek": [
        "Set result pointer to a specified field offset",
        "mysqli_field_seek ( mysqli_result $result , int $fieldnr ) : bool"
    ],
    "mysqli_field_tell": [
        "Get current field offset of a result pointer",
        "mysqli_field_tell ( mysqli_result $result ) : int"
    ],
    "mysqli_free_result": [
        "Frees the memory associated with a result",
        "mysqli_free_result ( mysqli_result $result ) : void"
    ],
    "mysqli_get_charset": [
        "Returns a character set object",
        "mysqli_get_charset ( mysqli $link ) : object"
    ],
    "mysqli_get_client_info": [
        "Get MySQL client info",
        "mysqli_get_client_info ( mysqli $link = NULL ) : string"
    ],
    "mysqli_get_client_stats": [
        "Returns client per-process statistics",
        "mysqli_get_client_stats ( ) : array"
    ],
    "mysqli_get_client_version": [
        "Returns the MySQL client version as an integer",
        "mysqli_get_client_version ( mysqli $link ) : int"
    ],
    "mysqli_get_connection_stats": [
        "Returns statistics about the client connection",
        "mysqli_get_connection_stats ( mysqli $link ) : array"
    ],
    "mysqli_get_host_info": [
        "Returns a string representing the type of connection used",
        "mysqli_get_host_info ( mysqli $link ) : string"
    ],
    "mysqli_get_links_stats": [
        "Return information about open and cached links",
        "mysqli_get_links_stats ( ) : array"
    ],
    "mysqli_get_proto_info": [
        "Returns the version of the MySQL protocol used",
        "mysqli_get_proto_info ( mysqli $link ) : int"
    ],
    "mysqli_get_server_info": [
        "Returns the version of the MySQL server",
        "mysqli_get_server_info ( mysqli $link ) : string"
    ],
    "mysqli_get_server_version": [
        "Returns the version of the MySQL server as an integer",
        "mysqli_get_server_version ( mysqli $link ) : int"
    ],
    "mysqli_get_warnings": [
        "Get result of SHOW WARNINGS",
        "mysqli_get_warnings ( mysqli $link ) : mysqli_warning"
    ],
    "mysqli_info": [
        "Retrieves information about the most recently executed query",
        "mysqli_info ( mysqli $link ) : string"
    ],
    "mysqli_init": [
        "Initializes MySQLi and returns an object for use with mysqli_real_connect()",
        "mysqli_init ( ) : mysqli"
    ],
    "mysqli_insert_id": [
        "Returns the auto generated id used in the latest query",
        "mysqli_insert_id ( mysqli $link ) : mixed"
    ],
    "mysqli_kill": [
        "Asks the server to kill a MySQL thread",
        "mysqli_kill ( mysqli $link , int $processid ) : bool"
    ],
    "mysqli_more_results": [
        "Check if there are any more query results from a multi query",
        "mysqli_more_results ( mysqli $link ) : bool"
    ],
    "mysqli_multi_query": [
        "Performs a query on the database",
        "mysqli_multi_query ( mysqli $link , string $query ) : bool"
    ],
    "mysqli_next_result": [
        "Prepare next result from multi_query",
        "mysqli_next_result ( mysqli $link ) : bool"
    ],
    "mysqli_num_fields": [
        "Get the number of fields in a result",
        "mysqli_num_fields ( mysqli_result $result ) : int"
    ],
    "mysqli_num_rows": [
        "Gets the number of rows in a result",
        "mysqli_num_rows ( mysqli_result $result ) : int"
    ],
    "mysqli_options": [
        "Set options",
        "mysqli_options ( mysqli $link , int $option , mixed $value ) : bool"
    ],
    "mysqli_ping": [
        "Pings a server connection, or tries to reconnect if the connection has gone down",
        "mysqli_ping ( mysqli $link ) : bool"
    ],
    "mysqli_poll": [
        "Poll connections",
        "mysqli_poll ( array &$read , array &$error , array &$reject , int $sec , int $usec = 0 ) : int"
    ],
    "mysqli_prepare": [
        "Prepare an SQL statement for execution",
        "mysqli_prepare ( mysqli $link , string $query ) : mysqli_stmt"
    ],
    "mysqli_query": [
        "Performs a query on the database",
        "mysqli_query ( mysqli $link , string $query , int $resultmode = MYSQLI_STORE_RESULT ) : mixed"
    ],
    "mysqli_real_connect": [
        "Opens a connection to a mysql server",
        "mysqli_real_connect ( mysqli $link , string $host = ? , string $username = ? , string $passwd = ? , string $dbname = ? , int $port = ? , string $socket = ? , int $flags = ? ) : bool"
    ],
    "mysqli_real_escape_string": [
        "Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection",
        "mysqli_real_escape_string ( mysqli $link , string $escapestr ) : string"
    ],
    "mysqli_real_query": [
        "Execute an SQL query",
        "mysqli_real_query ( mysqli $link , string $query ) : bool"
    ],
    "mysqli_reap_async_query": [
        "Get result from async query",
        "mysqli_reap_async_query ( mysqli $link ) : mysqli_result"
    ],
    "mysqli_refresh": [
        "Refreshes",
        "mysqli_refresh ( mysqli $link , int $options ) : bool"
    ],
    "mysqli_release_savepoint": [
        "Removes the named savepoint from the set of savepoints of the current transaction",
        "mysqli_release_savepoint ( mysqli $link , string $name ) : bool"
    ],
    "mysqli_report": [
        "Sets mysqli error reporting mode",
        "mysqli_report ( int $flags ) : bool"
    ],
    "mysqli_result": [
        "Represents the result set obtained from a query against the database."
    ],
    "mysqli_rollback": [
        "Rolls back current transaction",
        "mysqli_rollback ( mysqli $link , int $flags = 0 , string $name = ? ) : bool"
    ],
    "mysqli_savepoint": [
        "Set a named transaction savepoint",
        "mysqli_savepoint ( mysqli $link , string $name ) : bool"
    ],
    "mysqli_select_db": [
        "Selects the default database for database queries",
        "mysqli_select_db ( mysqli $link , string $dbname ) : bool"
    ],
    "mysqli_set_charset": [
        "Sets the default client character set",
        "mysqli_set_charset ( mysqli $link , string $charset ) : bool"
    ],
    "mysqli_sql_exception": [
        "The mysqli exception handling class."
    ],
    "mysqli_sqlstate": [
        "Returns the SQLSTATE error from previous MySQL operation",
        "mysqli_sqlstate ( mysqli $link ) : string"
    ],
    "mysqli_ssl_set": [
        "Used for establishing secure connections using SSL",
        "mysqli_ssl_set ( mysqli $link , string $key , string $cert , string $ca , string $capath , string $cipher ) : bool"
    ],
    "mysqli_stat": [
        "Gets the current system status",
        "mysqli_stat ( mysqli $link ) : string"
    ],
    "mysqli_stmt": [
        "Represents a prepared statement.",
        "new mysqli_stmt ( mysqli $link , string $query = ? )"
    ],
    "mysqli_stmt_affected_rows": [
        "Returns the total number of rows changed, deleted, or\n  inserted by the last executed statement",
        "mysqli_stmt_affected_rows ( mysqli_stmt $stmt ) : int"
    ],
    "mysqli_stmt_attr_get": [
        "Used to get the current value of a statement attribute",
        "mysqli_stmt_attr_get ( mysqli_stmt $stmt , int $attr ) : int"
    ],
    "mysqli_stmt_attr_set": [
        "Used to modify the behavior of a prepared statement",
        "mysqli_stmt_attr_set ( mysqli_stmt $stmt , int $attr , int $mode ) : bool"
    ],
    "mysqli_stmt_bind_param": [
        "Binds variables to a prepared statement as parameters",
        "mysqli_stmt_bind_param ( mysqli_stmt $stmt , string $types , mixed &$var , mixed &...$vars ) : bool"
    ],
    "mysqli_stmt_bind_result": [
        "Binds variables to a prepared statement for result storage",
        "mysqli_stmt_bind_result ( mysqli_stmt $stmt , mixed &$var , mixed &...$vars ) : bool"
    ],
    "mysqli_stmt_close": [
        "Closes a prepared statement",
        "mysqli_stmt_close ( mysqli_stmt $stmt ) : bool"
    ],
    "mysqli_stmt_data_seek": [
        "Seeks to an arbitrary row in statement result set",
        "mysqli_stmt_data_seek ( mysqli_stmt $stmt , int $offset ) : void"
    ],
    "mysqli_stmt_errno": [
        "Returns the error code for the most recent statement call",
        "mysqli_stmt_errno ( mysqli_stmt $stmt ) : int"
    ],
    "mysqli_stmt_error": [
        "Returns a string description for last statement error",
        "mysqli_stmt_error ( mysqli_stmt $stmt ) : string"
    ],
    "mysqli_stmt_error_list": [
        "Returns a list of errors from the last statement executed",
        "mysqli_stmt_error_list ( mysqli_stmt $stmt ) : array"
    ],
    "mysqli_stmt_execute": [
        "Executes a prepared Query",
        "mysqli_stmt_execute ( mysqli_stmt $stmt ) : bool"
    ],
    "mysqli_stmt_fetch": [
        "Fetch results from a prepared statement into the bound variables",
        "mysqli_stmt_fetch ( mysqli_stmt $stmt ) : bool"
    ],
    "mysqli_stmt_field_count": [
        "Returns the number of columns in the given statement",
        "mysqli_stmt_field_count ( mysqli_stmt $stmt ) : int"
    ],
    "mysqli_stmt_free_result": [
        "Frees stored result memory for the given statement handle",
        "mysqli_stmt_free_result ( mysqli_stmt $stmt ) : void"
    ],
    "mysqli_stmt_get_result": [
        "Gets a result set from a prepared statement",
        "mysqli_stmt_get_result ( mysqli_stmt $stmt ) : mysqli_result"
    ],
    "mysqli_stmt_get_warnings": [
        "Get result of SHOW WARNINGS",
        "mysqli_stmt_get_warnings ( mysqli_stmt $stmt ) : object"
    ],
    "mysqli_stmt_init": [
        "Initializes a statement and returns an object for use with mysqli_stmt_prepare",
        "mysqli_stmt_init ( mysqli $link ) : mysqli_stmt"
    ],
    "mysqli_stmt_insert_id": [
        "Get the ID generated from the previous INSERT operation",
        "mysqli_stmt_insert_id ( mysqli_stmt $stmt ) : mixed"
    ],
    "mysqli_stmt_more_results": [
        "Check if there are more query results from a multiple query",
        "mysqli_stmt_more_results ( mysql_stmt $stmt ) : bool"
    ],
    "mysqli_stmt_next_result": [
        "Reads the next result from a multiple query",
        "mysqli_stmt_next_result ( mysql_stmt $stmt ) : bool"
    ],
    "mysqli_stmt_num_rows": [
        "Return the number of rows in statements result set",
        "mysqli_stmt_num_rows ( mysqli_stmt $stmt ) : int"
    ],
    "mysqli_stmt_param_count": [
        "Returns the number of parameters for the given statement",
        "mysqli_stmt_param_count ( mysqli_stmt $stmt ) : int"
    ],
    "mysqli_stmt_prepare": [
        "Prepare an SQL statement for execution",
        "mysqli_stmt_prepare ( mysqli_stmt $stmt , string $query ) : bool"
    ],
    "mysqli_stmt_reset": [
        "Resets a prepared statement",
        "mysqli_stmt_reset ( mysqli_stmt $stmt ) : bool"
    ],
    "mysqli_stmt_result_metadata": [
        "Returns result set metadata from a prepared statement",
        "mysqli_stmt_result_metadata ( mysqli_stmt $stmt ) : mysqli_result"
    ],
    "mysqli_stmt_send_long_data": [
        "Send data in blocks",
        "mysqli_stmt_send_long_data ( mysqli_stmt $stmt , int $param_nr , string $data ) : bool"
    ],
    "mysqli_stmt_sqlstate": [
        "Returns SQLSTATE error from previous statement operation",
        "mysqli_stmt_sqlstate ( mysqli_stmt $stmt ) : string"
    ],
    "mysqli_stmt_store_result": [
        "Transfers a result set from a prepared statement",
        "mysqli_stmt_store_result ( mysqli_stmt $stmt ) : bool"
    ],
    "mysqli_store_result": [
        "Transfers a result set from the last query",
        "mysqli_store_result ( mysqli $link , int $option = ? ) : mysqli_result"
    ],
    "mysqli_thread_id": [
        "Returns the thread ID for the current connection",
        "mysqli_thread_id ( mysqli $link ) : int"
    ],
    "mysqli_thread_safe": [
        "Returns whether thread safety is given or not",
        "mysqli_thread_safe ( ) : bool"
    ],
    "mysqli_use_result": [
        "Initiate a result set retrieval",
        "mysqli_use_result ( mysqli $link ) : mysqli_result"
    ],
    "mysqli_warning": [
        "Represents a MySQL warning."
    ],
    "mysqli_warning_count": [
        "Returns the number of warnings from the last query for the given link",
        "mysqli_warning_count ( mysqli $link ) : int"
    ],
    "mysqlnd_memcache_get_config": [
        "Returns information about the plugin configuration",
        "mysqlnd_memcache_get_config ( mixed $connection ) : array"
    ],
    "mysqlnd_memcache_set": [
        "Associate a MySQL connection with a Memcache connection",
        "mysqlnd_memcache_set ( mixed $mysql_connection , Memcached $memcache_connection = ? , string $pattern = ? , callable $callback = ? ) : bool"
    ],
    "mysqlnd_ms_dump_servers": [
        "Returns a list of currently configured servers",
        "mysqlnd_ms_dump_servers ( mixed $connection ) : array"
    ],
    "mysqlnd_ms_fabric_select_global": [
        "Switch to global sharding server for a given table",
        "mysqlnd_ms_fabric_select_global ( mixed $connection , mixed $table_name ) : array"
    ],
    "mysqlnd_ms_fabric_select_shard": [
        "Switch to shard",
        "mysqlnd_ms_fabric_select_shard ( mixed $connection , mixed $table_name , mixed $shard_key ) : array"
    ],
    "mysqlnd_ms_get_last_gtid": [
        "Returns the latest global transaction ID",
        "mysqlnd_ms_get_last_gtid ( mixed $connection ) : string"
    ],
    "mysqlnd_ms_get_last_used_connection": [
        "Returns an array which describes the last used connection",
        "mysqlnd_ms_get_last_used_connection ( mixed $connection ) : array"
    ],
    "mysqlnd_ms_get_stats": [
        "Returns query distribution and connection statistics",
        "mysqlnd_ms_get_stats ( ) : array"
    ],
    "mysqlnd_ms_match_wild": [
        "Finds whether a table name matches a wildcard pattern or not",
        "mysqlnd_ms_match_wild ( string $table_name , string $wildcard ) : bool"
    ],
    "mysqlnd_ms_query_is_select": [
        "Find whether to send the query to the master, the slave or the last used MySQL server",
        "mysqlnd_ms_query_is_select ( string $query ) : int"
    ],
    "mysqlnd_ms_set_qos": [
        "Sets the quality of service needed from the cluster",
        "mysqlnd_ms_set_qos ( mixed $connection , int $service_level , int $service_level_option = ? , mixed $option_value = ? ) : bool"
    ],
    "mysqlnd_ms_set_user_pick_server": [
        "Sets a callback for user-defined read\/write splitting",
        "mysqlnd_ms_set_user_pick_server ( string $function ) : bool"
    ],
    "mysqlnd_ms_xa_begin": [
        "Starts a distributed\/XA transaction among MySQL servers",
        "mysqlnd_ms_xa_begin ( mixed $connection , string $gtrid , int $timeout = ? ) : int"
    ],
    "mysqlnd_ms_xa_commit": [
        "Commits a distributed\/XA transaction among MySQL servers",
        "mysqlnd_ms_xa_commit ( mixed $connection , string $gtrid ) : bool"
    ],
    "mysqlnd_ms_xa_gc": [
        "Garbage collects unfinished XA transactions after severe errors",
        "mysqlnd_ms_xa_gc ( mixed $connection , string $gtrid = ? , bool $ignore_max_retries = ? ) : int"
    ],
    "mysqlnd_ms_xa_rollback": [
        "Rolls back a distributed\/XA transaction among MySQL servers",
        "mysqlnd_ms_xa_rollback ( mixed $connection , string $gtrid ) : int"
    ],
    "mysqlnd_qc_clear_cache": [
        "Flush all cache contents",
        "mysqlnd_qc_clear_cache ( ) : bool"
    ],
    "mysqlnd_qc_get_available_handlers": [
        "Returns a list of available storage handler",
        "mysqlnd_qc_get_available_handlers ( ) : array"
    ],
    "mysqlnd_qc_get_cache_info": [
        "Returns information on the current handler, the number of cache entries and cache entries, if available",
        "mysqlnd_qc_get_cache_info ( ) : array"
    ],
    "mysqlnd_qc_get_core_stats": [
        "Statistics collected by the core of the query cache",
        "mysqlnd_qc_get_core_stats ( ) : array"
    ],
    "mysqlnd_qc_get_normalized_query_trace_log": [
        "Returns a normalized query trace log for each query inspected by the query cache",
        "mysqlnd_qc_get_normalized_query_trace_log ( ) : array"
    ],
    "mysqlnd_qc_get_query_trace_log": [
        "Returns a backtrace for each query inspected by the query cache",
        "mysqlnd_qc_get_query_trace_log ( ) : array"
    ],
    "mysqlnd_qc_set_cache_condition": [
        "Set conditions for automatic caching",
        "mysqlnd_qc_set_cache_condition (  int $condition_type  ,  mixed $condition  ,  mixed $condition_option  ) : bool"
    ],
    "mysqlnd_qc_set_is_select": [
        "Installs a callback which decides whether a statement is cached",
        "mysqlnd_qc_set_is_select (  string $callback  ) : mixed"
    ],
    "mysqlnd_qc_set_storage_handler": [
        "Change current storage handler",
        "mysqlnd_qc_set_storage_handler (  string $handler  ) : bool"
    ],
    "mysqlnd_qc_set_user_handlers": [
        "Sets the callback functions for a user-defined procedural storage handler",
        "mysqlnd_qc_set_user_handlers (  string $get_hash  ,  string $find_query_in_cache  ,  string $return_to_cache  ,  string $add_query_to_cache_if_not_exists  ,  string $query_is_select  ,  string $update_query_run_time_stats  ,  string $get_stats  ,  string $clear_cache  ) : bool"
    ],
    "mysqlnd_uh_convert_to_mysqlnd": [
        "Converts a MySQL connection handle into a mysqlnd connection handle",
        "mysqlnd_uh_convert_to_mysqlnd ( mysqli &$mysql_connection ) : resource"
    ],
    "mysqlnd_uh_set_connection_proxy": [
        "Installs a proxy for mysqlnd connections",
        "mysqlnd_uh_set_connection_proxy ( MysqlndUhConnection &$connection_proxy , mysqli &$mysqli_connection = ? ) : bool"
    ],
    "mysqlnd_uh_set_statement_proxy": [
        "Installs a proxy for mysqlnd statements",
        "mysqlnd_uh_set_statement_proxy ( MysqlndUhStatement &$statement_proxy ) : bool"
    ],
    "MysqlndUhConnection": [
        "The __construct purpose",
        "new MysqlndUhConnection ( )"
    ],
    "MysqlndUhPreparedStatement": [
        "The __construct purpose",
        "new MysqlndUhPreparedStatement ( )"
    ],
    "natcasesort": [
        "Sort an array using a case insensitive \"natural order\" algorithm",
        "natcasesort ( array &$array ) : bool"
    ],
    "natsort": [
        "Sort an array using a \"natural order\" algorithm",
        "natsort ( array &$array ) : bool"
    ],
    "ncurses_addch": [
        "Add character at current position and advance cursor",
        "ncurses_addch ( int $ch ) : int"
    ],
    "ncurses_addchnstr": [
        "Add attributed string with specified length at current position",
        "ncurses_addchnstr ( string $s , int $n ) : int"
    ],
    "ncurses_addchstr": [
        "Add attributed string at current position",
        "ncurses_addchstr ( string $s ) : int"
    ],
    "ncurses_addnstr": [
        "Add string with specified length at current position",
        "ncurses_addnstr ( string $s , int $n ) : int"
    ],
    "ncurses_addstr": [
        "Output text at current position",
        "ncurses_addstr ( string $text ) : int"
    ],
    "ncurses_assume_default_colors": [
        "Define default colors for color 0",
        "ncurses_assume_default_colors ( int $fg , int $bg ) : int"
    ],
    "ncurses_attroff": [
        "Turn off the given attributes",
        "ncurses_attroff ( int $attributes ) : int"
    ],
    "ncurses_attron": [
        "Turn on the given attributes",
        "ncurses_attron ( int $attributes ) : int"
    ],
    "ncurses_attrset": [
        "Set given attributes",
        "ncurses_attrset ( int $attributes ) : int"
    ],
    "ncurses_baudrate": [
        "Returns baudrate of terminal",
        "ncurses_baudrate ( ) : int"
    ],
    "ncurses_beep": [
        "Let the terminal beep",
        "ncurses_beep ( ) : int"
    ],
    "ncurses_bkgd": [
        "Set background property for terminal screen",
        "ncurses_bkgd ( int $attrchar ) : int"
    ],
    "ncurses_bkgdset": [
        "Control screen background",
        "ncurses_bkgdset ( int $attrchar ) : void"
    ],
    "ncurses_border": [
        "Draw a border around the screen using attributed characters",
        "ncurses_border ( int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner ) : int"
    ],
    "ncurses_bottom_panel": [
        "Moves a visible panel to the bottom of the stack",
        "ncurses_bottom_panel ( resource $panel ) : int"
    ],
    "ncurses_can_change_color": [
        "Checks if terminal color definitions can be changed",
        "ncurses_can_change_color ( ) : bool"
    ],
    "ncurses_cbreak": [
        "Switch off input buffering",
        "ncurses_cbreak ( ) : bool"
    ],
    "ncurses_clear": [
        "Clear screen",
        "ncurses_clear ( ) : bool"
    ],
    "ncurses_clrtobot": [
        "Clear screen from current position to bottom",
        "ncurses_clrtobot ( ) : bool"
    ],
    "ncurses_clrtoeol": [
        "Clear screen from current position to end of line",
        "ncurses_clrtoeol ( ) : bool"
    ],
    "ncurses_color_content": [
        "Retrieves RGB components of a color",
        "ncurses_color_content ( int $color , int &$r , int &$g , int &$b ) : int"
    ],
    "ncurses_color_set": [
        "Set active foreground and background colors",
        "ncurses_color_set ( int $pair ) : int"
    ],
    "ncurses_curs_set": [
        "Set cursor state",
        "ncurses_curs_set ( int $visibility ) : int"
    ],
    "ncurses_def_prog_mode": [
        "Saves terminals (program) mode",
        "ncurses_def_prog_mode ( ) : bool"
    ],
    "ncurses_def_shell_mode": [
        "Saves terminals (shell) mode",
        "ncurses_def_shell_mode ( ) : bool"
    ],
    "ncurses_define_key": [
        "Define a keycode",
        "ncurses_define_key ( string $definition , int $keycode ) : int"
    ],
    "ncurses_del_panel": [
        "Remove panel from the stack and delete it (but not the associated window)",
        "ncurses_del_panel ( resource $panel ) : bool"
    ],
    "ncurses_delay_output": [
        "Delay output on terminal using padding characters",
        "ncurses_delay_output ( int $milliseconds ) : int"
    ],
    "ncurses_delch": [
        "Delete character at current position, move rest of line left",
        "ncurses_delch ( ) : bool"
    ],
    "ncurses_deleteln": [
        "Delete line at current position, move rest of screen up",
        "ncurses_deleteln ( ) : bool"
    ],
    "ncurses_delwin": [
        "Delete a ncurses window",
        "ncurses_delwin ( resource $window ) : bool"
    ],
    "ncurses_doupdate": [
        "Write all prepared refreshes to terminal",
        "ncurses_doupdate ( ) : bool"
    ],
    "ncurses_echo": [
        "Activate keyboard input echo",
        "ncurses_echo ( ) : bool"
    ],
    "ncurses_echochar": [
        "Single character output including refresh",
        "ncurses_echochar ( int $character ) : int"
    ],
    "ncurses_end": [
        "Stop using ncurses, clean up the screen",
        "ncurses_end ( ) : int"
    ],
    "ncurses_erase": [
        "Erase terminal screen",
        "ncurses_erase ( ) : bool"
    ],
    "ncurses_erasechar": [
        "Returns current erase character",
        "ncurses_erasechar ( ) : string"
    ],
    "ncurses_filter": [
        "Set LINES for iniscr() and newterm() to 1",
        "ncurses_filter ( ) : void"
    ],
    "ncurses_flash": [
        "Flash terminal screen (visual bell)",
        "ncurses_flash ( ) : bool"
    ],
    "ncurses_flushinp": [
        "Flush keyboard input buffer",
        "ncurses_flushinp ( ) : bool"
    ],
    "ncurses_getch": [
        "Read a character from keyboard",
        "ncurses_getch ( ) : int"
    ],
    "ncurses_getmaxyx": [
        "Returns the size of a window",
        "ncurses_getmaxyx ( resource $window , int &$y , int &$x ) : void"
    ],
    "ncurses_getmouse": [
        "Reads mouse event",
        "ncurses_getmouse ( array &$mevent ) : bool"
    ],
    "ncurses_getyx": [
        "Returns the current cursor position for a window",
        "ncurses_getyx ( resource $window , int &$y , int &$x ) : void"
    ],
    "ncurses_halfdelay": [
        "Put terminal into halfdelay mode",
        "ncurses_halfdelay ( int $tenth ) : int"
    ],
    "ncurses_has_colors": [
        "Checks if terminal has color capabilities",
        "ncurses_has_colors ( ) : bool"
    ],
    "ncurses_has_ic": [
        "Check for insert- and delete-capabilities",
        "ncurses_has_ic ( ) : bool"
    ],
    "ncurses_has_il": [
        "Check for line insert- and delete-capabilities",
        "ncurses_has_il ( ) : bool"
    ],
    "ncurses_has_key": [
        "Check for presence of a function key on terminal keyboard",
        "ncurses_has_key ( int $keycode ) : int"
    ],
    "ncurses_hide_panel": [
        "Remove panel from the stack, making it invisible",
        "ncurses_hide_panel ( resource $panel ) : int"
    ],
    "ncurses_hline": [
        "Draw a horizontal line at current position using an attributed character and max. n characters long",
        "ncurses_hline ( int $charattr , int $n ) : int"
    ],
    "ncurses_inch": [
        "Get character and attribute at current position",
        "ncurses_inch ( ) : string"
    ],
    "ncurses_init": [
        "Initialize ncurses",
        "ncurses_init ( ) : void"
    ],
    "ncurses_init_color": [
        "Define a terminal color",
        "ncurses_init_color ( int $color , int $r , int $g , int $b ) : int"
    ],
    "ncurses_init_pair": [
        "Define a color pair",
        "ncurses_init_pair ( int $pair , int $fg , int $bg ) : int"
    ],
    "ncurses_insch": [
        "Insert character moving rest of line including character at current position",
        "ncurses_insch ( int $character ) : int"
    ],
    "ncurses_insdelln": [
        "Insert lines before current line scrolling down (negative numbers delete and scroll up)",
        "ncurses_insdelln ( int $count ) : int"
    ],
    "ncurses_insertln": [
        "Insert a line, move rest of screen down",
        "ncurses_insertln ( ) : int"
    ],
    "ncurses_insstr": [
        "Insert string at current position, moving rest of line right",
        "ncurses_insstr ( string $text ) : int"
    ],
    "ncurses_instr": [
        "Reads string from terminal screen",
        "ncurses_instr ( string &$buffer ) : int"
    ],
    "ncurses_isendwin": [
        "Ncurses is in endwin mode, normal screen output may be performed",
        "ncurses_isendwin ( ) : bool"
    ],
    "ncurses_keyok": [
        "Enable or disable a keycode",
        "ncurses_keyok ( int $keycode , bool $enable ) : int"
    ],
    "ncurses_keypad": [
        "Turns keypad on or off",
        "ncurses_keypad ( resource $window , bool $bf ) : int"
    ],
    "ncurses_killchar": [
        "Returns current line kill character",
        "ncurses_killchar ( ) : string"
    ],
    "ncurses_longname": [
        "Returns terminals description",
        "ncurses_longname ( ) : string"
    ],
    "ncurses_meta": [
        "Enables\/Disable 8-bit meta key information",
        "ncurses_meta ( resource $window , bool $8bit ) : int"
    ],
    "ncurses_mouse_trafo": [
        "Transforms coordinates",
        "ncurses_mouse_trafo ( int &$y , int &$x , bool $toscreen ) : bool"
    ],
    "ncurses_mouseinterval": [
        "Set timeout for mouse button clicks",
        "ncurses_mouseinterval ( int $milliseconds ) : int"
    ],
    "ncurses_mousemask": [
        "Sets mouse options",
        "ncurses_mousemask ( int $newmask , int &$oldmask ) : int"
    ],
    "ncurses_move": [
        "Move output position",
        "ncurses_move ( int $y , int $x ) : int"
    ],
    "ncurses_move_panel": [
        "Moves a panel so that its upper-left corner is at [startx, starty]",
        "ncurses_move_panel ( resource $panel , int $startx , int $starty ) : int"
    ],
    "ncurses_mvaddch": [
        "Move current position and add character",
        "ncurses_mvaddch ( int $y , int $x , int $c ) : int"
    ],
    "ncurses_mvaddchnstr": [
        "Move position and add attributed string with specified length",
        "ncurses_mvaddchnstr ( int $y , int $x , string $s , int $n ) : int"
    ],
    "ncurses_mvaddchstr": [
        "Move position and add attributed string",
        "ncurses_mvaddchstr ( int $y , int $x , string $s ) : int"
    ],
    "ncurses_mvaddnstr": [
        "Move position and add string with specified length",
        "ncurses_mvaddnstr ( int $y , int $x , string $s , int $n ) : int"
    ],
    "ncurses_mvaddstr": [
        "Move position and add string",
        "ncurses_mvaddstr ( int $y , int $x , string $s ) : int"
    ],
    "ncurses_mvcur": [
        "Move cursor immediately",
        "ncurses_mvcur ( int $old_y , int $old_x , int $new_y , int $new_x ) : int"
    ],
    "ncurses_mvdelch": [
        "Move position and delete character, shift rest of line left",
        "ncurses_mvdelch ( int $y , int $x ) : int"
    ],
    "ncurses_mvgetch": [
        "Move position and get character at new position",
        "ncurses_mvgetch ( int $y , int $x ) : int"
    ],
    "ncurses_mvhline": [
        "Set new position and draw a horizontal line using an attributed character and max. n characters long",
        "ncurses_mvhline ( int $y , int $x , int $attrchar , int $n ) : int"
    ],
    "ncurses_mvinch": [
        "Move position and get attributed character at new position",
        "ncurses_mvinch ( int $y , int $x ) : int"
    ],
    "ncurses_mvvline": [
        "Set new position and draw a vertical line using an attributed character and max. n characters long",
        "ncurses_mvvline ( int $y , int $x , int $attrchar , int $n ) : int"
    ],
    "ncurses_mvwaddstr": [
        "Add string at new position in window",
        "ncurses_mvwaddstr ( resource $window , int $y , int $x , string $text ) : int"
    ],
    "ncurses_napms": [
        "Sleep",
        "ncurses_napms ( int $milliseconds ) : int"
    ],
    "ncurses_new_panel": [
        "Create a new panel and associate it with window",
        "ncurses_new_panel ( resource $window ) : resource"
    ],
    "ncurses_newpad": [
        "Creates a new pad (window)",
        "ncurses_newpad ( int $rows , int $cols ) : resource"
    ],
    "ncurses_newwin": [
        "Create a new window",
        "ncurses_newwin ( int $rows , int $cols , int $y , int $x ) : resource"
    ],
    "ncurses_nl": [
        "Translate newline and carriage return \/ line feed",
        "ncurses_nl ( ) : bool"
    ],
    "ncurses_nocbreak": [
        "Switch terminal to cooked mode",
        "ncurses_nocbreak ( ) : bool"
    ],
    "ncurses_noecho": [
        "Switch off keyboard input echo",
        "ncurses_noecho ( ) : bool"
    ],
    "ncurses_nonl": [
        "Do not translate newline and carriage return \/ line feed",
        "ncurses_nonl ( ) : bool"
    ],
    "ncurses_noqiflush": [
        "Do not flush on signal characters",
        "ncurses_noqiflush ( ) : void"
    ],
    "ncurses_noraw": [
        "Switch terminal out of raw mode",
        "ncurses_noraw ( ) : bool"
    ],
    "ncurses_pair_content": [
        "Retrieves foreground and background colors of a color pair",
        "ncurses_pair_content ( int $pair , int &$f , int &$b ) : int"
    ],
    "ncurses_panel_above": [
        "Returns the panel above panel",
        "ncurses_panel_above ( resource $panel ) : resource"
    ],
    "ncurses_panel_below": [
        "Returns the panel below panel",
        "ncurses_panel_below ( resource $panel ) : resource"
    ],
    "ncurses_panel_window": [
        "Returns the window associated with panel",
        "ncurses_panel_window ( resource $panel ) : resource"
    ],
    "ncurses_pnoutrefresh": [
        "Copies a region from a pad into the virtual screen",
        "ncurses_pnoutrefresh ( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol ) : int"
    ],
    "ncurses_prefresh": [
        "Copies a region from a pad into the virtual screen",
        "ncurses_prefresh ( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol ) : int"
    ],
    "ncurses_putp": [
        "Apply padding information to the string and output it",
        "ncurses_putp ( string $text ) : int"
    ],
    "ncurses_qiflush": [
        "Flush on signal characters",
        "ncurses_qiflush ( ) : void"
    ],
    "ncurses_raw": [
        "Switch terminal into raw mode",
        "ncurses_raw ( ) : bool"
    ],
    "ncurses_refresh": [
        "Refresh screen",
        "ncurses_refresh ( int $ch ) : int"
    ],
    "ncurses_replace_panel": [
        "Replaces the window associated with panel",
        "ncurses_replace_panel ( resource $panel , resource $window ) : int"
    ],
    "ncurses_reset_prog_mode": [
        "Resets the prog mode saved by def_prog_mode",
        "ncurses_reset_prog_mode ( ) : int"
    ],
    "ncurses_reset_shell_mode": [
        "Resets the shell mode saved by def_shell_mode",
        "ncurses_reset_shell_mode ( ) : int"
    ],
    "ncurses_resetty": [
        "Restores saved terminal state",
        "ncurses_resetty ( ) : bool"
    ],
    "ncurses_savetty": [
        "Saves terminal state",
        "ncurses_savetty ( ) : bool"
    ],
    "ncurses_scr_dump": [
        "Dump screen content to file",
        "ncurses_scr_dump ( string $filename ) : int"
    ],
    "ncurses_scr_init": [
        "Initialize screen from file dump",
        "ncurses_scr_init ( string $filename ) : int"
    ],
    "ncurses_scr_restore": [
        "Restore screen from file dump",
        "ncurses_scr_restore ( string $filename ) : int"
    ],
    "ncurses_scr_set": [
        "Inherit screen from file dump",
        "ncurses_scr_set ( string $filename ) : int"
    ],
    "ncurses_scrl": [
        "Scroll window content up or down without changing current position",
        "ncurses_scrl ( int $count ) : int"
    ],
    "ncurses_show_panel": [
        "Places an invisible panel on top of the stack, making it visible",
        "ncurses_show_panel ( resource $panel ) : int"
    ],
    "ncurses_slk_attr": [
        "Returns current soft label key attribute",
        "ncurses_slk_attr ( ) : int"
    ],
    "ncurses_slk_attroff": [
        "Turn off the given attributes for soft function-key labels",
        "ncurses_slk_attroff ( int $intarg ) : int"
    ],
    "ncurses_slk_attron": [
        "Turn on the given attributes for soft function-key labels",
        "ncurses_slk_attron ( int $intarg ) : int"
    ],
    "ncurses_slk_attrset": [
        "Set given attributes for soft function-key labels",
        "ncurses_slk_attrset ( int $intarg ) : int"
    ],
    "ncurses_slk_clear": [
        "Clears soft labels from screen",
        "ncurses_slk_clear ( ) : bool"
    ],
    "ncurses_slk_color": [
        "Sets color for soft label keys",
        "ncurses_slk_color ( int $intarg ) : int"
    ],
    "ncurses_slk_init": [
        "Initializes soft label key functions",
        "ncurses_slk_init ( int $format ) : bool"
    ],
    "ncurses_slk_noutrefresh": [
        "Copies soft label keys to virtual screen",
        "ncurses_slk_noutrefresh ( ) : bool"
    ],
    "ncurses_slk_refresh": [
        "Copies soft label keys to screen",
        "ncurses_slk_refresh ( ) : int"
    ],
    "ncurses_slk_restore": [
        "Restores soft label keys",
        "ncurses_slk_restore ( ) : int"
    ],
    "ncurses_slk_set": [
        "Sets function key labels",
        "ncurses_slk_set ( int $labelnr , string $label , int $format ) : bool"
    ],
    "ncurses_slk_touch": [
        "Forces output when ncurses_slk_noutrefresh is performed",
        "ncurses_slk_touch ( ) : int"
    ],
    "ncurses_standend": [
        "Stop using 'standout' attribute",
        "ncurses_standend ( ) : int"
    ],
    "ncurses_standout": [
        "Start using 'standout' attribute",
        "ncurses_standout ( ) : int"
    ],
    "ncurses_start_color": [
        "Initializes color functionality",
        "ncurses_start_color ( ) : int"
    ],
    "ncurses_termattrs": [
        "Returns a logical OR of all attribute flags supported by terminal",
        "ncurses_termattrs ( ) : bool"
    ],
    "ncurses_termname": [
        "Returns terminals (short)-name",
        "ncurses_termname ( ) : string"
    ],
    "ncurses_timeout": [
        "Set timeout for special key sequences",
        "ncurses_timeout ( int $millisec ) : void"
    ],
    "ncurses_top_panel": [
        "Moves a visible panel to the top of the stack",
        "ncurses_top_panel ( resource $panel ) : int"
    ],
    "ncurses_typeahead": [
        "Specify different filedescriptor for typeahead checking",
        "ncurses_typeahead ( int $fd ) : int"
    ],
    "ncurses_ungetch": [
        "Put a character back into the input stream",
        "ncurses_ungetch ( int $keycode ) : int"
    ],
    "ncurses_ungetmouse": [
        "Pushes mouse event to queue",
        "ncurses_ungetmouse ( array $mevent ) : bool"
    ],
    "ncurses_update_panels": [
        "Refreshes the virtual screen to reflect the relations between panels in the stack",
        "ncurses_update_panels ( ) : void"
    ],
    "ncurses_use_default_colors": [
        "Assign terminal default colors to color id -1",
        "ncurses_use_default_colors ( ) : bool"
    ],
    "ncurses_use_env": [
        "Control use of environment information about terminal size",
        "ncurses_use_env ( bool $flag ) : void"
    ],
    "ncurses_use_extended_names": [
        "Control use of extended names in terminfo descriptions",
        "ncurses_use_extended_names ( bool $flag ) : int"
    ],
    "ncurses_vidattr": [
        "Display the string on the terminal in the video attribute mode",
        "ncurses_vidattr ( int $intarg ) : int"
    ],
    "ncurses_vline": [
        "Draw a vertical line at current position using an attributed character and max. n characters long",
        "ncurses_vline ( int $charattr , int $n ) : int"
    ],
    "ncurses_waddch": [
        "Adds character at current position in a window and advance cursor",
        "ncurses_waddch ( resource $window , int $ch ) : int"
    ],
    "ncurses_waddstr": [
        "Outputs text at current postion in window",
        "ncurses_waddstr ( resource $window , string $str , int $n = ? ) : int"
    ],
    "ncurses_wattroff": [
        "Turns off attributes for a window",
        "ncurses_wattroff ( resource $window , int $attrs ) : int"
    ],
    "ncurses_wattron": [
        "Turns on attributes for a window",
        "ncurses_wattron ( resource $window , int $attrs ) : int"
    ],
    "ncurses_wattrset": [
        "Set the attributes for a window",
        "ncurses_wattrset ( resource $window , int $attrs ) : int"
    ],
    "ncurses_wborder": [
        "Draws a border around the window using attributed characters",
        "ncurses_wborder ( resource $window , int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner ) : int"
    ],
    "ncurses_wclear": [
        "Clears window",
        "ncurses_wclear ( resource $window ) : int"
    ],
    "ncurses_wcolor_set": [
        "Sets windows color pairings",
        "ncurses_wcolor_set ( resource $window , int $color_pair ) : int"
    ],
    "ncurses_werase": [
        "Erase window contents",
        "ncurses_werase ( resource $window ) : int"
    ],
    "ncurses_wgetch": [
        "Reads a character from keyboard (window)",
        "ncurses_wgetch ( resource $window ) : int"
    ],
    "ncurses_whline": [
        "Draws a horizontal line in a window at current position using an attributed character and max. n characters long",
        "ncurses_whline ( resource $window , int $charattr , int $n ) : int"
    ],
    "ncurses_wmouse_trafo": [
        "Transforms window\/stdscr coordinates",
        "ncurses_wmouse_trafo ( resource $window , int &$y , int &$x , bool $toscreen ) : bool"
    ],
    "ncurses_wmove": [
        "Moves windows output position",
        "ncurses_wmove ( resource $window , int $y , int $x ) : int"
    ],
    "ncurses_wnoutrefresh": [
        "Copies window to virtual screen",
        "ncurses_wnoutrefresh ( resource $window ) : int"
    ],
    "ncurses_wrefresh": [
        "Refresh window on terminal screen",
        "ncurses_wrefresh ( resource $window ) : int"
    ],
    "ncurses_wstandend": [
        "End standout mode for a window",
        "ncurses_wstandend ( resource $window ) : int"
    ],
    "ncurses_wstandout": [
        "Enter standout mode for a window",
        "ncurses_wstandout ( resource $window ) : int"
    ],
    "ncurses_wvline": [
        "Draws a vertical line in a window at current position using an attributed character and max. n characters long",
        "ncurses_wvline ( resource $window , int $charattr , int $n ) : int"
    ],
    "next": [
        "Advance the internal pointer of an array",
        "next ( array|object &$array ) : mixed"
    ],
    "ngettext": [
        "Plural version of gettext",
        "ngettext ( string $singular , string $plural , int $count ) : string"
    ],
    "nl2br": [
        "Inserts HTML line breaks before all newlines in a string",
        "nl2br ( string $string , bool $use_xhtml = true ) : string"
    ],
    "nl_langinfo": [
        "Query language and locale information",
        "nl_langinfo ( int $item ) : string|false"
    ],
    "NoRewindIterator": [
        "This iterator ignores rewind operations. This allows processing an iterator in multiple partial foreach loops.",
        "new NoRewindIterator ( Iterator $iterator )"
    ],
    "Normalizer": [
        "The Unicode Consortium has defined a number of normalization forms reflecting the various needs of applications:"
    ],
    "normalizer_get_raw_decomposition": [
        "Gets the Decomposition_Mapping property for the given UTF-8 encoded code point",
        "normalizer_get_raw_decomposition ( string $input ) : string"
    ],
    "normalizer_is_normalized": [
        "Checks if the provided string is already in the specified normalization\n   form",
        "normalizer_is_normalized ( string $input , int $form = Normalizer::FORM_C ) : bool"
    ],
    "normalizer_normalize": [
        "Normalizes the input provided and returns the normalized string",
        "normalizer_normalize ( string $input , int $form = Normalizer::FORM_C ) : string"
    ],
    "number_format": [
        "Format a number with grouped thousands",
        "number_format ( float $num , int $decimals = 0 , string|null $decimal_separator = \".\" , string|null $thousands_separator = \",\" ) : string"
    ],
    "NumberFormatter": [
        "For currencies you can use currency format type to create a formatter that returns a string with the formatted number and the appropriate currency sign. Of course, the NumberFormatter class is unaware of exchange rates so, the number output is the same regardless of the specified currency. This means that the same number has different monetary values depending on the currency locale. If the number is 9988776.65 the results will be:",
        "new NumberFormatter ( string $locale , int $style , string $pattern = ? )"
    ],
    "numfmt_create": [
        "Create a number formatter",
        "numfmt_create ( string $locale , int $style , string $pattern = ? ) : NumberFormatter"
    ],
    "numfmt_format": [
        "Format a number",
        "numfmt_format ( NumberFormatter $fmt , int|float $value , int $type = ? ) : string"
    ],
    "numfmt_format_currency": [
        "Format a currency value",
        "numfmt_format_currency ( NumberFormatter $fmt , float $value , string $currency ) : string|false"
    ],
    "numfmt_get_attribute": [
        "Get an attribute",
        "numfmt_get_attribute ( NumberFormatter $fmt , int $attr ) : int"
    ],
    "numfmt_get_error_code": [
        "Get formatter's last error code",
        "numfmt_get_error_code ( NumberFormatter $fmt ) : int"
    ],
    "numfmt_get_error_message": [
        "Get formatter's last error message",
        "numfmt_get_error_message ( NumberFormatter $fmt ) : string"
    ],
    "numfmt_get_locale": [
        "Get formatter locale",
        "numfmt_get_locale ( NumberFormatter $fmt , int $type = ? ) : string"
    ],
    "numfmt_get_pattern": [
        "Get formatter pattern",
        "numfmt_get_pattern ( NumberFormatter $fmt ) : string"
    ],
    "numfmt_get_symbol": [
        "Get a symbol value",
        "numfmt_get_symbol ( NumberFormatter $fmt , int $attr ) : string"
    ],
    "numfmt_get_text_attribute": [
        "Get a text attribute",
        "numfmt_get_text_attribute ( NumberFormatter $fmt , int $attr ) : string"
    ],
    "numfmt_parse": [
        "Parse a number",
        "numfmt_parse ( NumberFormatter $fmt , string $value , int $type = ? , int &$position = ? ) : mixed"
    ],
    "numfmt_parse_currency": [
        "Parse a currency number",
        "numfmt_parse_currency ( NumberFormatter $fmt , string $value , string &$currency , int &$position = ? ) : float"
    ],
    "numfmt_set_attribute": [
        "Set an attribute",
        "numfmt_set_attribute ( NumberFormatter $fmt , int $attr , int $value ) : bool"
    ],
    "numfmt_set_pattern": [
        "Set formatter pattern",
        "numfmt_set_pattern ( NumberFormatter $fmt , string $pattern ) : bool"
    ],
    "numfmt_set_symbol": [
        "Set a symbol value",
        "numfmt_set_symbol ( NumberFormatter $fmt , int $attr , string $value ) : bool"
    ],
    "numfmt_set_text_attribute": [
        "Set a text attribute",
        "numfmt_set_text_attribute ( NumberFormatter $fmt , int $attr , string $value ) : bool"
    ],
    "OAuth": [
        "The OAuth extension provides a simple interface to interact with data providers using the OAuth HTTP specification to protect private resources.",
        "new OAuth ( string $consumer_key , string $consumer_secret , string $signature_method = OAUTH_SIG_METHOD_HMACSHA1 , int $auth_type = 0 )"
    ],
    "oauth_get_sbs": [
        "Generate a Signature Base String",
        "oauth_get_sbs ( string $http_method , string $uri , array $request_parameters = ? ) : string"
    ],
    "oauth_urlencode": [
        "Encode a URI to RFC 3986",
        "oauth_urlencode ( string $uri ) : string"
    ],
    "OAuthException": [
        "This exception is thrown when exceptional errors occur while using the OAuth extension and contains useful debugging information."
    ],
    "OAuthProvider": [
        "Manages an OAuth provider class.",
        "new OAuthProvider ( array $params_array = ? )"
    ],
    "ob_clean": [
        "Clean (erase) the output buffer",
        "ob_clean ( ) : bool"
    ],
    "ob_end_clean": [
        "Clean (erase) the output buffer and turn off output buffering",
        "ob_end_clean ( ) : bool"
    ],
    "ob_end_flush": [
        "Flush (send) the output buffer and turn off output buffering",
        "ob_end_flush ( ) : bool"
    ],
    "ob_flush": [
        "Flush (send) the output buffer",
        "ob_flush ( ) : bool"
    ],
    "ob_get_clean": [
        "Get current buffer contents and delete current output buffer",
        "ob_get_clean ( ) : string|false"
    ],
    "ob_get_contents": [
        "Return the contents of the output buffer",
        "ob_get_contents ( ) : string|false"
    ],
    "ob_get_flush": [
        "Flush the output buffer, return it as a string and turn off output buffering",
        "ob_get_flush ( ) : string|false"
    ],
    "ob_get_length": [
        "Return the length of the output buffer",
        "ob_get_length ( ) : int|false"
    ],
    "ob_get_level": [
        "Return the nesting level of the output buffering mechanism",
        "ob_get_level ( ) : int"
    ],
    "ob_get_status": [
        "Get status of output buffers",
        "ob_get_status ( bool $full_status = false ) : array"
    ],
    "ob_gzhandler": [
        "ob_start callback function to gzip output buffer",
        "ob_gzhandler ( string $buffer , int $mode ) : string"
    ],
    "ob_iconv_handler": [
        "Convert character encoding as output buffer handler",
        "ob_iconv_handler ( string $contents , int $status ) : string"
    ],
    "ob_implicit_flush": [
        "Turn implicit flush on\/off",
        "ob_implicit_flush ( bool $flag = true ) : void"
    ],
    "ob_list_handlers": [
        "List all output handlers in use",
        "ob_list_handlers ( ) : array"
    ],
    "ob_start": [
        "Turn on output buffering",
        "ob_start ( callable $callback = null , int $chunk_size = 0 , int $flags = PHP_OUTPUT_HANDLER_STDFLAGS ) : bool"
    ],
    "ob_tidyhandler": [
        "ob_start callback function to repair the buffer",
        "ob_tidyhandler ( string $input , int $mode = ? ) : string"
    ],
    "oci_bind_array_by_name": [
        "Binds a PHP array to an Oracle PL\/SQL array parameter",
        "oci_bind_array_by_name ( resource $statement , string $name , array &$var_array , int $max_table_length , int $max_item_length = -1 , int $type = SQLT_AFC ) : bool"
    ],
    "oci_bind_by_name": [
        "Binds a PHP variable to an Oracle placeholder",
        "oci_bind_by_name ( resource $statement , string $bv_name , mixed &$variable , int $maxlength = -1 , int $type = SQLT_CHR ) : bool"
    ],
    "oci_cancel": [
        "Cancels reading from cursor",
        "oci_cancel ( resource $statement ) : bool"
    ],
    "oci_client_version": [
        "Returns the Oracle client library version",
        "oci_client_version ( ) : string"
    ],
    "oci_close": [
        "Closes an Oracle connection",
        "oci_close ( resource $connection ) : bool"
    ],
    "oci_commit": [
        "Commits the outstanding database transaction",
        "oci_commit ( resource $connection ) : bool"
    ],
    "oci_connect": [
        "Connect to an Oracle database",
        "oci_connect ( string $username , string $password , string $connection_string = ? , string $character_set = ? , int $session_mode = ? ) : resource"
    ],
    "oci_define_by_name": [
        "Associates a PHP variable with a column for query fetches",
        "oci_define_by_name ( resource $statement , string $column_name , mixed &$variable , int $type = SQLT_CHR ) : bool"
    ],
    "oci_error": [
        "Returns the last error found",
        "oci_error ( resource $resource = ? ) : array"
    ],
    "oci_execute": [
        "Executes a statement",
        "oci_execute ( resource $statement , int $mode = OCI_COMMIT_ON_SUCCESS ) : bool"
    ],
    "oci_fetch": [
        "Fetches the next row from a query into internal buffers",
        "oci_fetch ( resource $statement ) : bool"
    ],
    "oci_fetch_all": [
        "Fetches multiple rows from a query into a two-dimensional array",
        "oci_fetch_all ( resource $statement , array &$output , int $skip = 0 , int $maxrows = -1 , int $flags = OCI_FETCHSTATEMENT_BY_COLUMN + OCI_ASSOC ) : int|false"
    ],
    "oci_fetch_array": [
        "Returns the next row from a query as an associative or numeric array",
        "oci_fetch_array ( resource $statement , int $mode = ? ) : array"
    ],
    "oci_fetch_assoc": [
        "Returns the next row from a query as an associative array",
        "oci_fetch_assoc ( resource $statement ) : array"
    ],
    "oci_fetch_object": [
        "Returns the next row from a query as an object",
        "oci_fetch_object ( resource $statement ) : object"
    ],
    "oci_fetch_row": [
        "Returns the next row from a query as a numeric array",
        "oci_fetch_row ( resource $statement ) : array"
    ],
    "oci_field_is_null": [
        "Checks if a field in the currently fetched row is null",
        "oci_field_is_null ( resource $statement , mixed $field ) : bool"
    ],
    "oci_field_name": [
        "Returns the name of a field from the statement",
        "oci_field_name ( resource $statement , mixed $field ) : string"
    ],
    "oci_field_precision": [
        "Tell the precision of a field",
        "oci_field_precision ( resource $statement , mixed $field ) : int"
    ],
    "oci_field_scale": [
        "Tell the scale of the field",
        "oci_field_scale ( resource $statement , mixed $field ) : int"
    ],
    "oci_field_size": [
        "Returns field's size",
        "oci_field_size ( resource $statement , mixed $field ) : int"
    ],
    "oci_field_type": [
        "Returns a field's data type name",
        "oci_field_type ( resource $statement , mixed $field ) : mixed"
    ],
    "oci_field_type_raw": [
        "Tell the raw Oracle data type of the field",
        "oci_field_type_raw ( resource $statement , mixed $field ) : int"
    ],
    "oci_free_descriptor": [
        "Frees a descriptor",
        "oci_free_descriptor ( resource $descriptor ) : bool"
    ],
    "oci_free_statement": [
        "Frees all resources associated with statement or cursor",
        "oci_free_statement ( resource $statement ) : bool"
    ],
    "oci_get_implicit_resultset": [
        "Returns the next child statement resource from a parent statement resource that has Oracle Database Implicit Result Sets",
        "oci_get_implicit_resultset ( resource $statement ) : resource"
    ],
    "oci_internal_debug": [
        "Enables or disables internal debug output",
        "oci_internal_debug ( bool $onoff ) : void"
    ],
    "oci_lob_copy": [
        "Copies large object",
        "oci_lob_copy ( OCILob $lob_to , OCILob $lob_from , int $length = 0 ) : bool"
    ],
    "oci_lob_is_equal": [
        "Compares two LOB\/FILE locators for equality",
        "oci_lob_is_equal ( OCI-Lob $lob1 , OCI-Lob $lob2 ) : bool"
    ],
    "oci_new_collection": [
        "Allocates new collection object",
        "oci_new_collection ( resource $connection , string $tdo , string $schema = null ) : OCICollection"
    ],
    "oci_new_connect": [
        "Connect to the Oracle server using a unique connection",
        "oci_new_connect ( string $username , string $password , string $connection_string = ? , string $character_set = ? , int $session_mode = ? ) : resource"
    ],
    "oci_new_cursor": [
        "Allocates and returns a new cursor (statement handle)",
        "oci_new_cursor ( resource $connection ) : resource"
    ],
    "oci_new_descriptor": [
        "Initializes a new empty LOB or FILE descriptor",
        "oci_new_descriptor ( resource $connection , int $type = OCI_DTYPE_LOB ) : OCI-Lob"
    ],
    "oci_num_fields": [
        "Returns the number of result columns in a statement",
        "oci_num_fields ( resource $statement ) : int"
    ],
    "oci_num_rows": [
        "Returns number of rows affected during statement execution",
        "oci_num_rows ( resource $statement ) : int"
    ],
    "oci_parse": [
        "Prepares an Oracle statement for execution",
        "oci_parse ( resource $connection , string $sql_text ) : resource"
    ],
    "oci_password_change": [
        "Changes password of Oracle's user",
        "oci_password_change ( resource $connection , string $username , string $old_password , string $new_password ) : bool",
        "oci_password_change ( string $dbname , string $username , string $old_password , string $new_password ) : resource"
    ],
    "oci_pconnect": [
        "Connect to an Oracle database using a persistent connection",
        "oci_pconnect ( string $username , string $password , string $connection_string = ? , string $character_set = ? , int $session_mode = ? ) : resource"
    ],
    "oci_register_taf_callback": [
        "Register a user-defined callback function for Oracle Database TAF",
        "oci_register_taf_callback ( resource $connection , mixed $callbackFn = ? ) : bool"
    ],
    "oci_result": [
        "Returns field's value from the fetched row",
        "oci_result ( resource $statement , mixed $field ) : mixed"
    ],
    "oci_rollback": [
        "Rolls back the outstanding database transaction",
        "oci_rollback ( resource $connection ) : bool"
    ],
    "oci_server_version": [
        "Returns the Oracle Database version",
        "oci_server_version ( resource $connection ) : string"
    ],
    "oci_set_action": [
        "Sets the action name",
        "oci_set_action ( resource $connection , string $action_name ) : bool"
    ],
    "oci_set_call_timeout": [
        "Sets a millisecond timeout for database calls",
        "oci_set_call_timeout ( resource $connection , int $time_out ) : bool"
    ],
    "oci_set_client_identifier": [
        "Sets the client identifier",
        "oci_set_client_identifier ( resource $connection , string $client_identifier ) : bool"
    ],
    "oci_set_client_info": [
        "Sets the client information",
        "oci_set_client_info ( resource $connection , string $client_info ) : bool"
    ],
    "oci_set_db_operation": [
        "Sets the database operation",
        "oci_set_db_operation ( resource $connection , string $dbop ) : bool"
    ],
    "oci_set_edition": [
        "Sets the database edition",
        "oci_set_edition ( string $edition ) : bool"
    ],
    "oci_set_module_name": [
        "Sets the module name",
        "oci_set_module_name ( resource $connection , string $module_name ) : bool"
    ],
    "oci_set_prefetch": [
        "Sets number of rows to be prefetched by queries",
        "oci_set_prefetch ( resource $statement , int $rows ) : bool"
    ],
    "oci_statement_type": [
        "Returns the type of a statement",
        "oci_statement_type ( resource $statement ) : string"
    ],
    "oci_unregister_taf_callback": [
        "Unregister a user-defined callback function for Oracle Database TAF",
        "oci_unregister_taf_callback ( resource $connection ) : bool"
    ],
    "OCICollection": [
        "OCI8 Collection functionality."
    ],
    "OCILob": [
        "OCI8 LOB functionality for large binary (BLOB) and character (CLOB) objects."
    ],
    "octdec": [
        "Octal to decimal",
        "octdec ( string $octal_string ) : int|float"
    ],
    "odbc_autocommit": [
        "Toggle autocommit behaviour",
        "odbc_autocommit ( resource $odbc , bool $enable = false ) : int|bool"
    ],
    "odbc_binmode": [
        "Handling of binary column data",
        "odbc_binmode ( resource $statement , int $mode ) : bool"
    ],
    "odbc_close": [
        "Close an ODBC connection",
        "odbc_close ( resource $odbc ) : void"
    ],
    "odbc_close_all": [
        "Close all ODBC connections",
        "odbc_close_all ( ) : void"
    ],
    "odbc_columnprivileges": [
        "Lists columns and associated privileges for the given table",
        "odbc_columnprivileges ( resource $odbc , string|null $catalog , string $schema , string $table , string $column ) : resource|false"
    ],
    "odbc_columns": [
        "Lists the column names in specified tables",
        "odbc_columns ( resource $odbc , string|null $catalog = null , string|null $schema = null , string|null $table = null , string|null $column = null ) : resource|false"
    ],
    "odbc_commit": [
        "Commit an ODBC transaction",
        "odbc_commit ( resource $odbc ) : bool"
    ],
    "odbc_connect": [
        "Connect to a datasource",
        "odbc_connect ( string $dsn , string $user , string $password , int $cursor_option = SQL_CUR_USE_DRIVER ) : resource|false"
    ],
    "odbc_cursor": [
        "Get cursorname",
        "odbc_cursor ( resource $statement ) : string|false"
    ],
    "odbc_data_source": [
        "Returns information about available DSNs",
        "odbc_data_source ( resource $odbc , int $fetch_type ) : array|false"
    ],
    "odbc_error": [
        "Get the last error code",
        "odbc_error ( resource|null $odbc = null ) : string"
    ],
    "odbc_errormsg": [
        "Get the last error message",
        "odbc_errormsg ( resource|null $odbc = null ) : string"
    ],
    "odbc_exec": [
        "Directly execute an SQL statement",
        "odbc_exec ( resource $odbc , string $query ) : resource|false"
    ],
    "odbc_execute": [
        "Execute a prepared statement",
        "odbc_execute ( resource $statement , array $params = [] ) : bool"
    ],
    "odbc_fetch_array": [
        "Fetch a result row as an associative array",
        "odbc_fetch_array ( resource $statement , int $row = -1 ) : array|false"
    ],
    "odbc_fetch_into": [
        "Fetch one result row into array",
        "odbc_fetch_into ( resource $statement , array &$array , int $row = 0 ) : int|false"
    ],
    "odbc_fetch_object": [
        "Fetch a result row as an object",
        "odbc_fetch_object ( resource $statement , int $row = -1 ) : stdClass|false"
    ],
    "odbc_fetch_row": [
        "Fetch a row",
        "odbc_fetch_row ( resource $statement , int|null $row = null ) : bool"
    ],
    "odbc_field_len": [
        "Get the length (precision) of a field",
        "odbc_field_len ( resource $statement , int $field ) : int|false"
    ],
    "odbc_field_name": [
        "Get the columnname",
        "odbc_field_name ( resource $statement , int $field ) : string|false"
    ],
    "odbc_field_num": [
        "Return column number",
        "odbc_field_num ( resource $statement , string $field ) : int|false"
    ],
    "odbc_field_scale": [
        "Get the scale of a field",
        "odbc_field_scale ( resource $statement , int $field ) : int|false"
    ],
    "odbc_field_type": [
        "Datatype of a field",
        "odbc_field_type ( resource $statement , int $field ) : string|false"
    ],
    "odbc_foreignkeys": [
        "Retrieves a list of foreign keys",
        "odbc_foreignkeys ( resource $odbc , string|null $pk_catalog , string $pk_schema , string $pk_table , string $fk_catalog , string $fk_schema , string $fk_table ) : resource|false"
    ],
    "odbc_free_result": [
        "Free resources associated with a result",
        "odbc_free_result ( resource $statement ) : bool"
    ],
    "odbc_gettypeinfo": [
        "Retrieves information about data types supported by the data source",
        "odbc_gettypeinfo ( resource $odbc , int $data_type = 0 ) : resource|false"
    ],
    "odbc_longreadlen": [
        "Handling of LONG columns",
        "odbc_longreadlen ( resource $statement , int $length ) : bool"
    ],
    "odbc_next_result": [
        "Checks if multiple results are available",
        "odbc_next_result ( resource $statement ) : bool"
    ],
    "odbc_num_fields": [
        "Number of columns in a result",
        "odbc_num_fields ( resource $statement ) : int"
    ],
    "odbc_num_rows": [
        "Number of rows in a result",
        "odbc_num_rows ( resource $statement ) : int"
    ],
    "odbc_pconnect": [
        "Open a persistent database connection",
        "odbc_pconnect ( string $dsn , string $user , string $password , int $cursor_option = SQL_CUR_USE_DRIVER ) : resource|false"
    ],
    "odbc_prepare": [
        "Prepares a statement for execution",
        "odbc_prepare ( resource $odbc , string $query ) : resource|false"
    ],
    "odbc_primarykeys": [
        "Gets the primary keys for a table",
        "odbc_primarykeys ( resource $odbc , string|null $catalog , string $schema , string $table ) : resource|false"
    ],
    "odbc_procedurecolumns": [
        "Retrieve information about parameters to procedures",
        "odbc_procedurecolumns ( resource $odbc , string|null $catalog = null , string|null $schema = null , string|null $procedure = null , string|null $column = null ) : resource|false"
    ],
    "odbc_procedures": [
        "Get the list of procedures stored in a specific data source",
        "odbc_procedures ( resource $odbc , string|null $catalog = null , string|null $schema = null , string|null $procedure = null ) : resource|false"
    ],
    "odbc_result": [
        "Get result data",
        "odbc_result ( resource $statement , string|int $field ) : string|bool|null"
    ],
    "odbc_result_all": [
        "Print result as HTML table",
        "odbc_result_all ( resource $statement , string $format = \"\" ) : int|false"
    ],
    "odbc_rollback": [
        "Rollback a transaction",
        "odbc_rollback ( resource $odbc ) : bool"
    ],
    "odbc_setoption": [
        "Adjust ODBC settings",
        "odbc_setoption ( resource $odbc , int $which , int $option , int $value ) : bool"
    ],
    "odbc_specialcolumns": [
        "Retrieves special columns",
        "odbc_specialcolumns ( resource $odbc , int $type , string|null $catalog , string $schema , string $table , int $scope , int $nullable ) : resource|false"
    ],
    "odbc_statistics": [
        "Retrieve statistics about a table",
        "odbc_statistics ( resource $odbc , string|null $catalog , string $schema , string $table , int $unique , int $accuracy ) : resource|false"
    ],
    "odbc_tableprivileges": [
        "Lists tables and the privileges associated with each table",
        "odbc_tableprivileges ( resource $odbc , string|null $catalog , string $schema , string $table ) : resource|false"
    ],
    "odbc_tables": [
        "Get the list of table names stored in a specific data source",
        "odbc_tables ( resource $odbc , string|null $catalog = null , string|null $schema = null , string|null $table = null , string|null $types = null ) : resource|false"
    ],
    "opcache_compile_file": [
        "Compiles and caches a PHP script without executing it",
        "opcache_compile_file ( string $filename ) : bool"
    ],
    "opcache_get_configuration": [
        "Get configuration information about the cache",
        "opcache_get_configuration ( ) : array|false"
    ],
    "opcache_get_status": [
        "Get status information about the cache",
        "opcache_get_status ( bool $include_scripts = true ) : array|false"
    ],
    "opcache_invalidate": [
        "Invalidates a cached script",
        "opcache_invalidate ( string $filename , bool $force = false ) : bool"
    ],
    "opcache_is_script_cached": [
        "Tells whether a script is cached in OPCache",
        "opcache_is_script_cached ( string $filename ) : bool"
    ],
    "opcache_reset": [
        "Resets the contents of the opcode cache",
        "opcache_reset ( ) : bool"
    ],
    "openal_buffer_create": [
        "Generate OpenAL buffer",
        "openal_buffer_create ( ) : resource"
    ],
    "openal_buffer_data": [
        "Load a buffer with data",
        "openal_buffer_data ( resource $buffer , int $format , string $data , int $freq ) : bool"
    ],
    "openal_buffer_destroy": [
        "Destroys an OpenAL buffer",
        "openal_buffer_destroy ( resource $buffer ) : bool"
    ],
    "openal_buffer_get": [
        "Retrieve an OpenAL buffer property",
        "openal_buffer_get ( resource $buffer , int $property ) : int|false"
    ],
    "openal_buffer_loadwav": [
        "Load a .wav file into a buffer",
        "openal_buffer_loadwav ( resource $buffer , string $wavfile ) : bool"
    ],
    "openal_context_create": [
        "Create an audio processing context",
        "openal_context_create ( resource $device ) : resource"
    ],
    "openal_context_current": [
        "Make the specified context current",
        "openal_context_current ( resource $context ) : bool"
    ],
    "openal_context_destroy": [
        "Destroys a context",
        "openal_context_destroy ( resource $context ) : bool"
    ],
    "openal_context_process": [
        "Process the specified context",
        "openal_context_process ( resource $context ) : bool"
    ],
    "openal_context_suspend": [
        "Suspend the specified context",
        "openal_context_suspend ( resource $context ) : bool"
    ],
    "openal_device_close": [
        "Close an OpenAL device",
        "openal_device_close ( resource $device ) : bool"
    ],
    "openal_device_open": [
        "Initialize the OpenAL audio layer",
        "openal_device_open ( string $device_desc = ? ) : resource"
    ],
    "openal_listener_get": [
        "Retrieve a listener property",
        "openal_listener_get ( int $property ) : mixed"
    ],
    "openal_listener_set": [
        "Set a listener property",
        "openal_listener_set ( int $property , mixed $setting ) : bool"
    ],
    "openal_source_create": [
        "Generate a source resource",
        "openal_source_create ( ) : resource"
    ],
    "openal_source_destroy": [
        "Destroy a source resource",
        "openal_source_destroy ( resource $source ) : bool"
    ],
    "openal_source_get": [
        "Retrieve an OpenAL source property",
        "openal_source_get ( resource $source , int $property ) : mixed"
    ],
    "openal_source_pause": [
        "Pause the source",
        "openal_source_pause ( resource $source ) : bool"
    ],
    "openal_source_play": [
        "Start playing the source",
        "openal_source_play ( resource $source ) : bool"
    ],
    "openal_source_rewind": [
        "Rewind the source",
        "openal_source_rewind ( resource $source ) : bool"
    ],
    "openal_source_set": [
        "Set source property",
        "openal_source_set ( resource $source , int $property , mixed $setting ) : bool"
    ],
    "openal_source_stop": [
        "Stop playing the source",
        "openal_source_stop ( resource $source ) : bool"
    ],
    "openal_stream": [
        "Begin streaming on a source",
        "openal_stream ( resource $source , int $format , int $rate ) : resource|false"
    ],
    "opendir": [
        "Open directory handle",
        "opendir ( string $path , resource $context = ? ) : resource|false"
    ],
    "openlog": [
        "Open connection to system logger",
        "openlog ( string $prefix , int $flags , int $facility ) : bool"
    ],
    "openssl_cipher_iv_length": [
        "Gets the cipher iv length",
        "openssl_cipher_iv_length ( string $cipher_algo ) : int|false"
    ],
    "openssl_cms_decrypt": [
        "Decrypt a CMS message",
        "openssl_cms_decrypt ( string $input_filename , string $output_filename , OpenSSLCertificate|string $certificate , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string|null $private_key = null , int $encoding = OPENSSL_ENCODING_SMIME ) : bool"
    ],
    "openssl_cms_encrypt": [
        "Encrypt a CMS message",
        "openssl_cms_encrypt ( string $input_filename , string $output_filename , OpenSSLCertificate|array|string $certificate , array|null $headers , int $flags = 0 , int $encoding = OPENSSL_ENCODING_SMIME , int $cipher_algo = OPENSSL_CIPHER_RC2_40 ) : bool"
    ],
    "openssl_cms_read": [
        "Export the CMS file to an array of PEM certificates",
        "openssl_cms_read ( string $input_filename , array &$certificates ) : bool"
    ],
    "openssl_cms_sign": [
        "Sign a file",
        "openssl_cms_sign ( string $input_filename , string $output_filename , OpenSSLCertificate|string $certificate , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , array|null $headers , int $flags = 0 , int $encoding = OPENSSL_ENCODING_SMIME , string|null $untrusted_certificates_filename = null ) : bool"
    ],
    "openssl_cms_verify": [
        "Verify a CMS signature",
        "openssl_cms_verify ( string $input_filename , int $flags = 0 , string|null $certificates = null , array $ca_info = [] , string|null $untrusted_certificates_filename = null , string|null $content = null , string|null $pk7 = null , string|null $sigfile = null , int $encoding = OPENSSL_ENCODING_SMIME ) : bool"
    ],
    "openssl_csr_export": [
        "Exports a CSR as a string",
        "openssl_csr_export ( OpenSSLCertificateSigningRequest|string $csr , OpenSSLAsymmetricKey &$output , bool $no_text = true ) : bool"
    ],
    "openssl_csr_export_to_file": [
        "Exports a CSR to a file",
        "openssl_csr_export_to_file ( OpenSSLCertificateSigningRequest|string $csr , string $output_filename , bool $no_text = true ) : bool"
    ],
    "openssl_csr_get_public_key": [
        "Returns the public key of a CSR",
        "openssl_csr_get_public_key ( OpenSSLCertificateSigningRequest|string $csr , bool $short_names = true ) : OpenSSLAsymmetricKey|false"
    ],
    "openssl_csr_get_subject": [
        "Returns the subject of a CSR",
        "openssl_csr_get_subject ( OpenSSLCertificateSigningRequest|string $csr , bool $short_names = true ) : array|false"
    ],
    "openssl_csr_new": [
        "Generates a CSR",
        "openssl_csr_new ( array $distinguished_names , OpenSSLAsymmetricKey &$private_key , array|null $options = null , array|null $extra_attributes = null ) : OpenSSLCertificateSigningRequest|false"
    ],
    "openssl_csr_sign": [
        "Sign a CSR with another certificate (or itself) and generate a certificate",
        "openssl_csr_sign ( OpenSSLCertificateSigningRequest|string $csr , OpenSSLCertificate|string|null $ca_certificate , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , int $days , array|null $options = null , int $serial = 0 ) : OpenSSLCertificate|false"
    ],
    "openssl_decrypt": [
        "Decrypts data",
        "openssl_decrypt ( string $data , string $cipher_algo , string $passphrase , int $options = 0 , string $iv = \"\" , string $tag = \"\" , string $aad = \"\" ) : string|false"
    ],
    "openssl_dh_compute_key": [
        "Computes shared secret for public value of remote DH public key and local DH key",
        "openssl_dh_compute_key ( string $public_key , OpenSSLAsymmetricKey $private_key ) : string|false"
    ],
    "openssl_digest": [
        "Computes a digest",
        "openssl_digest ( string $data , string $digest_algo , bool $binary = false ) : string|false"
    ],
    "openssl_encrypt": [
        "Encrypts data",
        "openssl_encrypt ( string $data , string $cipher_algo , string $passphrase , int $options = 0 , string $iv = \"\" , string &$tag = null , string $aad = \"\" , int $tag_length = 16 ) : string|false"
    ],
    "openssl_error_string": [
        "Return openSSL error message",
        "openssl_error_string ( ) : string|false"
    ],
    "openssl_free_key": [
        "Free key resource",
        "openssl_free_key ( OpenSSLAsymmetricKey $key ) : void"
    ],
    "openssl_get_cert_locations": [
        "Retrieve the available certificate locations",
        "openssl_get_cert_locations ( ) : array"
    ],
    "openssl_get_cipher_methods": [
        "Gets available cipher methods",
        "openssl_get_cipher_methods ( bool $aliases = false ) : array"
    ],
    "openssl_get_curve_names": [
        "Gets list of available curve names for ECC",
        "openssl_get_curve_names ( ) : array|false"
    ],
    "openssl_get_md_methods": [
        "Gets available digest methods",
        "openssl_get_md_methods ( bool $aliases = false ) : array"
    ],
    "openssl_open": [
        "Open sealed data",
        "openssl_open ( string $data , string &$output , string $encrypted_key , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , string $cipher_algo , string|null $iv = null ) : bool"
    ],
    "openssl_pbkdf2": [
        "Generates a PKCS5 v2 PBKDF2 string",
        "openssl_pbkdf2 ( string $password , string $salt , int $key_length , int $iterations , string $digest_algo = \"sha1\" ) : string|false"
    ],
    "openssl_pkcs12_export": [
        "Exports a PKCS#12 Compatible Certificate Store File to variable",
        "openssl_pkcs12_export ( OpenSSLCertificate|string $certificate , string &$output , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , string $passphrase , array $options = [] ) : bool"
    ],
    "openssl_pkcs12_export_to_file": [
        "Exports a PKCS#12 Compatible Certificate Store File",
        "openssl_pkcs12_export_to_file ( OpenSSLCertificate|string $certificate , string $output_filename , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , string $passphrase , array $options = [] ) : bool"
    ],
    "openssl_pkcs12_read": [
        "Parse a PKCS#12 Certificate Store into an array",
        "openssl_pkcs12_read ( string $pkcs12 , array &$certificates , string $passphrase ) : bool"
    ],
    "openssl_pkcs7_decrypt": [
        "Decrypts an S\/MIME encrypted message",
        "openssl_pkcs7_decrypt ( string $input_filename , string $output_filename , OpenSSLCertificate|string $certificate , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string|null $private_key = null ) : bool"
    ],
    "openssl_pkcs7_encrypt": [
        "Encrypt an S\/MIME message",
        "openssl_pkcs7_encrypt ( string $input_filename , string $output_filename , OpenSSLCertificate|array|string $certificate , array|null $headers , int $flags = 0 , int $cipher_algo = OPENSSL_CIPHER_RC2_40 ) : bool"
    ],
    "openssl_pkcs7_read": [
        "Export the PKCS7 file to an array of PEM certificates",
        "openssl_pkcs7_read ( string $input_filename , array &$certificates ) : bool"
    ],
    "openssl_pkcs7_sign": [
        "Sign an S\/MIME message",
        "openssl_pkcs7_sign ( string $input_filename , string $output_filename , OpenSSLCertificate|string $certificate , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , array|null $headers , int $flags = PKCS7_DETACHED , string|null $untrusted_certificates_filename = null ) : bool"
    ],
    "openssl_pkcs7_verify": [
        "Verifies the signature of an S\/MIME signed message",
        "openssl_pkcs7_verify ( string $input_filename , int $flags , string|null $signers_certificates_filename = null , array $ca_info = [] , string|null $untrusted_certificates_filename = null , string|null $content = null , string|null $output_filename = null ) : bool|int"
    ],
    "openssl_pkey_derive": [
        "Computes shared secret for public value of remote and local DH or ECDH key",
        "openssl_pkey_derive ( OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , int $key_length = 0 ) : string|false"
    ],
    "openssl_pkey_export": [
        "Gets an exportable representation of a key into a string",
        "openssl_pkey_export ( OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $key , string &$output , string|null $passphrase = null , array|null $options = null ) : bool"
    ],
    "openssl_pkey_export_to_file": [
        "Gets an exportable representation of a key into a file",
        "openssl_pkey_export_to_file ( OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $key , string $output_filename , string|null $passphrase = null , array|null $options = null ) : bool"
    ],
    "openssl_pkey_free": [
        "Frees a private key",
        "openssl_pkey_free ( OpenSSLAsymmetricKey $key ) : void"
    ],
    "openssl_pkey_get_details": [
        "Returns an array with the key details",
        "openssl_pkey_get_details ( OpenSSLAsymmetricKey $key ) : array|false"
    ],
    "openssl_pkey_get_private": [
        "Get a private key",
        "openssl_pkey_get_private ( OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , string|null $passphrase = null ) : OpenSSLAsymmetricKey|false"
    ],
    "openssl_pkey_get_public": [
        "Extract public key from certificate and prepare it for use",
        "openssl_pkey_get_public ( OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key ) : OpenSSLAsymmetricKey|false"
    ],
    "openssl_pkey_new": [
        "Generates a new private key",
        "openssl_pkey_new ( array|null $options = null ) : OpenSSLAsymmetricKey|false"
    ],
    "openssl_private_decrypt": [
        "Decrypts data with private key",
        "openssl_private_decrypt ( string $data , string &$decrypted_data , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , int $padding = OPENSSL_PKCS1_PADDING ) : bool"
    ],
    "openssl_private_encrypt": [
        "Encrypts data with private key",
        "openssl_private_encrypt ( string $data , string &$encrypted_data , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , int $padding = OPENSSL_PKCS1_PADDING ) : bool"
    ],
    "openssl_public_decrypt": [
        "Decrypts data with public key",
        "openssl_public_decrypt ( string $data , string &$decrypted_data , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key , int $padding = OPENSSL_PKCS1_PADDING ) : bool"
    ],
    "openssl_public_encrypt": [
        "Encrypts data with public key",
        "openssl_public_encrypt ( string $data , string &$encrypted_data , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key , int $padding = OPENSSL_PKCS1_PADDING ) : bool"
    ],
    "openssl_random_pseudo_bytes": [
        "Generate a pseudo-random string of bytes",
        "openssl_random_pseudo_bytes ( int $length , bool &$strong_result = null ) : string"
    ],
    "openssl_seal": [
        "Seal (encrypt) data",
        "openssl_seal ( string $data , string &$sealed_data , array &$encrypted_keys , array $public_key , string $cipher_algo , string &$iv = null ) : int|false"
    ],
    "openssl_sign": [
        "Generate signature",
        "openssl_sign ( string $data , string &$signature , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key , string|int $algorithm = OPENSSL_ALGO_SHA1 ) : bool"
    ],
    "openssl_spki_export": [
        "Exports a valid PEM formatted public key signed public key and challenge",
        "openssl_spki_export ( string $spki ) : string|false"
    ],
    "openssl_spki_export_challenge": [
        "Exports the challenge associated with a signed public key and challenge",
        "openssl_spki_export_challenge ( string $spki ) : string|false"
    ],
    "openssl_spki_new": [
        "Generate a new signed public key and challenge",
        "openssl_spki_new ( OpenSSLAsymmetricKey $private_key , string $challenge , int $digest_algo = OPENSSL_ALGO_MD5 ) : string|false"
    ],
    "openssl_spki_verify": [
        "Verifies a signed public key and challenge",
        "openssl_spki_verify ( string $spki ) : bool"
    ],
    "openssl_verify": [
        "Verify signature",
        "openssl_verify ( string $data , string $signature , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key , string|int $algorithm = OPENSSL_ALGO_SHA1 ) : int|false"
    ],
    "openssl_x509_check_private_key": [
        "Checks if a private key corresponds to a certificate",
        "openssl_x509_check_private_key ( OpenSSLCertificate|string $certificate , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key ) : bool"
    ],
    "openssl_x509_checkpurpose": [
        "Verifies if a certificate can be used for a particular purpose",
        "openssl_x509_checkpurpose ( OpenSSLCertificate|string $certificate , int $purpose , array $ca_info = [] , string|null $untrusted_certificates_file = null ) : bool|int"
    ],
    "openssl_x509_export": [
        "Exports a certificate as a string",
        "openssl_x509_export ( OpenSSLCertificate|string $certificate , string &$output , bool $no_text = true ) : bool"
    ],
    "openssl_x509_export_to_file": [
        "Exports a certificate to file",
        "openssl_x509_export_to_file ( OpenSSLCertificate|string $certificate , string $output_filename , bool $no_text = true ) : bool"
    ],
    "openssl_x509_fingerprint": [
        "Calculates the fingerprint, or digest, of a given X.509 certificate",
        "openssl_x509_fingerprint ( OpenSSLCertificate|string $certificate , string $digest_algo = \"sha1\" , bool $binary = false ) : string|false"
    ],
    "openssl_x509_free": [
        "Free certificate resource",
        "openssl_x509_free ( OpenSSLCertificate $certificate ) : void"
    ],
    "openssl_x509_parse": [
        "Parse an X509 certificate and return the information as an array",
        "openssl_x509_parse ( OpenSSLCertificate|string $certificate , bool $short_names = true ) : array|false"
    ],
    "openssl_x509_read": [
        "Parse an X.509 certificate and return an object for\n  it",
        "openssl_x509_read ( OpenSSLCertificate|string $certificate ) : OpenSSLCertificate|false"
    ],
    "openssl_x509_verify": [
        "Verifies digital signature of x509 certificate against a public key",
        "openssl_x509_verify ( OpenSSLCertificate|string $certificate , OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key ) : int"
    ],
    "OpenSSLAsymmetricKey": [
        "A fully opaque class which replaces OpenSSL key resources as of PHP 8.0.0."
    ],
    "OpenSSLCertificate": [
        "A fully opaque class which replaces OpenSSL X.509 resources as of PHP 8.0.0."
    ],
    "OpenSSLCertificateSigningRequest": [
        "A fully opaque class which replaces OpenSSL X.509 CSR resources as of PHP 8.0.0."
    ],
    "ord": [
        "Convert the first byte of a string to a value between 0 and 255",
        "ord ( string $character ) : int"
    ],
    "OuterIterator": [
        "Classes implementing OuterIterator can be used to iterate over iterators."
    ],
    "OutOfBoundsException": [
        "Exception thrown if a value is not a valid key. This represents errors that cannot be detected at compile time."
    ],
    "OutOfRangeException": [
        "Exception thrown when an illegal index was requested. This represents errors that should be detected at compile time."
    ],
    "output_add_rewrite_var": [
        "Add URL rewriter values",
        "output_add_rewrite_var ( string $name , string $value ) : bool"
    ],
    "output_reset_rewrite_vars": [
        "Reset URL rewriter values",
        "output_reset_rewrite_vars ( ) : bool"
    ],
    "OverflowException": [
        "Exception thrown when adding an element to a full container."
    ],
    "pack": [
        "Pack data into binary string",
        "pack ( string $format , mixed ...$values ) : string"
    ],
    "ParentIterator": [
        "This extended FilterIterator allows a recursive iteration using RecursiveIteratorIterator that only shows those elements which have children.",
        "new ParentIterator ( RecursiveIterator $iterator )"
    ],
    "parse_ini_file": [
        "Parse a configuration file",
        "parse_ini_file ( string $filename , bool $process_sections = false , int $scanner_mode = INI_SCANNER_NORMAL ) : array|false"
    ],
    "parse_ini_string": [
        "Parse a configuration string",
        "parse_ini_string ( string $ini_string , bool $process_sections = false , int $scanner_mode = INI_SCANNER_NORMAL ) : array|false"
    ],
    "parse_str": [
        "Parses the string into variables",
        "parse_str ( string $string , array &$result ) : void"
    ],
    "parse_url": [
        "Parse a URL and return its components",
        "parse_url ( string $url , int $component = -1 ) : mixed"
    ],
    "ParseError": [
        "ParseError is thrown when an error occurs while parsing PHP code, such as when eval() is called."
    ],
    "passthru": [
        "Execute an external program and display raw output",
        "passthru ( string $command , int &$return_var = ? ) : void"
    ],
    "password_algos": [
        "Get available password hashing algorithm IDs",
        "password_algos ( ) : array"
    ],
    "password_get_info": [
        "Returns information about the given hash",
        "password_get_info ( string $hash ) : array"
    ],
    "password_hash": [
        "Creates a password hash",
        "password_hash ( string $password , mixed $algo , array $options = ? ) : string|false"
    ],
    "password_needs_rehash": [
        "Checks if the given hash matches the given options",
        "password_needs_rehash ( string $hash , mixed $algo , array $options = ? ) : bool"
    ],
    "password_verify": [
        "Verifies that a password matches a hash",
        "password_verify ( string $password , string $hash ) : bool"
    ],
    "pathinfo": [
        "Returns information about a file path",
        "pathinfo ( string $path , int $flags = PATHINFO_ALL ) : array|string"
    ],
    "pclose": [
        "Closes process file pointer",
        "pclose ( resource $handle ) : int"
    ],
    "pcntl_alarm": [
        "Set an alarm clock for delivery of a signal",
        "pcntl_alarm ( int $seconds ) : int"
    ],
    "pcntl_async_signals": [
        "Enable\/disable asynchronous signal handling or return the old setting",
        "pcntl_async_signals ( bool $on = null ) : bool"
    ],
    "pcntl_exec": [
        "Executes specified program in current process space",
        "pcntl_exec ( string $path , array $args = ? , array $envs = ? ) : void"
    ],
    "pcntl_fork": [
        "Forks the currently running process",
        "pcntl_fork ( ) : int"
    ],
    "pcntl_get_last_error": [
        "Retrieve the error number set by the last pcntl function which failed",
        "pcntl_get_last_error ( ) : int"
    ],
    "pcntl_getpriority": [
        "Get the priority of any process",
        "pcntl_getpriority ( int $pid = getmypid() , int $process_identifier = PRIO_PROCESS ) : int"
    ],
    "pcntl_setpriority": [
        "Change the priority of any process",
        "pcntl_setpriority ( int $priority , int $pid = getmypid() , int $process_identifier = PRIO_PROCESS ) : bool"
    ],
    "pcntl_signal": [
        "Installs a signal handler",
        "pcntl_signal ( int $signo , callable|int $handler , bool $restart_syscalls = true ) : bool"
    ],
    "pcntl_signal_dispatch": [
        "Calls signal handlers for pending signals",
        "pcntl_signal_dispatch ( ) : bool"
    ],
    "pcntl_signal_get_handler": [
        "Get the current handler for specified signal",
        "pcntl_signal_get_handler ( int $signo ) : mixed"
    ],
    "pcntl_sigprocmask": [
        "Sets and retrieves blocked signals",
        "pcntl_sigprocmask ( int $how , array $set , array &$oldset = ? ) : bool"
    ],
    "pcntl_sigtimedwait": [
        "Waits for signals, with a timeout",
        "pcntl_sigtimedwait ( array $set , array &$siginfo = ? , int $seconds = 0 , int $nanoseconds = 0 ) : int"
    ],
    "pcntl_sigwaitinfo": [
        "Waits for signals",
        "pcntl_sigwaitinfo ( array $set , array &$siginfo = ? ) : int"
    ],
    "pcntl_strerror": [
        "Retrieve the system error message associated with the given errno",
        "pcntl_strerror ( int $errno ) : string|false"
    ],
    "pcntl_wait": [
        "Waits on or returns the status of a forked child",
        "pcntl_wait ( int &$status , int $options = 0 , array &$rusage = ? ) : int"
    ],
    "pcntl_waitpid": [
        "Waits on or returns the status of a forked child",
        "pcntl_waitpid ( int $pid , int &$status , int $options = 0 , array &$rusage = ? ) : int"
    ],
    "pcntl_wexitstatus": [
        "Returns the return code of a terminated child",
        "pcntl_wexitstatus ( int $status ) : int"
    ],
    "pcntl_wifexited": [
        "Checks if status code represents a normal exit",
        "pcntl_wifexited ( int $status ) : bool"
    ],
    "pcntl_wifsignaled": [
        "Checks whether the status code represents a termination due to a signal",
        "pcntl_wifsignaled ( int $status ) : bool"
    ],
    "pcntl_wifstopped": [
        "Checks whether the child process is currently stopped",
        "pcntl_wifstopped ( int $status ) : bool"
    ],
    "pcntl_wstopsig": [
        "Returns the signal which caused the child to stop",
        "pcntl_wstopsig ( int $status ) : int"
    ],
    "pcntl_wtermsig": [
        "Returns the signal which caused the child to terminate",
        "pcntl_wtermsig ( int $status ) : int"
    ],
    "PDO": [
        "Represents a connection between PHP and a database server.",
        "new PDO ( string $dsn , string $username = ? , string $passwd = ? , array $options = ? )"
    ],
    "pdo_drivers": [
        "Return an array of available PDO drivers",
        "pdo_drivers ( ) : array"
    ],
    "PDOException": [
        "Represents an error raised by PDO. You should not throw a PDOException from your own code. See Exceptions for more information about Exceptions in PHP."
    ],
    "PDOStatement": [
        "Represents a prepared statement and, after the statement is executed, an associated result set."
    ],
    "pfsockopen": [
        "Open persistent Internet or Unix domain socket connection",
        "pfsockopen ( string $hostname , int $port = -1 , int &$errno = ? , string &$errstr = ? , float $timeout = ini_get(\"default_socket_timeout\") ) : resource"
    ],
    "pg_affected_rows": [
        "Returns number of affected records (tuples)",
        "pg_affected_rows ( resource $result ) : int"
    ],
    "pg_cancel_query": [
        "Cancel an asynchronous query",
        "pg_cancel_query ( resource $connection ) : bool"
    ],
    "pg_client_encoding": [
        "Gets the client encoding",
        "pg_client_encoding ( resource $connection = ? ) : string"
    ],
    "pg_close": [
        "Closes a PostgreSQL connection",
        "pg_close ( resource $connection = ? ) : bool"
    ],
    "pg_connect": [
        "Open a PostgreSQL connection",
        "pg_connect ( string $connection_string , int $connect_type = ? ) : resource"
    ],
    "pg_connect_poll": [
        "Poll the status of an in-progress asynchronous PostgreSQL connection\n   attempt",
        "pg_connect_poll ( resource $connection ) : int"
    ],
    "pg_connection_busy": [
        "Get connection is busy or not",
        "pg_connection_busy ( resource $connection ) : bool"
    ],
    "pg_connection_reset": [
        "Reset connection (reconnect)",
        "pg_connection_reset ( resource $connection ) : bool"
    ],
    "pg_connection_status": [
        "Get connection status",
        "pg_connection_status ( resource $connection ) : int"
    ],
    "pg_consume_input": [
        "Reads input on the connection",
        "pg_consume_input ( resource $connection ) : bool"
    ],
    "pg_convert": [
        "Convert associative array values into forms suitable for SQL statements",
        "pg_convert ( resource $connection , string $table_name , array $assoc_array , int $options = 0 ) : array"
    ],
    "pg_copy_from": [
        "Insert records into a table from an array",
        "pg_copy_from ( resource $connection , string $table_name , array $rows , string $delimiter = ? , string $null_as = ? ) : bool"
    ],
    "pg_copy_to": [
        "Copy a table to an array",
        "pg_copy_to ( resource $connection , string $table_name , string $delimiter = ? , string $null_as = ? ) : array"
    ],
    "pg_dbname": [
        "Get the database name",
        "pg_dbname ( resource $connection = ? ) : string"
    ],
    "pg_delete": [
        "Deletes records",
        "pg_delete ( resource $connection , string $table_name , array $assoc_array , int $options = PGSQL_DML_EXEC ) : mixed"
    ],
    "pg_end_copy": [
        "Sync with PostgreSQL backend",
        "pg_end_copy ( resource $connection = ? ) : bool"
    ],
    "pg_escape_bytea": [
        "Escape a string for insertion into a bytea field",
        "pg_escape_bytea ( resource $connection = ? , string $data ) : string"
    ],
    "pg_escape_identifier": [
        "Escape a identifier for insertion into a text field",
        "pg_escape_identifier ( resource $connection = ? , string $data ) : string"
    ],
    "pg_escape_literal": [
        "Escape a literal for insertion into a text field",
        "pg_escape_literal ( resource $connection = ? , string $data ) : string"
    ],
    "pg_escape_string": [
        "Escape a string for query",
        "pg_escape_string ( resource $connection = ? , string $data ) : string"
    ],
    "pg_execute": [
        "Sends a request to execute a prepared statement with given parameters, and waits for the result",
        "pg_execute ( resource $connection = ? , string $stmtname , array $params ) : resource|false"
    ],
    "pg_fetch_all": [
        "Fetches all rows from a result as an array",
        "pg_fetch_all ( resource $result , int $result_type = PGSQL_ASSOC ) : array"
    ],
    "pg_fetch_all_columns": [
        "Fetches all rows in a particular result column as an array",
        "pg_fetch_all_columns ( resource $result , int $column = 0 ) : array"
    ],
    "pg_fetch_array": [
        "Fetch a row as an array",
        "pg_fetch_array ( resource $result , int $row = ? , int $result_type = PGSQL_BOTH ) : array"
    ],
    "pg_fetch_assoc": [
        "Fetch a row as an associative array",
        "pg_fetch_assoc ( resource $result , int $row = ? ) : array"
    ],
    "pg_fetch_object": [
        "Fetch a row as an object",
        "pg_fetch_object ( resource $result , int $row = ? , int $result_type = PGSQL_ASSOC ) : object",
        "pg_fetch_object ( resource $result , int $row = ? , string $class_name = ? , array $params = ? ) : object"
    ],
    "pg_fetch_result": [
        "Returns values from a result resource",
        "pg_fetch_result ( resource $result , int $row , mixed $field ) : string|false|null",
        "pg_fetch_result ( resource $result , mixed $field ) : string|false|null"
    ],
    "pg_fetch_row": [
        "Get a row as an enumerated array",
        "pg_fetch_row ( resource $result , int $row = ? ) : array"
    ],
    "pg_field_is_null": [
        "Test if a field is SQL NULL",
        "pg_field_is_null ( resource $result , int $row , mixed $field ) : int",
        "pg_field_is_null ( resource $result , mixed $field ) : int"
    ],
    "pg_field_name": [
        "Returns the name of a field",
        "pg_field_name ( resource $result , int $field_number ) : string"
    ],
    "pg_field_num": [
        "Returns the field number of the named field",
        "pg_field_num ( resource $result , string $field_name ) : int"
    ],
    "pg_field_prtlen": [
        "Returns the printed length",
        "pg_field_prtlen ( resource $result , int $row_number , mixed $field_name_or_number ) : int",
        "pg_field_prtlen ( resource $result , mixed $field_name_or_number ) : int"
    ],
    "pg_field_size": [
        "Returns the internal storage size of the named field",
        "pg_field_size ( resource $result , int $field_number ) : int"
    ],
    "pg_field_table": [
        "Returns the name or oid of the tables field",
        "pg_field_table ( resource $result , int $field_number , bool $oid_only = false ) : mixed"
    ],
    "pg_field_type": [
        "Returns the type name for the corresponding field number",
        "pg_field_type ( resource $result , int $field_number ) : string"
    ],
    "pg_field_type_oid": [
        "Returns the type ID (OID) for the corresponding field number",
        "pg_field_type_oid ( resource $result , int $field_number ) : int"
    ],
    "pg_flush": [
        "Flush outbound query data on the connection",
        "pg_flush ( resource $connection ) : mixed"
    ],
    "pg_free_result": [
        "Free result memory",
        "pg_free_result ( resource $result ) : bool"
    ],
    "pg_get_notify": [
        "Gets SQL NOTIFY message",
        "pg_get_notify ( resource $connection , int $result_type = ? ) : array"
    ],
    "pg_get_pid": [
        "Gets the backend's process ID",
        "pg_get_pid ( resource $connection ) : int"
    ],
    "pg_get_result": [
        "Get asynchronous query result",
        "pg_get_result ( resource $connection = ? ) : resource"
    ],
    "pg_host": [
        "Returns the host name associated with the connection",
        "pg_host ( resource $connection = ? ) : string"
    ],
    "pg_insert": [
        "Insert array into table",
        "pg_insert ( resource $connection , string $table_name , array $assoc_array , int $options = PGSQL_DML_EXEC ) : mixed"
    ],
    "pg_last_error": [
        "Get the last error message string of a connection",
        "pg_last_error ( resource $connection = ? ) : string"
    ],
    "pg_last_notice": [
        "Returns the last notice message from PostgreSQL server",
        "pg_last_notice ( resource $connection , int $option = PGSQL_NOTICE_LAST ) : mixed"
    ],
    "pg_last_oid": [
        "Returns the last row's OID",
        "pg_last_oid ( resource $result ) : string"
    ],
    "pg_lo_close": [
        "Close a large object",
        "pg_lo_close ( resource $large_object ) : bool"
    ],
    "pg_lo_create": [
        "Create a large object",
        "pg_lo_create ( resource $connection = ? , mixed $object_id = ? ) : int",
        "pg_lo_create ( mixed $object_id ) : int"
    ],
    "pg_lo_export": [
        "Export a large object to file",
        "pg_lo_export ( resource $connection = ? , int $oid , string $pathname ) : bool"
    ],
    "pg_lo_import": [
        "Import a large object from file",
        "pg_lo_import ( resource $connection = ? , string $pathname , mixed $object_id = ? ) : int"
    ],
    "pg_lo_open": [
        "Open a large object",
        "pg_lo_open ( resource $connection , int $oid , string $mode ) : resource"
    ],
    "pg_lo_read": [
        "Read a large object",
        "pg_lo_read ( resource $large_object , int $len = 8192 ) : string"
    ],
    "pg_lo_read_all": [
        "Reads an entire large object and send straight to browser",
        "pg_lo_read_all ( resource $large_object ) : int"
    ],
    "pg_lo_seek": [
        "Seeks position within a large object",
        "pg_lo_seek ( resource $large_object , int $offset , int $whence = PGSQL_SEEK_CUR ) : bool"
    ],
    "pg_lo_tell": [
        "Returns current seek position a of large object",
        "pg_lo_tell ( resource $large_object ) : int"
    ],
    "pg_lo_truncate": [
        "Truncates a large object",
        "pg_lo_truncate ( resource $large_object , int $size ) : bool"
    ],
    "pg_lo_unlink": [
        "Delete a large object",
        "pg_lo_unlink ( resource $connection , int $oid ) : bool"
    ],
    "pg_lo_write": [
        "Write to a large object",
        "pg_lo_write ( resource $large_object , string $data , int $len = ? ) : int"
    ],
    "pg_meta_data": [
        "Get meta data for table",
        "pg_meta_data ( resource $connection , string $table_name , bool $extended = false ) : array"
    ],
    "pg_num_fields": [
        "Returns the number of fields in a result",
        "pg_num_fields ( resource $result ) : int"
    ],
    "pg_num_rows": [
        "Returns the number of rows in a result",
        "pg_num_rows ( resource $result ) : int"
    ],
    "pg_options": [
        "Get the options associated with the connection",
        "pg_options ( resource $connection = ? ) : string"
    ],
    "pg_parameter_status": [
        "Looks up a current parameter setting of the server",
        "pg_parameter_status ( resource $connection = ? , string $param_name ) : string"
    ],
    "pg_pconnect": [
        "Open a persistent PostgreSQL connection",
        "pg_pconnect ( string $connection_string , int $connect_type = ? ) : resource"
    ],
    "pg_ping": [
        "Ping database connection",
        "pg_ping ( resource $connection = ? ) : bool"
    ],
    "pg_port": [
        "Return the port number associated with the connection",
        "pg_port ( resource $connection = ? ) : int"
    ],
    "pg_prepare": [
        "Submits a request to create a prepared statement with the \n  given parameters, and waits for completion",
        "pg_prepare ( resource $connection = ? , string $stmtname , string $query ) : resource|false"
    ],
    "pg_put_line": [
        "Send a NULL-terminated string to PostgreSQL backend",
        "pg_put_line ( resource $connection = ? , string $data ) : bool"
    ],
    "pg_query": [
        "Execute a query",
        "pg_query ( resource $connection = ? , string $query ) : resource|false"
    ],
    "pg_query_params": [
        "Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text",
        "pg_query_params ( resource $connection = ? , string $query , array $params ) : resource|false"
    ],
    "pg_result_error": [
        "Get error message associated with result",
        "pg_result_error ( resource $result ) : string"
    ],
    "pg_result_error_field": [
        "Returns an individual field of an error report",
        "pg_result_error_field ( resource $result , int $fieldcode ) : string"
    ],
    "pg_result_seek": [
        "Set internal row offset in result resource",
        "pg_result_seek ( resource $result , int $offset ) : bool"
    ],
    "pg_result_status": [
        "Get status of query result",
        "pg_result_status ( resource $result , int $type = PGSQL_STATUS_LONG ) : mixed"
    ],
    "pg_select": [
        "Select records",
        "pg_select ( resource $connection , string $table_name , array $assoc_array , int $options = PGSQL_DML_EXEC , int $result_type = PGSQL_ASSOC ) : mixed"
    ],
    "pg_send_execute": [
        "Sends a request to execute a prepared statement with given parameters, without waiting for the result(s)",
        "pg_send_execute ( resource $connection , string $stmtname , array $params ) : bool"
    ],
    "pg_send_prepare": [
        "Sends a request to create a prepared statement with the given parameters, without waiting for completion",
        "pg_send_prepare ( resource $connection , string $stmtname , string $query ) : bool"
    ],
    "pg_send_query": [
        "Sends asynchronous query",
        "pg_send_query ( resource $connection , string $query ) : bool"
    ],
    "pg_send_query_params": [
        "Submits a command and separate parameters to the server without waiting for the result(s)",
        "pg_send_query_params ( resource $connection , string $query , array $params ) : bool"
    ],
    "pg_set_client_encoding": [
        "Set the client encoding",
        "pg_set_client_encoding ( resource $connection = ? , string $encoding ) : int"
    ],
    "pg_set_error_verbosity": [
        "Determines the verbosity of messages returned by pg_last_error() \n   and pg_result_error()",
        "pg_set_error_verbosity ( resource $connection = ? , int $verbosity ) : int"
    ],
    "pg_socket": [
        "Get a read only handle to the socket underlying a PostgreSQL connection",
        "pg_socket ( resource $connection ) : resource|false"
    ],
    "pg_trace": [
        "Enable tracing a PostgreSQL connection",
        "pg_trace ( string $pathname , string $mode = \"w\" , resource $connection = ? ) : bool"
    ],
    "pg_transaction_status": [
        "Returns the current in-transaction status of the server",
        "pg_transaction_status ( resource $connection ) : int"
    ],
    "pg_tty": [
        "Return the TTY name associated with the connection",
        "pg_tty ( resource $connection = ? ) : string"
    ],
    "pg_unescape_bytea": [
        "Unescape binary for bytea type",
        "pg_unescape_bytea ( string $data ) : string"
    ],
    "pg_untrace": [
        "Disable tracing of a PostgreSQL connection",
        "pg_untrace ( resource $connection = ? ) : bool"
    ],
    "pg_update": [
        "Update table",
        "pg_update ( resource $connection , string $table_name , array $data , array $condition , int $options = PGSQL_DML_EXEC ) : mixed"
    ],
    "pg_version": [
        "Returns an array with client, protocol and server version (when available)",
        "pg_version ( resource $connection = ? ) : array"
    ],
    "Phar": [
        "The Phar class provides a high-level interface to accessing and creating phar archives.",
        "new Phar ( string $fname , int $flags = ? , string $alias = ? )"
    ],
    "PharData": [
        "The PharData class provides a high-level interface to accessing and creating non-executable tar and zip archives. Because these archives do not contain a stub and cannot be executed by the phar extension, it is possible to create and manipulate regular zip and tar files using the PharData class even if phar.readonly php.ini setting is 1.",
        "new PharData ( string $fname , int $flags = ? , string $alias = ? , int $format = Phar::TAR )"
    ],
    "PharException": [
        "The PharException class provides a phar-specific exception class for try\/catch blocks."
    ],
    "PharFileInfo": [
        "The PharFileInfo class provides a high-level interface to the contents and attributes of a single file within a phar archive.",
        "new PharFileInfo ( string $entry )"
    ],
    "php_ini_loaded_file": [
        "Retrieve a path to the loaded php.ini file",
        "php_ini_loaded_file ( ) : string|false"
    ],
    "php_ini_scanned_files": [
        "Return a list of .ini files parsed from the additional ini dir",
        "php_ini_scanned_files ( ) : string|false"
    ],
    "php_sapi_name": [
        "Returns the type of interface between web server and PHP",
        "php_sapi_name ( ) : string|false"
    ],
    "php_strip_whitespace": [
        "Return source with stripped comments and whitespace",
        "php_strip_whitespace ( string $filename ) : string"
    ],
    "php_uname": [
        "Returns information about the operating system PHP is running on",
        "php_uname ( string $mode = \"a\" ) : string"
    ],
    "php_user_filter": [
        "Children of this class are passed to stream_filter_register(). Note that the __construct method is not called; instead, php_user_filter::onCreate() should be used for initialization."
    ],
    "phpcredits": [
        "Prints out the credits for PHP",
        "phpcredits ( int $flags = CREDITS_ALL ) : bool"
    ],
    "phpdbg_break_file": [
        "Inserts a breakpoint at a line in a file",
        "phpdbg_break_file ( string $file , int $line ) : void"
    ],
    "phpdbg_break_function": [
        "Inserts a breakpoint at entry to a function",
        "phpdbg_break_function ( string $function ) : void"
    ],
    "phpdbg_break_method": [
        "Inserts a breakpoint at entry to a method",
        "phpdbg_break_method ( string $class , string $method ) : void"
    ],
    "phpdbg_break_next": [
        "Inserts a breakpoint at the next opcode",
        "phpdbg_break_next ( ) : void"
    ],
    "phpdbg_clear": [
        "Clears all breakpoints",
        "phpdbg_clear ( ) : void"
    ],
    "phpdbg_color": [
        "Sets the color of certain elements",
        "phpdbg_color ( int $element , string $color ) : void"
    ],
    "phpdbg_end_oplog": [
        "<not documented>",
        "phpdbg_end_oplog ( array $options = [] ) : array|null"
    ],
    "phpdbg_exec": [
        "Attempts to set the execution context",
        "phpdbg_exec ( string $context ) : string|bool"
    ],
    "phpdbg_get_executable": [
        "<not documented>",
        "phpdbg_get_executable ( array $options = [] ) : array"
    ],
    "phpdbg_prompt": [
        "Sets the command prompt",
        "phpdbg_prompt ( string $string ) : void"
    ],
    "phpdbg_start_oplog": [
        "<not documented>",
        "phpdbg_start_oplog ( ) : void"
    ],
    "phpinfo": [
        "Outputs information about PHP's configuration",
        "phpinfo ( int $flags = INFO_ALL ) : bool"
    ],
    "PhpToken": [
        "This class provides an alternative to token_get_all(). While the function returns tokens either as a single-character string, or an array with a token ID, token text and line number, PhpToken::tokenize() normalizes all tokens into PhpToken objects, which makes code operating on tokens more memory efficient and readable.",
        "new PhpToken ( int $id , string $text , int $line = -1 , int $pos = -1 )"
    ],
    "phpversion": [
        "Gets the current PHP version",
        "phpversion ( string $extension = ? ) : string"
    ],
    "pi": [
        "Get value of pi",
        "pi ( ) : float"
    ],
    "png2wbmp": [
        "Convert PNG image file to WBMP image file",
        "png2wbmp ( string $pngname , string $wbmpname , int $dest_height , int $dest_width , int $threshold ) : bool"
    ],
    "Pool": [
        "A Pool is a container for, and controller of, an adjustable number of Workers.",
        "new Pool ( int $size , string $class = ? , array $ctor = ? ) : Pool"
    ],
    "popen": [
        "Opens process file pointer",
        "popen ( string $command , string $mode ) : resource|false"
    ],
    "posix_access": [
        "Determine accessibility of a file",
        "posix_access ( string $filename , int $flags = 0 ) : bool"
    ],
    "posix_ctermid": [
        "Get path name of controlling terminal",
        "posix_ctermid ( ) : string|false"
    ],
    "posix_get_last_error": [
        "Retrieve the error number set by the last posix function that failed",
        "posix_get_last_error ( ) : int"
    ],
    "posix_getcwd": [
        "Pathname of current directory",
        "posix_getcwd ( ) : string|false"
    ],
    "posix_getegid": [
        "Return the effective group ID of the current process",
        "posix_getegid ( ) : int"
    ],
    "posix_geteuid": [
        "Return the effective user ID of the current process",
        "posix_geteuid ( ) : int"
    ],
    "posix_getgid": [
        "Return the real group ID of the current process",
        "posix_getgid ( ) : int"
    ],
    "posix_getgrgid": [
        "Return info about a group by group id",
        "posix_getgrgid ( int $group_id ) : array|false"
    ],
    "posix_getgrnam": [
        "Return info about a group by name",
        "posix_getgrnam ( string $name ) : array|false"
    ],
    "posix_getgroups": [
        "Return the group set of the current process",
        "posix_getgroups ( ) : array|false"
    ],
    "posix_getlogin": [
        "Return login name",
        "posix_getlogin ( ) : string|false"
    ],
    "posix_getpgid": [
        "Get process group id for job control",
        "posix_getpgid ( int $process_id ) : int|false"
    ],
    "posix_getpgrp": [
        "Return the current process group identifier",
        "posix_getpgrp ( ) : int"
    ],
    "posix_getpid": [
        "Return the current process identifier",
        "posix_getpid ( ) : int"
    ],
    "posix_getppid": [
        "Return the parent process identifier",
        "posix_getppid ( ) : int"
    ],
    "posix_getpwnam": [
        "Return info about a user by username",
        "posix_getpwnam ( string $username ) : array|false"
    ],
    "posix_getpwuid": [
        "Return info about a user by user id",
        "posix_getpwuid ( int $user_id ) : array|false"
    ],
    "posix_getrlimit": [
        "Return info about system resource limits",
        "posix_getrlimit ( ) : array|false"
    ],
    "posix_getsid": [
        "Get the current sid of the process",
        "posix_getsid ( int $process_id ) : int|false"
    ],
    "posix_getuid": [
        "Return the real user ID of the current process",
        "posix_getuid ( ) : int"
    ],
    "posix_initgroups": [
        "Calculate the group access list",
        "posix_initgroups ( string $username , int $group_id ) : bool"
    ],
    "posix_isatty": [
        "Determine if a file descriptor is an interactive terminal",
        "posix_isatty ( resource|int $file_descriptor ) : bool"
    ],
    "posix_kill": [
        "Send a signal to a process",
        "posix_kill ( int $process_id , int $signal ) : bool"
    ],
    "posix_mkfifo": [
        "Create a fifo special file (a named pipe)",
        "posix_mkfifo ( string $filename , int $permissions ) : bool"
    ],
    "posix_mknod": [
        "Create a special or ordinary file (POSIX.1)",
        "posix_mknod ( string $filename , int $flags , int $major = 0 , int $minor = 0 ) : bool"
    ],
    "posix_setegid": [
        "Set the effective GID of the current process",
        "posix_setegid ( int $group_id ) : bool"
    ],
    "posix_seteuid": [
        "Set the effective UID of the current process",
        "posix_seteuid ( int $user_id ) : bool"
    ],
    "posix_setgid": [
        "Set the GID of the current process",
        "posix_setgid ( int $group_id ) : bool"
    ],
    "posix_setpgid": [
        "Set process group id for job control",
        "posix_setpgid ( int $process_id , int $process_group_id ) : bool"
    ],
    "posix_setrlimit": [
        "Set system resource limits",
        "posix_setrlimit ( int $resource , int $soft_limit , int $hard_limit ) : bool"
    ],
    "posix_setsid": [
        "Make the current process a session leader",
        "posix_setsid ( ) : int"
    ],
    "posix_setuid": [
        "Set the UID of the current process",
        "posix_setuid ( int $user_id ) : bool"
    ],
    "posix_strerror": [
        "Retrieve the system error message associated with the given errno",
        "posix_strerror ( int $error_code ) : string"
    ],
    "posix_times": [
        "Get process times",
        "posix_times ( ) : array|false"
    ],
    "posix_ttyname": [
        "Determine terminal device name",
        "posix_ttyname ( resource|int $file_descriptor ) : string|false"
    ],
    "posix_uname": [
        "Get system name",
        "posix_uname ( ) : array|false"
    ],
    "pow": [
        "Exponential expression",
        "pow ( int|float $base , int|float $exp ) : int|float"
    ],
    "preg_filter": [
        "Perform a regular expression search and replace",
        "preg_filter ( string|array $pattern , string|array $replacement , string|array $subject , int $limit = -1 , int &$count = null ) : string|array|null"
    ],
    "preg_grep": [
        "Return array entries that match the pattern",
        "preg_grep ( string $pattern , array $array , int $flags = 0 ) : array|false"
    ],
    "preg_last_error": [
        "Returns the error code of the last PCRE regex execution",
        "preg_last_error ( ) : int"
    ],
    "preg_last_error_msg": [
        "Returns the error message of the last PCRE regex execution",
        "preg_last_error_msg ( ) : string"
    ],
    "preg_match": [
        "Perform a regular expression match",
        "preg_match ( string $pattern , string $subject , array &$matches = null , int $flags = 0 , int $offset = 0 ) : int|false"
    ],
    "preg_match_all": [
        "Perform a global regular expression match",
        "preg_match_all ( string $pattern , string $subject , array &$matches = null , int $flags = 0 , int $offset = 0 ) : int|false|null"
    ],
    "preg_quote": [
        "Quote regular expression characters",
        "preg_quote ( string $str , string|null $delimiter = null ) : string"
    ],
    "preg_replace": [
        "Perform a regular expression search and replace",
        "preg_replace ( string|array $pattern , string|array $replacement , string|array $subject , int $limit = -1 , int &$count = null ) : string|array|null"
    ],
    "preg_replace_callback": [
        "Perform a regular expression search and replace using a callback",
        "preg_replace_callback ( string|array $pattern , callable $callback , string|array $subject , int $limit = -1 , int &$count = null , int $flags = 0 ) : string|array|null"
    ],
    "preg_replace_callback_array": [
        "Perform a regular expression search and replace using callbacks",
        "preg_replace_callback_array ( array $pattern , string|array $subject , int $limit = -1 , int &$count = null , int $flags = 0 ) : string|array|null"
    ],
    "preg_split": [
        "Split string by a regular expression",
        "preg_split ( string $pattern , string $subject , int $limit = -1 , int $flags = 0 ) : array|false"
    ],
    "prev": [
        "Rewind the internal array pointer",
        "prev ( array|object &$array ) : mixed"
    ],
    "print": [
        "Output a string",
        "print ( string $arg ) : int"
    ],
    "print_r": [
        "Prints human-readable information about a variable",
        "print_r ( mixed $value , bool $return = false ) : string|bool"
    ],
    "printf": [
        "Output a formatted string",
        "printf ( string $format , mixed ...$values ) : int"
    ],
    "proc_close": [
        "Close a process opened by proc_open() and return the exit code of that process",
        "proc_close ( resource $process ) : int"
    ],
    "proc_get_status": [
        "Get information about a process opened by proc_open()",
        "proc_get_status ( resource $process ) : array"
    ],
    "proc_nice": [
        "Change the priority of the current process",
        "proc_nice ( int $priority ) : bool"
    ],
    "proc_open": [
        "Execute a command and open file pointers for input\/output",
        "proc_open ( mixed $cmd , array $descriptorspec , array &$pipes , string $cwd = null , array $env = null , array $other_options = null ) : resource"
    ],
    "proc_terminate": [
        "Kills a process opened by proc_open",
        "proc_terminate ( resource $process , int $signal = 15 ) : bool"
    ],
    "property_exists": [
        "Checks if the object or class has a property",
        "property_exists ( mixed $class , string $property ) : bool"
    ],
    "ps_add_bookmark": [
        "Add bookmark to current page",
        "ps_add_bookmark ( resource $psdoc , string $text , int $parent = 0 , int $open = 0 ) : int"
    ],
    "ps_add_launchlink": [
        "Adds link which launches file",
        "ps_add_launchlink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename ) : bool"
    ],
    "ps_add_locallink": [
        "Adds link to a page in the same document",
        "ps_add_locallink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , int $page , string $dest ) : bool"
    ],
    "ps_add_note": [
        "Adds note to current page",
        "ps_add_note ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open ) : bool"
    ],
    "ps_add_pdflink": [
        "Adds link to a page in a second pdf document",
        "ps_add_pdflink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename , int $page , string $dest ) : bool"
    ],
    "ps_add_weblink": [
        "Adds link to a web location",
        "ps_add_weblink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $url ) : bool"
    ],
    "ps_arc": [
        "Draws an arc counterclockwise",
        "ps_arc ( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta ) : bool"
    ],
    "ps_arcn": [
        "Draws an arc clockwise",
        "ps_arcn ( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta ) : bool"
    ],
    "ps_begin_page": [
        "Start a new page",
        "ps_begin_page ( resource $psdoc , float $width , float $height ) : bool"
    ],
    "ps_begin_pattern": [
        "Start a new pattern",
        "ps_begin_pattern ( resource $psdoc , float $width , float $height , float $xstep , float $ystep , int $painttype ) : int|false"
    ],
    "ps_begin_template": [
        "Start a new template",
        "ps_begin_template ( resource $psdoc , float $width , float $height ) : int"
    ],
    "ps_circle": [
        "Draws a circle",
        "ps_circle ( resource $psdoc , float $x , float $y , float $radius ) : bool"
    ],
    "ps_clip": [
        "Clips drawing to current path",
        "ps_clip ( resource $psdoc ) : bool"
    ],
    "ps_close": [
        "Closes a PostScript document",
        "ps_close ( resource $psdoc ) : bool"
    ],
    "ps_close_image": [
        "Closes image and frees memory",
        "ps_close_image ( resource $psdoc , int $imageid ) : void|false"
    ],
    "ps_closepath": [
        "Closes path",
        "ps_closepath ( resource $psdoc ) : bool"
    ],
    "ps_closepath_stroke": [
        "Closes and strokes path",
        "ps_closepath_stroke ( resource $psdoc ) : bool"
    ],
    "ps_continue_text": [
        "Continue text in next line",
        "ps_continue_text ( resource $psdoc , string $text ) : bool"
    ],
    "ps_curveto": [
        "Draws a curve",
        "ps_curveto ( resource $psdoc , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 ) : bool"
    ],
    "ps_delete": [
        "Deletes all resources of a PostScript document",
        "ps_delete ( resource $psdoc ) : bool"
    ],
    "ps_end_page": [
        "End a page",
        "ps_end_page ( resource $psdoc ) : bool"
    ],
    "ps_end_pattern": [
        "End a pattern",
        "ps_end_pattern ( resource $psdoc ) : bool"
    ],
    "ps_end_template": [
        "End a template",
        "ps_end_template ( resource $psdoc ) : bool"
    ],
    "ps_fill": [
        "Fills the current path",
        "ps_fill ( resource $psdoc ) : bool"
    ],
    "ps_fill_stroke": [
        "Fills and strokes the current path",
        "ps_fill_stroke ( resource $psdoc ) : bool"
    ],
    "ps_findfont": [
        "Loads a font",
        "ps_findfont ( resource $psdoc , string $fontname , string $encoding , bool $embed = false ) : int"
    ],
    "ps_get_buffer": [
        "Fetches the full buffer containig the generated PS data",
        "ps_get_buffer ( resource $psdoc ) : string"
    ],
    "ps_get_parameter": [
        "Gets certain parameters",
        "ps_get_parameter ( resource $psdoc , string $name , float $modifier = ? ) : string|false"
    ],
    "ps_get_value": [
        "Gets certain values",
        "ps_get_value ( resource $psdoc , string $name , float $modifier = ? ) : float"
    ],
    "ps_hyphenate": [
        "Hyphenates a word",
        "ps_hyphenate ( resource $psdoc , string $text ) : array|false"
    ],
    "ps_include_file": [
        "Reads an external file with raw PostScript code",
        "ps_include_file ( resource $psdoc , string $file ) : bool"
    ],
    "ps_lineto": [
        "Draws a line",
        "ps_lineto ( resource $psdoc , float $x , float $y ) : bool"
    ],
    "ps_makespotcolor": [
        "Create spot color",
        "ps_makespotcolor ( resource $psdoc , string $name , int $reserved = 0 ) : int"
    ],
    "ps_moveto": [
        "Sets current point",
        "ps_moveto ( resource $psdoc , float $x , float $y ) : bool"
    ],
    "ps_new": [
        "Creates a new PostScript document object",
        "ps_new ( ) : resource|false"
    ],
    "ps_open_file": [
        "Opens a file for output",
        "ps_open_file ( resource $psdoc , string $filename = ? ) : bool"
    ],
    "ps_open_image": [
        "Reads an image for later placement",
        "ps_open_image ( resource $psdoc , string $type , string $source , string $data , int $lenght , int $width , int $height , int $components , int $bpc , string $params ) : int"
    ],
    "ps_open_image_file": [
        "Opens image from file",
        "ps_open_image_file ( resource $psdoc , string $type , string $filename , string $stringparam = ? , int $intparam = 0 ) : int"
    ],
    "ps_open_memory_image": [
        "Takes an GD image and returns an image for placement in a PS document",
        "ps_open_memory_image ( resource $psdoc , int $gd ) : int"
    ],
    "ps_place_image": [
        "Places image on the page",
        "ps_place_image ( resource $psdoc , int $imageid , float $x , float $y , float $scale ) : bool"
    ],
    "ps_rect": [
        "Draws a rectangle",
        "ps_rect ( resource $psdoc , float $x , float $y , float $width , float $height ) : bool"
    ],
    "ps_restore": [
        "Restore previously save context",
        "ps_restore ( resource $psdoc ) : bool"
    ],
    "ps_rotate": [
        "Sets rotation factor",
        "ps_rotate ( resource $psdoc , float $rot ) : bool"
    ],
    "ps_save": [
        "Save current context",
        "ps_save ( resource $psdoc ) : bool"
    ],
    "ps_scale": [
        "Sets scaling factor",
        "ps_scale ( resource $psdoc , float $x , float $y ) : bool"
    ],
    "ps_set_border_color": [
        "Sets color of border for annotations",
        "ps_set_border_color ( resource $psdoc , float $red , float $green , float $blue ) : bool"
    ],
    "ps_set_border_dash": [
        "Sets length of dashes for border of annotations",
        "ps_set_border_dash ( resource $psdoc , float $black , float $white ) : bool"
    ],
    "ps_set_border_style": [
        "Sets border style of annotations",
        "ps_set_border_style ( resource $psdoc , string $style , float $width ) : bool"
    ],
    "ps_set_info": [
        "Sets information fields of document",
        "ps_set_info ( resource $p , string $key , string $val ) : bool"
    ],
    "ps_set_parameter": [
        "Sets certain parameters",
        "ps_set_parameter ( resource $psdoc , string $name , string $value ) : bool"
    ],
    "ps_set_text_pos": [
        "Sets position for text output",
        "ps_set_text_pos ( resource $psdoc , float $x , float $y ) : bool"
    ],
    "ps_set_value": [
        "Sets certain values",
        "ps_set_value ( resource $psdoc , string $name , float $value ) : bool"
    ],
    "ps_setcolor": [
        "Sets current color",
        "ps_setcolor ( resource $psdoc , string $type , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4 ) : bool"
    ],
    "ps_setdash": [
        "Sets appearance of a dashed line",
        "ps_setdash ( resource $psdoc , float $on , float $off ) : bool"
    ],
    "ps_setflat": [
        "Sets flatness",
        "ps_setflat ( resource $psdoc , float $value ) : bool"
    ],
    "ps_setfont": [
        "Sets font to use for following output",
        "ps_setfont ( resource $psdoc , int $fontid , float $size ) : bool"
    ],
    "ps_setgray": [
        "Sets gray value",
        "ps_setgray ( resource $psdoc , float $gray ) : bool"
    ],
    "ps_setlinecap": [
        "Sets appearance of line ends",
        "ps_setlinecap ( resource $psdoc , int $type ) : bool"
    ],
    "ps_setlinejoin": [
        "Sets how contected lines are joined",
        "ps_setlinejoin ( resource $psdoc , int $type ) : bool"
    ],
    "ps_setlinewidth": [
        "Sets width of a line",
        "ps_setlinewidth ( resource $psdoc , float $width ) : bool"
    ],
    "ps_setmiterlimit": [
        "Sets the miter limit",
        "ps_setmiterlimit ( resource $psdoc , float $value ) : bool"
    ],
    "ps_setoverprintmode": [
        "Sets overprint mode",
        "ps_setoverprintmode ( resource $psdoc , int $mode ) : bool"
    ],
    "ps_setpolydash": [
        "Sets appearance of a dashed line",
        "ps_setpolydash ( resource $psdoc , float $arr ) : bool"
    ],
    "ps_shading": [
        "Creates a shading for later use",
        "ps_shading ( resource $psdoc , string $type , float $x0 , float $y0 , float $x1 , float $y1 , float $c1 , float $c2 , float $c3 , float $c4 , string $optlist ) : int|false"
    ],
    "ps_shading_pattern": [
        "Creates a pattern based on a shading",
        "ps_shading_pattern ( resource $psdoc , int $shadingid , string $optlist ) : int|false"
    ],
    "ps_shfill": [
        "Fills an area with a shading",
        "ps_shfill ( resource $psdoc , int $shadingid ) : bool"
    ],
    "ps_show": [
        "Output text",
        "ps_show ( resource $psdoc , string $text ) : bool"
    ],
    "ps_show2": [
        "Output a text at current position",
        "ps_show2 ( resource $psdoc , string $text , int $len ) : bool"
    ],
    "ps_show_boxed": [
        "Output text in a box",
        "ps_show_boxed ( resource $psdoc , string $text , float $left , float $bottom , float $width , float $height , string $hmode , string $feature = ? ) : int"
    ],
    "ps_show_xy": [
        "Output text at given position",
        "ps_show_xy ( resource $psdoc , string $text , float $x , float $y ) : bool"
    ],
    "ps_show_xy2": [
        "Output text at position",
        "ps_show_xy2 ( resource $psdoc , string $text , int $len , float $xcoor , float $ycoor ) : bool"
    ],
    "ps_string_geometry": [
        "Gets geometry of a string",
        "ps_string_geometry ( resource $psdoc , string $text , int $fontid = 0 , float $size = 0.0 ) : array"
    ],
    "ps_stringwidth": [
        "Gets width of a string",
        "ps_stringwidth ( resource $psdoc , string $text , int $fontid = 0 , float $size = 0.0 ) : float"
    ],
    "ps_stroke": [
        "Draws the current path",
        "ps_stroke ( resource $psdoc ) : bool"
    ],
    "ps_symbol": [
        "Output a glyph",
        "ps_symbol ( resource $psdoc , int $ord ) : bool"
    ],
    "ps_symbol_name": [
        "Gets name of a glyph",
        "ps_symbol_name ( resource $psdoc , int $ord , int $fontid = 0 ) : string"
    ],
    "ps_symbol_width": [
        "Gets width of a glyph",
        "ps_symbol_width ( resource $psdoc , int $ord , int $fontid = 0 , float $size = 0.0 ) : float"
    ],
    "ps_translate": [
        "Sets translation",
        "ps_translate ( resource $psdoc , float $x , float $y ) : bool"
    ],
    "pspell_add_to_personal": [
        "Add the word to a personal wordlist",
        "pspell_add_to_personal ( int $dictionary , string $word ) : bool"
    ],
    "pspell_add_to_session": [
        "Add the word to the wordlist in the current session",
        "pspell_add_to_session ( int $dictionary , string $word ) : bool"
    ],
    "pspell_check": [
        "Check a word",
        "pspell_check ( int $dictionary , string $word ) : bool"
    ],
    "pspell_clear_session": [
        "Clear the current session",
        "pspell_clear_session ( int $dictionary ) : bool"
    ],
    "pspell_config_create": [
        "Create a config used to open a dictionary",
        "pspell_config_create ( string $language , string $spelling = \"\" , string $jargon = \"\" , string $encoding = \"\" ) : int"
    ],
    "pspell_config_data_dir": [
        "Location of language data files",
        "pspell_config_data_dir ( int $config , string $directory ) : bool"
    ],
    "pspell_config_dict_dir": [
        "Location of the main word list",
        "pspell_config_dict_dir ( int $config , string $directory ) : bool"
    ],
    "pspell_config_ignore": [
        "Ignore words less than N characters long",
        "pspell_config_ignore ( int $config , int $min_length ) : bool"
    ],
    "pspell_config_mode": [
        "Change the mode number of suggestions returned",
        "pspell_config_mode ( int $config , int $mode ) : bool"
    ],
    "pspell_config_personal": [
        "Set a file that contains personal wordlist",
        "pspell_config_personal ( int $config , string $filename ) : bool"
    ],
    "pspell_config_repl": [
        "Set a file that contains replacement pairs",
        "pspell_config_repl ( int $config , string $filename ) : bool"
    ],
    "pspell_config_runtogether": [
        "Consider run-together words as valid compounds",
        "pspell_config_runtogether ( int $config , bool $allow ) : bool"
    ],
    "pspell_config_save_repl": [
        "Determine whether to save a replacement pairs list\n  along with the wordlist",
        "pspell_config_save_repl ( int $config , bool $save ) : bool"
    ],
    "pspell_new": [
        "Load a new dictionary",
        "pspell_new ( string $language , string $spelling = \"\" , string $jargon = \"\" , string $encoding = \"\" , int $mode = 0 ) : int|false"
    ],
    "pspell_new_config": [
        "Load a new dictionary with settings based on a given config",
        "pspell_new_config ( int $config ) : int|false"
    ],
    "pspell_new_personal": [
        "Load a new dictionary with personal wordlist",
        "pspell_new_personal ( string $filename , string $language , string $spelling = \"\" , string $jargon = \"\" , string $encoding = \"\" , int $mode = 0 ) : int|false"
    ],
    "pspell_save_wordlist": [
        "Save the personal wordlist to a file",
        "pspell_save_wordlist ( int $dictionary ) : bool"
    ],
    "pspell_store_replacement": [
        "Store a replacement pair for a word",
        "pspell_store_replacement ( int $dictionary , string $misspelled , string $correct ) : bool"
    ],
    "pspell_suggest": [
        "Suggest spellings of a word",
        "pspell_suggest ( int $dictionary , string $word ) : array|false"
    ],
    "putenv": [
        "Sets the value of an environment variable",
        "putenv ( string $assignment ) : bool"
    ],
    "px_close": [
        "Closes a paradox database",
        "px_close ( resource $pxdoc ) : bool"
    ],
    "px_create_fp": [
        "Create a new paradox database",
        "px_create_fp ( resource $pxdoc , resource $file , array $fielddesc ) : bool"
    ],
    "px_date2string": [
        "Converts a date into a string",
        "px_date2string ( resource $pxdoc , int $value , string $format ) : string"
    ],
    "px_delete": [
        "Deletes resource of paradox database",
        "px_delete ( resource $pxdoc ) : bool"
    ],
    "px_delete_record": [
        "Deletes record from paradox database",
        "px_delete_record ( resource $pxdoc , int $num ) : bool"
    ],
    "px_get_field": [
        "Returns the specification of a single field",
        "px_get_field ( resource $pxdoc , int $fieldno ) : array"
    ],
    "px_get_info": [
        "Return lots of information about a paradox file",
        "px_get_info ( resource $pxdoc ) : array"
    ],
    "px_get_parameter": [
        "Gets a parameter",
        "px_get_parameter ( resource $pxdoc , string $name ) : string|false"
    ],
    "px_get_record": [
        "Returns record of paradox database",
        "px_get_record ( resource $pxdoc , int $num , int $mode = 0 ) : array"
    ],
    "px_get_schema": [
        "Returns the database schema",
        "px_get_schema ( resource $pxdoc , int $mode = 0 ) : array"
    ],
    "px_get_value": [
        "Gets a value",
        "px_get_value ( resource $pxdoc , string $name ) : float|false"
    ],
    "px_insert_record": [
        "Inserts record into paradox database",
        "px_insert_record ( resource $pxdoc , array $data ) : int"
    ],
    "px_new": [
        "Create a new paradox object",
        "px_new ( ) : resource"
    ],
    "px_numfields": [
        "Returns number of fields in a database",
        "px_numfields ( resource $pxdoc ) : int"
    ],
    "px_numrecords": [
        "Returns number of records in a database",
        "px_numrecords ( resource $pxdoc ) : int"
    ],
    "px_open_fp": [
        "Open paradox database",
        "px_open_fp ( resource $pxdoc , resource $file ) : bool"
    ],
    "px_put_record": [
        "Stores record into paradox database",
        "px_put_record ( resource $pxdoc , array $record , int $recpos = -1 ) : bool"
    ],
    "px_retrieve_record": [
        "Returns record of paradox database",
        "px_retrieve_record ( resource $pxdoc , int $num , int $mode = 0 ) : array"
    ],
    "px_set_blob_file": [
        "Sets the file where blobs are read from",
        "px_set_blob_file ( resource $pxdoc , string $filename ) : bool"
    ],
    "px_set_parameter": [
        "Sets a parameter",
        "px_set_parameter ( resource $pxdoc , string $name , string $value ) : bool"
    ],
    "px_set_tablename": [
        "Sets the name of a table (deprecated)",
        "px_set_tablename ( resource $pxdoc , string $name ) : void|false"
    ],
    "px_set_targetencoding": [
        "Sets the encoding for character fields (deprecated)",
        "px_set_targetencoding ( resource $pxdoc , string $encoding ) : bool"
    ],
    "px_set_value": [
        "Sets a value",
        "px_set_value ( resource $pxdoc , string $name , float $value ) : bool"
    ],
    "px_timestamp2string": [
        "Converts the timestamp into a string",
        "px_timestamp2string ( resource $pxdoc , float $value , string $format ) : string"
    ],
    "px_update_record": [
        "Updates record in paradox database",
        "px_update_record ( resource $pxdoc , array $data , int $num ) : bool"
    ],
    "QuickHashIntHash": [
        "This class wraps around a hash containing integer numbers, where the values are also integer numbers. Hashes are also available as implementation of the ArrayAccess interface.",
        "new QuickHashIntHash ( int $size , int $options = ? )"
    ],
    "QuickHashIntSet": [
        "This class wraps around a set containing integer numbers.",
        "new QuickHashIntSet ( int $size , int $options = ? )"
    ],
    "QuickHashIntStringHash": [
        "This class wraps around a hash containing integer numbers, where the values are strings. Hashes are also available as implementation of the ArrayAccess interface.",
        "new QuickHashIntStringHash ( int $size , int $options = 0 )"
    ],
    "QuickHashStringIntHash": [
        "This class wraps around a hash containing strings, where the values are integer numbers. Hashes are also available as implementation of the ArrayAccess interface.",
        "new QuickHashStringIntHash ( int $size , int $options = 0 )"
    ],
    "quoted_printable_decode": [
        "Convert a quoted-printable string to an 8 bit string",
        "quoted_printable_decode ( string $string ) : string"
    ],
    "quoted_printable_encode": [
        "Convert a 8 bit string to a quoted-printable string",
        "quoted_printable_encode ( string $string ) : string"
    ],
    "quotemeta": [
        "Quote meta characters",
        "quotemeta ( string $string ) : string"
    ],
    "rad2deg": [
        "Converts the radian number to the equivalent number in degrees",
        "rad2deg ( float $num ) : float"
    ],
    "radius_acct_open": [
        "Creates a Radius handle for accounting",
        "radius_acct_open ( ) : resource"
    ],
    "radius_add_server": [
        "Adds a server",
        "radius_add_server ( resource $radius_handle , string $hostname , int $port , string $secret , int $timeout , int $max_tries ) : bool"
    ],
    "radius_auth_open": [
        "Creates a Radius handle for authentication",
        "radius_auth_open ( ) : resource"
    ],
    "radius_close": [
        "Frees all ressources",
        "radius_close ( resource $radius_handle ) : bool"
    ],
    "radius_config": [
        "Causes the library to read the given configuration file",
        "radius_config ( resource $radius_handle , string $file ) : bool"
    ],
    "radius_create_request": [
        "Create accounting or authentication request",
        "radius_create_request ( resource $radius_handle , int $type ) : bool"
    ],
    "radius_cvt_addr": [
        "Converts raw data to IP-Address",
        "radius_cvt_addr ( string $data ) : string"
    ],
    "radius_cvt_int": [
        "Converts raw data to integer",
        "radius_cvt_int ( string $data ) : int"
    ],
    "radius_cvt_string": [
        "Converts raw data to string",
        "radius_cvt_string ( string $data ) : string"
    ],
    "radius_demangle": [
        "Demangles data",
        "radius_demangle ( resource $radius_handle , string $mangled ) : string"
    ],
    "radius_demangle_mppe_key": [
        "Derives mppe-keys from mangled data",
        "radius_demangle_mppe_key ( resource $radius_handle , string $mangled ) : string"
    ],
    "radius_get_attr": [
        "Extracts an attribute",
        "radius_get_attr ( resource $radius_handle ) : mixed"
    ],
    "radius_get_tagged_attr_data": [
        "Extracts the data from a tagged attribute",
        "radius_get_tagged_attr_data ( string $data ) : string|false"
    ],
    "radius_get_tagged_attr_tag": [
        "Extracts the tag from a tagged attribute",
        "radius_get_tagged_attr_tag ( string $data ) : int|false"
    ],
    "radius_get_vendor_attr": [
        "Extracts a vendor specific attribute",
        "radius_get_vendor_attr ( string $data ) : array"
    ],
    "radius_put_addr": [
        "Attaches an IP address attribute",
        "radius_put_addr ( resource $radius_handle , int $type , string $addr , int $options = 0 , int $tag = ? ) : bool"
    ],
    "radius_put_attr": [
        "Attaches a binary attribute",
        "radius_put_attr ( resource $radius_handle , int $type , string $value , int $options = 0 , int $tag = ? ) : bool"
    ],
    "radius_put_int": [
        "Attaches an integer attribute",
        "radius_put_int ( resource $radius_handle , int $type , int $value , int $options = 0 , int $tag = ? ) : bool"
    ],
    "radius_put_string": [
        "Attaches a string attribute",
        "radius_put_string ( resource $radius_handle , int $type , string $value , int $options = 0 , int $tag = ? ) : bool"
    ],
    "radius_put_vendor_addr": [
        "Attaches a vendor specific IP address attribute",
        "radius_put_vendor_addr ( resource $radius_handle , int $vendor , int $type , string $addr ) : bool"
    ],
    "radius_put_vendor_attr": [
        "Attaches a vendor specific binary attribute",
        "radius_put_vendor_attr ( resource $radius_handle , int $vendor , int $type , string $value , int $options = 0 , int $tag = ? ) : bool"
    ],
    "radius_put_vendor_int": [
        "Attaches a vendor specific integer attribute",
        "radius_put_vendor_int ( resource $radius_handle , int $vendor , int $type , int $value , int $options = 0 , int $tag = ? ) : bool"
    ],
    "radius_put_vendor_string": [
        "Attaches a vendor specific string attribute",
        "radius_put_vendor_string ( resource $radius_handle , int $vendor , int $type , string $value , int $options = 0 , int $tag = ? ) : bool"
    ],
    "radius_request_authenticator": [
        "Returns the request authenticator",
        "radius_request_authenticator ( resource $radius_handle ) : string"
    ],
    "radius_salt_encrypt_attr": [
        "Salt-encrypts a value",
        "radius_salt_encrypt_attr ( resource $radius_handle , string $data ) : string|false"
    ],
    "radius_send_request": [
        "Sends the request and waits for a reply",
        "radius_send_request ( resource $radius_handle ) : int"
    ],
    "radius_server_secret": [
        "Returns the shared secret",
        "radius_server_secret ( resource $radius_handle ) : string"
    ],
    "radius_strerror": [
        "Returns an error message",
        "radius_strerror ( resource $radius_handle ) : string"
    ],
    "rand": [
        "Generate a random integer",
        "rand ( ) : int",
        "rand ( int $min , int $max ) : int"
    ],
    "random_bytes": [
        "Generates cryptographically secure pseudo-random bytes",
        "random_bytes ( int $length ) : string"
    ],
    "random_int": [
        "Generates cryptographically secure pseudo-random integers",
        "random_int ( int $min , int $max ) : int"
    ],
    "range": [
        "Create an array containing a range of elements",
        "range ( string|int|float $start , string|int|float $end , int|float $step = 1 ) : array"
    ],
    "RangeException": [
        "Exception thrown to indicate range errors during program execution. Normally this means there was an arithmetic error other than under\/overflow. This is the runtime version of DomainException."
    ],
    "rar_allow_broken_set": [
        "Whether opening broken archives is allowed",
        "rar_allow_broken_set ( RarArchive $rarfile , bool $allow_broken ) : bool"
    ],
    "rar_broken_is": [
        "Test whether an archive is broken (incomplete)",
        "rar_broken_is ( RarArchive $rarfile ) : bool"
    ],
    "rar_close": [
        "Close RAR archive and free all resources",
        "rar_close ( RarArchive $rarfile ) : bool"
    ],
    "rar_comment_get": [
        "Get comment text from the RAR archive",
        "rar_comment_get ( RarArchive $rarfile ) : string"
    ],
    "rar_entry_get": [
        "Get entry object from the RAR archive",
        "rar_entry_get ( RarArchive $rarfile , string $entryname ) : RarEntry|false"
    ],
    "rar_list": [
        "Get full list of entries from the RAR archive",
        "rar_list ( RarArchive $rarfile ) : array|false"
    ],
    "rar_open": [
        "Open RAR archive",
        "rar_open ( string $filename , string $password = NULL , callable $volume_callback = NULL ) : RarArchive|false"
    ],
    "rar_solid_is": [
        "Check whether the RAR archive is solid",
        "rar_solid_is ( RarArchive $rarfile ) : bool"
    ],
    "rar_wrapper_cache_stats": [
        "Cache hits and misses for the URL wrapper",
        "rar_wrapper_cache_stats ( ) : string"
    ],
    "RarArchive": [
        "This class represents a RAR archive, which may be formed by several volumes (parts) and which contains a number of RAR entries (i.e., files, directories and other special objects such as symbolic links)."
    ],
    "RarEntry": [
        "A RAR entry, representing a directory or a compressed file inside a RAR archive."
    ],
    "RarException": [
        "This class serves two purposes: it is the type of the exceptions thrown by the RAR extension functions and methods and it allows, through static methods to query and define the error behaviour of the extension, i.e., whether exceptions are thrown or only warnings are emitted."
    ],
    "rawurldecode": [
        "Decode URL-encoded strings",
        "rawurldecode ( string $string ) : string"
    ],
    "rawurlencode": [
        "URL-encode according to RFC 3986",
        "rawurlencode ( string $string ) : string"
    ],
    "readdir": [
        "Read entry from directory handle",
        "readdir ( resource $dir_handle = ? ) : string|false"
    ],
    "readfile": [
        "Outputs a file",
        "readfile ( string $filename , bool $use_include_path = false , resource $context = ? ) : int|false"
    ],
    "readgzfile": [
        "Output a gz-file",
        "readgzfile ( string $filename , int $use_include_path = 0 ) : int|false"
    ],
    "readline": [
        "Reads a line",
        "readline ( string|null $prompt = null ) : string|false"
    ],
    "readline_add_history": [
        "Adds a line to the history",
        "readline_add_history ( string $prompt ) : bool"
    ],
    "readline_callback_handler_install": [
        "Initializes the readline callback interface and terminal, prints the prompt and returns immediately",
        "readline_callback_handler_install ( string $prompt , callable $callback ) : bool"
    ],
    "readline_callback_handler_remove": [
        "Removes a previously installed callback handler and restores terminal settings",
        "readline_callback_handler_remove ( ) : bool"
    ],
    "readline_callback_read_char": [
        "Reads a character and informs the readline callback interface when a line is received",
        "readline_callback_read_char ( ) : void"
    ],
    "readline_clear_history": [
        "Clears the history",
        "readline_clear_history ( ) : bool"
    ],
    "readline_completion_function": [
        "Registers a completion function",
        "readline_completion_function ( callable $callback ) : bool"
    ],
    "readline_info": [
        "Gets\/sets various internal readline variables",
        "readline_info ( string|null $var_name = null , int|string|bool|null $value = null ) : mixed"
    ],
    "readline_list_history": [
        "Lists the history",
        "readline_list_history ( ) : array"
    ],
    "readline_on_new_line": [
        "Inform readline that the cursor has moved to a new line",
        "readline_on_new_line ( ) : void"
    ],
    "readline_read_history": [
        "Reads the history",
        "readline_read_history ( string|null $filename = null ) : bool"
    ],
    "readline_redisplay": [
        "Redraws the display",
        "readline_redisplay ( ) : void"
    ],
    "readline_write_history": [
        "Writes the history",
        "readline_write_history ( string|null $filename = null ) : bool"
    ],
    "readlink": [
        "Returns the target of a symbolic link",
        "readlink ( string $path ) : string|false"
    ],
    "realpath": [
        "Returns canonicalized absolute pathname",
        "realpath ( string $path ) : string|false"
    ],
    "realpath_cache_get": [
        "Get realpath cache entries",
        "realpath_cache_get ( ) : array"
    ],
    "realpath_cache_size": [
        "Get realpath cache size",
        "realpath_cache_size ( ) : int"
    ],
    "recode_file": [
        "Recode from file to file according to recode request",
        "recode_file ( string $request , resource $input , resource $output ) : bool"
    ],
    "recode_string": [
        "Recode a string according to a recode request",
        "recode_string ( string $request , string $string ) : string"
    ],
    "RecursiveArrayIterator": [
        "This iterator allows to unset and modify values and keys while iterating over Arrays and Objects in the same way as the ArrayIterator. Additionally it is possible to iterate over the current iterator entry."
    ],
    "RecursiveCachingIterator": [
        "...",
        "new RecursiveCachingIterator ( Iterator $iterator , int $flags = self::CALL_TOSTRING )"
    ],
    "RecursiveCallbackFilterIterator": [
        "Create a RecursiveCallbackFilterIterator from a RecursiveIterator",
        "new RecursiveCallbackFilterIterator ( RecursiveIterator $iterator , string $callback )"
    ],
    "RecursiveDirectoryIterator": [
        "The RecursiveDirectoryIterator provides an interface for iterating recursively over filesystem directories.",
        "new RecursiveDirectoryIterator ( string $path , int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO )"
    ],
    "RecursiveFilterIterator": [
        "This abstract iterator filters out unwanted values for a RecursiveIterator. This class should be extended to implement custom filters. The RecursiveFilterIterator::accept() must be implemented in the subclass.",
        "new RecursiveFilterIterator ( RecursiveIterator $iterator )"
    ],
    "RecursiveIterator": [
        "Classes implementing RecursiveIterator can be used to iterate over iterators recursively."
    ],
    "RecursiveIteratorIterator": [
        "Can be used to iterate through recursive iterators.",
        "new RecursiveIteratorIterator ( Traversable $iterator , int $mode = RecursiveIteratorIterator::LEAVES_ONLY , int $flags = 0 )"
    ],
    "RecursiveRegexIterator": [
        "This recursive iterator can filter another recursive iterator via a regular expression.",
        "new RecursiveRegexIterator ( RecursiveIterator $iterator , string $regex , int $mode = self::MATCH , int $flags = 0 , int $preg_flags = 0 )"
    ],
    "RecursiveTreeIterator": [
        "Allows iterating over a RecursiveIterator to generate an ASCII graphic tree.",
        "new RecursiveTreeIterator ( RecursiveIterator|IteratorAggregate $it , int $flags = RecursiveTreeIterator::BYPASS_KEY , int $cit_flags = CachingIterator::CATCH_GET_CHILD , int $mode = RecursiveIteratorIterator::SELF_FIRST )"
    ],
    "Reflection": [
        "The reflection class."
    ],
    "ReflectionClass": [
        "The ReflectionClass class reports information about a class.",
        "new ReflectionClass ( object|string $objectOrClass )"
    ],
    "ReflectionClassConstant": [
        "The ReflectionClassConstant class reports information about a class constant.",
        "new ReflectionClassConstant ( object|string $class , string $constant )"
    ],
    "ReflectionException": [
        "The ReflectionException class."
    ],
    "ReflectionExtension": [
        "The ReflectionExtension class reports information about an extension.",
        "new ReflectionExtension ( string $name )"
    ],
    "ReflectionFunction": [
        "The ReflectionFunction class reports information about a function.",
        "new ReflectionFunction ( Closure|string $function )"
    ],
    "ReflectionFunctionAbstract": [
        "A parent class to ReflectionFunction, read its description for details."
    ],
    "ReflectionGenerator": [
        "The ReflectionGenerator class reports information about a generator.",
        "new ReflectionGenerator ( Generator $generator )"
    ],
    "ReflectionMethod": [
        "The ReflectionMethod class reports information about a method.",
        "new ReflectionMethod ( object|string $objectOrMethod , string $method )",
        "new ReflectionMethod ( string $classMethod )"
    ],
    "ReflectionObject": [
        "The ReflectionObject class reports information about an object.",
        "new ReflectionObject ( object $object )"
    ],
    "ReflectionParameter": [
        "The ReflectionParameter class retrieves information about function's or method's parameters.",
        "new ReflectionParameter ( string|array|object $function , int|string $param )"
    ],
    "ReflectionProperty": [
        "The ReflectionProperty class reports information about class properties.",
        "new ReflectionProperty ( object|string $class , string $property )"
    ],
    "ReflectionReference": [
        "The ReflectionReference class provides information about a reference."
    ],
    "ReflectionType": [
        "The ReflectionType class reports information about a function's return type."
    ],
    "ReflectionZendExtension": [
        "Constructor",
        "new ReflectionZendExtension ( string $name )"
    ],
    "Reflector": [
        "Reflector is an interface implemented by all exportable Reflection classes."
    ],
    "RegexIterator": [
        "This iterator can be used to filter another iterator based on a regular expression.",
        "new RegexIterator ( Iterator $iterator , string $regex , int $mode = self::MATCH , int $flags = 0 , int $preg_flags = 0 )"
    ],
    "register_shutdown_function": [
        "Register a function for execution on shutdown",
        "register_shutdown_function ( callable $callback , mixed ...$args ) : void"
    ],
    "register_tick_function": [
        "Register a function for execution on each tick",
        "register_tick_function ( callable $callback , mixed ...$args ) : bool"
    ],
    "rename": [
        "Renames a file or directory",
        "rename ( string $oldname , string $newname , resource $context = ? ) : bool"
    ],
    "reset": [
        "Set the internal pointer of an array to its first element",
        "reset ( array|object &$array ) : mixed"
    ],
    "ResourceBundle": [
        "Create a resource bundle",
        "new ResourceBundle ( string $locale , string $bundlename , bool $fallback = ? )"
    ],
    "resourcebundle_count": [
        "Get number of elements in the bundle",
        "resourcebundle_count ( ResourceBundle $r ) : int"
    ],
    "resourcebundle_create": [
        "Create a resource bundle",
        "resourcebundle_create ( string $locale , string $bundlename , bool $fallback = ? ) : ResourceBundle"
    ],
    "resourcebundle_get": [
        "Get data from the bundle",
        "resourcebundle_get ( ResourceBundle $r , string|int $index , bool $fallback = true ) : mixed"
    ],
    "resourcebundle_get_error_code": [
        "Get bundle's last error code",
        "resourcebundle_get_error_code ( ResourceBundle $r ) : int"
    ],
    "resourcebundle_get_error_message": [
        "Get bundle's last error message",
        "resourcebundle_get_error_message ( ResourceBundle $r ) : string"
    ],
    "resourcebundle_locales": [
        "Get supported locales",
        "resourcebundle_locales ( string $bundlename ) : array"
    ],
    "restore_error_handler": [
        "Restores the previous error handler function",
        "restore_error_handler ( ) : bool"
    ],
    "restore_exception_handler": [
        "Restores the previously defined exception handler function",
        "restore_exception_handler ( ) : bool"
    ],
    "restore_include_path": [
        "Restores the value of the include_path configuration option",
        "restore_include_path ( ) : void"
    ],
    "rewind": [
        "Rewind the position of a file pointer",
        "rewind ( resource $stream ) : bool"
    ],
    "rewinddir": [
        "Rewind directory handle",
        "rewinddir ( resource $dir_handle = ? ) : void"
    ],
    "rmdir": [
        "Removes directory",
        "rmdir ( string $dirname , resource $context = ? ) : bool"
    ],
    "round": [
        "Rounds a float",
        "round ( float $val , int $precision = 0 , int $mode = PHP_ROUND_HALF_UP ) : float"
    ],
    "rpmaddtag": [
        "Add tag retrieved in query",
        "rpmaddtag ( int $tag ) : bool"
    ],
    "rpmdbinfo": [
        "Get information from installed RPM",
        "rpmdbinfo ( string $nevr , bool $full = false ) : array"
    ],
    "rpmdbsearch": [
        "Search RPM packages",
        "rpmdbsearch ( string $pattern , int $rpmtag = RPMTAG_NAME , int $rpmmire = -1 , bool $full = false ) : array"
    ],
    "rpminfo": [
        "Get information from a RPM file",
        "rpminfo ( string $path , bool $full = false , string &$error = ? ) : array"
    ],
    "rpmvercmp": [
        "RPM version comparison",
        "rpmvercmp ( string $evr1 , string $evr2 ) : int"
    ],
    "rrd_create": [
        "Creates rrd database file",
        "rrd_create ( string $filename , array $options ) : bool"
    ],
    "rrd_error": [
        "Gets latest error message",
        "rrd_error ( ) : string"
    ],
    "rrd_fetch": [
        "Fetch the data for graph as array",
        "rrd_fetch ( string $filename , array $options ) : array"
    ],
    "rrd_first": [
        "Gets the timestamp of the first sample from rrd file",
        "rrd_first ( string $file , int $raaindex = 0 ) : int"
    ],
    "rrd_graph": [
        "Creates image from a data",
        "rrd_graph ( string $filename , array $options ) : array"
    ],
    "rrd_info": [
        "Gets information about rrd file",
        "rrd_info ( string $filename ) : array"
    ],
    "rrd_last": [
        "Gets unix timestamp of the last sample",
        "rrd_last ( string $filename ) : int"
    ],
    "rrd_lastupdate": [
        "Gets information about last updated data",
        "rrd_lastupdate ( string $filename ) : array"
    ],
    "rrd_restore": [
        "Restores the RRD file from XML dump",
        "rrd_restore ( string $xml_file , string $rrd_file , array $options = ? ) : bool"
    ],
    "rrd_tune": [
        "Tunes some RRD database file header options",
        "rrd_tune ( string $filename , array $options ) : bool"
    ],
    "rrd_update": [
        "Updates the RRD database",
        "rrd_update ( string $filename , array $options ) : bool"
    ],
    "rrd_version": [
        "Gets information about underlying rrdtool library",
        "rrd_version ( ) : string"
    ],
    "rrd_xport": [
        "Exports the information about RRD database",
        "rrd_xport ( array $options ) : array"
    ],
    "rrdc_disconnect": [
        "Close any outstanding connection to rrd caching daemon",
        "rrdc_disconnect ( ) : void"
    ],
    "RRDCreator": [
        "Class for creation of RRD database file.",
        "new RRDCreator ( string $path , string $startTime = ? , int $step = 0 )"
    ],
    "RRDGraph": [
        "Class for exporting data from RRD database to image file.",
        "new RRDGraph ( string $path )"
    ],
    "RRDUpdater": [
        "Class for updating RDD database file.",
        "new RRDUpdater ( string $path )"
    ],
    "rsort": [
        "Sort an array in reverse order",
        "rsort ( array &$array , int $flags = SORT_REGULAR ) : bool"
    ],
    "rtrim": [
        "Strip whitespace (or other characters) from the end of a string",
        "rtrim ( string $string , string $characters = \" \\n\\r\\t\\v\\0\" ) : string"
    ],
    "runkit7_constant_add": [
        "Similar to define(), but allows defining in class definitions as well",
        "runkit7_constant_add ( string $constname , mixed $value , int $newVisibility = ? ) : bool"
    ],
    "runkit7_constant_redefine": [
        "Redefine an already defined constant",
        "runkit7_constant_redefine ( string $constname , mixed $value , string $newVisibility = ? ) : bool"
    ],
    "runkit7_constant_remove": [
        "Remove\/Delete an already defined constant",
        "runkit7_constant_remove ( string $constname ) : bool"
    ],
    "runkit7_function_add": [
        "Add a new function, similar to create_function()",
        "runkit7_function_add ( string $funcname , string $arglist , string $code , bool $return_by_reference = null , string $doc_comment = null , string $return_type = ? , bool $is_strict = ? ) : bool",
        "runkit7_function_add ( string $funcname , Closure $closure , string $doc_comment = null , string $return_type = ? , bool $is_strict = ? ) : bool"
    ],
    "runkit7_function_copy": [
        "Copy a function to a new function name",
        "runkit7_function_copy ( string $funcname , string $targetname ) : bool"
    ],
    "runkit7_function_redefine": [
        "Replace a function definition with a new implementation",
        "runkit7_function_redefine ( string $funcname , string $arglist , string $code , bool $return_by_reference = null , string $doc_comment = null , string $return_type = ? , string $is_strict = ? ) : bool",
        "runkit7_function_redefine ( string $funcname , Closure $closure , string $doc_comment = null , string $return_type = ? , string $is_strict = ? ) : bool"
    ],
    "runkit7_function_remove": [
        "Remove a function definition",
        "runkit7_function_remove ( string $funcname ) : bool"
    ],
    "runkit7_function_rename": [
        "Change a function's name",
        "runkit7_function_rename ( string $funcname , string $newname ) : bool"
    ],
    "runkit7_import": [
        "Process a PHP file importing function and class definitions, overwriting where appropriate",
        "runkit7_import ( string $filename , int $flags = ? ) : bool"
    ],
    "runkit7_method_add": [
        "Dynamically adds a new method to a given class",
        "runkit7_method_add ( string $classname , string $methodname , string $args , string $code , int $flags = RUNKIT7_ACC_PUBLIC , string $doc_comment = null , string $return_type = ? , bool $is_strict = ? ) : bool",
        "runkit7_method_add ( string $classname , string $methodname , Closure $closure , int $flags = RUNKIT7_ACC_PUBLIC , string $doc_comment = null , string $return_type = ? , bool $is_strict = ? ) : bool"
    ],
    "runkit7_method_copy": [
        "Copies a method from class to another",
        "runkit7_method_copy ( string $dClass , string $dMethod , string $sClass , string $sMethod = ? ) : bool"
    ],
    "runkit7_method_redefine": [
        "Dynamically changes the code of the given method",
        "runkit7_method_redefine ( string $classname , string $methodname , string $args , string $code , int $flags = RUNKIT7_ACC_PUBLIC , string $doc_comment = null , string $return_type = ? , bool $is_strict = ? ) : bool",
        "runkit7_method_redefine ( string $classname , string $methodname , Closure $closure , int $flags = RUNKIT7_ACC_PUBLIC , string $doc_comment = null , string $return_type = ? , bool $is_strict = ? ) : bool"
    ],
    "runkit7_method_remove": [
        "Dynamically removes the given method",
        "runkit7_method_remove ( string $classname , string $methodname ) : bool"
    ],
    "runkit7_method_rename": [
        "Dynamically changes the name of the given method",
        "runkit7_method_rename ( string $classname , string $methodname , string $newname ) : bool"
    ],
    "runkit7_object_id": [
        "Return the integer object handle for given object",
        "runkit7_object_id ( object $obj ) : int"
    ],
    "runkit7_superglobals": [
        "Return numerically indexed array of registered superglobals",
        "runkit7_superglobals ( ) : array"
    ],
    "runkit7_zval_inspect": [
        "Returns information about the passed in value with data types, reference counts, etc",
        "runkit7_zval_inspect ( string $value ) : array"
    ],
    "RuntimeException": [
        "Exception thrown if an error which can only be found on runtime occurs."
    ],
    "sapi_windows_cp_conv": [
        "Convert string from one codepage to another",
        "sapi_windows_cp_conv ( int|string $in_codepage , int|string $out_codepage , string $subject ) : string"
    ],
    "sapi_windows_cp_get": [
        "Get current codepage",
        "sapi_windows_cp_get ( string $kind = \"\" ) : int"
    ],
    "sapi_windows_cp_is_utf8": [
        "Indicates whether the codepage is UTF-8 compatible",
        "sapi_windows_cp_is_utf8 ( ) : bool"
    ],
    "sapi_windows_cp_set": [
        "Set process codepage",
        "sapi_windows_cp_set ( int $cp ) : bool"
    ],
    "sapi_windows_generate_ctrl_event": [
        "Send a CTRL event to another process",
        "sapi_windows_generate_ctrl_event ( int $event , int $pid = 0 ) : bool"
    ],
    "sapi_windows_set_ctrl_handler": [
        "Set or remove a CTRL event handler",
        "sapi_windows_set_ctrl_handler ( callable $callable , bool $add = true ) : bool"
    ],
    "sapi_windows_vt100_support": [
        "Get or set VT100 support for the specified stream associated to an output buffer of a Windows console.",
        "sapi_windows_vt100_support ( resource $stream , bool $enable = ? ) : bool"
    ],
    "scandir": [
        "List files and directories inside the specified path",
        "scandir ( string $directory , int $sorting_order = SCANDIR_SORT_ASCENDING , resource $context = ? ) : array"
    ],
    "scoutapm_get_calls": [
        "Returns a list of instrumented calls that have occurred",
        "scoutapm_get_calls ( ) : array"
    ],
    "scoutapm_list_instrumented_functions": [
        "List functions scoutapm will instrument.",
        "scoutapm_list_instrumented_functions ( ) : array"
    ],
    "SeasLog": [
        "Description",
        "new SeasLog ( )"
    ],
    "seaslog_get_author": [
        "Get SeasLog author.",
        "seaslog_get_author ( ) : string"
    ],
    "seaslog_get_version": [
        "Get SeasLog version.",
        "seaslog_get_version ( ) : string"
    ],
    "SeekableIterator": [
        "The Seekable iterator."
    ],
    "sem_acquire": [
        "Acquire a semaphore",
        "sem_acquire ( SysvSemaphore $semaphore , bool $non_blocking = false ) : bool"
    ],
    "sem_get": [
        "Get a semaphore id",
        "sem_get ( int $key , int $max_acquire = 1 , int $permissions = 0666 , bool $auto_release = true ) : SysvSemaphore|false"
    ],
    "sem_release": [
        "Release a semaphore",
        "sem_release ( SysvSemaphore $semaphore ) : bool"
    ],
    "sem_remove": [
        "Remove a semaphore",
        "sem_remove ( SysvSemaphore $semaphore ) : bool"
    ],
    "Serializable": [
        "Interface for customized serializing."
    ],
    "serialize": [
        "Generates a storable representation of a value",
        "serialize ( mixed $value ) : string"
    ],
    "session_abort": [
        "Discard session array changes and finish session",
        "session_abort ( ) : bool"
    ],
    "session_cache_expire": [
        "Get and\/or set current cache expire",
        "session_cache_expire ( int|null $value = null ) : int|false"
    ],
    "session_cache_limiter": [
        "Get and\/or set the current cache limiter",
        "session_cache_limiter ( string|null $value = null ) : string|false"
    ],
    "session_create_id": [
        "Create new session id",
        "session_create_id ( string $prefix = \"\" ) : string|false"
    ],
    "session_decode": [
        "Decodes session data from a session encoded string",
        "session_decode ( string $data ) : bool"
    ],
    "session_destroy": [
        "Destroys all data registered to a session",
        "session_destroy ( ) : bool"
    ],
    "session_encode": [
        "Encodes the current session data as a session encoded string",
        "session_encode ( ) : string|false"
    ],
    "session_gc": [
        "Perform session data garbage collection",
        "session_gc ( ) : int|false"
    ],
    "session_get_cookie_params": [
        "Get the session cookie parameters",
        "session_get_cookie_params ( ) : array"
    ],
    "session_id": [
        "Get and\/or set the current session id",
        "session_id ( string|null $id = null ) : string|false"
    ],
    "session_is_registered": [
        "Find out whether a global variable is registered in a session",
        "session_is_registered ( string $name ) : bool"
    ],
    "session_module_name": [
        "Get and\/or set the current session module",
        "session_module_name ( string|null $module = null ) : string|false"
    ],
    "session_name": [
        "Get and\/or set the current session name",
        "session_name ( string|null $name = null ) : string|false"
    ],
    "session_regenerate_id": [
        "Update the current session id with a newly generated one",
        "session_regenerate_id ( bool $delete_old_session = false ) : bool"
    ],
    "session_register_shutdown": [
        "Session shutdown function",
        "session_register_shutdown ( ) : void"
    ],
    "session_reset": [
        "Re-initialize session array with original values",
        "session_reset ( ) : bool"
    ],
    "session_save_path": [
        "Get and\/or set the current session save path",
        "session_save_path ( string|null $path = null ) : string|false"
    ],
    "session_set_cookie_params": [
        "Set the session cookie parameters",
        "session_set_cookie_params ( int $lifetime_or_options , string|null $path = null , string|null $domain = null , bool|null $secure = null , bool|null $httponly = null ) : bool",
        "session_set_cookie_params ( array $lifetime_or_options ) : bool"
    ],
    "session_set_save_handler": [
        "Sets user-level session storage functions",
        "session_set_save_handler ( callable $open , callable $close , callable $read , callable $write , callable $destroy , callable $gc , callable $create_sid = ? , callable $validate_sid = ? , callable $update_timestamp = ? ) : bool",
        "session_set_save_handler ( object $sessionhandler , bool $register_shutdown = true ) : bool"
    ],
    "session_start": [
        "Start new or resume existing session",
        "session_start ( array $options = [] ) : bool"
    ],
    "session_status": [
        "Returns the current session status",
        "session_status ( ) : int"
    ],
    "session_unregister": [
        "Unregister a global variable from the current session",
        "session_unregister ( string $name ) : bool"
    ],
    "session_unset": [
        "Free all session variables",
        "session_unset ( ) : bool"
    ],
    "session_write_close": [
        "Write session data and end session",
        "session_write_close ( ) : bool"
    ],
    "SessionHandler": [
        "SessionHandler is a special class that can be used to expose the current internal PHP session save handler by inheritance. There are seven methods which wrap the seven internal session save handler callbacks (open, close, read, write, destroy, gc and create_sid). By default, this class will wrap whatever internal save handler is set as defined by the session.save_handler configuration directive which is usually files by default. Other internal session save handlers are provided by PHP extensions such as SQLite (as sqlite), Memcache (as memcache), and Memcached (as memcached)."
    ],
    "SessionHandlerInterface": [
        "SessionHandlerInterface is an interface which defines the minimal prototype for creating a custom session handler. In order to pass a custom session handler to session_set_save_handler() using its OOP invocation, the class can implement this interface."
    ],
    "SessionIdInterface": [
        "SessionIdInterface is an interface which defines optional methods for creating a custom session handler. In order to pass a custom session handler to session_set_save_handler() using its OOP invocation, the class can implement this interface."
    ],
    "SessionUpdateTimestampHandlerInterface": [
        "SessionUpdateTimestampHandlerInterface is an interface which defines optional methods for creating a custom session handler. In order to pass a custom session handler to session_set_save_handler() using its OOP invocation, the class can implement this interface."
    ],
    "set_error_handler": [
        "Sets a user-defined error handler function",
        "set_error_handler ( callable $error_handler , int $error_types = E_ALL | E_STRICT ) : mixed"
    ],
    "set_exception_handler": [
        "Sets a user-defined exception handler function",
        "set_exception_handler ( callable $exception_handler ) : callable"
    ],
    "set_include_path": [
        "Sets the include_path configuration option",
        "set_include_path ( string $include_path ) : string|false"
    ],
    "set_time_limit": [
        "Limits the maximum execution time",
        "set_time_limit ( int $seconds ) : bool"
    ],
    "setcookie": [
        "Send a cookie",
        "setcookie ( string $name , string $value = \"\" , int $expires = 0 , string $path = \"\" , string $domain = \"\" , bool $secure = false , bool $httponly = false ) : bool",
        "setcookie ( string $name , string $value = \"\" , array $options = [] ) : bool"
    ],
    "setlocale": [
        "Set locale information",
        "setlocale ( int $category , string $locales , string ...$rest ) : string|false",
        "setlocale ( int $category , array $locale_array ) : string|false"
    ],
    "setproctitle": [
        "Set the process title",
        "setproctitle ( string $title ) : void"
    ],
    "setrawcookie": [
        "Send a cookie without urlencoding the cookie value",
        "setrawcookie ( string $name , string $value = ? , int $expires = 0 , string $path = ? , string $domain = ? , bool $secure = false , bool $httponly = false ) : bool",
        "setrawcookie ( string $name , string $value = ? , array $options = [] ) : bool"
    ],
    "setthreadtitle": [
        "Set the thread title",
        "setthreadtitle ( string $title ) : bool"
    ],
    "settype": [
        "Set the type of a variable",
        "settype ( mixed &$var , string $type ) : bool"
    ],
    "sha1": [
        "Calculate the sha1 hash of a string",
        "sha1 ( string $string , bool $binary = false ) : string"
    ],
    "sha1_file": [
        "Calculate the sha1 hash of a file",
        "sha1_file ( string $filename , bool $binary = false ) : string|false"
    ],
    "shell_exec": [
        "Execute command via shell and return the complete output as a string",
        "shell_exec ( string $cmd ) : string"
    ],
    "shm_attach": [
        "Creates or open a shared memory segment",
        "shm_attach ( int $key , int|null $size = null , int $permissions = 0666 ) : SysvSharedMemory|false"
    ],
    "shm_detach": [
        "Disconnects from shared memory segment",
        "shm_detach ( SysvSharedMemory $shm ) : bool"
    ],
    "shm_get_var": [
        "Returns a variable from shared memory",
        "shm_get_var ( SysvSharedMemory $shm , int $key ) : mixed"
    ],
    "shm_has_var": [
        "Check whether a specific entry exists",
        "shm_has_var ( SysvSharedMemory $shm , int $key ) : bool"
    ],
    "shm_put_var": [
        "Inserts or updates a variable in shared memory",
        "shm_put_var ( SysvSharedMemory $shm , int $key , mixed $value ) : bool"
    ],
    "shm_remove": [
        "Removes shared memory from Unix systems",
        "shm_remove ( SysvSharedMemory $shm ) : bool"
    ],
    "shm_remove_var": [
        "Removes a variable from shared memory",
        "shm_remove_var ( SysvSharedMemory $shm , int $key ) : bool"
    ],
    "Shmop": [
        "A fully opaque class which replaces shmop resources as of PHP 8.0.0."
    ],
    "shmop_close": [
        "Close shared memory block",
        "shmop_close ( Shmop $shmop ) : void"
    ],
    "shmop_delete": [
        "Delete shared memory block",
        "shmop_delete ( Shmop $shmop ) : bool"
    ],
    "shmop_open": [
        "Create or open shared memory block",
        "shmop_open ( int $key , string $mode , int $permissions , int $size ) : Shmop|false"
    ],
    "shmop_read": [
        "Read data from shared memory block",
        "shmop_read ( Shmop $shmop , int $offset , int $size ) : string"
    ],
    "shmop_size": [
        "Get size of shared memory block",
        "shmop_size ( Shmop $shmop ) : int"
    ],
    "shmop_write": [
        "Write data into shared memory block",
        "shmop_write ( Shmop $shmop , string $data , int $offset ) : int"
    ],
    "shuffle": [
        "Shuffle an array",
        "shuffle ( array &$array ) : bool"
    ],
    "similar_text": [
        "Calculate the similarity between two strings",
        "similar_text ( string $string1 , string $string2 , float &$percent = null ) : int"
    ],
    "simplexml_import_dom": [
        "Get a SimpleXMLElement object from a DOM node",
        "simplexml_import_dom ( DOMNode $node , string $class_name = \"SimpleXMLElement\" ) : SimpleXMLElement|null"
    ],
    "simplexml_load_file": [
        "Interprets an XML file into an object",
        "simplexml_load_file ( string $filename , string $class_name = \"SimpleXMLElement\" , int $options = 0 , string $ns = \"\" , bool $is_prefix = false ) : SimpleXMLElement|false"
    ],
    "simplexml_load_string": [
        "Interprets a string of XML into an object",
        "simplexml_load_string ( string $data , string $class_name = \"SimpleXMLElement\" , int $options = 0 , string $ns = \"\" , bool $is_prefix = false ) : SimpleXMLElement|false"
    ],
    "SimpleXMLElement": [
        "Represents an element in an XML document.",
        "new SimpleXMLElement ( string $data , int $options = 0 , bool $data_is_url = false , string $ns = \"\" , bool $is_prefix = false )"
    ],
    "SimpleXMLIterator": [
        "The SimpleXMLIterator provides recursive iteration over all nodes of a SimpleXMLElement object."
    ],
    "sin": [
        "Sine",
        "sin ( float $num ) : float"
    ],
    "sinh": [
        "Hyperbolic sine",
        "sinh ( float $num ) : float"
    ],
    "sleep": [
        "Delay execution",
        "sleep ( int $seconds ) : int"
    ],
    "SNMP": [
        "Represents SNMP session.",
        "new SNMP ( int $version , string $hostname , string $community , int $timeout = -1 , int $retries = -1 )"
    ],
    "snmp2_get": [
        "Fetch an SNMP object",
        "snmp2_get ( string $hostname , string $community , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : stdClass|array|string|bool"
    ],
    "snmp2_getnext": [
        "Fetch the SNMP object which follows the given object id",
        "snmp2_getnext ( string $hostname , string $community , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : stdClass|array|string|bool"
    ],
    "snmp2_real_walk": [
        "Return all objects including their respective object ID within the specified one",
        "snmp2_real_walk ( string $hostname , string $community , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "snmp2_set": [
        "Set the value of an SNMP object",
        "snmp2_set ( string $hostname , string $community , array|string $object_id , array|string $type , array|string $value , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "snmp2_walk": [
        "Fetch all the SNMP objects from an agent",
        "snmp2_walk ( string $hostname , string $community , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "snmp3_get": [
        "Fetch an SNMP object",
        "snmp3_get ( string $hostname , string $security_name , string $security_level , string $auth_protocol , string $auth_passphrase , string $privacy_protocol , string $privacy_passphrase , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : stdClass|array|string|bool"
    ],
    "snmp3_getnext": [
        "Fetch the SNMP object which follows the given object id",
        "snmp3_getnext ( string $hostname , string $security_name , string $security_level , string $auth_protocol , string $auth_passphrase , string $privacy_protocol , string $privacy_passphrase , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : stdClass|array|string|bool"
    ],
    "snmp3_real_walk": [
        "Return all objects including their respective object ID within the specified one",
        "snmp3_real_walk ( string $hostname , string $security_name , string $security_level , string $auth_protocol , string $auth_passphrase , string $privacy_protocol , string $privacy_passphrase , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "snmp3_set": [
        "Set the value of an SNMP object",
        "snmp3_set ( string $hostname , string $security_name , string $security_level , string $auth_protocol , string $auth_passphrase , string $privacy_protocol , string $privacy_passphrase , array|string $object_id , array|string $type , array|string $value , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "snmp3_walk": [
        "Fetch all the SNMP objects from an agent",
        "snmp3_walk ( string $hostname , string $security_name , string $security_level , string $auth_protocol , string $auth_passphrase , string $privacy_protocol , string $privacy_passphrase , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "snmp_get_quick_print": [
        "Fetches the current value of the NET-SNMP library's quick_print setting",
        "snmp_get_quick_print ( ) : bool"
    ],
    "snmp_get_valueretrieval": [
        "Return the method how the SNMP values will be returned",
        "snmp_get_valueretrieval ( ) : int"
    ],
    "snmp_read_mib": [
        "Reads and parses a MIB file into the active MIB tree",
        "snmp_read_mib ( string $filename ) : bool"
    ],
    "snmp_set_enum_print": [
        "Return all values that are enums with their enum value instead of the raw integer",
        "snmp_set_enum_print ( bool $enable ) : bool"
    ],
    "snmp_set_oid_numeric_print": [
        "Set the OID output format",
        "snmp_set_oid_numeric_print ( int $format ) : bool"
    ],
    "snmp_set_oid_output_format": [
        "Set the OID output format",
        "snmp_set_oid_output_format ( int $format ) : bool"
    ],
    "snmp_set_quick_print": [
        "Set the value of enable within the NET-SNMP library",
        "snmp_set_quick_print ( bool $enable ) : bool"
    ],
    "snmp_set_valueretrieval": [
        "Specify the method how the SNMP values will be returned",
        "snmp_set_valueretrieval ( int $method ) : bool"
    ],
    "SNMPException": [
        "Represents an error raised by SNMP. You should not throw a SNMPException from your own code. See Exceptions for more information about Exceptions in PHP."
    ],
    "snmpget": [
        "Fetch an SNMP object",
        "snmpget ( string $hostname , string $community , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : stdClass|array|string|bool"
    ],
    "snmpgetnext": [
        "Fetch the SNMP object which follows the given object id",
        "snmpgetnext ( string $hostname , string $community , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : stdClass|array|string|bool"
    ],
    "snmprealwalk": [
        "Return all objects including their respective object ID within the specified one",
        "snmprealwalk ( string $hostname , string $community , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "snmpset": [
        "Set the value of an SNMP object",
        "snmpset ( string $hostname , string $community , array|string $object_id , array|string $type , array|string $value , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "snmpwalk": [
        "Fetch all the SNMP objects from an agent",
        "snmpwalk ( string $hostname , string $community , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "snmpwalkoid": [
        "Query for a tree of information about a network entity",
        "snmpwalkoid ( string $hostname , string $community , array|string $object_id , int $timeout = -1 , int $retries = -1 ) : array|bool"
    ],
    "SoapClient": [
        "The SoapClient class provides a client for \u00bb\u00a0SOAP 1.1, \u00bb\u00a0SOAP 1.2 servers. It can be used in WSDL or non-WSDL mode.",
        "new SoapClient ( string|null $wsdl , array $options = [] )"
    ],
    "SoapFault": [
        "Represents a SOAP fault.",
        "new SoapFault ( array|string|null $code , string $string , string|null $actor = null , mixed $details = null , string|null $name = null , mixed $headerFault = null )"
    ],
    "SoapHeader": [
        "Represents a SOAP header.",
        "SoapHeader::__construct ( string $namespace , string $name , mixed $data = ? , bool $mustunderstand = ? , string $actor = ? )"
    ],
    "SoapParam": [
        "Represents parameter to a SOAP call.",
        "new SoapParam ( mixed $data , string $name )"
    ],
    "SoapServer": [
        "The SoapServer class provides a server for the \u00bb\u00a0SOAP 1.1 and \u00bb\u00a0SOAP 1.2 protocols. It can be used with or without a WSDL service description.",
        "new SoapServer ( string|null $wsdl , array $options = [] )"
    ],
    "SoapVar": [
        "A class representing a variable or object for use with SOAP services.",
        "new SoapVar ( mixed $data , int|null $encoding , string $typeName = \"\" , string $typeNamespace = \"\" , string $nodeName = \"\" , string $nodeNamespace = \"\" )"
    ],
    "Socket": [
        "A fully opaque class which replaces Socket resources as of PHP 8.0.0."
    ],
    "socket_accept": [
        "Accepts a connection on a socket",
        "socket_accept ( Socket $socket ) : Socket|false"
    ],
    "socket_addrinfo_bind": [
        "Create and bind to a socket from a given addrinfo",
        "socket_addrinfo_bind ( AddressInfo $address ) : Socket|false"
    ],
    "socket_addrinfo_connect": [
        "Create and connect to a socket from a given addrinfo",
        "socket_addrinfo_connect ( AddressInfo $address ) : Socket|false"
    ],
    "socket_addrinfo_explain": [
        "Get information about addrinfo",
        "socket_addrinfo_explain ( AddressInfo $address ) : array"
    ],
    "socket_addrinfo_lookup": [
        "Get array with contents of getaddrinfo about the given hostname",
        "socket_addrinfo_lookup ( string $host , string|null $service = null , array $hints = [] ) : array|false"
    ],
    "socket_bind": [
        "Binds a name to a socket",
        "socket_bind ( Socket $socket , string $address , int $port = 0 ) : bool"
    ],
    "socket_clear_error": [
        "Clears the error on the socket or the last error code",
        "socket_clear_error ( Socket|null $socket = null ) : void"
    ],
    "socket_close": [
        "Closes a Socket instance",
        "socket_close ( Socket $socket ) : void"
    ],
    "socket_cmsg_space": [
        "Calculate message buffer size",
        "socket_cmsg_space ( int $level , int $type , int $num = 0 ) : int|null"
    ],
    "socket_connect": [
        "Initiates a connection on a socket",
        "socket_connect ( Socket $socket , string $address , int|null $port = null ) : bool"
    ],
    "socket_create": [
        "Create a socket (endpoint for communication)",
        "socket_create ( int $domain , int $type , int $protocol ) : Socket|false"
    ],
    "socket_create_listen": [
        "Opens a socket on port to accept connections",
        "socket_create_listen ( int $port , int $backlog = 128 ) : Socket|false"
    ],
    "socket_create_pair": [
        "Creates a pair of indistinguishable sockets and stores them in an array",
        "socket_create_pair ( int $domain , int $type , int $protocol , array &$pair ) : bool"
    ],
    "socket_export_stream": [
        "Export a socket into a stream that encapsulates a socket",
        "socket_export_stream ( Socket $socket ) : resource|false"
    ],
    "socket_get_option": [
        "Gets socket options for the socket",
        "socket_get_option ( Socket $socket , int $level , int $option ) : array|int|false"
    ],
    "socket_getpeername": [
        "Queries the remote side of the given socket which may either result in host\/port or in a Unix filesystem path, dependent on its type",
        "socket_getpeername ( Socket $socket , string &$address , int &$port = null ) : bool"
    ],
    "socket_getsockname": [
        "Queries the local side of the given socket which may either result in host\/port or in a Unix filesystem path, dependent on its type",
        "socket_getsockname ( Socket $socket , string &$address , int &$port = null ) : bool"
    ],
    "socket_import_stream": [
        "Import a stream",
        "socket_import_stream ( resource $stream ) : Socket|false"
    ],
    "socket_last_error": [
        "Returns the last error on the socket",
        "socket_last_error ( Socket|null $socket = null ) : int"
    ],
    "socket_listen": [
        "Listens for a connection on a socket",
        "socket_listen ( Socket $socket , int $backlog = 0 ) : bool"
    ],
    "socket_read": [
        "Reads a maximum of length bytes from a socket",
        "socket_read ( Socket $socket , int $length , int $mode = PHP_BINARY_READ ) : string|false"
    ],
    "socket_recv": [
        "Receives data from a connected socket",
        "socket_recv ( Socket $socket , string|null &$data , int $length , int $flags ) : int|false"
    ],
    "socket_recvfrom": [
        "Receives data from a socket whether or not it is connection-oriented",
        "socket_recvfrom ( Socket $socket , string &$data , int $length , int $flags , string &$address , int &$port = null ) : int|false"
    ],
    "socket_recvmsg": [
        "Read a message",
        "socket_recvmsg ( Socket $socket , array &$message , int $flags = 0 ) : int|false"
    ],
    "socket_select": [
        "Runs the select() system call on the given arrays of sockets with a specified timeout",
        "socket_select ( array|null &$read , array|null &$write , array|null &$except , int|null $seconds , int $microseconds = 0 ) : int|false"
    ],
    "socket_send": [
        "Sends data to a connected socket",
        "socket_send ( Socket $socket , string $data , int $length , int $flags ) : int|false"
    ],
    "socket_sendmsg": [
        "Send a message",
        "socket_sendmsg ( Socket $socket , array $message , int $flags = 0 ) : int|false"
    ],
    "socket_sendto": [
        "Sends a message to a socket, whether it is connected or not",
        "socket_sendto ( Socket $socket , string $data , int $length , int $flags , string $address , int|null $port = null ) : int|false"
    ],
    "socket_set_block": [
        "Sets blocking mode on a socket",
        "socket_set_block ( Socket $socket ) : bool"
    ],
    "socket_set_nonblock": [
        "Sets nonblocking mode for file descriptor fd",
        "socket_set_nonblock ( Socket $socket ) : bool"
    ],
    "socket_set_option": [
        "Sets socket options for the socket",
        "socket_set_option ( Socket $socket , int $level , int $option , array|string|int $value ) : bool"
    ],
    "socket_shutdown": [
        "Shuts down a socket for receiving, sending, or both",
        "socket_shutdown ( Socket $socket , int $mode = 2 ) : bool"
    ],
    "socket_strerror": [
        "Return a string describing a socket error",
        "socket_strerror ( int $error_code ) : string"
    ],
    "socket_write": [
        "Write to a socket",
        "socket_write ( Socket $socket , string $data , int|null $length = null ) : int|false"
    ],
    "socket_wsaprotocol_info_export": [
        "Exports the WSAPROTOCOL_INFO Structure",
        "socket_wsaprotocol_info_export ( Socket $socket , int $process_id ) : string|false"
    ],
    "socket_wsaprotocol_info_import": [
        "Imports a Socket from another Process",
        "socket_wsaprotocol_info_import ( string $info_id ) : Socket|false"
    ],
    "socket_wsaprotocol_info_release": [
        "Releases an exported WSAPROTOCOL_INFO Structure",
        "socket_wsaprotocol_info_release ( string $info_id ) : bool"
    ],
    "sodium_add": [
        "Add large numbers",
        "sodium_add ( string &$string1 , string $string2 ) : void"
    ],
    "sodium_base642bin": [
        "Description",
        "sodium_base642bin ( string $string , int $id , string $ignore = \"\" ) : string"
    ],
    "sodium_bin2base64": [
        "Description",
        "sodium_bin2base64 ( string $string , int $id ) : string"
    ],
    "sodium_bin2hex": [
        "Encode to hexadecimal",
        "sodium_bin2hex ( string $string ) : string"
    ],
    "sodium_compare": [
        "Compare large numbers",
        "sodium_compare ( string $string1 , string $string2 ) : int"
    ],
    "sodium_crypto_aead_aes256gcm_decrypt": [
        "Decrypt in combined mode with precalculation",
        "sodium_crypto_aead_aes256gcm_decrypt ( string $ciphertext , string $additional_data , string $nonce , string $key ) : string|false"
    ],
    "sodium_crypto_aead_aes256gcm_encrypt": [
        "Encrypt in combined mode with precalculation",
        "sodium_crypto_aead_aes256gcm_encrypt ( string $message , string $additional_data , string $nonce , string $key ) : string"
    ],
    "sodium_crypto_aead_aes256gcm_is_available": [
        "Check if hardware supports AES256-GCM",
        "sodium_crypto_aead_aes256gcm_is_available ( ) : bool"
    ],
    "sodium_crypto_aead_aes256gcm_keygen": [
        "Get random bytes for key",
        "sodium_crypto_aead_aes256gcm_keygen ( ) : string"
    ],
    "sodium_crypto_aead_chacha20poly1305_decrypt": [
        "Verify that the ciphertext includes a valid tag",
        "sodium_crypto_aead_chacha20poly1305_decrypt ( string $ciphertext , string $additional_data , string $nonce , string $key ) : string|false"
    ],
    "sodium_crypto_aead_chacha20poly1305_encrypt": [
        "Encrypt a message",
        "sodium_crypto_aead_chacha20poly1305_encrypt ( string $message , string $additional_data , string $nonce , string $key ) : string"
    ],
    "sodium_crypto_aead_chacha20poly1305_ietf_decrypt": [
        "Verify that the ciphertext includes a valid tag",
        "sodium_crypto_aead_chacha20poly1305_ietf_decrypt ( string $ciphertext , string $additional_data , string $nonce , string $key ) : string|false"
    ],
    "sodium_crypto_aead_chacha20poly1305_ietf_encrypt": [
        "Encrypt a message",
        "sodium_crypto_aead_chacha20poly1305_ietf_encrypt ( string $message , string $additional_data , string $nonce , string $key ) : string"
    ],
    "sodium_crypto_aead_chacha20poly1305_ietf_keygen": [
        "Get random bytes for key",
        "sodium_crypto_aead_chacha20poly1305_ietf_keygen ( ) : string"
    ],
    "sodium_crypto_aead_chacha20poly1305_keygen": [
        "Get random bytes for key",
        "sodium_crypto_aead_chacha20poly1305_keygen ( ) : string"
    ],
    "sodium_crypto_aead_xchacha20poly1305_ietf_decrypt": [
        "Description",
        "sodium_crypto_aead_xchacha20poly1305_ietf_decrypt ( string $ciphertext , string $additional_data , string $nonce , string $key ) : string|false"
    ],
    "sodium_crypto_aead_xchacha20poly1305_ietf_encrypt": [
        "Description",
        "sodium_crypto_aead_xchacha20poly1305_ietf_encrypt ( string $message , string $additional_data , string $nonce , string $key ) : string"
    ],
    "sodium_crypto_aead_xchacha20poly1305_ietf_keygen": [
        "Description",
        "sodium_crypto_aead_xchacha20poly1305_ietf_keygen ( ) : string"
    ],
    "sodium_crypto_auth": [
        "Compute a tag for the message",
        "sodium_crypto_auth ( string $message , string $key ) : string"
    ],
    "sodium_crypto_auth_keygen": [
        "Get random bytes for key",
        "sodium_crypto_auth_keygen ( ) : string"
    ],
    "sodium_crypto_auth_verify": [
        "Verifies that the tag is valid for the message",
        "sodium_crypto_auth_verify ( string $mac , string $message , string $key ) : bool"
    ],
    "sodium_crypto_box": [
        "Encrypt a message",
        "sodium_crypto_box ( string $message , string $nonce , string $key_pair ) : string"
    ],
    "sodium_crypto_box_keypair": [
        "Randomly generate a secret key and a corresponding public key",
        "sodium_crypto_box_keypair ( ) : string"
    ],
    "sodium_crypto_box_keypair_from_secretkey_and_publickey": [
        "Description",
        "sodium_crypto_box_keypair_from_secretkey_and_publickey ( string $secret_key , string $public_key ) : string"
    ],
    "sodium_crypto_box_open": [
        "Verify and decrypt a ciphertext",
        "sodium_crypto_box_open ( string $ciphertext , string $nonce , string $key_pair ) : string|false"
    ],
    "sodium_crypto_box_publickey": [
        "Description",
        "sodium_crypto_box_publickey ( string $key_pair ) : string"
    ],
    "sodium_crypto_box_publickey_from_secretkey": [
        "Description",
        "sodium_crypto_box_publickey_from_secretkey ( string $secret_key ) : string"
    ],
    "sodium_crypto_box_seal": [
        "Encrypt a message",
        "sodium_crypto_box_seal ( string $message , string $key_pair ) : string"
    ],
    "sodium_crypto_box_seal_open": [
        "Decrypt the ciphertext",
        "sodium_crypto_box_seal_open ( string $ciphertext , string $key_pair ) : string|false"
    ],
    "sodium_crypto_box_secretkey": [
        "Description",
        "sodium_crypto_box_secretkey ( string $key_pair ) : string"
    ],
    "sodium_crypto_box_seed_keypair": [
        "Deterministically derive the key pair from a single key",
        "sodium_crypto_box_seed_keypair ( string $seed ) : string"
    ],
    "sodium_crypto_generichash": [
        "Get a hash of the message",
        "sodium_crypto_generichash ( string $message , string $key = \"\" , int $length = SODIUM_CRYPTO_GENERICHASH_BYTES ) : string"
    ],
    "sodium_crypto_generichash_final": [
        "Complete the hash",
        "sodium_crypto_generichash_final ( string &$state , int $length = SODIUM_CRYPTO_GENERICHASH_BYTES ) : string"
    ],
    "sodium_crypto_generichash_init": [
        "Initialize a hash",
        "sodium_crypto_generichash_init ( string $key = \"\" , int $length = SODIUM_CRYPTO_GENERICHASH_BYTES ) : string"
    ],
    "sodium_crypto_generichash_keygen": [
        "Get random bytes for key",
        "sodium_crypto_generichash_keygen ( ) : string"
    ],
    "sodium_crypto_generichash_update": [
        "Add message to a hash",
        "sodium_crypto_generichash_update ( string &$state , string $message ) : bool"
    ],
    "sodium_crypto_kdf_derive_from_key": [
        "Derive a subkey",
        "sodium_crypto_kdf_derive_from_key ( int $subkey_length , int $subkey_id , string $context , string $key ) : string"
    ],
    "sodium_crypto_kdf_keygen": [
        "Get random bytes for key",
        "sodium_crypto_kdf_keygen ( ) : string"
    ],
    "sodium_crypto_kx_client_session_keys": [
        "Description",
        "sodium_crypto_kx_client_session_keys ( string $client_key_pair , string $server_key ) : array"
    ],
    "sodium_crypto_kx_keypair": [
        "Creates a new sodium keypair",
        "sodium_crypto_kx_keypair ( ) : string"
    ],
    "sodium_crypto_kx_publickey": [
        "Description",
        "sodium_crypto_kx_publickey ( string $key_pair ) : string"
    ],
    "sodium_crypto_kx_secretkey": [
        "Description",
        "sodium_crypto_kx_secretkey ( string $key_pair ) : string"
    ],
    "sodium_crypto_kx_seed_keypair": [
        "Description",
        "sodium_crypto_kx_seed_keypair ( string $seed ) : string"
    ],
    "sodium_crypto_kx_server_session_keys": [
        "Description",
        "sodium_crypto_kx_server_session_keys ( string $server_key_pair , string $client_key ) : array"
    ],
    "sodium_crypto_pwhash": [
        "Derive a key from a password",
        "sodium_crypto_pwhash ( int $length , string $password , string $salt , int $opslimit , int $memlimit , int $algo = SODIUM_CRYPTO_PWHASH_ALG_DEFAULT ) : string"
    ],
    "sodium_crypto_pwhash_scryptsalsa208sha256": [
        "Derives a key from a password",
        "sodium_crypto_pwhash_scryptsalsa208sha256 ( int $length , string $password , string $salt , int $opslimit , int $memlimit ) : string"
    ],
    "sodium_crypto_pwhash_scryptsalsa208sha256_str": [
        "Get an ASCII encoded hash",
        "sodium_crypto_pwhash_scryptsalsa208sha256_str ( string $password , int $opslimit , int $memlimit ) : string"
    ],
    "sodium_crypto_pwhash_scryptsalsa208sha256_str_verify": [
        "Verify that the password is a valid password verification string",
        "sodium_crypto_pwhash_scryptsalsa208sha256_str_verify ( string $hash , string $password ) : bool"
    ],
    "sodium_crypto_pwhash_str": [
        "Get an ASCII-encoded hash",
        "sodium_crypto_pwhash_str ( string $password , int $opslimit , int $memlimit ) : string"
    ],
    "sodium_crypto_pwhash_str_needs_rehash": [
        "Description",
        "sodium_crypto_pwhash_str_needs_rehash ( string $password , int $opslimit , int $memlimit ) : bool"
    ],
    "sodium_crypto_pwhash_str_verify": [
        "Verifies that a password matches a hash",
        "sodium_crypto_pwhash_str_verify ( string $hash , string $password ) : bool"
    ],
    "sodium_crypto_scalarmult": [
        "Compute a shared secret given a user's secret key and another user's public key",
        "sodium_crypto_scalarmult ( string $n , string $p ) : string"
    ],
    "sodium_crypto_secretbox": [
        "Encrypt a message",
        "sodium_crypto_secretbox ( string $message , string $nonce , string $key ) : string"
    ],
    "sodium_crypto_secretbox_keygen": [
        "Get random bytes for key",
        "sodium_crypto_secretbox_keygen ( ) : string"
    ],
    "sodium_crypto_secretbox_open": [
        "Verify and decrypt a ciphertext",
        "sodium_crypto_secretbox_open ( string $ciphertext , string $nonce , string $key ) : string|false"
    ],
    "sodium_crypto_secretstream_xchacha20poly1305_init_pull": [
        "Description",
        "sodium_crypto_secretstream_xchacha20poly1305_init_pull ( string $header , string $key ) : string"
    ],
    "sodium_crypto_secretstream_xchacha20poly1305_init_push": [
        "Description",
        "sodium_crypto_secretstream_xchacha20poly1305_init_push ( string $key ) : array"
    ],
    "sodium_crypto_secretstream_xchacha20poly1305_keygen": [
        "Description",
        "sodium_crypto_secretstream_xchacha20poly1305_keygen ( ) : string"
    ],
    "sodium_crypto_secretstream_xchacha20poly1305_pull": [
        "Description",
        "sodium_crypto_secretstream_xchacha20poly1305_pull ( string &$state , string $ciphertext , string $additional_data = \"\" ) : array|false"
    ],
    "sodium_crypto_secretstream_xchacha20poly1305_push": [
        "Description",
        "sodium_crypto_secretstream_xchacha20poly1305_push ( string &$state , string $message , string $additional_data = \"\" , int $tag = SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_MESSAGE ) : string"
    ],
    "sodium_crypto_secretstream_xchacha20poly1305_rekey": [
        "Description",
        "sodium_crypto_secretstream_xchacha20poly1305_rekey ( string &$state ) : void"
    ],
    "sodium_crypto_shorthash": [
        "Compute a fixed-size fingerprint for the message",
        "sodium_crypto_shorthash ( string $message , string $key ) : string"
    ],
    "sodium_crypto_shorthash_keygen": [
        "Get random bytes for key",
        "sodium_crypto_shorthash_keygen ( ) : string"
    ],
    "sodium_crypto_sign": [
        "Sign a message",
        "sodium_crypto_sign ( string $message , string $secret_key ) : string"
    ],
    "sodium_crypto_sign_detached": [
        "Sign the message",
        "sodium_crypto_sign_detached ( string $message , string $secret_key ) : string"
    ],
    "sodium_crypto_sign_ed25519_pk_to_curve25519": [
        "Convert an Ed25519 public key to a Curve25519 public key",
        "sodium_crypto_sign_ed25519_pk_to_curve25519 ( string $public_key ) : string"
    ],
    "sodium_crypto_sign_ed25519_sk_to_curve25519": [
        "Convert an Ed25519 secret key to a Curve25519 secret key",
        "sodium_crypto_sign_ed25519_sk_to_curve25519 ( string $secret_key ) : string"
    ],
    "sodium_crypto_sign_keypair": [
        "Randomly generate a secret key and a corresponding public key",
        "sodium_crypto_sign_keypair ( ) : string"
    ],
    "sodium_crypto_sign_keypair_from_secretkey_and_publickey": [
        "Description",
        "sodium_crypto_sign_keypair_from_secretkey_and_publickey ( string $secret_key , string $public_key ) : string"
    ],
    "sodium_crypto_sign_open": [
        "Check that the signed message has a valid signature",
        "sodium_crypto_sign_open ( string $ciphertext , string $public_key ) : string|false"
    ],
    "sodium_crypto_sign_publickey": [
        "Description",
        "sodium_crypto_sign_publickey ( string $key_pair ) : string"
    ],
    "sodium_crypto_sign_publickey_from_secretkey": [
        "Extract the public key from the secret key",
        "sodium_crypto_sign_publickey_from_secretkey ( string $secret_key ) : string"
    ],
    "sodium_crypto_sign_secretkey": [
        "Description",
        "sodium_crypto_sign_secretkey ( string $key_pair ) : string"
    ],
    "sodium_crypto_sign_seed_keypair": [
        "Deterministically derive the key pair from a single key",
        "sodium_crypto_sign_seed_keypair ( string $seed ) : string"
    ],
    "sodium_crypto_sign_verify_detached": [
        "Verify signature for the message",
        "sodium_crypto_sign_verify_detached ( string $signature , string $message , string $public_key ) : bool"
    ],
    "sodium_crypto_stream": [
        "Generate a deterministic sequence of bytes from a seed",
        "sodium_crypto_stream ( int $length , string $nonce , string $key ) : string"
    ],
    "sodium_crypto_stream_keygen": [
        "Get random bytes for key",
        "sodium_crypto_stream_keygen ( ) : string"
    ],
    "sodium_crypto_stream_xor": [
        "Encrypt a message",
        "sodium_crypto_stream_xor ( string $message , string $nonce , string $key ) : string"
    ],
    "sodium_hex2bin": [
        "Decodes a hexadecimally encoded binary string",
        "sodium_hex2bin ( string $string , string $ignore = \"\" ) : string"
    ],
    "sodium_increment": [
        "Increment large number",
        "sodium_increment ( string &$string ) : void"
    ],
    "sodium_memcmp": [
        "Test for equality in constant-time",
        "sodium_memcmp ( string $string1 , string $string2 ) : int"
    ],
    "sodium_memzero": [
        "Overwrite buf with zeros",
        "sodium_memzero ( string &$string ) : void"
    ],
    "sodium_pad": [
        "Add padding data",
        "sodium_pad ( string $string , int $length ) : string"
    ],
    "sodium_unpad": [
        "Remove padding data",
        "sodium_unpad ( string $string , int $block_size ) : string"
    ],
    "SodiumException": [
        "Exceptions thrown by the sodium functions."
    ],
    "solr_get_version": [
        "Returns the current version of the Apache Solr extension",
        "solr_get_version ( ) : string"
    ],
    "SolrClient": [
        "Used to send requests to a Solr server. Currently, cloning and serialization of SolrClient instances is not supported.",
        "new SolrClient ( array $clientOptions )"
    ],
    "SolrClientException": [
        "An exception thrown when there is an error while making a request to the server from the client."
    ],
    "SolrCollapseFunction": [
        "Constructor",
        "new SolrCollapseFunction ( string $field = ? )"
    ],
    "SolrDisMaxQuery": [
        "Class Constructor",
        "new SolrDisMaxQuery ( string $q = ? )"
    ],
    "SolrDocument": [
        "Represents a Solr document retrieved from a query response.",
        "new SolrDocument ( )"
    ],
    "SolrDocumentField": [
        "This represents a field in a Solr document. All its properties are read-only.",
        "new SolrDocumentField ( )"
    ],
    "SolrException": [
        "This is the base class for all exception thrown by the Solr extension classes."
    ],
    "SolrGenericResponse": [
        "Represents a response from the solr server.",
        "new SolrGenericResponse ( )"
    ],
    "SolrIllegalArgumentException": [
        "This object is thrown when an illegal or invalid argument is passed to a method."
    ],
    "SolrIllegalOperationException": [
        "This object is thrown when an illegal or unsupported operation is performed on an object."
    ],
    "SolrInputDocument": [
        "This class represents a Solr document that is about to be submitted to the Solr index.",
        "new SolrInputDocument ( )"
    ],
    "SolrModifiableParams": [
        "Represents a collection of name-value pairs sent to the Solr server during a request.",
        "new SolrModifiableParams ( )"
    ],
    "SolrObject": [
        "This is an object whose properties can also by accessed using the array syntax. All its properties are read-only.",
        "new SolrObject ( )"
    ],
    "SolrParams": [
        "Represents a collection of name-value pairs sent to the Solr server during a request."
    ],
    "SolrPingResponse": [
        "Represents a response to a ping request to the server",
        "new SolrPingResponse ( )"
    ],
    "SolrQuery": [
        "Represents a collection of name-value pairs sent to the Solr server during a request.",
        "new SolrQuery ( string $q = ? )"
    ],
    "SolrQueryResponse": [
        "Represents a response to a query request.",
        "new SolrQueryResponse ( )"
    ],
    "SolrResponse": [
        "Represents a response from the Solr server."
    ],
    "SolrServerException": [
        "An exception thrown when there is an error produced by the Solr Server itself."
    ],
    "SolrUpdateResponse": [
        "Represents a response to an update request.",
        "new SolrUpdateResponse ( )"
    ],
    "SolrUtils": [
        "Contains utility methods for retrieving the current extension version and preparing query phrases."
    ],
    "sort": [
        "Sort an array",
        "sort ( array &$array , int $flags = SORT_REGULAR ) : bool"
    ],
    "soundex": [
        "Calculate the soundex key of a string",
        "soundex ( string $string ) : string"
    ],
    "SphinxClient": [
        "The SphinxClient class provides object-oriented interface to Sphinx.",
        "new SphinxClient ( )"
    ],
    "spl_autoload": [
        "Default implementation for __autoload()",
        "spl_autoload ( string $class_name , string $file_extensions = spl_autoload_extensions() ) : void"
    ],
    "spl_autoload_call": [
        "Try all registered __autoload() functions to load the requested class",
        "spl_autoload_call ( string $class_name ) : void"
    ],
    "spl_autoload_extensions": [
        "Register and return default file extensions for spl_autoload",
        "spl_autoload_extensions ( string $file_extensions = ? ) : string"
    ],
    "spl_autoload_functions": [
        "Return all registered __autoload() functions",
        "spl_autoload_functions ( ) : array"
    ],
    "spl_autoload_register": [
        "Register given function as __autoload() implementation",
        "spl_autoload_register ( callable $autoload_function = ? , bool $throw = true , bool $prepend = false ) : bool"
    ],
    "spl_autoload_unregister": [
        "Unregister given function as __autoload() implementation",
        "spl_autoload_unregister ( mixed $autoload_function ) : bool"
    ],
    "spl_classes": [
        "Return available SPL classes",
        "spl_classes ( ) : array"
    ],
    "spl_object_hash": [
        "Return hash id for given object",
        "spl_object_hash ( object $obj ) : string"
    ],
    "spl_object_id": [
        "Return the integer object handle for given object",
        "spl_object_id ( object $obj ) : int"
    ],
    "SplDoublyLinkedList": [
        "The SplDoublyLinkedList class provides the main functionalities of a doubly linked list.",
        "new SplDoublyLinkedList ( )"
    ],
    "SplFileInfo": [
        "The SplFileInfo class offers a high-level object oriented interface to information for an individual file.",
        "new SplFileInfo ( string $file_name )"
    ],
    "SplFileObject": [
        "The SplFileObject class offers an object oriented interface for a file.",
        "new SplFileObject ( string $filename , string $open_mode = \"r\" , bool $use_include_path = false , resource $context = ? )"
    ],
    "SplFixedArray": [
        "The SplFixedArray class provides the main functionalities of array. The main difference between a SplFixedArray and a normal PHP array is that the SplFixedArray must be resized manually and allows only integers within the range as indexes. The advantage is that it uses less memory than a standard array.",
        "new SplFixedArray ( int $size = 0 )"
    ],
    "SplHeap": [
        "The SplHeap class provides the main functionalities of a Heap.",
        "new SplHeap ( )"
    ],
    "split": [
        "Split string into array by regular expression",
        "split ( string $pattern , string $string , int $limit = -1 ) : array"
    ],
    "spliti": [
        "Split string into array by regular expression case insensitive",
        "spliti ( string $pattern , string $string , int $limit = -1 ) : array"
    ],
    "SplMaxHeap": [
        "The SplMaxHeap class provides the main functionalities of a heap, keeping the maximum on the top."
    ],
    "SplMinHeap": [
        "The SplMinHeap class provides the main functionalities of a heap, keeping the minimum on the top."
    ],
    "SplObjectStorage": [
        "The SplObjectStorage class provides a map from objects to data or, by ignoring data, an object set. This dual purpose can be useful in many cases involving the need to uniquely identify objects."
    ],
    "SplObserver": [
        "The SplObserver interface is used alongside SplSubject to implement the Observer Design Pattern."
    ],
    "SplPriorityQueue": [
        "The SplPriorityQueue class provides the main functionalities of a prioritized queue, implemented using a max heap.",
        "new SplPriorityQueue ( )"
    ],
    "SplQueue": [
        "The SplQueue class provides the main functionalities of a queue implemented using a doubly linked list.",
        "new SplQueue ( )"
    ],
    "SplStack": [
        "The SplStack class provides the main functionalities of a stack implemented using a doubly linked list.",
        "new SplStack ( )"
    ],
    "SplSubject": [
        "The SplSubject interface is used alongside SplObserver to implement the Observer Design Pattern."
    ],
    "SplTempFileObject": [
        "The SplTempFileObject class offers an object oriented interface for a temporary file.",
        "new SplTempFileObject ( int $max_memory = ? )"
    ],
    "Spoofchecker": [
        "This class is provided because Unicode contains large number of characters and incorporates the varied writing systems of the world and their incorrect usage can expose programs or systems to possible security attacks using characters similarity.",
        "new Spoofchecker ( )"
    ],
    "sprintf": [
        "Return a formatted string",
        "sprintf ( string $format , mixed ...$values ) : string"
    ],
    "sql_regcase": [
        "Make regular expression for case insensitive match",
        "sql_regcase ( string $string ) : string"
    ],
    "SQLite3": [
        "A class that interfaces SQLite 3 databases.",
        "new SQLite3 ( string $filename , int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE , string $encryptionKey = \"\" )"
    ],
    "SQLite3Result": [
        "A class that handles result sets for the SQLite 3 extension."
    ],
    "SQLite3Stmt": [
        "A class that handles prepared statements for the SQLite 3 extension."
    ],
    "sqlsrv_begin_transaction": [
        "Begins a database transaction",
        "sqlsrv_begin_transaction ( resource $conn ) : bool"
    ],
    "sqlsrv_cancel": [
        "Cancels a statement",
        "sqlsrv_cancel ( resource $stmt ) : bool"
    ],
    "sqlsrv_client_info": [
        "Returns information about the client and specified connection",
        "sqlsrv_client_info ( resource $conn ) : array"
    ],
    "sqlsrv_close": [
        "Closes an open connection and releases resourses associated with the connection",
        "sqlsrv_close ( resource $conn ) : bool"
    ],
    "sqlsrv_commit": [
        "Commits a transaction that was begun with sqlsrv_begin_transaction()",
        "sqlsrv_commit ( resource $conn ) : bool"
    ],
    "sqlsrv_configure": [
        "Changes the driver error handling and logging configurations",
        "sqlsrv_configure ( string $setting , mixed $value ) : bool"
    ],
    "sqlsrv_connect": [
        "Opens a connection to a Microsoft SQL Server database",
        "sqlsrv_connect ( string $serverName , array $connectionInfo = ? ) : resource"
    ],
    "sqlsrv_errors": [
        "Returns error and warning information about the last SQLSRV operation performed",
        "sqlsrv_errors ( int $errorsOrWarnings = ? ) : mixed"
    ],
    "sqlsrv_execute": [
        "Executes a statement prepared with sqlsrv_prepare()",
        "sqlsrv_execute ( resource $stmt ) : bool"
    ],
    "sqlsrv_fetch": [
        "Makes the next row in a result set available for reading",
        "sqlsrv_fetch ( resource $stmt , int $row = ? , int $offset = ? ) : mixed"
    ],
    "sqlsrv_fetch_array": [
        "Returns a row as an array",
        "sqlsrv_fetch_array ( resource $stmt , int $fetchType = ? , int $row = ? , int $offset = ? ) : array"
    ],
    "sqlsrv_fetch_object": [
        "Retrieves the next row of data in a result set as an object",
        "sqlsrv_fetch_object ( resource $stmt , string $className = ? , array $ctorParams = ? , int $row = ? , int $offset = ? ) : mixed"
    ],
    "sqlsrv_field_metadata": [
        "Retrieves metadata for the fields of a statement prepared by \n  sqlsrv_prepare() or sqlsrv_query()",
        "sqlsrv_field_metadata ( resource $stmt ) : mixed"
    ],
    "sqlsrv_free_stmt": [
        "Frees all resources for the specified statement",
        "sqlsrv_free_stmt ( resource $stmt ) : bool"
    ],
    "sqlsrv_get_config": [
        "Returns the value of the specified configuration setting",
        "sqlsrv_get_config ( string $setting ) : mixed"
    ],
    "sqlsrv_get_field": [
        "Gets field data from the currently selected row",
        "sqlsrv_get_field ( resource $stmt , int $fieldIndex , int $getAsType = ? ) : mixed"
    ],
    "sqlsrv_has_rows": [
        "Indicates whether the specified statement has rows",
        "sqlsrv_has_rows ( resource $stmt ) : bool"
    ],
    "sqlsrv_next_result": [
        "Makes the next result of the specified statement active",
        "sqlsrv_next_result ( resource $stmt ) : mixed"
    ],
    "sqlsrv_num_fields": [
        "Retrieves the number of fields (columns) on a statement",
        "sqlsrv_num_fields ( resource $stmt ) : mixed"
    ],
    "sqlsrv_num_rows": [
        "Retrieves the number of rows in a result set",
        "sqlsrv_num_rows ( resource $stmt ) : mixed"
    ],
    "sqlsrv_prepare": [
        "Prepares a query for execution",
        "sqlsrv_prepare ( resource $conn , string $sql , array $params = ? , array $options = ? ) : mixed"
    ],
    "sqlsrv_query": [
        "Prepares and executes a query",
        "sqlsrv_query ( resource $conn , string $sql , array $params = ? , array $options = ? ) : mixed"
    ],
    "sqlsrv_rollback": [
        "Rolls back a transaction that was begun with \n  sqlsrv_begin_transaction()",
        "sqlsrv_rollback ( resource $conn ) : bool"
    ],
    "sqlsrv_rows_affected": [
        "Returns the number of rows modified by the last INSERT, UPDATE, or \n  DELETE query executed",
        "sqlsrv_rows_affected ( resource $stmt ) : int"
    ],
    "sqlsrv_send_stream_data": [
        "Sends data from parameter streams to the server",
        "sqlsrv_send_stream_data ( resource $stmt ) : bool"
    ],
    "sqlsrv_server_info": [
        "Returns information about the server",
        "sqlsrv_server_info ( resource $conn ) : array"
    ],
    "sqrt": [
        "Square root",
        "sqrt ( float $num ) : float"
    ],
    "srand": [
        "Seed the random number generator",
        "srand ( int $seed = ? ) : void"
    ],
    "sscanf": [
        "Parses input from a string according to a format",
        "sscanf ( string $string , string $format , mixed &...$vars ) : array|int|null"
    ],
    "ssdeep_fuzzy_compare": [
        "Calculates the match score between two fuzzy hash signatures",
        "ssdeep_fuzzy_compare ( string $signature1 , string $signature2 ) : int"
    ],
    "ssdeep_fuzzy_hash": [
        "Create a fuzzy hash from a string",
        "ssdeep_fuzzy_hash ( string $to_hash ) : string"
    ],
    "ssdeep_fuzzy_hash_filename": [
        "Create a fuzzy hash from a file",
        "ssdeep_fuzzy_hash_filename ( string $file_name ) : string"
    ],
    "ssh2_auth_agent": [
        "Authenticate over SSH using the ssh agent",
        "ssh2_auth_agent ( resource $session , string $username ) : bool"
    ],
    "ssh2_auth_hostbased_file": [
        "Authenticate using a public hostkey",
        "ssh2_auth_hostbased_file ( resource $session , string $username , string $hostname , string $pubkeyfile , string $privkeyfile , string $passphrase = ? , string $local_username = ? ) : bool"
    ],
    "ssh2_auth_none": [
        "Authenticate as \"none\"",
        "ssh2_auth_none ( resource $session , string $username ) : mixed"
    ],
    "ssh2_auth_password": [
        "Authenticate over SSH using a plain password",
        "ssh2_auth_password ( resource $session , string $username , string $password ) : bool"
    ],
    "ssh2_auth_pubkey_file": [
        "Authenticate using a public key",
        "ssh2_auth_pubkey_file ( resource $session , string $username , string $pubkeyfile , string $privkeyfile , string $passphrase = ? ) : bool"
    ],
    "ssh2_connect": [
        "Connect to an SSH server",
        "ssh2_connect ( string $host , int $port = 22 , array $methods = ? , array $callbacks = ? ) : resource"
    ],
    "ssh2_disconnect": [
        "Close a connection to a remote SSH server",
        "ssh2_disconnect ( resource $session ) : bool"
    ],
    "ssh2_exec": [
        "Execute a command on a remote server",
        "ssh2_exec ( resource $session , string $command , string $pty = ? , array $env = ? , int $width = 80 , int $height = 25 , int $width_height_type = SSH2_TERM_UNIT_CHARS ) : resource|false"
    ],
    "ssh2_fetch_stream": [
        "Fetch an extended data stream",
        "ssh2_fetch_stream ( resource $channel , int $streamid ) : resource"
    ],
    "ssh2_fingerprint": [
        "Retrieve fingerprint of remote server",
        "ssh2_fingerprint ( resource $session , int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX ) : string"
    ],
    "ssh2_forward_accept": [
        "Accept a connection created by a listener",
        "ssh2_forward_accept ( resource $listener ) : resource|false"
    ],
    "ssh2_forward_listen": [
        "Bind a port on the remote server and listen for connections",
        "ssh2_forward_listen ( resource $session , int $port , string $host = ? , int $max_connections = 16 ) : resource|false"
    ],
    "ssh2_methods_negotiated": [
        "Return list of negotiated methods",
        "ssh2_methods_negotiated ( resource $session ) : array"
    ],
    "ssh2_poll": [
        "Poll the channels\/listeners\/streams for events",
        "ssh2_poll ( array &$desc , int $timeout = 30 ) : int"
    ],
    "ssh2_publickey_add": [
        "Add an authorized publickey",
        "ssh2_publickey_add ( resource $pkey , string $algoname , string $blob , bool $overwrite = false , array $attributes = ? ) : bool"
    ],
    "ssh2_publickey_init": [
        "Initialize Publickey subsystem",
        "ssh2_publickey_init ( resource $session ) : resource|false"
    ],
    "ssh2_publickey_list": [
        "List currently authorized publickeys",
        "ssh2_publickey_list ( resource $pkey ) : array"
    ],
    "ssh2_publickey_remove": [
        "Remove an authorized publickey",
        "ssh2_publickey_remove ( resource $pkey , string $algoname , string $blob ) : bool"
    ],
    "ssh2_scp_recv": [
        "Request a file via SCP",
        "ssh2_scp_recv ( resource $session , string $remote_file , string $local_file ) : bool"
    ],
    "ssh2_scp_send": [
        "Send a file via SCP",
        "ssh2_scp_send ( resource $session , string $local_file , string $remote_file , int $create_mode = 0644 ) : bool"
    ],
    "ssh2_sftp": [
        "Initialize SFTP subsystem",
        "ssh2_sftp ( resource $session ) : resource|false"
    ],
    "ssh2_sftp_chmod": [
        "Changes file mode",
        "ssh2_sftp_chmod ( resource $sftp , string $filename , int $mode ) : bool"
    ],
    "ssh2_sftp_lstat": [
        "Stat a symbolic link",
        "ssh2_sftp_lstat ( resource $sftp , string $path ) : array"
    ],
    "ssh2_sftp_mkdir": [
        "Create a directory",
        "ssh2_sftp_mkdir ( resource $sftp , string $dirname , int $mode = 0777 , bool $recursive = false ) : bool"
    ],
    "ssh2_sftp_readlink": [
        "Return the target of a symbolic link",
        "ssh2_sftp_readlink ( resource $sftp , string $link ) : string"
    ],
    "ssh2_sftp_realpath": [
        "Resolve the realpath of a provided path string",
        "ssh2_sftp_realpath ( resource $sftp , string $filename ) : string"
    ],
    "ssh2_sftp_rename": [
        "Rename a remote file",
        "ssh2_sftp_rename ( resource $sftp , string $from , string $to ) : bool"
    ],
    "ssh2_sftp_rmdir": [
        "Remove a directory",
        "ssh2_sftp_rmdir ( resource $sftp , string $dirname ) : bool"
    ],
    "ssh2_sftp_stat": [
        "Stat a file on a remote filesystem",
        "ssh2_sftp_stat ( resource $sftp , string $path ) : array"
    ],
    "ssh2_sftp_symlink": [
        "Create a symlink",
        "ssh2_sftp_symlink ( resource $sftp , string $target , string $link ) : bool"
    ],
    "ssh2_sftp_unlink": [
        "Delete a file",
        "ssh2_sftp_unlink ( resource $sftp , string $filename ) : bool"
    ],
    "ssh2_shell": [
        "Request an interactive shell",
        "ssh2_shell ( resource $session , string $term_type = \"vanilla\" , array|null $env = null , int $width = 80 , int $height = 25 , int $width_height_type = SSH2_TERM_UNIT_CHARS ) : resource|false"
    ],
    "ssh2_tunnel": [
        "Open a tunnel through a remote server",
        "ssh2_tunnel ( resource $session , string $host , int $port ) : resource"
    ],
    "stat": [
        "Gives information about a file",
        "stat ( string $filename ) : array|false"
    ],
    "stats_absolute_deviation": [
        "Returns the absolute deviation of an array of values",
        "stats_absolute_deviation ( array $a ) : float"
    ],
    "stats_cdf_beta": [
        "Calculates any one parameter of the beta distribution given values for the others",
        "stats_cdf_beta ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_binomial": [
        "Calculates any one parameter of the binomial distribution given values for the others",
        "stats_cdf_binomial ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_cauchy": [
        "Calculates any one parameter of the Cauchy distribution given values for the others",
        "stats_cdf_cauchy ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_chisquare": [
        "Calculates any one parameter of the chi-square distribution given values for the others",
        "stats_cdf_chisquare ( float $par1 , float $par2 , int $which ) : float"
    ],
    "stats_cdf_exponential": [
        "Calculates any one parameter of the exponential distribution given values for the others",
        "stats_cdf_exponential ( float $par1 , float $par2 , int $which ) : float"
    ],
    "stats_cdf_f": [
        "Calculates any one parameter of the F distribution given values for the others",
        "stats_cdf_f ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_gamma": [
        "Calculates any one parameter of the gamma distribution given values for the others",
        "stats_cdf_gamma ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_laplace": [
        "Calculates any one parameter of the Laplace distribution given values for the others",
        "stats_cdf_laplace ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_logistic": [
        "Calculates any one parameter of the logistic distribution given values for the others",
        "stats_cdf_logistic ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_negative_binomial": [
        "Calculates any one parameter of the negative binomial distribution given values for the others",
        "stats_cdf_negative_binomial ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_noncentral_chisquare": [
        "Calculates any one parameter of the non-central chi-square distribution given values for the others",
        "stats_cdf_noncentral_chisquare ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_noncentral_f": [
        "Calculates any one parameter of the non-central F distribution given values for the others",
        "stats_cdf_noncentral_f ( float $par1 , float $par2 , float $par3 , float $par4 , int $which ) : float"
    ],
    "stats_cdf_noncentral_t": [
        "Calculates any one parameter of the non-central t-distribution give values for the others",
        "stats_cdf_noncentral_t ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_normal": [
        "Calculates any one parameter of the normal distribution given values for the others",
        "stats_cdf_normal ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_poisson": [
        "Calculates any one parameter of the Poisson distribution given values for the others",
        "stats_cdf_poisson ( float $par1 , float $par2 , int $which ) : float"
    ],
    "stats_cdf_t": [
        "Calculates any one parameter of the t-distribution given values for the others",
        "stats_cdf_t ( float $par1 , float $par2 , int $which ) : float"
    ],
    "stats_cdf_uniform": [
        "Calculates any one parameter of the uniform distribution given values for the others",
        "stats_cdf_uniform ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_cdf_weibull": [
        "Calculates any one parameter of the Weibull distribution given values for the others",
        "stats_cdf_weibull ( float $par1 , float $par2 , float $par3 , int $which ) : float"
    ],
    "stats_covariance": [
        "Computes the covariance of two data sets",
        "stats_covariance ( array $a , array $b ) : float"
    ],
    "stats_dens_beta": [
        "Probability density function of the beta distribution",
        "stats_dens_beta ( float $x , float $a , float $b ) : float"
    ],
    "stats_dens_cauchy": [
        "Probability density function of the Cauchy distribution",
        "stats_dens_cauchy ( float $x , float $ave , float $stdev ) : float"
    ],
    "stats_dens_chisquare": [
        "Probability density function of the chi-square distribution",
        "stats_dens_chisquare ( float $x , float $dfr ) : float"
    ],
    "stats_dens_exponential": [
        "Probability density function of the exponential distribution",
        "stats_dens_exponential ( float $x , float $scale ) : float"
    ],
    "stats_dens_f": [
        "Probability density function of the F distribution",
        "stats_dens_f ( float $x , float $dfr1 , float $dfr2 ) : float"
    ],
    "stats_dens_gamma": [
        "Probability density function of the gamma distribution",
        "stats_dens_gamma ( float $x , float $shape , float $scale ) : float"
    ],
    "stats_dens_laplace": [
        "Probability density function of the Laplace distribution",
        "stats_dens_laplace ( float $x , float $ave , float $stdev ) : float"
    ],
    "stats_dens_logistic": [
        "Probability density function of the logistic distribution",
        "stats_dens_logistic ( float $x , float $ave , float $stdev ) : float"
    ],
    "stats_dens_normal": [
        "Probability density function of the normal distribution",
        "stats_dens_normal ( float $x , float $ave , float $stdev ) : float"
    ],
    "stats_dens_pmf_binomial": [
        "Probability mass function of the binomial distribution",
        "stats_dens_pmf_binomial ( float $x , float $n , float $pi ) : float"
    ],
    "stats_dens_pmf_hypergeometric": [
        "Probability mass function of the hypergeometric distribution",
        "stats_dens_pmf_hypergeometric ( float $n1 , float $n2 , float $N1 , float $N2 ) : float"
    ],
    "stats_dens_pmf_negative_binomial": [
        "Probability mass function of the negative binomial distribution",
        "stats_dens_pmf_negative_binomial ( float $x , float $n , float $pi ) : float"
    ],
    "stats_dens_pmf_poisson": [
        "Probability mass function of the Poisson distribution",
        "stats_dens_pmf_poisson ( float $x , float $lb ) : float"
    ],
    "stats_dens_t": [
        "Probability density function of the t-distribution",
        "stats_dens_t ( float $x , float $dfr ) : float"
    ],
    "stats_dens_uniform": [
        "Probability density function of the uniform distribution",
        "stats_dens_uniform ( float $x , float $a , float $b ) : float"
    ],
    "stats_dens_weibull": [
        "Probability density function of the Weibull distribution",
        "stats_dens_weibull ( float $x , float $a , float $b ) : float"
    ],
    "stats_harmonic_mean": [
        "Returns the harmonic mean of an array of values",
        "stats_harmonic_mean ( array $a ) : number"
    ],
    "stats_kurtosis": [
        "Computes the kurtosis of the data in the array",
        "stats_kurtosis ( array $a ) : float"
    ],
    "stats_rand_gen_beta": [
        "Generates a random deviate from the beta distribution",
        "stats_rand_gen_beta ( float $a , float $b ) : float"
    ],
    "stats_rand_gen_chisquare": [
        "Generates a random deviate from the chi-square distribution",
        "stats_rand_gen_chisquare ( float $df ) : float"
    ],
    "stats_rand_gen_exponential": [
        "Generates a random deviate from the exponential distribution",
        "stats_rand_gen_exponential ( float $av ) : float"
    ],
    "stats_rand_gen_f": [
        "Generates a random deviate from the F distribution",
        "stats_rand_gen_f ( float $dfn , float $dfd ) : float"
    ],
    "stats_rand_gen_funiform": [
        "Generates uniform float between low (exclusive) and high (exclusive)",
        "stats_rand_gen_funiform ( float $low , float $high ) : float"
    ],
    "stats_rand_gen_gamma": [
        "Generates a random deviate from the gamma distribution",
        "stats_rand_gen_gamma ( float $a , float $r ) : float"
    ],
    "stats_rand_gen_ibinomial": [
        "Generates a random deviate from the binomial distribution",
        "stats_rand_gen_ibinomial ( int $n , float $pp ) : int"
    ],
    "stats_rand_gen_ibinomial_negative": [
        "Generates a random deviate from the negative binomial distribution",
        "stats_rand_gen_ibinomial_negative ( int $n , float $p ) : int"
    ],
    "stats_rand_gen_int": [
        "Generates random integer between 1 and 2147483562",
        "stats_rand_gen_int ( ) : int"
    ],
    "stats_rand_gen_ipoisson": [
        "Generates a single random deviate from a Poisson distribution",
        "stats_rand_gen_ipoisson ( float $mu ) : int"
    ],
    "stats_rand_gen_iuniform": [
        "Generates integer uniformly distributed between LOW (inclusive) and HIGH (inclusive)",
        "stats_rand_gen_iuniform ( int $low , int $high ) : int"
    ],
    "stats_rand_gen_noncentral_chisquare": [
        "Generates a random deviate from the non-central chi-square distribution",
        "stats_rand_gen_noncentral_chisquare ( float $df , float $xnonc ) : float"
    ],
    "stats_rand_gen_noncentral_f": [
        "Generates a random deviate from the noncentral F distribution",
        "stats_rand_gen_noncentral_f ( float $dfn , float $dfd , float $xnonc ) : float"
    ],
    "stats_rand_gen_noncentral_t": [
        "Generates a single random deviate from a non-central t-distribution",
        "stats_rand_gen_noncentral_t ( float $df , float $xnonc ) : float"
    ],
    "stats_rand_gen_normal": [
        "Generates a single random deviate from a normal distribution",
        "stats_rand_gen_normal ( float $av , float $sd ) : float"
    ],
    "stats_rand_gen_t": [
        "Generates a single random deviate from a t-distribution",
        "stats_rand_gen_t ( float $df ) : float"
    ],
    "stats_rand_get_seeds": [
        "Get the seed values of the random number generator",
        "stats_rand_get_seeds ( ) : array"
    ],
    "stats_rand_phrase_to_seeds": [
        "Generate two seeds for the RGN random number generator",
        "stats_rand_phrase_to_seeds ( string $phrase ) : array"
    ],
    "stats_rand_ranf": [
        "Generates a random floating point number between 0 and 1",
        "stats_rand_ranf ( ) : float"
    ],
    "stats_rand_setall": [
        "Set seed values to the random generator",
        "stats_rand_setall ( int $iseed1 , int $iseed2 ) : void"
    ],
    "stats_skew": [
        "Computes the skewness of the data in the array",
        "stats_skew ( array $a ) : float"
    ],
    "stats_standard_deviation": [
        "Returns the standard deviation",
        "stats_standard_deviation ( array $a , bool $sample = false ) : float"
    ],
    "stats_stat_binomial_coef": [
        "Returns a binomial coefficient",
        "stats_stat_binomial_coef ( int $x , int $n ) : float"
    ],
    "stats_stat_correlation": [
        "Returns the Pearson correlation coefficient of two data sets",
        "stats_stat_correlation ( array $arr1 , array $arr2 ) : float"
    ],
    "stats_stat_factorial": [
        "Returns the factorial of an integer",
        "stats_stat_factorial ( int $n ) : float"
    ],
    "stats_stat_independent_t": [
        "Returns the t-value from the independent two-sample t-test",
        "stats_stat_independent_t ( array $arr1 , array $arr2 ) : float"
    ],
    "stats_stat_innerproduct": [
        "Returns the inner product of two vectors",
        "stats_stat_innerproduct ( array $arr1 , array $arr2 ) : float"
    ],
    "stats_stat_paired_t": [
        "Returns the t-value of the dependent t-test for paired samples",
        "stats_stat_paired_t ( array $arr1 , array $arr2 ) : float"
    ],
    "stats_stat_percentile": [
        "Returns the percentile value",
        "stats_stat_percentile ( array $arr , float $perc ) : float"
    ],
    "stats_stat_powersum": [
        "Returns the power sum of a vector",
        "stats_stat_powersum ( array $arr , float $power ) : float"
    ],
    "stats_variance": [
        "Returns the variance",
        "stats_variance ( array $a , bool $sample = false ) : float"
    ],
    "Stomp": [
        "Represents a connection between PHP and a Stomp compliant Message Broker.",
        "new Stomp ( string $broker = ini_get(\"stomp.default_broker_uri\") , string $username = ? , string $password = ? , array $headers = ? )"
    ],
    "stomp_abort": [
        "Rolls back a transaction in progress",
        "stomp_abort ( resource $link , string $transaction_id , array $headers = ? ) : bool"
    ],
    "stomp_ack": [
        "Acknowledges consumption of a message",
        "stomp_ack ( resource $link , mixed $msg , array $headers = ? ) : bool"
    ],
    "stomp_begin": [
        "Starts a transaction",
        "stomp_begin ( resource $link , string $transaction_id , array $headers = ? ) : bool"
    ],
    "stomp_close": [
        "Closes stomp connection",
        "stomp_close ( resource $link ) : bool"
    ],
    "stomp_commit": [
        "Commits a transaction in progress",
        "stomp_commit ( resource $link , string $transaction_id , array $headers = ? ) : bool"
    ],
    "stomp_connect": [
        "Opens a connection",
        "stomp_connect ( string $broker = ini_get(\"stomp.default_broker_uri\") , string $username = ? , string $password = ? , array $headers = ? ) : resource"
    ],
    "stomp_connect_error": [
        "Returns a string description of the last connect error",
        "stomp_connect_error ( ) : string"
    ],
    "stomp_error": [
        "Gets the last stomp error",
        "stomp_error ( resource $link ) : string"
    ],
    "stomp_get_read_timeout": [
        "Gets read timeout",
        "stomp_get_read_timeout ( resource $link ) : array"
    ],
    "stomp_get_session_id": [
        "Gets the current stomp session ID",
        "stomp_get_session_id ( resource $link ) : string|false"
    ],
    "stomp_has_frame": [
        "Indicates whether or not there is a frame ready to read",
        "stomp_has_frame ( resource $link ) : bool"
    ],
    "stomp_read_frame": [
        "Reads the next frame",
        "stomp_read_frame ( resource $link ) : array"
    ],
    "stomp_send": [
        "Sends a message",
        "stomp_send ( resource $link , string $destination , mixed $msg , array $headers = ? ) : bool"
    ],
    "stomp_set_read_timeout": [
        "Sets read timeout",
        "stomp_set_read_timeout ( resource $link , int $seconds , int $microseconds = ? ) : void"
    ],
    "stomp_subscribe": [
        "Registers to listen to a given destination",
        "stomp_subscribe ( resource $link , string $destination , array $headers = ? ) : bool"
    ],
    "stomp_unsubscribe": [
        "Removes an existing subscription",
        "stomp_unsubscribe ( resource $link , string $destination , array $headers = ? ) : bool"
    ],
    "stomp_version": [
        "Gets the current stomp extension version",
        "stomp_version ( ) : string"
    ],
    "StompException": [
        "Represents an error raised by the stomp extension. See Exceptions for more information about Exceptions in PHP."
    ],
    "StompFrame": [
        "Represents a message which was sent or received from a Stomp compliant Message Broker.",
        "StompFrame::__construct ( string $command = ? , array $headers = ? , string $body = ? )"
    ],
    "str_contains": [
        "Determine if a string contains a given substring",
        "str_contains ( string $haystack , string $needle ) : bool"
    ],
    "str_ends_with": [
        "Checks if a string ends with a given substring",
        "str_ends_with ( string $haystack , string $needle ) : bool"
    ],
    "str_getcsv": [
        "Parse a CSV string into an array",
        "str_getcsv ( string $string , string $separator = \",\" , string $enclosure = \"\\\"\" , string $escape = '\\\\' ) : array"
    ],
    "str_ireplace": [
        "Case-insensitive version of str_replace()",
        "str_ireplace ( array|string $search , array|string $replace , string|array $subject , int &$count = null ) : string|array"
    ],
    "str_pad": [
        "Pad a string to a certain length with another string",
        "str_pad ( string $string , int $length , string $pad_string = \" \" , int $pad_type = STR_PAD_RIGHT ) : string"
    ],
    "str_repeat": [
        "Repeat a string",
        "str_repeat ( string $string , int $times ) : string"
    ],
    "str_replace": [
        "Replace all occurrences of the search string with the replacement string",
        "str_replace ( array|string $search , array|string $replace , string|array $subject , int &$count = null ) : string|array"
    ],
    "str_rot13": [
        "Perform the rot13 transform on a string",
        "str_rot13 ( string $string ) : string"
    ],
    "str_shuffle": [
        "Randomly shuffles a string",
        "str_shuffle ( string $string ) : string"
    ],
    "str_split": [
        "Convert a string to an array",
        "str_split ( string $string , int $length = 1 ) : array"
    ],
    "str_starts_with": [
        "Checks if a string starts with a given substring",
        "str_starts_with ( string $haystack , string $needle ) : bool"
    ],
    "str_word_count": [
        "Return information about words used in a string",
        "str_word_count ( string $string , int $format = 0 , string|null $characters = null ) : array|int"
    ],
    "strcasecmp": [
        "Binary safe case-insensitive string comparison",
        "strcasecmp ( string $str1 , string $str2 ) : int"
    ],
    "strcmp": [
        "Binary safe string comparison",
        "strcmp ( string $str1 , string $str2 ) : int"
    ],
    "strcoll": [
        "Locale based string comparison",
        "strcoll ( string $string1 , string $string2 ) : int"
    ],
    "strcspn": [
        "Find length of initial segment not matching mask",
        "strcspn ( string $string , string $characters , int $offset = 0 , int|null $length = null ) : int"
    ],
    "stream_bucket_append": [
        "Append bucket to brigade",
        "stream_bucket_append ( resource $brigade , object $bucket ) : void"
    ],
    "stream_bucket_make_writeable": [
        "Return a bucket object from the brigade for operating on",
        "stream_bucket_make_writeable ( resource $brigade ) : object"
    ],
    "stream_bucket_new": [
        "Create a new bucket for use on the current stream",
        "stream_bucket_new ( resource $stream , string $buffer ) : object"
    ],
    "stream_bucket_prepend": [
        "Prepend bucket to brigade",
        "stream_bucket_prepend ( resource $brigade , object $bucket ) : void"
    ],
    "stream_context_create": [
        "Creates a stream context",
        "stream_context_create ( array $options = ? , array $params = ? ) : resource"
    ],
    "stream_context_get_default": [
        "Retrieve the default stream context",
        "stream_context_get_default ( array $options = ? ) : resource"
    ],
    "stream_context_get_options": [
        "Retrieve options for a stream\/wrapper\/context",
        "stream_context_get_options ( resource $stream_or_context ) : array"
    ],
    "stream_context_get_params": [
        "Retrieves parameters from a context",
        "stream_context_get_params ( resource $stream_or_context ) : array"
    ],
    "stream_context_set_default": [
        "Set the default stream context",
        "stream_context_set_default ( array $options ) : resource"
    ],
    "stream_context_set_option": [
        "Sets an option for a stream\/wrapper\/context",
        "stream_context_set_option ( resource $stream_or_context , string $wrapper , string $option , mixed $value ) : bool",
        "stream_context_set_option ( resource $stream_or_context , array $options ) : bool"
    ],
    "stream_context_set_params": [
        "Set parameters for a stream\/wrapper\/context",
        "stream_context_set_params ( resource $context , array $params ) : bool"
    ],
    "stream_copy_to_stream": [
        "Copies data from one stream to another",
        "stream_copy_to_stream ( resource $source , resource $dest , int $maxlength = -1 , int $offset = 0 ) : int|false"
    ],
    "stream_filter_append": [
        "Attach a filter to a stream",
        "stream_filter_append ( resource $stream , string $filtername , int $read_write = ? , mixed $params = ? ) : resource"
    ],
    "stream_filter_prepend": [
        "Attach a filter to a stream",
        "stream_filter_prepend ( resource $stream , string $filtername , int $read_write = ? , mixed $params = ? ) : resource"
    ],
    "stream_filter_register": [
        "Register a user defined stream filter",
        "stream_filter_register ( string $filter_name , string $class ) : bool"
    ],
    "stream_filter_remove": [
        "Remove a filter from a stream",
        "stream_filter_remove ( resource $stream_filter ) : bool"
    ],
    "stream_get_contents": [
        "Reads remainder of a stream into a string",
        "stream_get_contents ( resource $handle , int $maxlength = -1 , int $offset = -1 ) : string|false"
    ],
    "stream_get_filters": [
        "Retrieve list of registered filters",
        "stream_get_filters ( ) : array"
    ],
    "stream_get_line": [
        "Gets line from stream resource up to a given delimiter",
        "stream_get_line ( resource $handle , int $length , string $ending = ? ) : string"
    ],
    "stream_get_meta_data": [
        "Retrieves header\/meta data from streams\/file pointers",
        "stream_get_meta_data ( resource $stream ) : array"
    ],
    "stream_get_transports": [
        "Retrieve list of registered socket transports",
        "stream_get_transports ( ) : array"
    ],
    "stream_get_wrappers": [
        "Retrieve list of registered streams",
        "stream_get_wrappers ( ) : array"
    ],
    "stream_is_local": [
        "Checks if a stream is a local stream",
        "stream_is_local ( resource|string $stream ) : bool"
    ],
    "stream_isatty": [
        "Check if a stream is a TTY",
        "stream_isatty ( resource $stream ) : bool"
    ],
    "stream_notification_callback": [
        "A callback function for the notification context parameter",
        "stream_notification_callback ( int $notification_code , int $severity , string $message , int $message_code , int $bytes_transferred , int $bytes_max ) : void"
    ],
    "stream_resolve_include_path": [
        "Resolve filename against the include path",
        "stream_resolve_include_path ( string $filename ) : string|false"
    ],
    "stream_select": [
        "Runs the equivalent of the select() system call on the given\n   arrays of streams with a timeout specified by tv_sec and tv_usec",
        "stream_select ( array &$read , array &$write , array &$except , int $tv_sec , int $tv_usec = 0 ) : int"
    ],
    "stream_set_blocking": [
        "Set blocking\/non-blocking mode on a stream",
        "stream_set_blocking ( resource $stream , bool $enable ) : bool"
    ],
    "stream_set_chunk_size": [
        "Set the stream chunk size",
        "stream_set_chunk_size ( resource $stream , int $size ) : int"
    ],
    "stream_set_read_buffer": [
        "Set read file buffering on the given stream",
        "stream_set_read_buffer ( resource $stream , int $size ) : int"
    ],
    "stream_set_timeout": [
        "Set timeout period on a stream",
        "stream_set_timeout ( resource $stream , int $seconds , int $microseconds = 0 ) : bool"
    ],
    "stream_set_write_buffer": [
        "Sets write file buffering on the given stream",
        "stream_set_write_buffer ( resource $stream , int $buffer ) : int"
    ],
    "stream_socket_accept": [
        "Accept a connection on a socket created by stream_socket_server()",
        "stream_socket_accept ( resource $server_socket , float $timeout = ini_get(\"default_socket_timeout\") , string &$peername = ? ) : resource|false"
    ],
    "stream_socket_client": [
        "Open Internet or Unix domain socket connection",
        "stream_socket_client ( string $remote_socket , int &$errno = ? , string &$errstr = ? , float $timeout = ini_get(\"default_socket_timeout\") , int $flags = STREAM_CLIENT_CONNECT , resource $context = ? ) : resource"
    ],
    "stream_socket_enable_crypto": [
        "Turns encryption on\/off on an already connected socket",
        "stream_socket_enable_crypto ( resource $stream , bool $enable , int $crypto_type = ? , resource $session_stream = ? ) : mixed"
    ],
    "stream_socket_get_name": [
        "Retrieve the name of the local or remote sockets",
        "stream_socket_get_name ( resource $handle , bool $want_peer ) : string"
    ],
    "stream_socket_pair": [
        "Creates a pair of connected, indistinguishable socket streams",
        "stream_socket_pair ( int $domain , int $type , int $protocol ) : array|false"
    ],
    "stream_socket_recvfrom": [
        "Receives data from a socket, connected or not",
        "stream_socket_recvfrom ( resource $socket , int $length , int $flags = 0 , string &$address = ? ) : string"
    ],
    "stream_socket_sendto": [
        "Sends a message to a socket, whether it is connected or not",
        "stream_socket_sendto ( resource $socket , string $data , int $flags = 0 , string $address = ? ) : int"
    ],
    "stream_socket_server": [
        "Create an Internet or Unix domain server socket",
        "stream_socket_server ( string $local_socket , int &$errno = ? , string &$errstr = ? , int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN , resource $context = ? ) : resource"
    ],
    "stream_socket_shutdown": [
        "Shutdown a full-duplex connection",
        "stream_socket_shutdown ( resource $stream , int $mode ) : bool"
    ],
    "stream_supports_lock": [
        "Tells whether the stream supports locking",
        "stream_supports_lock ( resource $stream ) : bool"
    ],
    "stream_wrapper_register": [
        "Register a URL wrapper implemented as a PHP class",
        "stream_wrapper_register ( string $protocol , string $class , int $flags = 0 ) : bool"
    ],
    "stream_wrapper_restore": [
        "Restores a previously unregistered built-in wrapper",
        "stream_wrapper_restore ( string $protocol ) : bool"
    ],
    "stream_wrapper_unregister": [
        "Unregister a URL wrapper",
        "stream_wrapper_unregister ( string $protocol ) : bool"
    ],
    "streamWrapper": [
        "Constructs a new stream wrapper",
        "streamWrapper::__construct ( )"
    ],
    "strftime": [
        "Format a local time\/date according to locale settings",
        "strftime ( string $format , int|null $timestamp = null ) : string|false"
    ],
    "strip_tags": [
        "Strip HTML and PHP tags from a string",
        "strip_tags ( string $string , array|string|null $allowed_tags = null ) : string"
    ],
    "stripcslashes": [
        "Un-quote string quoted with addcslashes()",
        "stripcslashes ( string $string ) : string"
    ],
    "stripos": [
        "Find the position of the first occurrence of a case-insensitive substring in a string",
        "stripos ( string $haystack , string $needle , int $offset = 0 ) : int|false"
    ],
    "stripslashes": [
        "Un-quotes a quoted string",
        "stripslashes ( string $string ) : string"
    ],
    "stristr": [
        "Case-insensitive strstr()",
        "stristr ( string $haystack , string $needle , bool $before_needle = false ) : string|false"
    ],
    "strlen": [
        "Get string length",
        "strlen ( string $string ) : int"
    ],
    "strnatcasecmp": [
        "Case insensitive string comparisons using a \"natural order\" algorithm",
        "strnatcasecmp ( string $string1 , string $string2 ) : int"
    ],
    "strnatcmp": [
        "String comparisons using a \"natural order\" algorithm",
        "strnatcmp ( string $string1 , string $string2 ) : int"
    ],
    "strncasecmp": [
        "Binary safe case-insensitive string comparison of the first n characters",
        "strncasecmp ( string $str1 , string $str2 , int $len ) : int"
    ],
    "strncmp": [
        "Binary safe string comparison of the first n characters",
        "strncmp ( string $str1 , string $str2 , int $len ) : int"
    ],
    "strpbrk": [
        "Search a string for any of a set of characters",
        "strpbrk ( string $string , string $characters ) : string|false"
    ],
    "strpos": [
        "Find the position of the first occurrence of a substring in a string",
        "strpos ( string $haystack , string $needle , int $offset = 0 ) : int|false"
    ],
    "strptime": [
        "Parse a time\/date generated with strftime()",
        "strptime ( string $timestamp , string $format ) : array|false"
    ],
    "strrchr": [
        "Find the last occurrence of a character in a string",
        "strrchr ( string $haystack , string $needle ) : string|false"
    ],
    "strrev": [
        "Reverse a string",
        "strrev ( string $string ) : string"
    ],
    "strripos": [
        "Find the position of the last occurrence of a case-insensitive substring in a string",
        "strripos ( string $haystack , string $needle , int $offset = 0 ) : int|false"
    ],
    "strrpos": [
        "Find the position of the last occurrence of a substring in a string",
        "strrpos ( string $haystack , string $needle , int $offset = 0 ) : int|false"
    ],
    "strspn": [
        "Finds the length of the initial segment of a string consisting\n   entirely of characters contained within a given mask",
        "strspn ( string $string , string $characters , int $offset = 0 , int|null $length = null ) : int"
    ],
    "strstr": [
        "Find the first occurrence of a string",
        "strstr ( string $haystack , string $needle , bool $before_needle = false ) : string|false"
    ],
    "strtok": [
        "Tokenize string",
        "strtok ( string $string , string $token ) : string|false",
        "strtok ( string $token ) : string|false"
    ],
    "strtolower": [
        "Make a string lowercase",
        "strtolower ( string $string ) : string"
    ],
    "strtotime": [
        "Parse about any English textual datetime description into a Unix timestamp",
        "strtotime ( string $datetime , int|null $baseTimestamp = null ) : int|false"
    ],
    "strtoupper": [
        "Make a string uppercase",
        "strtoupper ( string $string ) : string"
    ],
    "strtr": [
        "Translate characters or replace substrings",
        "strtr ( string $string , string $from , string $to ) : string",
        "strtr ( string $string , array $replace_pairs ) : string"
    ],
    "strval": [
        "Get string value of a variable",
        "strval ( mixed $value ) : string"
    ],
    "substr": [
        "Return part of a string",
        "substr ( string $string , int $offset , int|null $length = null ) : string"
    ],
    "substr_compare": [
        "Binary safe comparison of two strings from an offset, up to length characters",
        "substr_compare ( string $haystack , string $needle , int $offset , int|null $length = null , bool $case_insensitive = false ) : int"
    ],
    "substr_count": [
        "Count the number of substring occurrences",
        "substr_count ( string $haystack , string $needle , int $offset = 0 , int|null $length = null ) : int"
    ],
    "substr_replace": [
        "Replace text within a portion of a string",
        "substr_replace ( array|string $string , array|string $replace , array|int $offset , array|int|null $length = null ) : string|array"
    ],
    "SVM": [
        "Construct a new SVM object",
        "new SVM ( )"
    ],
    "SVMModel": [
        "The SVMModel is the end result of the training process. It can be used to classify previously unseen data.",
        "new SVMModel ( string $filename = ? )"
    ],
    "svn_add": [
        "Schedules the addition of an item in a working directory",
        "svn_add ( string $path , bool $recursive = true , bool $force = false ) : bool"
    ],
    "svn_auth_get_parameter": [
        "Retrieves authentication parameter",
        "svn_auth_get_parameter ( string $key ) : string"
    ],
    "svn_auth_set_parameter": [
        "Sets an authentication parameter",
        "svn_auth_set_parameter ( string $key , string $value ) : void"
    ],
    "svn_blame": [
        "Get the SVN blame for a file",
        "svn_blame ( string $repository_url , int $revision_no = SVN_REVISION_HEAD ) : array"
    ],
    "svn_cat": [
        "Returns the contents of a file in a repository",
        "svn_cat ( string $repos_url , int $revision_no = ? ) : string"
    ],
    "svn_checkout": [
        "Checks out a working copy from the repository",
        "svn_checkout ( string $repos , string $targetpath , int $revision = ? , int $flags = 0 ) : bool"
    ],
    "svn_cleanup": [
        "Recursively cleanup a working copy directory, finishing incomplete operations and removing locks",
        "svn_cleanup ( string $workingdir ) : bool"
    ],
    "svn_client_version": [
        "Returns the version of the SVN client libraries",
        "svn_client_version ( ) : string"
    ],
    "svn_commit": [
        "Sends changes from the local working copy to the repository",
        "svn_commit ( string $log , array $targets , bool $recursive = true ) : array"
    ],
    "svn_delete": [
        "Delete items from a working copy or repository",
        "svn_delete ( string $path , bool $force = false ) : bool"
    ],
    "svn_diff": [
        "Recursively diffs two paths",
        "svn_diff ( string $path1 , int $rev1 , string $path2 , int $rev2 ) : array"
    ],
    "svn_export": [
        "Export the contents of a SVN directory",
        "svn_export ( string $frompath , string $topath , bool $working_copy = true , int $revision_no = -1 ) : bool"
    ],
    "svn_fs_abort_txn": [
        "Abort a transaction, returns true if everything is okay, false otherwise",
        "svn_fs_abort_txn ( resource $txn ) : bool"
    ],
    "svn_fs_apply_text": [
        "Creates and returns a stream that will be used to replace",
        "svn_fs_apply_text ( resource $root , string $path ) : resource"
    ],
    "svn_fs_begin_txn2": [
        "Create a new transaction",
        "svn_fs_begin_txn2 ( resource $repos , int $rev ) : resource"
    ],
    "svn_fs_change_node_prop": [
        "Return true if everything is ok, false otherwise",
        "svn_fs_change_node_prop ( resource $root , string $path , string $name , string $value ) : bool"
    ],
    "svn_fs_check_path": [
        "Determines what kind of item lives at path in a given repository fsroot",
        "svn_fs_check_path ( resource $fsroot , string $path ) : int"
    ],
    "svn_fs_contents_changed": [
        "Return true if content is different, false otherwise",
        "svn_fs_contents_changed ( resource $root1 , string $path1 , resource $root2 , string $path2 ) : bool"
    ],
    "svn_fs_copy": [
        "Copies a file or a directory, returns true if all is ok, false otherwise",
        "svn_fs_copy ( resource $from_root , string $from_path , resource $to_root , string $to_path ) : bool"
    ],
    "svn_fs_delete": [
        "Deletes a file or a directory, return true if all is ok, false otherwise",
        "svn_fs_delete ( resource $root , string $path ) : bool"
    ],
    "svn_fs_dir_entries": [
        "Enumerates the directory entries under path; returns a hash of dir names to file type",
        "svn_fs_dir_entries ( resource $fsroot , string $path ) : array"
    ],
    "svn_fs_file_contents": [
        "Returns a stream to access the contents of a file from a given version of the fs",
        "svn_fs_file_contents ( resource $fsroot , string $path ) : resource"
    ],
    "svn_fs_file_length": [
        "Returns the length of a file from a given version of the fs",
        "svn_fs_file_length ( resource $fsroot , string $path ) : int"
    ],
    "svn_fs_is_dir": [
        "Return true if the path points to a directory, false otherwise",
        "svn_fs_is_dir ( resource $root , string $path ) : bool"
    ],
    "svn_fs_is_file": [
        "Return true if the path points to a file, false otherwise",
        "svn_fs_is_file ( resource $root , string $path ) : bool"
    ],
    "svn_fs_make_dir": [
        "Creates a new empty directory, returns true if all is ok, false otherwise",
        "svn_fs_make_dir ( resource $root , string $path ) : bool"
    ],
    "svn_fs_make_file": [
        "Creates a new empty file, returns true if all is ok, false otherwise",
        "svn_fs_make_file ( resource $root , string $path ) : bool"
    ],
    "svn_fs_node_created_rev": [
        "Returns the revision in which path under fsroot was created",
        "svn_fs_node_created_rev ( resource $fsroot , string $path ) : int"
    ],
    "svn_fs_node_prop": [
        "Returns the value of a property for a node",
        "svn_fs_node_prop ( resource $fsroot , string $path , string $propname ) : string"
    ],
    "svn_fs_props_changed": [
        "Return true if props are different, false otherwise",
        "svn_fs_props_changed ( resource $root1 , string $path1 , resource $root2 , string $path2 ) : bool"
    ],
    "svn_fs_revision_prop": [
        "Fetches the value of a named property",
        "svn_fs_revision_prop ( resource $fs , int $revnum , string $propname ) : string"
    ],
    "svn_fs_revision_root": [
        "Get a handle on a specific version of the repository root",
        "svn_fs_revision_root ( resource $fs , int $revnum ) : resource"
    ],
    "svn_fs_txn_root": [
        "Creates and returns a transaction root",
        "svn_fs_txn_root ( resource $txn ) : resource"
    ],
    "svn_fs_youngest_rev": [
        "Returns the number of the youngest revision in the filesystem",
        "svn_fs_youngest_rev ( resource $fs ) : int"
    ],
    "svn_import": [
        "Imports an unversioned path into a repository",
        "svn_import ( string $path , string $url , bool $nonrecursive ) : bool"
    ],
    "svn_log": [
        "Returns the commit log messages of a repository URL",
        "svn_log ( string $repos_url , int $start_revision = ? , int $end_revision = ? , int $limit = 0 , int $flags = SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY ) : array"
    ],
    "svn_ls": [
        "Returns list of directory contents in repository URL, optionally at revision number",
        "svn_ls ( string $repos_url , int $revision_no = SVN_REVISION_HEAD , bool $recurse = false , bool $peg = false ) : array"
    ],
    "svn_mkdir": [
        "Creates a directory in a working copy or repository",
        "svn_mkdir ( string $path , string $log_message = ? ) : bool"
    ],
    "svn_repos_create": [
        "Create a new subversion repository at path",
        "svn_repos_create ( string $path , array $config = ? , array $fsconfig = ? ) : resource"
    ],
    "svn_repos_fs": [
        "Gets a handle on the filesystem for a repository",
        "svn_repos_fs ( resource $repos ) : resource"
    ],
    "svn_repos_fs_begin_txn_for_commit": [
        "Create a new transaction",
        "svn_repos_fs_begin_txn_for_commit ( resource $repos , int $rev , string $author , string $log_msg ) : resource"
    ],
    "svn_repos_fs_commit_txn": [
        "Commits a transaction and returns the new revision",
        "svn_repos_fs_commit_txn ( resource $txn ) : int"
    ],
    "svn_repos_hotcopy": [
        "Make a hot-copy of the repos at repospath; copy it to destpath",
        "svn_repos_hotcopy ( string $repospath , string $destpath , bool $cleanlogs ) : bool"
    ],
    "svn_repos_open": [
        "Open a shared lock on a repository",
        "svn_repos_open ( string $path ) : resource"
    ],
    "svn_repos_recover": [
        "Run recovery procedures on the repository located at path",
        "svn_repos_recover ( string $path ) : bool"
    ],
    "svn_revert": [
        "Revert changes to the working copy",
        "svn_revert ( string $path , bool $recursive = false ) : bool"
    ],
    "svn_status": [
        "Returns the status of working copy files and directories",
        "svn_status ( string $path , int $flags = 0 ) : array"
    ],
    "svn_update": [
        "Update working copy",
        "svn_update ( string $path , int $revno = SVN_REVISION_HEAD , bool $recurse = true ) : int"
    ],
    "swoole_async_dns_lookup": [
        "Async and non-blocking hostname to IP lookup",
        "swoole_async_dns_lookup ( string $hostname , callable $callback ) : bool"
    ],
    "swoole_async_read": [
        "Read file stream asynchronously",
        "swoole_async_read ( string $filename , callable $callback , int $chunk_size = 65536 , int $offset = 0 ) : bool"
    ],
    "swoole_async_readfile": [
        "Read a file asynchronously",
        "swoole_async_readfile ( string $filename , callable $callback ) : bool"
    ],
    "swoole_async_set": [
        "Update the async I\/O options",
        "swoole_async_set ( array $settings ) : void"
    ],
    "swoole_async_write": [
        "Write data to a file stream asynchronously",
        "swoole_async_write ( string $filename , string $content , int $offset = ? , callable $callback = ? ) : bool"
    ],
    "swoole_async_writefile": [
        "Write data to a file asynchronously",
        "swoole_async_writefile ( string $filename , string $content , callable $callback = ? , int $flags = 0 ) : bool"
    ],
    "swoole_client_select": [
        "Get the file description which are ready to read\/write or error",
        "swoole_client_select ( array &$read_array , array &$write_array , array &$error_array , float $timeout = 0.5 ) : int"
    ],
    "swoole_cpu_num": [
        "Get the number of CPU",
        "swoole_cpu_num ( ) : int"
    ],
    "swoole_errno": [
        "Get the error code of the latest system call",
        "swoole_errno ( ) : int"
    ],
    "swoole_event_add": [
        "Add new callback functions of a socket into the EventLoop",
        "swoole_event_add ( int $fd , callable $read_callback = ? , callable $write_callback = ? , int $events = 0 ) : int"
    ],
    "swoole_event_defer": [
        "Add callback function to the next event loop",
        "swoole_event_defer ( callable $callback ) : bool"
    ],
    "swoole_event_del": [
        "Remove all event callback functions of a socket",
        "swoole_event_del ( int $fd ) : bool"
    ],
    "swoole_event_exit": [
        "Exit the eventloop, only available at the client side",
        "swoole_event_exit ( ) : void"
    ],
    "swoole_event_set": [
        "Update the event callback functions of a socket",
        "swoole_event_set ( int $fd , callable $read_callback = ? , callable $write_callback = ? , int $events = 0 ) : bool"
    ],
    "swoole_event_wait": [
        "Start the event loop",
        "swoole_event_wait ( ) : void"
    ],
    "swoole_event_write": [
        "Write data to a socket",
        "swoole_event_write ( int $fd , string $data ) : bool"
    ],
    "swoole_get_local_ip": [
        "Get the IPv4 IP addresses of each NIC on the machine",
        "swoole_get_local_ip ( ) : array"
    ],
    "swoole_last_error": [
        "Get the lastest error message",
        "swoole_last_error ( ) : int"
    ],
    "swoole_load_module": [
        "Load a swoole extension",
        "swoole_load_module ( string $filename ) : mixed"
    ],
    "swoole_select": [
        "Select the file descriptions which are ready to read\/write or error in the eventloop",
        "swoole_select ( array &$read_array , array &$write_array , array &$error_array , float $timeout = ? ) : int"
    ],
    "swoole_set_process_name": [
        "Set the process name",
        "swoole_set_process_name ( string $process_name , int $size = 128 ) : void"
    ],
    "swoole_strerror": [
        "Convert the Errno into error messages",
        "swoole_strerror ( int $errno , int $error_type = 0 ) : string"
    ],
    "swoole_timer_after": [
        "Trigger a one time callback function in the future",
        "swoole_timer_after ( int $ms , callable $callback , mixed $param = ? ) : int"
    ],
    "swoole_timer_clear": [
        "Stop and destory a timer.",
        "swoole_timer_clear ( int $timer_id ) : void"
    ],
    "swoole_timer_exists": [
        "Check if a timer callback function is existed",
        "swoole_timer_exists ( int $timer_id ) : bool"
    ],
    "swoole_timer_tick": [
        "Trigger a timer tick callback function by time interval",
        "swoole_timer_tick ( int $ms , callable $callback , mixed $param = ? ) : int"
    ],
    "swoole_version": [
        "Get the version of Swoole",
        "swoole_version ( ) : string"
    ],
    "symlink": [
        "Creates a symbolic link",
        "symlink ( string $target , string $link ) : bool"
    ],
    "SyncEvent": [
        "A cross-platform, native implementation of named and unnamed event objects. Both automatic and manual event objects are supported.",
        "new SyncEvent ( string $name = ? , bool $manual = false , bool $prefire = false )"
    ],
    "SyncMutex": [
        "A cross-platform, native implementation of named and unnamed countable mutex objects.",
        "new SyncMutex ( string $name = ? )"
    ],
    "SyncReaderWriter": [
        "A cross-platform, native implementation of named and unnamed reader-writer objects.",
        "new SyncReaderWriter ( string $name = ? , bool $autounlock = true )"
    ],
    "SyncSemaphore": [
        "A cross-platform, native implementation of named and unnamed semaphore objects.",
        "new SyncSemaphore ( string $name = ? , int $initialval = 1 , bool $autounlock = true )"
    ],
    "SyncSharedMemory": [
        "A cross-platform, native, consistent implementation of named shared memory objects.",
        "new SyncSharedMemory ( string $name , int $size )"
    ],
    "sys_get_temp_dir": [
        "Returns directory path used for temporary files",
        "sys_get_temp_dir ( ) : string"
    ],
    "sys_getloadavg": [
        "Gets system load average",
        "sys_getloadavg ( ) : array|false"
    ],
    "syslog": [
        "Generate a system log message",
        "syslog ( int $priority , string $message ) : bool"
    ],
    "system": [
        "Execute an external program and display the output",
        "system ( string $command , int &$result_code = null ) : string|false"
    ],
    "taint": [
        "Taint a string",
        "taint ( string &$string , string ...$strings ) : bool"
    ],
    "tan": [
        "Tangent",
        "tan ( float $num ) : float"
    ],
    "tanh": [
        "Hyperbolic tangent",
        "tanh ( float $num ) : float"
    ],
    "tcpwrap_check": [
        "Performs a tcpwrap check",
        "tcpwrap_check ( string $daemon , string $address , string $user = ? , bool $nodns = false ) : bool"
    ],
    "tempnam": [
        "Create file with unique file name",
        "tempnam ( string $directory , string $prefix ) : string|false"
    ],
    "textdomain": [
        "Sets the default domain",
        "textdomain ( string|null $domain ) : string"
    ],
    "Thread": [
        "When the start method of a Thread is invoked, the run method code will be executed in separate Thread, in parallel."
    ],
    "Threaded": [
        "Threaded objects form the basis of pthreads ability to execute user code in parallel; they expose synchronization methods and various useful interfaces."
    ],
    "Throwable": [
        "Throwable is the base interface for any object that can be thrown via a throw statement, including Error and Exception."
    ],
    "tidy": [
        "An HTML node in an HTML file, as detected by tidy.",
        "new tidy ( string|null $filename = null , array|string|null $config = null , string|null $encoding = null , bool $useIncludePath = false )"
    ],
    "tidy_access_count": [
        "Returns the Number of Tidy accessibility warnings encountered for specified document",
        "tidy_access_count ( tidy $tidy ) : int"
    ],
    "tidy_clean_repair": [
        "Execute configured cleanup and repair operations on parsed markup",
        "tidy_clean_repair ( tidy $tidy ) : bool"
    ],
    "tidy_config_count": [
        "Returns the Number of Tidy configuration errors encountered for specified document",
        "tidy_config_count ( tidy $tidy ) : int"
    ],
    "tidy_diagnose": [
        "Run configured diagnostics on parsed and repaired markup",
        "tidy_diagnose ( tidy $tidy ) : bool"
    ],
    "tidy_error_count": [
        "Returns the Number of Tidy errors encountered for specified document",
        "tidy_error_count ( tidy $tidy ) : int"
    ],
    "tidy_get_body": [
        "Returns a tidyNode object starting from the <body> tag of the tidy parse tree",
        "tidy_get_body ( tidy $tidy ) : tidyNode|null"
    ],
    "tidy_get_config": [
        "Get current Tidy configuration",
        "tidy_get_config ( tidy $tidy ) : array"
    ],
    "tidy_get_error_buffer": [
        "Return warnings and errors which occurred parsing the specified document",
        "tidy_get_error_buffer ( tidy $tidy ) : string|false"
    ],
    "tidy_get_head": [
        "Returns a tidyNode object starting from the <head> tag of the tidy parse tree",
        "tidy_get_head ( tidy $tidy ) : tidyNode|null"
    ],
    "tidy_get_html": [
        "Returns a tidyNode object starting from the <html> tag of the tidy parse tree",
        "tidy_get_html ( tidy $tidy ) : tidyNode|null"
    ],
    "tidy_get_html_ver": [
        "Get the Detected HTML version for the specified document",
        "tidy_get_html_ver ( tidy $tidy ) : int"
    ],
    "tidy_get_opt_doc": [
        "Returns the documentation for the given option name",
        "tidy_get_opt_doc ( tidy $tidy , string $option ) : string|false"
    ],
    "tidy_get_output": [
        "Return a string representing the parsed tidy markup",
        "tidy_get_output ( tidy $tidy ) : string"
    ],
    "tidy_get_release": [
        "Get release date (version) for Tidy library",
        "tidy_get_release ( ) : string"
    ],
    "tidy_get_root": [
        "Returns a tidyNode object representing the root of the tidy parse tree",
        "tidy_get_root ( tidy $tidy ) : tidyNode|null"
    ],
    "tidy_get_status": [
        "Get status of specified document",
        "tidy_get_status ( tidy $tidy ) : int"
    ],
    "tidy_getopt": [
        "Returns the value of the specified configuration option for the tidy document",
        "tidy_getopt ( tidy $tidy , string $option ) : string|int|bool"
    ],
    "tidy_is_xhtml": [
        "Indicates if the document is a XHTML document",
        "tidy_is_xhtml ( tidy $tidy ) : bool"
    ],
    "tidy_is_xml": [
        "Indicates if the document is a generic (non HTML\/XHTML) XML document",
        "tidy_is_xml ( tidy $tidy ) : bool"
    ],
    "tidy_parse_file": [
        "Parse markup in file or URI",
        "tidy_parse_file ( string $filename , array|string|null $config = null , string|null $encoding = null , bool $useIncludePath = false ) : tidy|false"
    ],
    "tidy_parse_string": [
        "Parse a document stored in a string",
        "tidy_parse_string ( string $string , array|string|null $config = null , string|null $encoding = null ) : tidy|false"
    ],
    "tidy_repair_file": [
        "Repair a file and return it as a string",
        "tidy_repair_file ( string $filename , array|string|null $config = null , string|null $encoding = null , bool $useIncludePath = false ) : string|false"
    ],
    "tidy_repair_string": [
        "Repair a string using an optionally provided configuration file",
        "tidy_repair_string ( string $string , array|string|null $config = null , string|null $encoding = null ) : string|false"
    ],
    "tidy_warning_count": [
        "Returns the Number of Tidy warnings encountered for specified document",
        "tidy_warning_count ( tidy $tidy ) : int"
    ],
    "tidyNode": [
        "An HTML node in an HTML file, as detected by tidy."
    ],
    "time": [
        "Return current Unix timestamp",
        "time ( ) : int"
    ],
    "time_nanosleep": [
        "Delay for a number of seconds and nanoseconds",
        "time_nanosleep ( int $seconds , int $nanoseconds ) : array|bool"
    ],
    "time_sleep_until": [
        "Make the script sleep until the specified time",
        "time_sleep_until ( float $timestamp ) : bool"
    ],
    "timezone_abbreviations_list": [
        "Returns associative array containing dst, offset and the timezone name",
        "timezone_abbreviations_list ( ) : array"
    ],
    "timezone_identifiers_list": [
        "Returns a numerically indexed array containing all defined timezone identifiers",
        "timezone_identifiers_list ( int $timezoneGroup = DateTimeZone::ALL , string|null $countryCode = null ) : array"
    ],
    "timezone_location_get": [
        "Returns location information for a timezone",
        "timezone_location_get ( DateTimeZone $object ) : array|false"
    ],
    "timezone_name_from_abbr": [
        "Returns the timezone name from abbreviation",
        "timezone_name_from_abbr ( string $abbr , int $utcOffset = -1 , int $isDST = -1 ) : string|false"
    ],
    "timezone_name_get": [
        "Returns the name of the timezone",
        "timezone_name_get ( DateTimeZone $object ) : string"
    ],
    "timezone_offset_get": [
        "Returns the timezone offset from GMT",
        "timezone_offset_get ( DateTimeZone $object , DateTimeInterface $datetime ) : int"
    ],
    "timezone_open": [
        "Creates new DateTimeZone object",
        "timezone_open ( string $timezone ) : DateTimeZone|false"
    ],
    "timezone_transitions_get": [
        "Returns all transitions for the timezone",
        "timezone_transitions_get ( DateTimeZone $object , int $timestampBegin = PHP_INT_MIN , int $timestampEnd = PHP_INT_MAX ) : array|false"
    ],
    "timezone_version_get": [
        "Gets the version of the timezonedb",
        "timezone_version_get ( ) : string"
    ],
    "tmpfile": [
        "Creates a temporary file",
        "tmpfile ( ) : resource|false"
    ],
    "token_get_all": [
        "Split given source into PHP tokens",
        "token_get_all ( string $code , int $flags = 0 ) : array"
    ],
    "token_name": [
        "Get the symbolic name of a given PHP token",
        "token_name ( int $id ) : string"
    ],
    "TokyoTyrant": [
        "The main Tokyo Tyrant class",
        "new TokyoTyrant ( string $host = ? , int $port = TokyoTyrant::RDBDEF_PORT , array $options = ? )"
    ],
    "tokyotyrantexception": [
        "TokyoTyrantException"
    ],
    "TokyoTyrantIterator": [
        "Provides an iterator for TokyoTyrant and TokyoTyrantTable objects. The iterator iterates over all keys and values in the database. TokyoTyrantIterator was added in version 0.2.0.",
        "new TokyoTyrantIterator ( mixed $object )"
    ],
    "TokyoTyrantQuery": [
        "This class is used to query the table databases",
        "new TokyoTyrantQuery ( TokyoTyrantTable $table )"
    ],
    "TokyoTyrantTable": [
        "Provides an API to the table databases. A table database can be create using the following command: ttserver -port 1979 \/tmp\/tt_table.tct. In Tokyo Tyrant the table API is a schemaless database which can store arbitrary amount of key-value pairs under a single primary key."
    ],
    "touch": [
        "Sets access and modification time of file",
        "touch ( string $filename , int $time = time() , int $atime = ? ) : bool"
    ],
    "trader_acos": [
        "Vector Trigonometric ACos",
        "trader_acos ( array $real ) : array"
    ],
    "trader_ad": [
        "Chaikin A\/D Line",
        "trader_ad ( array $high , array $low , array $close , array $volume ) : array"
    ],
    "trader_add": [
        "Vector Arithmetic Add",
        "trader_add ( array $real0 , array $real1 ) : array"
    ],
    "trader_adosc": [
        "Chaikin A\/D Oscillator",
        "trader_adosc ( array $high , array $low , array $close , array $volume , int $fastPeriod = ? , int $slowPeriod = ? ) : array"
    ],
    "trader_adx": [
        "Average Directional Movement Index",
        "trader_adx ( array $high , array $low , array $close , int $timePeriod = ? ) : array"
    ],
    "trader_adxr": [
        "Average Directional Movement Index Rating",
        "trader_adxr ( array $high , array $low , array $close , int $timePeriod = ? ) : array"
    ],
    "trader_apo": [
        "Absolute Price Oscillator",
        "trader_apo ( array $real , int $fastPeriod = ? , int $slowPeriod = ? , int $mAType = ? ) : array"
    ],
    "trader_aroon": [
        "Aroon",
        "trader_aroon ( array $high , array $low , int $timePeriod = ? ) : array"
    ],
    "trader_aroonosc": [
        "Aroon Oscillator",
        "trader_aroonosc ( array $high , array $low , int $timePeriod = ? ) : array"
    ],
    "trader_asin": [
        "Vector Trigonometric ASin",
        "trader_asin ( array $real ) : array"
    ],
    "trader_atan": [
        "Vector Trigonometric ATan",
        "trader_atan ( array $real ) : array"
    ],
    "trader_atr": [
        "Average True Range",
        "trader_atr ( array $high , array $low , array $close , int $timePeriod = ? ) : array"
    ],
    "trader_avgprice": [
        "Average Price",
        "trader_avgprice ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_bbands": [
        "Bollinger Bands",
        "trader_bbands ( array $real , int $timePeriod = ? , float $nbDevUp = ? , float $nbDevDn = ? , int $mAType = ? ) : array"
    ],
    "trader_beta": [
        "Beta",
        "trader_beta ( array $real0 , array $real1 , int $timePeriod = ? ) : array"
    ],
    "trader_bop": [
        "Balance Of Power",
        "trader_bop ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cci": [
        "Commodity Channel Index",
        "trader_cci ( array $high , array $low , array $close , int $timePeriod = ? ) : array"
    ],
    "trader_cdl2crows": [
        "Two Crows",
        "trader_cdl2crows ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdl3blackcrows": [
        "Three Black Crows",
        "trader_cdl3blackcrows ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdl3inside": [
        "Three Inside Up\/Down",
        "trader_cdl3inside ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdl3linestrike": [
        "Three-Line Strike",
        "trader_cdl3linestrike ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdl3outside": [
        "Three Outside Up\/Down",
        "trader_cdl3outside ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdl3starsinsouth": [
        "Three Stars In The South",
        "trader_cdl3starsinsouth ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdl3whitesoldiers": [
        "Three Advancing White Soldiers",
        "trader_cdl3whitesoldiers ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlabandonedbaby": [
        "Abandoned Baby",
        "trader_cdlabandonedbaby ( array $open , array $high , array $low , array $close , float $penetration = ? ) : array"
    ],
    "trader_cdladvanceblock": [
        "Advance Block",
        "trader_cdladvanceblock ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlbelthold": [
        "Belt-hold",
        "trader_cdlbelthold ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlbreakaway": [
        "Breakaway",
        "trader_cdlbreakaway ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlclosingmarubozu": [
        "Closing Marubozu",
        "trader_cdlclosingmarubozu ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlconcealbabyswall": [
        "Concealing Baby Swallow",
        "trader_cdlconcealbabyswall ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlcounterattack": [
        "Counterattack",
        "trader_cdlcounterattack ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdldarkcloudcover": [
        "Dark Cloud Cover",
        "trader_cdldarkcloudcover ( array $open , array $high , array $low , array $close , float $penetration = ? ) : array"
    ],
    "trader_cdldoji": [
        "Doji",
        "trader_cdldoji ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdldojistar": [
        "Doji Star",
        "trader_cdldojistar ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdldragonflydoji": [
        "Dragonfly Doji",
        "trader_cdldragonflydoji ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlengulfing": [
        "Engulfing Pattern",
        "trader_cdlengulfing ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdleveningdojistar": [
        "Evening Doji Star",
        "trader_cdleveningdojistar ( array $open , array $high , array $low , array $close , float $penetration = ? ) : array"
    ],
    "trader_cdleveningstar": [
        "Evening Star",
        "trader_cdleveningstar ( array $open , array $high , array $low , array $close , float $penetration = ? ) : array"
    ],
    "trader_cdlgapsidesidewhite": [
        "Up\/Down-gap side-by-side white lines",
        "trader_cdlgapsidesidewhite ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlgravestonedoji": [
        "Gravestone Doji",
        "trader_cdlgravestonedoji ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlhammer": [
        "Hammer",
        "trader_cdlhammer ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlhangingman": [
        "Hanging Man",
        "trader_cdlhangingman ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlharami": [
        "Harami Pattern",
        "trader_cdlharami ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlharamicross": [
        "Harami Cross Pattern",
        "trader_cdlharamicross ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlhighwave": [
        "High-Wave Candle",
        "trader_cdlhighwave ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlhikkake": [
        "Hikkake Pattern",
        "trader_cdlhikkake ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlhikkakemod": [
        "Modified Hikkake Pattern",
        "trader_cdlhikkakemod ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlhomingpigeon": [
        "Homing Pigeon",
        "trader_cdlhomingpigeon ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlidentical3crows": [
        "Identical Three Crows",
        "trader_cdlidentical3crows ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlinneck": [
        "In-Neck Pattern",
        "trader_cdlinneck ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlinvertedhammer": [
        "Inverted Hammer",
        "trader_cdlinvertedhammer ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlkicking": [
        "Kicking",
        "trader_cdlkicking ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlkickingbylength": [
        "Kicking - bull\/bear determined by the longer marubozu",
        "trader_cdlkickingbylength ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlladderbottom": [
        "Ladder Bottom",
        "trader_cdlladderbottom ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdllongleggeddoji": [
        "Long Legged Doji",
        "trader_cdllongleggeddoji ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdllongline": [
        "Long Line Candle",
        "trader_cdllongline ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlmarubozu": [
        "Marubozu",
        "trader_cdlmarubozu ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlmatchinglow": [
        "Matching Low",
        "trader_cdlmatchinglow ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlmathold": [
        "Mat Hold",
        "trader_cdlmathold ( array $open , array $high , array $low , array $close , float $penetration = ? ) : array"
    ],
    "trader_cdlmorningdojistar": [
        "Morning Doji Star",
        "trader_cdlmorningdojistar ( array $open , array $high , array $low , array $close , float $penetration = ? ) : array"
    ],
    "trader_cdlmorningstar": [
        "Morning Star",
        "trader_cdlmorningstar ( array $open , array $high , array $low , array $close , float $penetration = ? ) : array"
    ],
    "trader_cdlonneck": [
        "On-Neck Pattern",
        "trader_cdlonneck ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlpiercing": [
        "Piercing Pattern",
        "trader_cdlpiercing ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlrickshawman": [
        "Rickshaw Man",
        "trader_cdlrickshawman ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlrisefall3methods": [
        "Rising\/Falling Three Methods",
        "trader_cdlrisefall3methods ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlseparatinglines": [
        "Separating Lines",
        "trader_cdlseparatinglines ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlshootingstar": [
        "Shooting Star",
        "trader_cdlshootingstar ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlshortline": [
        "Short Line Candle",
        "trader_cdlshortline ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlspinningtop": [
        "Spinning Top",
        "trader_cdlspinningtop ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlstalledpattern": [
        "Stalled Pattern",
        "trader_cdlstalledpattern ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlsticksandwich": [
        "Stick Sandwich",
        "trader_cdlsticksandwich ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdltakuri": [
        "Takuri (Dragonfly Doji with very long lower shadow)",
        "trader_cdltakuri ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdltasukigap": [
        "Tasuki Gap",
        "trader_cdltasukigap ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlthrusting": [
        "Thrusting Pattern",
        "trader_cdlthrusting ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdltristar": [
        "Tristar Pattern",
        "trader_cdltristar ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlunique3river": [
        "Unique 3 River",
        "trader_cdlunique3river ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlupsidegap2crows": [
        "Upside Gap Two Crows",
        "trader_cdlupsidegap2crows ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_cdlxsidegap3methods": [
        "Upside\/Downside Gap Three Methods",
        "trader_cdlxsidegap3methods ( array $open , array $high , array $low , array $close ) : array"
    ],
    "trader_ceil": [
        "Vector Ceil",
        "trader_ceil ( array $real ) : array"
    ],
    "trader_cmo": [
        "Chande Momentum Oscillator",
        "trader_cmo ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_correl": [
        "Pearson's Correlation Coefficient (r)",
        "trader_correl ( array $real0 , array $real1 , int $timePeriod = ? ) : array"
    ],
    "trader_cos": [
        "Vector Trigonometric Cos",
        "trader_cos ( array $real ) : array"
    ],
    "trader_cosh": [
        "Vector Trigonometric Cosh",
        "trader_cosh ( array $real ) : array"
    ],
    "trader_dema": [
        "Double Exponential Moving Average",
        "trader_dema ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_div": [
        "Vector Arithmetic Div",
        "trader_div ( array $real0 , array $real1 ) : array"
    ],
    "trader_dx": [
        "Directional Movement Index",
        "trader_dx ( array $high , array $low , array $close , int $timePeriod = ? ) : array"
    ],
    "trader_ema": [
        "Exponential Moving Average",
        "trader_ema ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_errno": [
        "Get error code",
        "trader_errno ( ) : int"
    ],
    "trader_exp": [
        "Vector Arithmetic Exp",
        "trader_exp ( array $real ) : array"
    ],
    "trader_floor": [
        "Vector Floor",
        "trader_floor ( array $real ) : array"
    ],
    "trader_get_compat": [
        "Get compatibility mode",
        "trader_get_compat ( ) : int"
    ],
    "trader_get_unstable_period": [
        "Get unstable period",
        "trader_get_unstable_period ( int $functionId ) : int"
    ],
    "trader_ht_dcperiod": [
        "Hilbert Transform - Dominant Cycle Period",
        "trader_ht_dcperiod ( array $real ) : array"
    ],
    "trader_ht_dcphase": [
        "Hilbert Transform - Dominant Cycle Phase",
        "trader_ht_dcphase ( array $real ) : array"
    ],
    "trader_ht_phasor": [
        "Hilbert Transform - Phasor Components",
        "trader_ht_phasor ( array $real ) : array"
    ],
    "trader_ht_sine": [
        "Hilbert Transform - SineWave",
        "trader_ht_sine ( array $real ) : array"
    ],
    "trader_ht_trendline": [
        "Hilbert Transform - Instantaneous Trendline",
        "trader_ht_trendline ( array $real ) : array"
    ],
    "trader_ht_trendmode": [
        "Hilbert Transform - Trend vs Cycle Mode",
        "trader_ht_trendmode ( array $real ) : array"
    ],
    "trader_kama": [
        "Kaufman Adaptive Moving Average",
        "trader_kama ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_linearreg": [
        "Linear Regression",
        "trader_linearreg ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_linearreg_angle": [
        "Linear Regression Angle",
        "trader_linearreg_angle ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_linearreg_intercept": [
        "Linear Regression Intercept",
        "trader_linearreg_intercept ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_linearreg_slope": [
        "Linear Regression Slope",
        "trader_linearreg_slope ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_ln": [
        "Vector Log Natural",
        "trader_ln ( array $real ) : array"
    ],
    "trader_log10": [
        "Vector Log10",
        "trader_log10 ( array $real ) : array"
    ],
    "trader_ma": [
        "Moving average",
        "trader_ma ( array $real , int $timePeriod = ? , int $mAType = ? ) : array"
    ],
    "trader_macd": [
        "Moving Average Convergence\/Divergence",
        "trader_macd ( array $real , int $fastPeriod = ? , int $slowPeriod = ? , int $signalPeriod = ? ) : array"
    ],
    "trader_macdext": [
        "MACD with controllable MA type",
        "trader_macdext ( array $real , int $fastPeriod = ? , int $fastMAType = ? , int $slowPeriod = ? , int $slowMAType = ? , int $signalPeriod = ? , int $signalMAType = ? ) : array"
    ],
    "trader_macdfix": [
        "Moving Average Convergence\/Divergence Fix 12\/26",
        "trader_macdfix ( array $real , int $signalPeriod = ? ) : array"
    ],
    "trader_mama": [
        "MESA Adaptive Moving Average",
        "trader_mama ( array $real , float $fastLimit = ? , float $slowLimit = ? ) : array"
    ],
    "trader_mavp": [
        "Moving average with variable period",
        "trader_mavp ( array $real , array $periods , int $minPeriod = ? , int $maxPeriod = ? , int $mAType = ? ) : array"
    ],
    "trader_max": [
        "Highest value over a specified period",
        "trader_max ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_maxindex": [
        "Index of highest value over a specified period",
        "trader_maxindex ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_medprice": [
        "Median Price",
        "trader_medprice ( array $high , array $low ) : array"
    ],
    "trader_mfi": [
        "Money Flow Index",
        "trader_mfi ( array $high , array $low , array $close , array $volume , int $timePeriod = ? ) : array"
    ],
    "trader_midpoint": [
        "MidPoint over period",
        "trader_midpoint ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_midprice": [
        "Midpoint Price over period",
        "trader_midprice ( array $high , array $low , int $timePeriod = ? ) : array"
    ],
    "trader_min": [
        "Lowest value over a specified period",
        "trader_min ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_minindex": [
        "Index of lowest value over a specified period",
        "trader_minindex ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_minmax": [
        "Lowest and highest values over a specified period",
        "trader_minmax ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_minmaxindex": [
        "Indexes of lowest and highest values over a specified period",
        "trader_minmaxindex ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_minus_di": [
        "Minus Directional Indicator",
        "trader_minus_di ( array $high , array $low , array $close , int $timePeriod = ? ) : array"
    ],
    "trader_minus_dm": [
        "Minus Directional Movement",
        "trader_minus_dm ( array $high , array $low , int $timePeriod = ? ) : array"
    ],
    "trader_mom": [
        "Momentum",
        "trader_mom ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_mult": [
        "Vector Arithmetic Mult",
        "trader_mult ( array $real0 , array $real1 ) : array"
    ],
    "trader_natr": [
        "Normalized Average True Range",
        "trader_natr ( array $high , array $low , array $close , int $timePeriod = ? ) : array"
    ],
    "trader_obv": [
        "On Balance Volume",
        "trader_obv ( array $real , array $volume ) : array"
    ],
    "trader_plus_di": [
        "Plus Directional Indicator",
        "trader_plus_di ( array $high , array $low , array $close , int $timePeriod = ? ) : array"
    ],
    "trader_plus_dm": [
        "Plus Directional Movement",
        "trader_plus_dm ( array $high , array $low , int $timePeriod = ? ) : array"
    ],
    "trader_ppo": [
        "Percentage Price Oscillator",
        "trader_ppo ( array $real , int $fastPeriod = ? , int $slowPeriod = ? , int $mAType = ? ) : array"
    ],
    "trader_roc": [
        "Rate of change : ((price\/prevPrice)-1)*100",
        "trader_roc ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_rocp": [
        "Rate of change Percentage: (price-prevPrice)\/prevPrice",
        "trader_rocp ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_rocr": [
        "Rate of change ratio: (price\/prevPrice)",
        "trader_rocr ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_rocr100": [
        "Rate of change ratio 100 scale: (price\/prevPrice)*100",
        "trader_rocr100 ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_rsi": [
        "Relative Strength Index",
        "trader_rsi ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_sar": [
        "Parabolic SAR",
        "trader_sar ( array $high , array $low , float $acceleration = ? , float $maximum = ? ) : array"
    ],
    "trader_sarext": [
        "Parabolic SAR - Extended",
        "trader_sarext ( array $high , array $low , float $startValue = ? , float $offsetOnReverse = ? , float $accelerationInitLong = ? , float $accelerationLong = ? , float $accelerationMaxLong = ? , float $accelerationInitShort = ? , float $accelerationShort = ? , float $accelerationMaxShort = ? ) : array"
    ],
    "trader_set_compat": [
        "Set compatibility mode",
        "trader_set_compat ( int $compatId ) : void"
    ],
    "trader_set_unstable_period": [
        "Set unstable period",
        "trader_set_unstable_period ( int $functionId , int $timePeriod ) : void"
    ],
    "trader_sin": [
        "Vector Trigonometric Sin",
        "trader_sin ( array $real ) : array"
    ],
    "trader_sinh": [
        "Vector Trigonometric Sinh",
        "trader_sinh ( array $real ) : array"
    ],
    "trader_sma": [
        "Simple Moving Average",
        "trader_sma ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_sqrt": [
        "Vector Square Root",
        "trader_sqrt ( array $real ) : array"
    ],
    "trader_stddev": [
        "Standard Deviation",
        "trader_stddev ( array $real , int $timePeriod = ? , float $nbDev = ? ) : array"
    ],
    "trader_stoch": [
        "Stochastic",
        "trader_stoch ( array $high , array $low , array $close , int $fastK_Period = ? , int $slowK_Period = ? , int $slowK_MAType = ? , int $slowD_Period = ? , int $slowD_MAType = ? ) : array"
    ],
    "trader_stochf": [
        "Stochastic Fast",
        "trader_stochf ( array $high , array $low , array $close , int $fastK_Period = ? , int $fastD_Period = ? , int $fastD_MAType = ? ) : array"
    ],
    "trader_stochrsi": [
        "Stochastic Relative Strength Index",
        "trader_stochrsi ( array $real , int $timePeriod = ? , int $fastK_Period = ? , int $fastD_Period = ? , int $fastD_MAType = ? ) : array"
    ],
    "trader_sub": [
        "Vector Arithmetic Subtraction",
        "trader_sub ( array $real0 , array $real1 ) : array"
    ],
    "trader_sum": [
        "Summation",
        "trader_sum ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_t3": [
        "Triple Exponential Moving Average (T3)",
        "trader_t3 ( array $real , int $timePeriod = ? , float $vFactor = ? ) : array"
    ],
    "trader_tan": [
        "Vector Trigonometric Tan",
        "trader_tan ( array $real ) : array"
    ],
    "trader_tanh": [
        "Vector Trigonometric Tanh",
        "trader_tanh ( array $real ) : array"
    ],
    "trader_tema": [
        "Triple Exponential Moving Average",
        "trader_tema ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_trange": [
        "True Range",
        "trader_trange ( array $high , array $low , array $close ) : array"
    ],
    "trader_trima": [
        "Triangular Moving Average",
        "trader_trima ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_trix": [
        "1-day Rate-Of-Change (ROC) of a Triple Smooth EMA",
        "trader_trix ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_tsf": [
        "Time Series Forecast",
        "trader_tsf ( array $real , int $timePeriod = ? ) : array"
    ],
    "trader_typprice": [
        "Typical Price",
        "trader_typprice ( array $high , array $low , array $close ) : array"
    ],
    "trader_ultosc": [
        "Ultimate Oscillator",
        "trader_ultosc ( array $high , array $low , array $close , int $timePeriod1 = ? , int $timePeriod2 = ? , int $timePeriod3 = ? ) : array"
    ],
    "trader_var": [
        "Variance",
        "trader_var ( array $real , int $timePeriod = ? , float $nbDev = ? ) : array"
    ],
    "trader_wclprice": [
        "Weighted Close Price",
        "trader_wclprice ( array $high , array $low , array $close ) : array"
    ],
    "trader_willr": [
        "Williams' %R",
        "trader_willr ( array $high , array $low , array $close , int $timePeriod = ? ) : array"
    ],
    "trader_wma": [
        "Weighted Moving Average",
        "trader_wma ( array $real , int $timePeriod = ? ) : array"
    ],
    "trait_exists": [
        "Checks if the trait exists",
        "trait_exists ( string $traitname , bool $autoload = ? ) : bool"
    ],
    "transliterator_create": [
        "Create a transliterator",
        "transliterator_create ( string $id , int $direction = ? ) : Transliterator"
    ],
    "transliterator_create_from_rules": [
        "Create transliterator from rules",
        "transliterator_create_from_rules ( string $id , int $direction = ? ) : Transliterator"
    ],
    "transliterator_create_inverse": [
        "Create an inverse transliterator",
        "transliterator_create_inverse ( ) : Transliterator"
    ],
    "transliterator_get_error_code": [
        "Get last error code",
        "transliterator_get_error_code ( Transliterator $trans ) : int"
    ],
    "transliterator_get_error_message": [
        "Get last error message",
        "transliterator_get_error_message ( Transliterator $trans ) : string"
    ],
    "transliterator_list_ids": [
        "Get transliterator IDs",
        "transliterator_list_ids ( ) : array|false"
    ],
    "transliterator_transliterate": [
        "Transliterate a string",
        "transliterator_transliterate ( mixed $transliterator , string $subject , int $start = ? , int $end = ? )"
    ],
    "Traversable": [
        "Interface to detect if a class is traversable using foreach."
    ],
    "trigger_error": [
        "Generates a user-level error\/warning\/notice message",
        "trigger_error ( string $error_msg , int $error_type = E_USER_NOTICE ) : bool"
    ],
    "trim": [
        "Strip whitespace (or other characters) from the beginning and end of a string",
        "trim ( string $string , string $characters = \" \\n\\r\\t\\v\\0\" ) : string"
    ],
    "TypeError": [
        "There are three scenarios where a TypeError may be thrown. The first is where the argument type being passed to a function does not match its corresponding declared parameter type. The second is where a value being returned from a function does not match the declared function return type. The third is where an invalid number of arguments are passed to a built-in PHP function (strict mode only)."
    ],
    "uasort": [
        "Sort an array with a user-defined comparison function and maintain index association",
        "uasort ( array &$array , callable $callback ) : bool"
    ],
    "ucfirst": [
        "Make a string's first character uppercase",
        "ucfirst ( string $string ) : string"
    ],
    "UConverter": [
        "Create UConverter object",
        "new UConverter ( string $destination_encoding = ? , string $source_encoding = ? )"
    ],
    "ucwords": [
        "Uppercase the first character of each word in a string",
        "ucwords ( string $string , string $separators = \" \\t\\r\\n\\f\\v\" ) : string"
    ],
    "uksort": [
        "Sort an array by keys using a user-defined comparison function",
        "uksort ( array &$array , callable $callback ) : bool"
    ],
    "umask": [
        "Changes the current umask",
        "umask ( int $mask = ? ) : int"
    ],
    "UnderflowException": [
        "Exception thrown when performing an invalid operation on an empty container, such as removing an element."
    ],
    "UnexpectedValueException": [
        "Exception thrown if a value does not match with a set of values. Typically this happens when a function calls another function and expects the return value to be of a certain type or value not including arithmetic or buffer related errors."
    ],
    "UnhandledMatchError": [
        "An UnhandledMatchError is thrown when the subject passed to a match expression is not handled by any arm of the match expression."
    ],
    "uniqid": [
        "Generate a unique ID",
        "uniqid ( string $prefix = \"\" , bool $more_entropy = false ) : string"
    ],
    "unixtojd": [
        "Convert Unix timestamp to Julian Day",
        "unixtojd ( int|null $timestamp = null ) : int|false"
    ],
    "unlink": [
        "Deletes a file",
        "unlink ( string $filename , resource $context = ? ) : bool"
    ],
    "unpack": [
        "Unpack data from binary string",
        "unpack ( string $format , string $string , int $offset = 0 ) : array|false"
    ],
    "unregister_tick_function": [
        "De-register a function for execution on each tick",
        "unregister_tick_function ( callable $callback ) : void"
    ],
    "unserialize": [
        "Creates a PHP value from a stored representation",
        "unserialize ( string $data , array $options = [] ) : mixed"
    ],
    "unset": [
        "Unset a given variable",
        "unset ( mixed $var , mixed ...$vars ) : void"
    ],
    "untaint": [
        "Untaint strings",
        "untaint ( string &$string , string ...$strings ) : bool"
    ],
    "uopz_add_function": [
        "Adds non-existent function or method",
        "uopz_add_function ( string $function , Closure $handler , int &$flags = ZEND_ACC_PUBLIC ) : bool",
        "uopz_add_function ( string $class , string $function , Closure $handler , int &$flags = ZEND_ACC_PUBLIC , int &$all = true ) : bool"
    ],
    "uopz_allow_exit": [
        "Allows control over disabled exit opcode",
        "uopz_allow_exit ( bool $allow ) : void"
    ],
    "uopz_backup": [
        "Backup a function",
        "uopz_backup ( string $function ) : void",
        "uopz_backup ( string $class , string $function ) : void"
    ],
    "uopz_compose": [
        "Compose a class",
        "uopz_compose ( string $name , array $classes , array $methods = ? , array $properties = ? , int $flags = ? ) : void"
    ],
    "uopz_copy": [
        "Copy a function",
        "uopz_copy ( string $function ) : Closure",
        "uopz_copy ( string $class , string $function ) : Closure"
    ],
    "uopz_del_function": [
        "Deletes previously added function or method",
        "uopz_del_function ( string $function ) : bool",
        "uopz_del_function ( string $class , string $function , int &$all = true ) : bool"
    ],
    "uopz_delete": [
        "Delete a function",
        "uopz_delete ( string $function ) : void",
        "uopz_delete ( string $class , string $function ) : void"
    ],
    "uopz_extend": [
        "Extend a class at runtime",
        "uopz_extend ( string $class , string $parent ) : bool"
    ],
    "uopz_flags": [
        "Get or set flags on function or class",
        "uopz_flags ( string $function , int $flags = PHP_INT_MAX ) : int",
        "uopz_flags ( string $class , string $function , int $flags = PHP_INT_MAX ) : int"
    ],
    "uopz_function": [
        "Creates a function at runtime",
        "uopz_function ( string $function , Closure $handler , int $modifiers = ? ) : void",
        "uopz_function ( string $class , string $function , Closure $handler , int $modifiers = ? ) : void"
    ],
    "uopz_get_exit_status": [
        "Retrieve the last set exit status",
        "uopz_get_exit_status ( ) : mixed"
    ],
    "uopz_get_hook": [
        "Gets previously set hook on function or method",
        "uopz_get_hook ( string $function ) : Closure",
        "uopz_get_hook ( string $class , string $function ) : Closure"
    ],
    "uopz_get_mock": [
        "Get the current mock for a class",
        "uopz_get_mock ( string $class ) : mixed"
    ],
    "uopz_get_property": [
        "Gets value of class or instance property",
        "uopz_get_property ( string $class , string $property ) : mixed",
        "uopz_get_property ( object $instance , string $property ) : mixed"
    ],
    "uopz_get_return": [
        "Gets a previous set return value for a function",
        "uopz_get_return ( string $function ) : mixed",
        "uopz_get_return ( string $class , string $function ) : mixed"
    ],
    "uopz_get_static": [
        "Gets the static variables from function or method scope",
        "uopz_get_static ( string $class , string $function ) : array",
        "uopz_get_static ( string $function ) : array"
    ],
    "uopz_implement": [
        "Implements an interface at runtime",
        "uopz_implement ( string $class , string $interface ) : bool"
    ],
    "uopz_overload": [
        "Overload a VM opcode",
        "uopz_overload ( int $opcode , Callable $callable ) : void"
    ],
    "uopz_redefine": [
        "Redefine a constant",
        "uopz_redefine ( string $constant , mixed $value ) : bool",
        "uopz_redefine ( string $class , string $constant , mixed $value ) : bool"
    ],
    "uopz_rename": [
        "Rename a function at runtime",
        "uopz_rename ( string $function , string $rename ) : void",
        "uopz_rename ( string $class , string $function , string $rename ) : void"
    ],
    "uopz_restore": [
        "Restore a previously backed up function",
        "uopz_restore ( string $function ) : void",
        "uopz_restore ( string $class , string $function ) : void"
    ],
    "uopz_set_hook": [
        "Sets hook to execute when entering a function or method",
        "uopz_set_hook ( string $function , Closure $hook ) : bool",
        "uopz_set_hook ( string $class , string $function , Closure $hook ) : bool"
    ],
    "uopz_set_mock": [
        "Use mock instead of class for new objects",
        "uopz_set_mock ( string $class , mixed $mock ) : void"
    ],
    "uopz_set_property": [
        "Sets value of existing class or instance property",
        "uopz_set_property ( string $class , string $property , mixed $value ) : void",
        "uopz_set_property ( object $instance , string $property , mixed $value ) : void"
    ],
    "uopz_set_return": [
        "Provide a return value for an existing function",
        "uopz_set_return ( string $function , mixed $value , bool $execute = false ) : bool",
        "uopz_set_return ( string $class , string $function , mixed $value , bool $execute = false ) : bool"
    ],
    "uopz_set_static": [
        "Sets the static variables in function or method scope",
        "uopz_set_static ( string $function , array $static ) : void",
        "uopz_set_static ( string $class , string $function , array $static ) : void"
    ],
    "uopz_undefine": [
        "Undefine a constant",
        "uopz_undefine ( string $constant ) : bool",
        "uopz_undefine ( string $class , string $constant ) : bool"
    ],
    "uopz_unset_hook": [
        "Removes previously set hook on function or method",
        "uopz_unset_hook ( string $function ) : bool",
        "uopz_unset_hook ( string $class , string $function ) : bool"
    ],
    "uopz_unset_mock": [
        "Unset previously set mock",
        "uopz_unset_mock ( string $class ) : void"
    ],
    "uopz_unset_return": [
        "Unsets a previously set return value for a function",
        "uopz_unset_return ( string $function ) : bool",
        "uopz_unset_return ( string $class , string $function ) : bool"
    ],
    "urldecode": [
        "Decodes URL-encoded string",
        "urldecode ( string $string ) : string"
    ],
    "urlencode": [
        "URL-encodes string",
        "urlencode ( string $string ) : string"
    ],
    "use_soap_error_handler": [
        "Set whether to use the SOAP error handler",
        "use_soap_error_handler ( bool $enable = true ) : bool"
    ],
    "usleep": [
        "Delay execution in microseconds",
        "usleep ( int $microseconds ) : void"
    ],
    "usort": [
        "Sort an array by values using a user-defined comparison function",
        "usort ( array &$array , callable $callback ) : bool"
    ],
    "utf8_decode": [
        "Converts a string with ISO-8859-1 characters encoded with UTF-8\n   to single-byte ISO-8859-1",
        "utf8_decode ( string $string ) : string"
    ],
    "utf8_encode": [
        "Encodes an ISO-8859-1 string to UTF-8",
        "utf8_encode ( string $string ) : string"
    ],
    "V8Js": [
        "This is the core class for V8Js extension. Each instance created from this class has own context in which all JavaScript is compiled and executed.",
        "new V8Js ( string $object_name = \"PHP\" , array $variables = array() , array $extensions = array() , bool $report_uncaught_exceptions = true )"
    ],
    "ValueError": [
        "A ValueError is thrown when the type of an argument is correct but the value of it is incorrect. For example, passing a negative integer when the function expects a positive one, or passing an empty string\/array when the function expects it to not be empty."
    ],
    "var_dump": [
        "Dumps information about a variable",
        "var_dump ( mixed $value , mixed ...$values ) : void"
    ],
    "var_export": [
        "Outputs or returns a parsable string representation of a variable",
        "var_export ( mixed $value , bool $return = false ) : string|null"
    ],
    "variant": [
        "The VARIANT is COM's equivalent of the PHP zval; it is a structure that can contain a value with a range of different possible types. The variant class provided by the COM extension allows you to have more control over the way that PHP passes values to and from COM.",
        "new variant ( mixed $value = null , int $type = VT_EMPTY , int $codepage = CP_ACP )"
    ],
    "variant_abs": [
        "Returns the absolute value of a variant",
        "variant_abs ( mixed $value ) : variant"
    ],
    "variant_add": [
        "\"Adds\" two variant values together and returns the result",
        "variant_add ( mixed $left , mixed $right ) : variant"
    ],
    "variant_and": [
        "Performs a bitwise AND operation between two variants",
        "variant_and ( mixed $left , mixed $right ) : variant"
    ],
    "variant_cast": [
        "Convert a variant into a new variant object of another type",
        "variant_cast ( variant $variant , int $type ) : variant"
    ],
    "variant_cat": [
        "Concatenates two variant values together and returns the result",
        "variant_cat ( mixed $left , mixed $right ) : variant"
    ],
    "variant_cmp": [
        "Compares two variants",
        "variant_cmp ( mixed $left , mixed $right , int $locale_id = LOCALE_SYSTEM_DEFAULT , int $flags = 0 ) : int"
    ],
    "variant_date_from_timestamp": [
        "Returns a variant date representation of a Unix timestamp",
        "variant_date_from_timestamp ( int $timestamp ) : variant"
    ],
    "variant_date_to_timestamp": [
        "Converts a variant date\/time value to Unix timestamp",
        "variant_date_to_timestamp ( variant $variant ) : int|null"
    ],
    "variant_div": [
        "Returns the result from dividing two variants",
        "variant_div ( mixed $left , mixed $right ) : variant"
    ],
    "variant_eqv": [
        "Performs a bitwise equivalence on two variants",
        "variant_eqv ( mixed $left , mixed $right ) : variant"
    ],
    "variant_fix": [
        "Returns the integer portion of a variant",
        "variant_fix ( mixed $value ) : variant"
    ],
    "variant_get_type": [
        "Returns the type of a variant object",
        "variant_get_type ( variant $variant ) : int"
    ],
    "variant_idiv": [
        "Converts variants to integers and then returns the result from dividing them",
        "variant_idiv ( mixed $left , mixed $right ) : variant"
    ],
    "variant_imp": [
        "Performs a bitwise implication on two variants",
        "variant_imp ( mixed $left , mixed $right ) : variant"
    ],
    "variant_int": [
        "Returns the integer portion of a variant",
        "variant_int ( mixed $value ) : variant"
    ],
    "variant_mod": [
        "Divides two variants and returns only the remainder",
        "variant_mod ( mixed $left , mixed $right ) : variant"
    ],
    "variant_mul": [
        "Multiplies the values of the two variants",
        "variant_mul ( mixed $left , mixed $right ) : variant"
    ],
    "variant_neg": [
        "Performs logical negation on a variant",
        "variant_neg ( mixed $value ) : variant"
    ],
    "variant_not": [
        "Performs bitwise not negation on a variant",
        "variant_not ( mixed $value ) : variant"
    ],
    "variant_or": [
        "Performs a logical disjunction on two variants",
        "variant_or ( mixed $left , mixed $right ) : variant"
    ],
    "variant_pow": [
        "Returns the result of performing the power function with two variants",
        "variant_pow ( mixed $left , mixed $right ) : variant"
    ],
    "variant_round": [
        "Rounds a variant to the specified number of decimal places",
        "variant_round ( mixed $value , int $decimals ) : variant|null"
    ],
    "variant_set": [
        "Assigns a new value for a variant object",
        "variant_set ( variant $variant , mixed $value ) : void"
    ],
    "variant_set_type": [
        "Convert a variant into another type \"in-place\"",
        "variant_set_type ( variant $variant , int $type ) : void"
    ],
    "variant_sub": [
        "Subtracts the value of the right variant from the left variant value",
        "variant_sub ( mixed $left , mixed $right ) : variant"
    ],
    "variant_xor": [
        "Performs a logical exclusion on two variants",
        "variant_xor ( mixed $left , mixed $right ) : variant"
    ],
    "VarnishAdmin": [
        "VarnishAdmin constructor",
        "new VarnishAdmin ( array $args = ? )"
    ],
    "VarnishLog": [
        "Varnishlog constructor",
        "new VarnishLog ( array $args = ? )"
    ],
    "VarnishStat": [
        "VarnishStat constructor",
        "new VarnishStat ( array $args = ? )"
    ],
    "version_compare": [
        "Compares two \"PHP-standardized\" version number strings",
        "version_compare ( string $version1 , string $version2 ) : int",
        "version_compare ( string $version1 , string $version2 , string $operator ) : bool"
    ],
    "vfprintf": [
        "Write a formatted string to a stream",
        "vfprintf ( resource $stream , string $format , array $values ) : int"
    ],
    "virtual": [
        "Perform an Apache sub-request",
        "virtual ( string $uri ) : bool"
    ],
    "Volatile": [
        "The Volatile class is new to pthreads v3. Its introduction is a consequence of the new immutability semantics of Threaded members of Threaded classes. The Volatile class enables for mutability of its Threaded members, and is also used to store PHP arrays in Threaded contexts."
    ],
    "vprintf": [
        "Output a formatted string",
        "vprintf ( string $format , array $values ) : int"
    ],
    "vsprintf": [
        "Return a formatted string",
        "vsprintf ( string $format , array $values ) : string"
    ],
    "wddx_add_vars": [
        "Add variables to a WDDX packet with the specified ID",
        "wddx_add_vars ( resource $packet_id , mixed $var_name , mixed ...$var_names ) : bool"
    ],
    "wddx_deserialize": [
        "Unserializes a WDDX packet",
        "wddx_deserialize ( string $packet ) : mixed"
    ],
    "wddx_packet_end": [
        "Ends a WDDX packet with the specified ID",
        "wddx_packet_end ( resource $packet_id ) : string"
    ],
    "wddx_packet_start": [
        "Starts a new WDDX packet with structure inside it",
        "wddx_packet_start ( string $comment = ? ) : resource"
    ],
    "wddx_serialize_value": [
        "Serialize a single value into a WDDX packet",
        "wddx_serialize_value ( mixed $var , string $comment = ? ) : string"
    ],
    "wddx_serialize_vars": [
        "Serialize variables into a WDDX packet",
        "wddx_serialize_vars ( mixed $var_name , mixed ...$var_names ) : string"
    ],
    "WeakMap": [
        "Constructs a new map",
        "new WeakMap ( )"
    ],
    "WeakRef": [
        "The WeakRef class provides a gateway to objects without preventing the garbage collector from freeing those objects. It also provides a way to turn a weak reference into a strong one.",
        "new Weakref ( object $object )"
    ],
    "WeakReference": [
        "Weak references allow the programmer to retain a reference to an object which does not prevent the object from being destroyed. They are useful for implementing cache like structures.",
        "new WeakReference ( )"
    ],
    "win32_continue_service": [
        "Resumes a paused service",
        "win32_continue_service ( string $servicename , string $machine = ? ) : void"
    ],
    "win32_create_service": [
        "Creates a new service entry in the SCM database",
        "win32_create_service ( array $details , string $machine = ? ) : void"
    ],
    "win32_delete_service": [
        "Deletes a service entry from the SCM database",
        "win32_delete_service ( string $servicename , string $machine = ? ) : void"
    ],
    "win32_get_last_control_message": [
        "Returns the last control message that was sent to this service",
        "win32_get_last_control_message ( ) : int"
    ],
    "win32_pause_service": [
        "Pauses a service",
        "win32_pause_service ( string $servicename , string $machine = ? ) : void"
    ],
    "win32_query_service_status": [
        "Queries the status of a service",
        "win32_query_service_status ( string $servicename , string $machine = ? ) : array"
    ],
    "win32_send_custom_control": [
        "Send a custom control to the service",
        "win32_send_custom_control ( string $servicename , int $control , string $machine = ? ) : void"
    ],
    "win32_set_service_exit_code": [
        "Define or return the exit code for the current running service",
        "win32_set_service_exit_code ( int $exitCode = 1 ) : int"
    ],
    "win32_set_service_exit_mode": [
        "Define or return the exit mode for the current running service",
        "win32_set_service_exit_mode ( bool $gracefulMode = true ) : bool"
    ],
    "win32_set_service_status": [
        "Update the service status",
        "win32_set_service_status ( int $status , int $checkpoint = 0 ) : void"
    ],
    "win32_start_service": [
        "Starts a service",
        "win32_start_service ( string $servicename , string $machine = ? ) : void"
    ],
    "win32_start_service_ctrl_dispatcher": [
        "Registers the script with the SCM, so that it can act as the service with the given name",
        "win32_start_service_ctrl_dispatcher ( string $name , bool $gracefulMode = true ) : void"
    ],
    "win32_stop_service": [
        "Stops a service",
        "win32_stop_service ( string $servicename , string $machine = ? ) : void"
    ],
    "Win32ServiceException": [
        "The exception replaces the old mechanism where the error value needed to be compared to constants to detect which error was emitted. The Exception code is equal to the value of the error value and the exception message is based on the corresponding constant name."
    ],
    "wincache_fcache_fileinfo": [
        "Retrieves information about files cached in the file cache",
        "wincache_fcache_fileinfo ( bool $summaryonly = false ) : array|false"
    ],
    "wincache_fcache_meminfo": [
        "Retrieves information about file cache memory usage",
        "wincache_fcache_meminfo ( ) : array|false"
    ],
    "wincache_lock": [
        "Acquires an exclusive lock on a given key",
        "wincache_lock ( string $key , bool $isglobal = false ) : bool"
    ],
    "wincache_ocache_fileinfo": [
        "Retrieves information about files cached in the opcode cache",
        "wincache_ocache_fileinfo ( bool $summaryonly = false ) : array|false"
    ],
    "wincache_ocache_meminfo": [
        "Retrieves information about opcode cache memory usage",
        "wincache_ocache_meminfo ( ) : array|false"
    ],
    "wincache_refresh_if_changed": [
        "Refreshes the cache entries for the cached files",
        "wincache_refresh_if_changed ( array $files = NULL ) : bool"
    ],
    "wincache_rplist_fileinfo": [
        "Retrieves information about resolve file path cache",
        "wincache_rplist_fileinfo ( bool $summaryonly = false ) : array|false"
    ],
    "wincache_rplist_meminfo": [
        "Retrieves information about memory usage by the resolve file path cache",
        "wincache_rplist_meminfo ( ) : array|false"
    ],
    "wincache_scache_info": [
        "Retrieves information about files cached in the session cache",
        "wincache_scache_info ( bool $summaryonly = false ) : array|false"
    ],
    "wincache_scache_meminfo": [
        "Retrieves information about session cache memory usage",
        "wincache_scache_meminfo ( ) : array|false"
    ],
    "wincache_ucache_add": [
        "Adds a variable in user cache only if variable does not already exist in the cache",
        "wincache_ucache_add ( string $key , mixed $value , int $ttl = 0 ) : bool",
        "wincache_ucache_add ( array $values , mixed $unused = NULL , int $ttl = 0 ) : bool"
    ],
    "wincache_ucache_cas": [
        "Compares the variable with old value and assigns new value to it",
        "wincache_ucache_cas ( string $key , int $old_value , int $new_value ) : bool"
    ],
    "wincache_ucache_clear": [
        "Deletes entire content of the user cache",
        "wincache_ucache_clear ( ) : bool"
    ],
    "wincache_ucache_dec": [
        "Decrements the value associated with the key",
        "wincache_ucache_dec ( string $key , int $dec_by = 1 , bool &$success = ? ) : mixed"
    ],
    "wincache_ucache_delete": [
        "Deletes variables from the user cache",
        "wincache_ucache_delete ( mixed $key ) : bool"
    ],
    "wincache_ucache_exists": [
        "Checks if a variable exists in the user cache",
        "wincache_ucache_exists ( string $key ) : bool"
    ],
    "wincache_ucache_get": [
        "Gets a variable stored in the user cache",
        "wincache_ucache_get ( mixed $key , bool &$success = ? ) : mixed"
    ],
    "wincache_ucache_inc": [
        "Increments the value associated with the key",
        "wincache_ucache_inc ( string $key , int $inc_by = 1 , bool &$success = ? ) : mixed"
    ],
    "wincache_ucache_info": [
        "Retrieves information about data stored in the user cache",
        "wincache_ucache_info ( bool $summaryonly = false , string $key = NULL ) : array|false"
    ],
    "wincache_ucache_meminfo": [
        "Retrieves information about user cache memory usage",
        "wincache_ucache_meminfo ( ) : array|false"
    ],
    "wincache_ucache_set": [
        "Adds a variable in user cache and overwrites a variable if it already exists in the cache",
        "wincache_ucache_set ( mixed $key , mixed $value , int $ttl = 0 ) : bool",
        "wincache_ucache_set ( array $values , mixed $unused = NULL , int $ttl = 0 ) : bool"
    ],
    "wincache_unlock": [
        "Releases an exclusive lock on a given key",
        "wincache_unlock ( string $key ) : bool"
    ],
    "wordwrap": [
        "Wraps a string to a given number of characters",
        "wordwrap ( string $string , int $width = 75 , string $break = \"\\n\" , bool $cut_long_words = false ) : string"
    ],
    "Worker": [
        "Worker Threads have a persistent context, as such should be used over Threads in most cases."
    ],
    "xattr_get": [
        "Get an extended attribute",
        "xattr_get ( string $filename , string $name , int $flags = 0 ) : string"
    ],
    "xattr_list": [
        "Get a list of extended attributes",
        "xattr_list ( string $filename , int $flags = 0 ) : array"
    ],
    "xattr_remove": [
        "Remove an extended attribute",
        "xattr_remove ( string $filename , string $name , int $flags = 0 ) : bool"
    ],
    "xattr_set": [
        "Set an extended attribute",
        "xattr_set ( string $filename , string $name , string $value , int $flags = 0 ) : bool"
    ],
    "xattr_supported": [
        "Check if filesystem supports extended attributes",
        "xattr_supported ( string $filename , int $flags = 0 ) : bool"
    ],
    "xdiff_file_bdiff": [
        "Make binary diff of two files",
        "xdiff_file_bdiff ( string $old_file , string $new_file , string $dest ) : bool"
    ],
    "xdiff_file_bdiff_size": [
        "Read a size of file created by applying a binary diff",
        "xdiff_file_bdiff_size ( string $file ) : int"
    ],
    "xdiff_file_bpatch": [
        "Patch a file with a binary diff",
        "xdiff_file_bpatch ( string $file , string $patch , string $dest ) : bool"
    ],
    "xdiff_file_diff": [
        "Make unified diff of two files",
        "xdiff_file_diff ( string $old_file , string $new_file , string $dest , int $context = 3 , bool $minimal = false ) : bool"
    ],
    "xdiff_file_diff_binary": [
        "Alias of xdiff_file_bdiff",
        "xdiff_file_diff_binary ( string $old_file , string $new_file , string $dest ) : bool"
    ],
    "xdiff_file_merge3": [
        "Merge 3 files into one",
        "xdiff_file_merge3 ( string $old_file , string $new_file1 , string $new_file2 , string $dest ) : mixed"
    ],
    "xdiff_file_patch": [
        "Patch a file with an unified diff",
        "xdiff_file_patch ( string $file , string $patch , string $dest , int $flags = DIFF_PATCH_NORMAL ) : mixed"
    ],
    "xdiff_file_patch_binary": [
        "Alias of xdiff_file_bpatch",
        "xdiff_file_patch_binary ( string $file , string $patch , string $dest ) : bool"
    ],
    "xdiff_file_rabdiff": [
        "Make binary diff of two files using the Rabin's polynomial fingerprinting algorithm",
        "xdiff_file_rabdiff ( string $old_file , string $new_file , string $dest ) : bool"
    ],
    "xdiff_string_bdiff": [
        "Make binary diff of two strings",
        "xdiff_string_bdiff ( string $old_data , string $new_data ) : string"
    ],
    "xdiff_string_bdiff_size": [
        "Read a size of file created by applying a binary diff",
        "xdiff_string_bdiff_size ( string $patch ) : int"
    ],
    "xdiff_string_bpatch": [
        "Patch a string with a binary diff",
        "xdiff_string_bpatch ( string $str , string $patch ) : string"
    ],
    "xdiff_string_diff": [
        "Make unified diff of two strings",
        "xdiff_string_diff ( string $old_data , string $new_data , int $context = 3 , bool $minimal = false ) : string"
    ],
    "xdiff_string_merge3": [
        "Merge 3 strings into one",
        "xdiff_string_merge3 ( string $old_data , string $new_data1 , string $new_data2 , string &$error = ? ) : mixed"
    ],
    "xdiff_string_patch": [
        "Patch a string with an unified diff",
        "xdiff_string_patch ( string $str , string $patch , int $flags = ? , string &$error = ? ) : string"
    ],
    "xdiff_string_patch_binary": [
        "Alias of xdiff_string_bpatch",
        "xdiff_string_patch_binary ( string $str , string $patch ) : string"
    ],
    "xhprof_disable": [
        "Stops xhprof profiler",
        "xhprof_disable ( ) : array"
    ],
    "xhprof_enable": [
        "Start xhprof profiler",
        "xhprof_enable ( int $flags = 0 , array $options = ? ) : void"
    ],
    "xhprof_sample_disable": [
        "Stops xhprof sample profiler",
        "xhprof_sample_disable ( ) : array"
    ],
    "xhprof_sample_enable": [
        "Start XHProf profiling in sampling mode",
        "xhprof_sample_enable ( ) : void"
    ],
    "xml_error_string": [
        "Get XML parser error string",
        "xml_error_string ( int $error_code ) : string|null"
    ],
    "xml_get_current_byte_index": [
        "Get current byte index for an XML parser",
        "xml_get_current_byte_index ( XMLParser $parser ) : int"
    ],
    "xml_get_current_column_number": [
        "Get current column number for an XML parser",
        "xml_get_current_column_number ( XMLParser $parser ) : int"
    ],
    "xml_get_current_line_number": [
        "Get current line number for an XML parser",
        "xml_get_current_line_number ( XMLParser $parser ) : int"
    ],
    "xml_get_error_code": [
        "Get XML parser error code",
        "xml_get_error_code ( XMLParser $parser ) : int"
    ],
    "xml_parse": [
        "Start parsing an XML document",
        "xml_parse ( XMLParser $parser , string $data , bool $is_final = false ) : int"
    ],
    "xml_parse_into_struct": [
        "Parse XML data into an array structure",
        "xml_parse_into_struct ( XMLParser $parser , string $data , array &$values , array &$index = null ) : int"
    ],
    "xml_parser_create": [
        "Create an XML parser",
        "xml_parser_create ( string|null $encoding = null ) : XMLParser"
    ],
    "xml_parser_create_ns": [
        "Create an XML parser with namespace support",
        "xml_parser_create_ns ( string|null $encoding = null , string $separator = \":\" ) : XMLParser"
    ],
    "xml_parser_free": [
        "Free an XML parser",
        "xml_parser_free ( XMLParser $parser ) : bool"
    ],
    "xml_parser_get_option": [
        "Get options from an XML parser",
        "xml_parser_get_option ( XMLParser $parser , int $option ) : string|int"
    ],
    "xml_parser_set_option": [
        "Set options in an XML parser",
        "xml_parser_set_option ( XMLParser $parser , int $option , string|int $value ) : bool"
    ],
    "xml_set_character_data_handler": [
        "Set up character data handler",
        "xml_set_character_data_handler ( XMLParser $parser , callable $handler ) : bool"
    ],
    "xml_set_default_handler": [
        "Set up default handler",
        "xml_set_default_handler ( XMLParser $parser , callable $handler ) : bool"
    ],
    "xml_set_element_handler": [
        "Set up start and end element handlers",
        "xml_set_element_handler ( XMLParser $parser , callable $start_handler , callable $end_handler ) : bool"
    ],
    "xml_set_end_namespace_decl_handler": [
        "Set up end namespace declaration handler",
        "xml_set_end_namespace_decl_handler ( XMLParser $parser , callable $handler ) : bool"
    ],
    "xml_set_external_entity_ref_handler": [
        "Set up external entity reference handler",
        "xml_set_external_entity_ref_handler ( XMLParser $parser , callable $handler ) : bool"
    ],
    "xml_set_notation_decl_handler": [
        "Set up notation declaration handler",
        "xml_set_notation_decl_handler ( XMLParser $parser , callable $handler ) : bool"
    ],
    "xml_set_object": [
        "Use XML Parser within an object",
        "xml_set_object ( XMLParser $parser , object $object ) : bool"
    ],
    "xml_set_processing_instruction_handler": [
        "Set up processing instruction (PI) handler",
        "xml_set_processing_instruction_handler ( XMLParser $parser , callable $handler ) : bool"
    ],
    "xml_set_start_namespace_decl_handler": [
        "Set up start namespace declaration handler",
        "xml_set_start_namespace_decl_handler ( XMLParser $parser , callable $handler ) : bool"
    ],
    "xml_set_unparsed_entity_decl_handler": [
        "Set up unparsed entity declaration handler",
        "xml_set_unparsed_entity_decl_handler ( XMLParser $parser , callable $handler ) : bool"
    ],
    "XmlParser": [
        "A fully opaque class which replaces xml resources as of PHP 8.0.0."
    ],
    "XMLReader": [
        "The XMLReader extension is an XML Pull parser. The reader acts as a cursor going forward on the document stream and stopping at each node on the way."
    ],
    "xmlrpc_decode": [
        "Decodes XML into native PHP types",
        "xmlrpc_decode ( string $xml , string $encoding = \"iso-8859-1\" ) : mixed"
    ],
    "xmlrpc_decode_request": [
        "Decodes XML into native PHP types",
        "xmlrpc_decode_request ( string $xml , string &$method , string $encoding = ? ) : mixed"
    ],
    "xmlrpc_encode": [
        "Generates XML for a PHP value",
        "xmlrpc_encode ( mixed $value ) : string"
    ],
    "xmlrpc_encode_request": [
        "Generates XML for a method request",
        "xmlrpc_encode_request ( string $method , mixed $params , array $output_options = ? ) : string"
    ],
    "xmlrpc_get_type": [
        "Gets xmlrpc type for a PHP value",
        "xmlrpc_get_type ( mixed $value ) : string"
    ],
    "xmlrpc_is_fault": [
        "Determines if an array value represents an XMLRPC fault",
        "xmlrpc_is_fault ( array $arg ) : bool"
    ],
    "xmlrpc_parse_method_descriptions": [
        "Decodes XML into a list of method descriptions",
        "xmlrpc_parse_method_descriptions ( string $xml ) : array"
    ],
    "xmlrpc_server_add_introspection_data": [
        "Adds introspection documentation",
        "xmlrpc_server_add_introspection_data ( resource $server , array $desc ) : int"
    ],
    "xmlrpc_server_call_method": [
        "Parses XML requests and call methods",
        "xmlrpc_server_call_method ( resource $server , string $xml , mixed $user_data , array $output_options = ? ) : string"
    ],
    "xmlrpc_server_create": [
        "Creates an xmlrpc server",
        "xmlrpc_server_create ( ) : resource"
    ],
    "xmlrpc_server_destroy": [
        "Destroys server resources",
        "xmlrpc_server_destroy ( resource $server ) : bool"
    ],
    "xmlrpc_server_register_introspection_callback": [
        "Register a PHP function to generate documentation",
        "xmlrpc_server_register_introspection_callback ( resource $server , string $function ) : bool"
    ],
    "xmlrpc_server_register_method": [
        "Register a PHP function to resource method matching method_name",
        "xmlrpc_server_register_method ( resource $server , string $method_name , string $function ) : bool"
    ],
    "xmlrpc_set_type": [
        "Sets xmlrpc type, base64 or datetime, for a PHP string value",
        "xmlrpc_set_type ( string &$value , string $type ) : bool"
    ],
    "xmlwriter_end_attribute": [
        "End attribute",
        "xmlwriter_end_attribute ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_end_cdata": [
        "End current CDATA",
        "xmlwriter_end_cdata ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_end_comment": [
        "Create end comment",
        "xmlwriter_end_comment ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_end_document": [
        "End current document",
        "xmlwriter_end_document ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_end_dtd": [
        "End current DTD",
        "xmlwriter_end_dtd ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_end_dtd_attlist": [
        "End current DTD AttList",
        "xmlwriter_end_dtd_attlist ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_end_dtd_element": [
        "End current DTD element",
        "xmlwriter_end_dtd_element ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_end_dtd_entity": [
        "End current DTD Entity",
        "xmlwriter_end_dtd_entity ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_end_element": [
        "End current element",
        "xmlwriter_end_element ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_end_pi": [
        "End current PI",
        "xmlwriter_end_pi ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_flush": [
        "Flush current buffer",
        "xmlwriter_flush ( XMLWriter $writer , bool $empty = true ) : string|int"
    ],
    "xmlwriter_full_end_element": [
        "End current element",
        "xmlwriter_full_end_element ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_open_memory": [
        "Create new xmlwriter using memory for string output",
        "xmlwriter_open_memory ( ) : XMLWriter|false"
    ],
    "xmlwriter_open_uri": [
        "Create new xmlwriter using source uri for output",
        "xmlwriter_open_uri ( string $uri ) : XMLWriter|false"
    ],
    "xmlwriter_output_memory": [
        "Returns current buffer",
        "xmlwriter_output_memory ( XMLWriter $writer , bool $flush = true ) : string"
    ],
    "xmlwriter_set_indent": [
        "Toggle indentation on\/off",
        "xmlwriter_set_indent ( XMLWriter $writer , bool $enable ) : bool"
    ],
    "xmlwriter_set_indent_string": [
        "Set string used for indenting",
        "xmlwriter_set_indent_string ( XMLWriter $writer , string $indentation ) : bool"
    ],
    "xmlwriter_start_attribute": [
        "Create start attribute",
        "xmlwriter_start_attribute ( XMLWriter $writer , string $name ) : bool"
    ],
    "xmlwriter_start_attribute_ns": [
        "Create start namespaced attribute",
        "xmlwriter_start_attribute_ns ( XMLWriter $writer , string|null $prefix , string $name , string|null $namespace ) : bool"
    ],
    "xmlwriter_start_cdata": [
        "Create start CDATA tag",
        "xmlwriter_start_cdata ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_start_comment": [
        "Create start comment",
        "xmlwriter_start_comment ( XMLWriter $writer ) : bool"
    ],
    "xmlwriter_start_document": [
        "Create document tag",
        "xmlwriter_start_document ( XMLWriter $writer , string|null $version = \"1.0\" , string|null $encoding = null , string|null $standalone = null ) : bool"
    ],
    "xmlwriter_start_dtd": [
        "Create start DTD tag",
        "xmlwriter_start_dtd ( XMLWriter $writer , string $qualifiedName , string|null $publicId = null , string|null $systemId = null ) : bool"
    ],
    "xmlwriter_start_dtd_attlist": [
        "Create start DTD AttList",
        "xmlwriter_start_dtd_attlist ( XMLWriter $writer , string $name ) : bool"
    ],
    "xmlwriter_start_dtd_element": [
        "Create start DTD element",
        "xmlwriter_start_dtd_element ( XMLWriter $writer , string $qualifiedName ) : bool"
    ],
    "xmlwriter_start_dtd_entity": [
        "Create start DTD Entity",
        "xmlwriter_start_dtd_entity ( XMLWriter $writer , string $name , bool $isParam ) : bool"
    ],
    "xmlwriter_start_element": [
        "Create start element tag",
        "xmlwriter_start_element ( XMLWriter $writer , string $name ) : bool"
    ],
    "xmlwriter_start_element_ns": [
        "Create start namespaced element tag",
        "xmlwriter_start_element_ns ( XMLWriter $writer , string|null $prefix , string $name , string|null $namespace ) : bool"
    ],
    "xmlwriter_start_pi": [
        "Create start PI tag",
        "xmlwriter_start_pi ( XMLWriter $writer , string $target ) : bool"
    ],
    "xmlwriter_text": [
        "Write text",
        "xmlwriter_text ( XMLWriter $writer , string $content ) : bool"
    ],
    "xmlwriter_write_attribute": [
        "Write full attribute",
        "xmlwriter_write_attribute ( XMLWriter $writer , string $name , string $value ) : bool"
    ],
    "xmlwriter_write_attribute_ns": [
        "Write full namespaced attribute",
        "xmlwriter_write_attribute_ns ( XMLWriter $writer , string|null $prefix , string $name , string|null $namespace , string $value ) : bool"
    ],
    "xmlwriter_write_cdata": [
        "Write full CDATA tag",
        "xmlwriter_write_cdata ( XMLWriter $writer , string $content ) : bool"
    ],
    "xmlwriter_write_comment": [
        "Write full comment tag",
        "xmlwriter_write_comment ( XMLWriter $writer , string $content ) : bool"
    ],
    "xmlwriter_write_dtd": [
        "Write full DTD tag",
        "xmlwriter_write_dtd ( XMLWriter $writer , string $name , string|null $publicId = null , string|null $systemId = null , string|null $content = null ) : bool"
    ],
    "xmlwriter_write_dtd_attlist": [
        "Write full DTD AttList tag",
        "xmlwriter_write_dtd_attlist ( XMLWriter $writer , string $name , string $content ) : bool"
    ],
    "xmlwriter_write_dtd_element": [
        "Write full DTD element tag",
        "xmlwriter_write_dtd_element ( XMLWriter $writer , string $name , string $content ) : bool"
    ],
    "xmlwriter_write_dtd_entity": [
        "Write full DTD Entity tag",
        "xmlwriter_write_dtd_entity ( XMLWriter $writer , string $name , string $content , bool $isParam = false , string|null $publicId = null , string|null $systemId = null , string|null $notationData = null ) : bool"
    ],
    "xmlwriter_write_element": [
        "Write full element tag",
        "xmlwriter_write_element ( XMLWriter $writer , string $name , string|null $content = null ) : bool"
    ],
    "xmlwriter_write_element_ns": [
        "Write full namespaced element tag",
        "xmlwriter_write_element_ns ( XMLWriter $writer , string|null $prefix , string $name , string|null $namespace , string|null $content = null ) : bool"
    ],
    "xmlwriter_write_pi": [
        "Writes a PI",
        "xmlwriter_write_pi ( XMLWriter $writer , string $target , string $content ) : bool"
    ],
    "xmlwriter_write_raw": [
        "Write a raw XML text",
        "xmlwriter_write_raw ( XMLWriter $writer , string $content ) : bool"
    ],
    "XSLTProcessor": [
        "Creates a new XSLTProcessor object",
        "XSLTProcessor::__construct ( )"
    ],
    "Yac": [
        "Constructor",
        "new Yac ( string $prefix = \"\" )"
    ],
    "Yaconf": [
        "Yaconf is a configurations container, it parses INIT files, stores the result in PHP when PHP is started, the result lives with the whole PHP lifecycle."
    ],
    "Yaf_Action_Abstract": [
        "A action can be defined in a separate file in Yaf(see Yaf_Controller_Abstract). that is a action method can also be a Yaf_Action_Abstract class."
    ],
    "Yaf_Application": [
        "Yaf_Application constructor",
        "new Yaf_Application ( mixed $config , string $envrion = ? )"
    ],
    "Yaf_Bootstrap_Abstract": [
        "Bootstrap is a mechanism used to do some initial config before a Application run."
    ],
    "Yaf_Config_Ini": [
        "Yaf_Config_Ini enables developers to store configuration data in a familiar INI format and read them in the application by using nested object property syntax. The INI format is specialized to provide both the ability to have a hierarchy of configuration data keys and inheritance between configuration data sections. Configuration data hierarchies are supported by separating the keys with the dot or period character (\".\"). A section may extend or inherit from another section by following the section name with a colon character (\":\") and the name of the section from which data are to be inherited.",
        "new Yaf_Config_Ini ( string $config_file , string $section = ? )"
    ],
    "Yaf_Config_Simple": [
        "The __construct purpose",
        "new Yaf_Config_Simple ( array $configs , bool $readonly = false )"
    ],
    "Yaf_Controller_Abstract": [
        "Yaf_Controller_Abstract is the heart of Yaf's system. MVC stands for Model-View-Controller and is a design pattern targeted at separating application logic from display logic."
    ],
    "Yaf_Dispatcher": [
        "Yaf_Dispatcher purpose is to initialize the request environment, route the incoming request, and then dispatch any discovered actions; it aggregates any responses and returns them when the process is complete.",
        "new Yaf_Dispatcher ( )"
    ],
    "Yaf_Exception": [
        "The __construct purpose",
        "new Yaf_Exception ( )"
    ],
    "Yaf_Loader": [
        "Yaf_Loader introduces a comprehensive autoloading solution for Yaf."
    ],
    "Yaf_Plugin_Abstract": [
        "Plugins allow for easy extensibility and customization of the framework."
    ],
    "Yaf_Registry": [
        "All methods of Yaf_Registry declared as static, making it unversally accessible. This provides the ability to get or set any custom data from anyway in your code as necessary."
    ],
    "Yaf_Request_Http": [
        "Any request from client is initialized as a Yaf_Request_Http. you can get the request information like, uri query and post parameters via methods of this class.",
        "new Yaf_Request_Http ( string $request_uri = ? , string $base_uri = ? )"
    ],
    "Yaf_Request_Simple": [
        "Yaf_Request_Simple is particularlly used for test puporse. ie. simulate some espacial request under CLI mode.",
        "new Yaf_Request_Simple ( string $method = ? , string $module = ? , string $controller = ? , string $action = ? , array $params = ? )"
    ],
    "Yaf_Response_Abstract": [
        "The __construct purpose",
        "new Yaf_Response_Abstract ( )"
    ],
    "Yaf_Route_Interface": [
        "Yaf_Route_Interface used for developer defined their custom route."
    ],
    "Yaf_Route_Map": [
        "Yaf_Route_Map is a built-in route, it simply convert a URI endpoint (that part of the URI which comes after the base URI: see Yaf_Request_Abstract::setBaseUri()) to a controller name or action name(depends on the parameter passed to Yaf_Route_Map::__construct()) in following rule: A => controller A. A\/B\/C => controller A_B_C. A\/B\/C\/D\/E => controller A_B_C_D_E.",
        "new Yaf_Route_Map ( string $controller_prefer = false , string $delimiter = \"\" )"
    ],
    "Yaf_Route_Regex": [
        "Yaf_Route_Regex is the most flexible route among the Yaf built-in routes.",
        "new Yaf_Route_Regex ( string $match , array $route , array $map = ? , array $verify = ? , string $reverse = ? )"
    ],
    "Yaf_Route_Rewrite": [
        "For usage, please see the example section of Yaf_Route_Rewrite::__construct()",
        "new Yaf_Route_Rewrite ( string $match , array $route , array $verify = ? )"
    ],
    "Yaf_Route_Simple": [
        "Yaf_Route_Simple will match the query string, and find the route info.",
        "new Yaf_Route_Simple ( string $module_name , string $controller_name , string $action_name )"
    ],
    "Yaf_Route_Static": [
        "Defaultly, Yaf_Router only have a Yaf_Route_Static as its default route."
    ],
    "Yaf_Route_Supervar": [
        "The __construct purpose",
        "new Yaf_Route_Supervar ( string $supervar_name )"
    ],
    "Yaf_Router": [
        "Yaf_Router is the standard framework router. Routing is the process of taking a URI endpoint (that part of the URI which comes after the base URI: see Yaf_Request_Abstract::setBaseUri()) and decomposing it into parameters to determine which module, controller, and action of that controller should receive the request. This values of the module, controller, action and other parameters are packaged into a Yaf_Request_Abstract object which is then processed by Yaf_Dispatcher. Routing occurs only once: when the request is initially received and before the first controller is dispatched. Yaf_Router is designed to allow for mod_rewrite-like functionality using pure PHP structures. It is very loosely based on Ruby on Rails routing and does not require any prior knowledge of webserver URL rewriting. It is designed to work with a single Apache mod_rewrite rule (one of):",
        "new Yaf_Router ( )"
    ],
    "Yaf_View_Interface": [
        "Yaf provides a ability for developers to use custom view engine instead of built-in engine which is Yaf_View_Simple. There is a example to explain how to do this, please see Yaf_Dispatcher::setView()."
    ],
    "Yaf_View_Simple": [
        "Yaf_View_Simple is the built-in template engine in Yaf, it is a simple but fast template engine, and only support PHP script template.",
        "new Yaf_View_Simple ( string $template_dir , array $options = ? )"
    ],
    "yaml_emit": [
        "Returns the YAML representation of a value",
        "yaml_emit ( mixed $data , int $encoding = YAML_ANY_ENCODING , int $linebreak = YAML_ANY_BREAK , array $callbacks = null ) : string"
    ],
    "yaml_emit_file": [
        "Send the YAML representation of a value to a file",
        "yaml_emit_file ( string $filename , mixed $data , int $encoding = YAML_ANY_ENCODING , int $linebreak = YAML_ANY_BREAK , array $callbacks = null ) : bool"
    ],
    "yaml_parse": [
        "Parse a YAML stream",
        "yaml_parse ( string $input , int $pos = 0 , int &$ndocs = ? , array $callbacks = null ) : mixed"
    ],
    "yaml_parse_file": [
        "Parse a YAML stream from a file",
        "yaml_parse_file ( string $filename , int $pos = 0 , int &$ndocs = ? , array $callbacks = null ) : mixed"
    ],
    "yaml_parse_url": [
        "Parse a Yaml stream from a URL",
        "yaml_parse_url ( string $url , int $pos = 0 , int &$ndocs = ? , array $callbacks = null ) : mixed"
    ],
    "Yar_Client": [
        "Create a client",
        "new Yar_Client ( string $url , array $options = ? )"
    ],
    "Yar_Server": [
        "Register a server",
        "new Yar_Server ( Object $obj )"
    ],
    "Yar_Server_Exception": [
        "If service threw exceptions, A Yar_Server_Exception will be threw in client side."
    ],
    "yaz_addinfo": [
        "Returns additional error information",
        "yaz_addinfo ( resource $id ) : string"
    ],
    "yaz_ccl_conf": [
        "Configure CCL parser",
        "yaz_ccl_conf ( resource $id , array $config ) : void"
    ],
    "yaz_ccl_parse": [
        "Invoke CCL Parser",
        "yaz_ccl_parse ( resource $id , string $query , array &$result ) : bool"
    ],
    "yaz_close": [
        "Close YAZ connection",
        "yaz_close ( resource $id ) : bool"
    ],
    "yaz_connect": [
        "Prepares for a connection to a Z39.50 server",
        "yaz_connect ( string $zurl , mixed $options = ? ) : mixed"
    ],
    "yaz_database": [
        "Specifies the databases within a session",
        "yaz_database ( resource $id , string $databases ) : bool"
    ],
    "yaz_element": [
        "Specifies Element-Set Name for retrieval",
        "yaz_element ( resource $id , string $elementset ) : bool"
    ],
    "yaz_errno": [
        "Returns error number",
        "yaz_errno ( resource $id ) : int"
    ],
    "yaz_error": [
        "Returns error description",
        "yaz_error ( resource $id ) : string"
    ],
    "yaz_es": [
        "Prepares for an Extended Service Request",
        "yaz_es (  resource $id  ,  string $type  ,  array $args  ) : void"
    ],
    "yaz_es_result": [
        "Inspects Extended Services Result",
        "yaz_es_result ( resource $id ) : array"
    ],
    "yaz_get_option": [
        "Returns value of option for connection",
        "yaz_get_option ( resource $id , string $name ) : string"
    ],
    "yaz_hits": [
        "Returns number of hits for last search",
        "yaz_hits ( resource $id , array &$searchresult = ? ) : int"
    ],
    "yaz_itemorder": [
        "Prepares for Z39.50 Item Order with an ILL-Request package",
        "yaz_itemorder ( resource $id , array $args ) : void"
    ],
    "yaz_present": [
        "Prepares for retrieval (Z39.50 present)",
        "yaz_present ( resource $id ) : bool"
    ],
    "yaz_range": [
        "Specifies a range of records to retrieve",
        "yaz_range ( resource $id , int $start , int $number ) : void"
    ],
    "yaz_record": [
        "Returns a record",
        "yaz_record ( resource $id , int $pos , string $type ) : string"
    ],
    "yaz_scan": [
        "Prepares for a scan",
        "yaz_scan ( resource $id , string $type , string $startterm , array $flags = ? ) : void"
    ],
    "yaz_scan_result": [
        "Returns Scan Response result",
        "yaz_scan_result ( resource $id , array &$result = ? ) : array"
    ],
    "yaz_schema": [
        "Specifies schema for retrieval",
        "yaz_schema ( resource $id , string $schema ) : void"
    ],
    "yaz_search": [
        "Prepares for a search",
        "yaz_search ( resource $id , string $type , string $query ) : bool"
    ],
    "yaz_set_option": [
        "Sets one or more options for connection",
        "yaz_set_option ( resource $id , string $name , string $value ) : void",
        "yaz_set_option ( resource $id , array $options ) : void"
    ],
    "yaz_sort": [
        "Sets sorting criteria",
        "yaz_sort ( resource $id , string $criteria ) : void"
    ],
    "yaz_syntax": [
        "Specifies the preferred record syntax for retrieval",
        "yaz_syntax ( resource $id , string $syntax ) : void"
    ],
    "yaz_wait": [
        "Wait for Z39.50 requests to complete",
        "yaz_wait ( array &$options = ? ) : mixed"
    ],
    "zend_thread_id": [
        "Returns a unique identifier for the current thread",
        "zend_thread_id ( ) : int"
    ],
    "zend_version": [
        "Gets the version of the current Zend engine",
        "zend_version ( ) : string"
    ],
    "zip_close": [
        "Close a ZIP file archive",
        "zip_close ( resource $zip ) : void"
    ],
    "zip_entry_close": [
        "Close a directory entry",
        "zip_entry_close ( resource $zip_entry ) : bool"
    ],
    "zip_entry_compressedsize": [
        "Retrieve the compressed size of a directory entry",
        "zip_entry_compressedsize ( resource $zip_entry ) : int|false"
    ],
    "zip_entry_compressionmethod": [
        "Retrieve the compression method of a directory entry",
        "zip_entry_compressionmethod ( resource $zip_entry ) : string|false"
    ],
    "zip_entry_filesize": [
        "Retrieve the actual file size of a directory entry",
        "zip_entry_filesize ( resource $zip_entry ) : int|false"
    ],
    "zip_entry_name": [
        "Retrieve the name of a directory entry",
        "zip_entry_name ( resource $zip_entry ) : string|false"
    ],
    "zip_entry_open": [
        "Open a directory entry for reading",
        "zip_entry_open ( resource $zip_dp , resource $zip_entry , string $mode = \"rb\" ) : bool"
    ],
    "zip_entry_read": [
        "Read from an open directory entry",
        "zip_entry_read ( resource $zip_entry , int $len = 1024 ) : string|false"
    ],
    "zip_open": [
        "Open a ZIP file archive",
        "zip_open ( string $filename ) : resource|int|false"
    ],
    "zip_read": [
        "Read next entry in a ZIP file archive",
        "zip_read ( resource $zip ) : resource|false"
    ],
    "ZipArchive": [
        "A file archive, compressed with Zip."
    ],
    "zlib_decode": [
        "Uncompress any raw\/gzip\/zlib encoded data",
        "zlib_decode ( string $data , int $max_length = 0 ) : string|false"
    ],
    "zlib_encode": [
        "Compress data with the specified encoding",
        "zlib_encode ( string $data , int $encoding , int $level = -1 ) : string|false"
    ],
    "zlib_get_coding_type": [
        "Returns the coding type used for output compression",
        "zlib_get_coding_type ( ) : string|false"
    ],
    "ZMQContext": [
        "Construct a new ZMQContext object",
        "new ZMQContext ( int $io_threads = 1 , bool $is_persistent = true )"
    ],
    "ZMQDevice": [
        "Construct a new device",
        "new ZMQDevice ( ZMQSocket $frontend , ZMQSocket $backend , ZMQSocket $listener = ? )"
    ],
    "ZMQSocket": [
        "Construct a new ZMQSocket",
        "new ZMQSocket ( ZMQContext $context , int $type , string $persistent_id = null , callable $on_new_socket = null )"
    ],
    "Zookeeper": [
        "Represents ZooKeeper session.",
        "new Zookeeper ( string $host = '' , callable $watcher_cb = null , int $recv_timeout = 10000 )"
    ],
    "zookeeper_dispatch": [
        "Calls callbacks for pending operations",
        "zookeeper_dispatch ( ) : void"
    ],
    "ZookeeperAuthenticationException": [
        "The ZooKeeper authentication exception handling class."
    ],
    "ZookeeperConfig": [
        "The ZooKeeper Config handling class."
    ],
    "ZookeeperConnectionException": [
        "The ZooKeeper connection exception handling class."
    ],
    "ZookeeperException": [
        "The ZooKeeper exception handling class."
    ],
    "ZookeeperMarshallingException": [
        "The ZooKeeper exception (while marshalling or unmarshalling data) handling class."
    ],
    "ZookeeperNoNodeException": [
        "The ZooKeeper exception (when node does not exist) handling class."
    ],
    "ZookeeperOperationTimeoutException": [
        "The ZooKeeper operation timeout exception handling class."
    ],
    "ZookeeperSessionException": [
        "The ZooKeeper session exception handling class."
    ]
}