<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env zsh

# Mark has to be a pdf it seems.
MARK="${TM_BUNDLE_SUPPORT}/resources/Warning.pdf"

original=$(cat /dev/stdin)
message=$(printf '%s\n' $original | ${TM_PHP:-php} -l 2&gt; /dev/null)
if [[ $? -eq 0 ]]; then
	# Remove potential gutter marks when no errors.
	$TM_MATE --clear-mark=$MARK
	exit
fi

# Tidy up message by removing some extra noise.
message=${message/ in Standard input code/}
message=${message/Parse error: syntax error, /}

# Move cursor to end of the previous line of error.
if [[ $message =~ 'on line ([0-9]+)' ]] &amp;&amp; line=$match[1]; then
	# Avoid gutter flush by issuing clear and set same time.
	$TM_MATE \
		--clear-mark=$MARK --set-mark=$MARK \
		--line=$line \
		$TM_FILEPATH

	previous=$(( $line - 1))
	# If cursor is already on the same line avoid moving cursor to the end.
	if [[ $previous != $TM_LINE_NUMBER ]]; then
		open "txmt://open?line=${previous}&amp;column=9999"
	fi
fi

# TODO Use html output
$TM_BUNDLE_SUPPORT/bin/tooltip "Syntax error, $(echo $message | head -n 2 | tail -n 1)"
</string>
	<key>input</key>
	<string>document</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>^v</string>
	<key>name</key>
	<string>Validate Syntax</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>toolTip</string>
	<key>scope</key>
	<string>source.php,text.html.php</string>
	<key>uuid</key>
	<string>9E6DDCD7-F043-443F-BC1D-F7051B2B50ED</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
