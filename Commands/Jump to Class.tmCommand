<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env php
&lt;?php

use Composer\Autoload\ClassLoader;

require_once getenv('TM_BUNDLE_SUPPORT').'/lib/bootstrap.php';

// Only supports projects with Composer autoloader.
$composer = getComposerClassLoader($_SERVER['TM_PROJECT_DIRECTORY']);
if (!$composer) {
	(new TextMate\Dialog($_SERVER['DIALOG']))-&gt;tooltip("No composer in project [{$_SERVER['TM_PROJECT_DIRECTORY']}]");
	exit;
}

function getComposerClassLoader(string $projectRoot): ?ClassLoader {
	$composer = null;
	foreach (["{$projectRoot}/vendor/composer", "{$projectRoot}/composer"] as $detectRoot) {
		if (!file_exists($detectRoot.'/ClassLoader.php')) {
			continue;
		}
		$composer = $detectRoot;
		break;
	}
	if (!$composer) {
		return null;
	}

	require_once $composer.'/ClassLoader.php';
	$loader = new ClassLoader(dirname($composer));

	$map = require $composer.'/autoload_namespaces.php';
	foreach ($map as $namespace =&gt; $path) {
		$loader-&gt;set($namespace, $path);
	}

	$map = require $composer.'/autoload_psr4.php';
	foreach ($map as $namespace =&gt; $path) {
		$loader-&gt;setPsr4($namespace, $path);
	}

	$classMap = require $composer.'/autoload_classmap.php';
	if ($classMap) {
		$loader-&gt;addClassMap($classMap);
	}

	return $loader;
}

function parseClassFromFqn(string $fqnClass): string {
	$parts = explode('\\', $fqnClass);
	return $parts ? end($parts) : $fqnClass;
}

function filterType(ast\Node $ast, int $type, $acc = []): iterable {
	if ($ast-&gt;kind == $type) {
		yield $ast;
	}
	foreach ($ast-&gt;children as $children) {
		if (!$children instanceof ast\Node) {
			continue;
		}
		yield from filterType($children, $type);
	}
}

function findByLineAndName(ast\Node $ast, int $line, string $name): ?ast\Node {
	$childName = $ast-&gt;children['name'] ?? null;
	if ($ast-&gt;lineno == $line) {
		if (is_string($childName) &amp;&amp; strpos($childName, $name) !== false) {
			return $ast;
		}
	}
	foreach ($ast-&gt;children as $children) {
		if (!$children instanceof ast\Node) {
			continue;
		}
		$found = findByLineAndName($children, $line, $name);
		if ($found) {
			return $found;
		}
	}
	return null;
}

function getRootNamespace($ast): string {
	$nsNode = iterator_to_array(filterType($ast, ast\AST_NAMESPACE));
	if (!$nsNode) {
		return '';
	}
	return $nsNode[0]-&gt;children['name'];
}

function findClasses($ast): array {
	$map = [];
	foreach (filterType($ast, ast\AST_USE_ELEM) as $elem) {
		$name = $elem-&gt;children['name'];
		$alias = $elem-&gt;children['alias'] ?? parseClassFromFqn($name);
		$map[$alias] = $name;
	}
	foreach (filterType($ast, ast\AST_GROUP_USE) as $elem) {
		foreach ($elem-&gt;children['uses']-&gt;children as $node) {
			$name = $node-&gt;children['name'];
			$alias = $node-&gt;children['alias'] ?? parseClassFromFqn($name);
			$map[$alias] = $elem-&gt;children['prefix'].'\\'.$name;
		}
	}
	return $map;
}

$line = $_SERVER['TM_LINE_NUMBER'];
$word = $_SERVER['TM_CURRENT_WORD'];

$ast = ast\parse_code(file_get_contents('php://stdin'), $version = 80);

// Current namespace of the file.
$namespace = getRootNamespace($ast);
// Fqn names for classes imported.
$classMap = findClasses($ast);
// Attempt to fetch full token instead of just current word.
$node = findByLineAndName($ast, $line, $word);

$getFqnClassName = function ($class) use ($namespace, $classMap): string {
	$parts = explode('\\', $class);
	if (isset($classMap[$parts[0]])) {
		return sprintf(
			'%s%s',
			$classMap[$parts[0]],
			isset($parts[1])
				? '\\'.implode('\\', array_slice($parts, 1))
				: '',
		);
	}
	return ($namespace ? $namespace.'\\' : '').$class;
};

$class = null;
if ($node) {
	$class = $node-&gt;flags === ast\flags\NAME_NOT_FQ
		? $getFqnClassName($node-&gt;children['name'])
		: $node-&gt;children['name'];
}
if (!$class) {
	$class = $getFqnClassName($word);
}

$filename = $composer-&gt;findFile($class);
if (!$filename) {
	(new TextMate\Dialog($_SERVER['DIALOG']))-&gt;tooltip("Unable to find $class");
	exit;
}

TextMate\Context::fromGlobals()-&gt;mate-&gt;open($filename);
</string>
	<key>input</key>
	<string>document</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>@D</string>
	<key>name</key>
	<string>Jump to Class</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>toolTip</string>
	<key>scope</key>
	<string>source.php</string>
	<key>uuid</key>
	<string>C36C7CD8-129B-4A87-8121-5B5AE5201558</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
